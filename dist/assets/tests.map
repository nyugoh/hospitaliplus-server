{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","hospitalrun/tests/acceptance/admin-test.js","hospitalrun/tests/acceptance/admin-test.lint-test.js","hospitalrun/tests/acceptance/appointments-test.js","hospitalrun/tests/acceptance/appointments-test.lint-test.js","hospitalrun/tests/acceptance/custom-forms-test.js","hospitalrun/tests/acceptance/custom-forms-test.lint-test.js","hospitalrun/tests/acceptance/imaging-test.js","hospitalrun/tests/acceptance/imaging-test.lint-test.js","hospitalrun/tests/acceptance/incident-test.js","hospitalrun/tests/acceptance/incident-test.lint-test.js","hospitalrun/tests/acceptance/inventory-test.js","hospitalrun/tests/acceptance/inventory-test.lint-test.js","hospitalrun/tests/acceptance/invoices-test.js","hospitalrun/tests/acceptance/invoices-test.lint-test.js","hospitalrun/tests/acceptance/labs-test.js","hospitalrun/tests/acceptance/labs-test.lint-test.js","hospitalrun/tests/acceptance/login-test.js","hospitalrun/tests/acceptance/login-test.lint-test.js","hospitalrun/tests/acceptance/medication-test.js","hospitalrun/tests/acceptance/medication-test.lint-test.js","hospitalrun/tests/acceptance/operative-test.js","hospitalrun/tests/acceptance/operative-test.lint-test.js","hospitalrun/tests/acceptance/outpatient-test.js","hospitalrun/tests/acceptance/outpatient-test.lint-test.js","hospitalrun/tests/acceptance/patient-notes-test.js","hospitalrun/tests/acceptance/patient-notes-test.lint-test.js","hospitalrun/tests/acceptance/patients-test.js","hospitalrun/tests/acceptance/patients-test.lint-test.js","hospitalrun/tests/acceptance/pricing-test.js","hospitalrun/tests/acceptance/pricing-test.lint-test.js","hospitalrun/tests/acceptance/procedure-test.js","hospitalrun/tests/acceptance/procedure-test.lint-test.js","hospitalrun/tests/acceptance/role-test.js","hospitalrun/tests/acceptance/role-test.lint-test.js","hospitalrun/tests/acceptance/users-test.js","hospitalrun/tests/acceptance/users-test.lint-test.js","hospitalrun/tests/acceptance/visit-test.js","hospitalrun/tests/acceptance/visit-test.lint-test.js","hospitalrun/tests/adapters/application.js","hospitalrun/tests/adapters/application.lint-test.js","hospitalrun/tests/adapters/user.js","hospitalrun/tests/adapters/user.lint-test.js","hospitalrun/tests/admin/address/controller.js","hospitalrun/tests/admin/address/controller.lint-test.js","hospitalrun/tests/admin/address/route.js","hospitalrun/tests/admin/address/route.lint-test.js","hospitalrun/tests/admin/custom-forms/edit/controller.js","hospitalrun/tests/admin/custom-forms/edit/controller.lint-test.js","hospitalrun/tests/admin/custom-forms/edit/route.js","hospitalrun/tests/admin/custom-forms/edit/route.lint-test.js","hospitalrun/tests/admin/custom-forms/field-edit/controller.js","hospitalrun/tests/admin/custom-forms/field-edit/controller.lint-test.js","hospitalrun/tests/admin/custom-forms/index/controller.js","hospitalrun/tests/admin/custom-forms/index/controller.lint-test.js","hospitalrun/tests/admin/custom-forms/index/route.js","hospitalrun/tests/admin/custom-forms/index/route.lint-test.js","hospitalrun/tests/admin/loaddb/controller.js","hospitalrun/tests/admin/loaddb/controller.lint-test.js","hospitalrun/tests/admin/loaddb/route.js","hospitalrun/tests/admin/loaddb/route.lint-test.js","hospitalrun/tests/admin/lookup/controller.js","hospitalrun/tests/admin/lookup/controller.lint-test.js","hospitalrun/tests/admin/lookup/edit/controller.js","hospitalrun/tests/admin/lookup/edit/controller.lint-test.js","hospitalrun/tests/admin/lookup/route.js","hospitalrun/tests/admin/lookup/route.lint-test.js","hospitalrun/tests/admin/print-header/controller.js","hospitalrun/tests/admin/print-header/controller.lint-test.js","hospitalrun/tests/admin/print-header/route.js","hospitalrun/tests/admin/print-header/route.lint-test.js","hospitalrun/tests/admin/query/controller.js","hospitalrun/tests/admin/query/controller.lint-test.js","hospitalrun/tests/admin/query/route.js","hospitalrun/tests/admin/query/route.lint-test.js","hospitalrun/tests/admin/roles/controller.js","hospitalrun/tests/admin/roles/controller.lint-test.js","hospitalrun/tests/admin/roles/route.js","hospitalrun/tests/admin/roles/route.lint-test.js","hospitalrun/tests/admin/route.js","hospitalrun/tests/admin/route.lint-test.js","hospitalrun/tests/admin/textreplace/controller.js","hospitalrun/tests/admin/textreplace/controller.lint-test.js","hospitalrun/tests/admin/textreplace/route.js","hospitalrun/tests/admin/textreplace/route.lint-test.js","hospitalrun/tests/admin/visit-forms/controller.js","hospitalrun/tests/admin/visit-forms/controller.lint-test.js","hospitalrun/tests/admin/visit-forms/route.js","hospitalrun/tests/admin/visit-forms/route.lint-test.js","hospitalrun/tests/admin/workflow/controller.js","hospitalrun/tests/admin/workflow/controller.lint-test.js","hospitalrun/tests/admin/workflow/route.js","hospitalrun/tests/admin/workflow/route.lint-test.js","hospitalrun/tests/allergy/edit/controller.js","hospitalrun/tests/allergy/edit/controller.lint-test.js","hospitalrun/tests/app.js","hospitalrun/tests/app.lint-test.js","hospitalrun/tests/appointments/calendar/controller.js","hospitalrun/tests/appointments/calendar/controller.lint-test.js","hospitalrun/tests/appointments/calendar/route.js","hospitalrun/tests/appointments/calendar/route.lint-test.js","hospitalrun/tests/appointments/delete/controller.js","hospitalrun/tests/appointments/delete/controller.lint-test.js","hospitalrun/tests/appointments/edit/controller.js","hospitalrun/tests/appointments/edit/controller.lint-test.js","hospitalrun/tests/appointments/edit/route.js","hospitalrun/tests/appointments/edit/route.lint-test.js","hospitalrun/tests/appointments/index/controller.js","hospitalrun/tests/appointments/index/controller.lint-test.js","hospitalrun/tests/appointments/index/route.js","hospitalrun/tests/appointments/index/route.lint-test.js","hospitalrun/tests/appointments/route.js","hospitalrun/tests/appointments/route.lint-test.js","hospitalrun/tests/appointments/search/controller.js","hospitalrun/tests/appointments/search/controller.lint-test.js","hospitalrun/tests/appointments/search/route.js","hospitalrun/tests/appointments/search/route.lint-test.js","hospitalrun/tests/appointments/theater/controller.js","hospitalrun/tests/appointments/theater/controller.lint-test.js","hospitalrun/tests/appointments/theater/route.js","hospitalrun/tests/appointments/theater/route.lint-test.js","hospitalrun/tests/appointments/today/controller.js","hospitalrun/tests/appointments/today/controller.lint-test.js","hospitalrun/tests/appointments/today/route.js","hospitalrun/tests/appointments/today/route.lint-test.js","hospitalrun/tests/authenticators/custom.js","hospitalrun/tests/authenticators/custom.lint-test.js","hospitalrun/tests/components/action-checkbox.js","hospitalrun/tests/components/action-checkbox.lint-test.js","hospitalrun/tests/components/array-display.js","hospitalrun/tests/components/array-display.lint-test.js","hospitalrun/tests/components/calendar-control.js","hospitalrun/tests/components/calendar-control.lint-test.js","hospitalrun/tests/components/charge-quantity.js","hospitalrun/tests/components/charge-quantity.lint-test.js","hospitalrun/tests/components/charges-by-type-tab.js","hospitalrun/tests/components/charges-by-type-tab.lint-test.js","hospitalrun/tests/components/checkbox-or-typeahead.js","hospitalrun/tests/components/checkbox-or-typeahead.lint-test.js","hospitalrun/tests/components/custom-form-manager.js","hospitalrun/tests/components/custom-form-manager.lint-test.js","hospitalrun/tests/components/custom-form.js","hospitalrun/tests/components/custom-form.lint-test.js","hospitalrun/tests/components/date-filter.js","hospitalrun/tests/components/date-filter.lint-test.js","hospitalrun/tests/components/date-input.js","hospitalrun/tests/components/date-input.lint-test.js","hospitalrun/tests/components/date-picker.js","hospitalrun/tests/components/date-picker.lint-test.js","hospitalrun/tests/components/date-time-picker.js","hospitalrun/tests/components/date-time-picker.lint-test.js","hospitalrun/tests/components/edit-panel.js","hospitalrun/tests/components/edit-panel.lint-test.js","hospitalrun/tests/components/expand-text.js","hospitalrun/tests/components/expand-text.lint-test.js","hospitalrun/tests/components/ext-radio.js","hospitalrun/tests/components/ext-radio.lint-test.js","hospitalrun/tests/components/file-upload.js","hospitalrun/tests/components/file-upload.lint-test.js","hospitalrun/tests/components/icd10-pcs-typeahead.js","hospitalrun/tests/components/icd10-pcs-typeahead.lint-test.js","hospitalrun/tests/components/icd10-typeahead.js","hospitalrun/tests/components/icd10-typeahead.lint-test.js","hospitalrun/tests/components/image-upload.js","hospitalrun/tests/components/image-upload.lint-test.js","hospitalrun/tests/components/inventory-location-picker.js","hospitalrun/tests/components/inventory-location-picker.lint-test.js","hospitalrun/tests/components/inventory-typeahead.js","hospitalrun/tests/components/inventory-typeahead.lint-test.js","hospitalrun/tests/components/item-listing.js","hospitalrun/tests/components/item-listing.lint-test.js","hospitalrun/tests/components/language-select.js","hospitalrun/tests/components/language-select.lint-test.js","hospitalrun/tests/components/loading-message.js","hospitalrun/tests/components/loading-message.lint-test.js","hospitalrun/tests/components/location-select.js","hospitalrun/tests/components/location-select.lint-test.js","hospitalrun/tests/components/medication-allergy.js","hospitalrun/tests/components/medication-allergy.lint-test.js","hospitalrun/tests/components/modal-dialog.js","hospitalrun/tests/components/modal-dialog.lint-test.js","hospitalrun/tests/components/nav-menu.js","hospitalrun/tests/components/nav-menu.lint-test.js","hospitalrun/tests/components/nav-paging.js","hospitalrun/tests/components/nav-paging.lint-test.js","hospitalrun/tests/components/number-input.js","hospitalrun/tests/components/number-input.lint-test.js","hospitalrun/tests/components/operative-procedures.js","hospitalrun/tests/components/operative-procedures.lint-test.js","hospitalrun/tests/components/patient-diagnosis.js","hospitalrun/tests/components/patient-diagnosis.lint-test.js","hospitalrun/tests/components/patient-orders.js","hospitalrun/tests/components/patient-orders.lint-test.js","hospitalrun/tests/components/patient-summary.js","hospitalrun/tests/components/patient-summary.lint-test.js","hospitalrun/tests/components/patient-typeahead.js","hospitalrun/tests/components/patient-typeahead.lint-test.js","hospitalrun/tests/components/photo-display.js","hospitalrun/tests/components/photo-display.lint-test.js","hospitalrun/tests/components/price-list.js","hospitalrun/tests/components/price-list.lint-test.js","hospitalrun/tests/components/pricing-typeahead.js","hospitalrun/tests/components/pricing-typeahead.lint-test.js","hospitalrun/tests/components/print-this.js","hospitalrun/tests/components/print-this.lint-test.js","hospitalrun/tests/components/quantity-calc.js","hospitalrun/tests/components/quantity-calc.lint-test.js","hospitalrun/tests/components/quantity-conv.js","hospitalrun/tests/components/quantity-conv.lint-test.js","hospitalrun/tests/components/role-select.js","hospitalrun/tests/components/role-select.lint-test.js","hospitalrun/tests/components/search-listing.js","hospitalrun/tests/components/search-listing.lint-test.js","hospitalrun/tests/components/select-or-typeahead.js","hospitalrun/tests/components/select-or-typeahead.lint-test.js","hospitalrun/tests/components/smart-prescription.js","hospitalrun/tests/components/smart-prescription.lint-test.js","hospitalrun/tests/components/sortable-column.js","hospitalrun/tests/components/sortable-column.lint-test.js","hospitalrun/tests/components/take-photo.js","hospitalrun/tests/components/take-photo.lint-test.js","hospitalrun/tests/components/text-search.js","hospitalrun/tests/components/text-search.lint-test.js","hospitalrun/tests/components/type-ahead.js","hospitalrun/tests/components/type-ahead.lint-test.js","hospitalrun/tests/components/typeahead-filter.js","hospitalrun/tests/components/typeahead-filter.lint-test.js","hospitalrun/tests/components/upcoming-appointments.js","hospitalrun/tests/components/upcoming-appointments.lint-test.js","hospitalrun/tests/controllers/abstract-delete-controller.js","hospitalrun/tests/controllers/abstract-delete-controller.lint-test.js","hospitalrun/tests/controllers/abstract-edit-controller.js","hospitalrun/tests/controllers/abstract-edit-controller.lint-test.js","hospitalrun/tests/controllers/abstract-paged-controller.js","hospitalrun/tests/controllers/abstract-paged-controller.lint-test.js","hospitalrun/tests/controllers/abstract-report-controller.js","hospitalrun/tests/controllers/abstract-report-controller.lint-test.js","hospitalrun/tests/controllers/application.js","hospitalrun/tests/controllers/application.lint-test.js","hospitalrun/tests/controllers/index.js","hospitalrun/tests/controllers/index.lint-test.js","hospitalrun/tests/controllers/login.js","hospitalrun/tests/controllers/login.lint-test.js","hospitalrun/tests/controllers/navigation.js","hospitalrun/tests/controllers/navigation.lint-test.js","hospitalrun/tests/custom-form-add/controller.js","hospitalrun/tests/custom-form-add/controller.lint-test.js","hospitalrun/tests/diagnosis/edit/controller.js","hospitalrun/tests/diagnosis/edit/controller.lint-test.js","hospitalrun/tests/dialog/controller.js","hospitalrun/tests/dialog/controller.lint-test.js","hospitalrun/tests/electron.js","hospitalrun/tests/electron.lint-test.js","hospitalrun/tests/ember-electron/main.js","hospitalrun/tests/ember-electron/main.lint-test.js","hospitalrun/tests/ember-sinon-qunit/test.js","hospitalrun/tests/finishgauth/route.js","hospitalrun/tests/finishgauth/route.lint-test.js","hospitalrun/tests/helpers/authenticate-user.js","hospitalrun/tests/helpers/authenticate-user.lint-test.js","hospitalrun/tests/helpers/date-format.js","hospitalrun/tests/helpers/date-format.lint-test.js","hospitalrun/tests/helpers/destroy-app.js","hospitalrun/tests/helpers/destroy-app.lint-test.js","hospitalrun/tests/helpers/ember-i18n/test-helpers.js","hospitalrun/tests/helpers/ember-keyboard/register-test-helpers.js","hospitalrun/tests/helpers/ember-simple-auth.js","hospitalrun/tests/helpers/html-line-break.js","hospitalrun/tests/helpers/html-line-break.lint-test.js","hospitalrun/tests/helpers/is-equal-array.js","hospitalrun/tests/helpers/is-equal-array.lint-test.js","hospitalrun/tests/helpers/is-equal.js","hospitalrun/tests/helpers/is-equal.lint-test.js","hospitalrun/tests/helpers/is-not.js","hospitalrun/tests/helpers/is-not.lint-test.js","hospitalrun/tests/helpers/module-for-acceptance.js","hospitalrun/tests/helpers/module-for-acceptance.lint-test.js","hospitalrun/tests/helpers/number-format.js","hospitalrun/tests/helpers/number-format.lint-test.js","hospitalrun/tests/helpers/read-path.js","hospitalrun/tests/helpers/read-path.lint-test.js","hospitalrun/tests/helpers/resolver.js","hospitalrun/tests/helpers/resolver.lint-test.js","hospitalrun/tests/helpers/run-with-pouch-dump.js","hospitalrun/tests/helpers/run-with-pouch-dump.lint-test.js","hospitalrun/tests/helpers/select-date.js","hospitalrun/tests/helpers/select-date.lint-test.js","hospitalrun/tests/helpers/select.js","hospitalrun/tests/helpers/select.lint-test.js","hospitalrun/tests/helpers/start-app.js","hospitalrun/tests/helpers/start-app.lint-test.js","hospitalrun/tests/helpers/typeahead-fillin.js","hospitalrun/tests/helpers/typeahead-fillin.lint-test.js","hospitalrun/tests/helpers/validate-properties.js","hospitalrun/tests/helpers/wait-to-appear.js","hospitalrun/tests/helpers/wait-to-appear.lint-test.js","hospitalrun/tests/hospitalrun/admin/address/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/custom-forms/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/custom-forms/field-edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/custom-forms/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/loaddb/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/lookup/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/lookup/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/print-header/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/query/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/roles/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/textreplace/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/visit-forms/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/workflow/template.template-lint-test.js","hospitalrun/tests/hospitalrun/allergy/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/calendar/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/theater/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/today/template.template-lint-test.js","hospitalrun/tests/hospitalrun/custom-form-add/template.template-lint-test.js","hospitalrun/tests/hospitalrun/diagnosis/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/dialog/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/charge/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/completed/completed-list-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/completed/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/index/imaging-edit-button/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/index/requested-list-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inc-category/add-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inc-category/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inc-category/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inc-category/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/incident/attachment/template.template-lint-test.js","hospitalrun/tests/hospitalrun/incident/completed/template.template-lint-test.js","hospitalrun/tests/hospitalrun/incident/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/incident/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/incident/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/incident/note/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/incident/note/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/incident/reports/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/adjust/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/barcode/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/batch/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/listing/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/purchase/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/purchase/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/quick-add/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/rank-select/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/reports/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/request/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/transfer/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/add-line-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/payment/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/review/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/charge/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/completed/labs-completed-list-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/completed/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/index/labs-edit-button/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/index/labs-list-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/completed/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/return/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/add-contact/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/admitted/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/imaging/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/labs/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/medication/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/notes/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/operation-report/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/operative-plan/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/outpatient/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/photo/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/quick-add/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/reports/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/socialwork/expense/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/socialwork/family-info/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/imaging/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/lab/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/override/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/procedure/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/profiles/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/profiles/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/ward/template.template-lint-test.js","hospitalrun/tests/hospitalrun/print/invoice/template.template-lint-test.js","hospitalrun/tests/hospitalrun/procedures/charge/template.template-lint-test.js","hospitalrun/tests/hospitalrun/procedures/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/procedures/medication/template.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/application.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/charges-by-type.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/array-display.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/calendar-control.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/charge-quantity.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/charges-by-type-tab.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/checkbox-or-typeahead.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/cross-icon-svg.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/custom-form-manager.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/custom-form.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/date-filter.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/date-time-picker.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/edit-panel.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/expand-text.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/ext-radio.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/inventory-location-picker.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/item-listing.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/language-select.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/location-select.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/logo-dark-svg.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/logo-hr-main.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/logo-hr.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/logo-svg.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/medication-allergy.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/menu-svg.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/modal-dialog.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/nav-menu.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/nav-paging.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/operative-procedures.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/patient-diagnosis.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/patient-orders.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/patient-summary.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/photo-display.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/price-list.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/quantity-calc.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/quantity-conv.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/render-typeahead.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/role-select.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/search-listing.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/select-or-typeahead.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/sortable-column.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/static-text.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/take-photo.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/typeahead-filter.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/upcoming-appointments.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/empty.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/error.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/index.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/inv-purchase.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/inventory-basic.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/item-charges.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/loading.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/login.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/navigation.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/report-rows.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/section.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/sidebar_nav/header.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/sidebar_nav/message.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/sidebar_nav/primary_nav.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/sidebar_nav/search.template-lint-test.js","hospitalrun/tests/hospitalrun/users/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/users/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/users/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/charge/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/procedures/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/reports/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/vitals/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/vitals/edit/template.template-lint-test.js","hospitalrun/tests/imaging/charge/controller.js","hospitalrun/tests/imaging/charge/controller.lint-test.js","hospitalrun/tests/imaging/completed/completed-list-item/component.js","hospitalrun/tests/imaging/completed/completed-list-item/component.lint-test.js","hospitalrun/tests/imaging/completed/controller.js","hospitalrun/tests/imaging/completed/controller.lint-test.js","hospitalrun/tests/imaging/completed/route.js","hospitalrun/tests/imaging/completed/route.lint-test.js","hospitalrun/tests/imaging/delete/controller.js","hospitalrun/tests/imaging/delete/controller.lint-test.js","hospitalrun/tests/imaging/edit/controller.js","hospitalrun/tests/imaging/edit/controller.lint-test.js","hospitalrun/tests/imaging/edit/route.js","hospitalrun/tests/imaging/edit/route.lint-test.js","hospitalrun/tests/imaging/index/controller.js","hospitalrun/tests/imaging/index/controller.lint-test.js","hospitalrun/tests/imaging/index/imaging-edit-button/component.js","hospitalrun/tests/imaging/index/imaging-edit-button/component.lint-test.js","hospitalrun/tests/imaging/index/requested-list-item/component.js","hospitalrun/tests/imaging/index/requested-list-item/component.lint-test.js","hospitalrun/tests/imaging/index/route.js","hospitalrun/tests/imaging/index/route.lint-test.js","hospitalrun/tests/imaging/route.js","hospitalrun/tests/imaging/route.lint-test.js","hospitalrun/tests/inc-category/add-item/controller.js","hospitalrun/tests/inc-category/add-item/controller.lint-test.js","hospitalrun/tests/inc-category/delete/controller.js","hospitalrun/tests/inc-category/delete/controller.lint-test.js","hospitalrun/tests/inc-category/edit/controller.js","hospitalrun/tests/inc-category/edit/controller.lint-test.js","hospitalrun/tests/inc-category/edit/route.js","hospitalrun/tests/inc-category/edit/route.lint-test.js","hospitalrun/tests/inc-category/index/controller.js","hospitalrun/tests/inc-category/index/controller.lint-test.js","hospitalrun/tests/inc-category/index/route.js","hospitalrun/tests/inc-category/index/route.lint-test.js","hospitalrun/tests/inc-category/route.js","hospitalrun/tests/inc-category/route.lint-test.js","hospitalrun/tests/incident/attachment/controller.js","hospitalrun/tests/incident/attachment/controller.lint-test.js","hospitalrun/tests/incident/completed/controller.js","hospitalrun/tests/incident/completed/controller.lint-test.js","hospitalrun/tests/incident/completed/route.js","hospitalrun/tests/incident/completed/route.lint-test.js","hospitalrun/tests/incident/delete/controller.js","hospitalrun/tests/incident/delete/controller.lint-test.js","hospitalrun/tests/incident/edit/controller.js","hospitalrun/tests/incident/edit/controller.lint-test.js","hospitalrun/tests/incident/edit/route.js","hospitalrun/tests/incident/edit/route.lint-test.js","hospitalrun/tests/incident/index/controller.js","hospitalrun/tests/incident/index/controller.lint-test.js","hospitalrun/tests/incident/index/route.js","hospitalrun/tests/incident/index/route.lint-test.js","hospitalrun/tests/incident/note/delete/controller.js","hospitalrun/tests/incident/note/delete/controller.lint-test.js","hospitalrun/tests/incident/note/edit/controller.js","hospitalrun/tests/incident/note/edit/controller.lint-test.js","hospitalrun/tests/incident/reports/controller.js","hospitalrun/tests/incident/reports/controller.lint-test.js","hospitalrun/tests/incident/reports/route.js","hospitalrun/tests/incident/reports/route.lint-test.js","hospitalrun/tests/incident/route.js","hospitalrun/tests/incident/route.lint-test.js","hospitalrun/tests/initializers/i18n.js","hospitalrun/tests/initializers/i18n.lint-test.js","hospitalrun/tests/integration/components/calendar-control-test.js","hospitalrun/tests/integration/components/calendar-control-test.lint-test.js","hospitalrun/tests/integration/components/inventory/rank-select-test.js","hospitalrun/tests/integration/components/inventory/rank-select-test.lint-test.js","hospitalrun/tests/integration/components/language-select-test.js","hospitalrun/tests/integration/components/language-select-test.lint-test.js","hospitalrun/tests/integration/components/medication-allergy-test.js","hospitalrun/tests/integration/components/medication-allergy-test.lint-test.js","hospitalrun/tests/integration/components/number-input-test.js","hospitalrun/tests/integration/components/number-input-test.lint-test.js","hospitalrun/tests/inventory/adjust/controller.js","hospitalrun/tests/inventory/adjust/controller.lint-test.js","hospitalrun/tests/inventory/barcode/controller.js","hospitalrun/tests/inventory/barcode/controller.lint-test.js","hospitalrun/tests/inventory/barcode/route.js","hospitalrun/tests/inventory/barcode/route.lint-test.js","hospitalrun/tests/inventory/batch/controller.js","hospitalrun/tests/inventory/batch/controller.lint-test.js","hospitalrun/tests/inventory/batch/route.js","hospitalrun/tests/inventory/batch/route.lint-test.js","hospitalrun/tests/inventory/delete/controller.js","hospitalrun/tests/inventory/delete/controller.lint-test.js","hospitalrun/tests/inventory/edit/controller.js","hospitalrun/tests/inventory/edit/controller.lint-test.js","hospitalrun/tests/inventory/edit/route.js","hospitalrun/tests/inventory/edit/route.lint-test.js","hospitalrun/tests/inventory/index/controller.js","hospitalrun/tests/inventory/index/controller.lint-test.js","hospitalrun/tests/inventory/index/route.js","hospitalrun/tests/inventory/index/route.lint-test.js","hospitalrun/tests/inventory/listing/controller.js","hospitalrun/tests/inventory/listing/controller.lint-test.js","hospitalrun/tests/inventory/listing/route.js","hospitalrun/tests/inventory/listing/route.lint-test.js","hospitalrun/tests/inventory/purchase/edit/controller.js","hospitalrun/tests/inventory/purchase/edit/controller.lint-test.js","hospitalrun/tests/inventory/quick-add/controller.js","hospitalrun/tests/inventory/quick-add/controller.lint-test.js","hospitalrun/tests/inventory/rank-select/component.js","hospitalrun/tests/inventory/rank-select/component.lint-test.js","hospitalrun/tests/inventory/reports/controller.js","hospitalrun/tests/inventory/reports/controller.lint-test.js","hospitalrun/tests/inventory/reports/route.js","hospitalrun/tests/inventory/reports/route.lint-test.js","hospitalrun/tests/inventory/request/controller.js","hospitalrun/tests/inventory/request/controller.lint-test.js","hospitalrun/tests/inventory/request/route.js","hospitalrun/tests/inventory/request/route.lint-test.js","hospitalrun/tests/inventory/route.js","hospitalrun/tests/inventory/route.lint-test.js","hospitalrun/tests/inventory/search/controller.js","hospitalrun/tests/inventory/search/controller.lint-test.js","hospitalrun/tests/inventory/search/route.js","hospitalrun/tests/inventory/search/route.lint-test.js","hospitalrun/tests/inventory/transfer/controller.js","hospitalrun/tests/inventory/transfer/controller.lint-test.js","hospitalrun/tests/invoices/add-line-item/controller.js","hospitalrun/tests/invoices/add-line-item/controller.lint-test.js","hospitalrun/tests/invoices/delete/controller.js","hospitalrun/tests/invoices/delete/controller.lint-test.js","hospitalrun/tests/invoices/edit/controller.js","hospitalrun/tests/invoices/edit/controller.lint-test.js","hospitalrun/tests/invoices/edit/route.js","hospitalrun/tests/invoices/edit/route.lint-test.js","hospitalrun/tests/invoices/index/controller.js","hospitalrun/tests/invoices/index/controller.lint-test.js","hospitalrun/tests/invoices/index/route.js","hospitalrun/tests/invoices/index/route.lint-test.js","hospitalrun/tests/invoices/payment/controller.js","hospitalrun/tests/invoices/payment/controller.lint-test.js","hospitalrun/tests/invoices/route.js","hospitalrun/tests/invoices/route.lint-test.js","hospitalrun/tests/invoices/search/route.js","hospitalrun/tests/invoices/search/route.lint-test.js","hospitalrun/tests/labs/charge/controller.js","hospitalrun/tests/labs/charge/controller.lint-test.js","hospitalrun/tests/labs/completed/controller.js","hospitalrun/tests/labs/completed/controller.lint-test.js","hospitalrun/tests/labs/completed/labs-completed-list-item/component.js","hospitalrun/tests/labs/completed/labs-completed-list-item/component.lint-test.js","hospitalrun/tests/labs/completed/route.js","hospitalrun/tests/labs/completed/route.lint-test.js","hospitalrun/tests/labs/delete/controller.js","hospitalrun/tests/labs/delete/controller.lint-test.js","hospitalrun/tests/labs/edit/controller.js","hospitalrun/tests/labs/edit/controller.lint-test.js","hospitalrun/tests/labs/edit/route.js","hospitalrun/tests/labs/edit/route.lint-test.js","hospitalrun/tests/labs/index/controller.js","hospitalrun/tests/labs/index/controller.lint-test.js","hospitalrun/tests/labs/index/labs-edit-button/component.js","hospitalrun/tests/labs/index/labs-edit-button/component.lint-test.js","hospitalrun/tests/labs/index/labs-list-item/component.js","hospitalrun/tests/labs/index/labs-list-item/component.lint-test.js","hospitalrun/tests/labs/index/route.js","hospitalrun/tests/labs/index/route.lint-test.js","hospitalrun/tests/labs/route.js","hospitalrun/tests/labs/route.lint-test.js","hospitalrun/tests/locales/de/translations.js","hospitalrun/tests/locales/de/translations.lint-test.js","hospitalrun/tests/locales/en/config.js","hospitalrun/tests/locales/en/config.lint-test.js","hospitalrun/tests/locales/en/translations.js","hospitalrun/tests/locales/en/translations.lint-test.js","hospitalrun/tests/locales/es-co/translations.js","hospitalrun/tests/locales/es-co/translations.lint-test.js","hospitalrun/tests/locales/es/translations.js","hospitalrun/tests/locales/es/translations.lint-test.js","hospitalrun/tests/locales/fr/translations.js","hospitalrun/tests/locales/fr/translations.lint-test.js","hospitalrun/tests/locales/pt-br/translations.js","hospitalrun/tests/locales/pt-br/translations.lint-test.js","hospitalrun/tests/locales/ru/translations.js","hospitalrun/tests/locales/ru/translations.lint-test.js","hospitalrun/tests/locales/tr/translations.js","hospitalrun/tests/locales/tr/translations.lint-test.js","hospitalrun/tests/locales/ur/translations.js","hospitalrun/tests/locales/ur/translations.lint-test.js","hospitalrun/tests/medication/completed/controller.js","hospitalrun/tests/medication/completed/controller.lint-test.js","hospitalrun/tests/medication/completed/route.js","hospitalrun/tests/medication/completed/route.lint-test.js","hospitalrun/tests/medication/delete/controller.js","hospitalrun/tests/medication/delete/controller.lint-test.js","hospitalrun/tests/medication/edit/controller.js","hospitalrun/tests/medication/edit/controller.lint-test.js","hospitalrun/tests/medication/edit/route.js","hospitalrun/tests/medication/edit/route.lint-test.js","hospitalrun/tests/medication/index/controller.js","hospitalrun/tests/medication/index/controller.lint-test.js","hospitalrun/tests/medication/index/route.js","hospitalrun/tests/medication/index/route.lint-test.js","hospitalrun/tests/medication/return/controller.js","hospitalrun/tests/medication/return/controller.lint-test.js","hospitalrun/tests/medication/return/route.js","hospitalrun/tests/medication/return/route.lint-test.js","hospitalrun/tests/medication/route.js","hospitalrun/tests/medication/route.lint-test.js","hospitalrun/tests/medication/search/route.js","hospitalrun/tests/medication/search/route.lint-test.js","hospitalrun/tests/mixins/add-new-patient.js","hospitalrun/tests/mixins/add-new-patient.lint-test.js","hospitalrun/tests/mixins/add-to-patient-route.js","hospitalrun/tests/mixins/add-to-patient-route.lint-test.js","hospitalrun/tests/mixins/allergy-actions.js","hospitalrun/tests/mixins/allergy-actions.lint-test.js","hospitalrun/tests/mixins/appointment-statuses.js","hospitalrun/tests/mixins/appointment-statuses.lint-test.js","hospitalrun/tests/mixins/billing-categories.js","hospitalrun/tests/mixins/billing-categories.lint-test.js","hospitalrun/tests/mixins/blood-types.js","hospitalrun/tests/mixins/blood-types.lint-test.js","hospitalrun/tests/mixins/can-edit-requested.js","hospitalrun/tests/mixins/can-edit-requested.lint-test.js","hospitalrun/tests/mixins/charge-actions.js","hospitalrun/tests/mixins/charge-actions.lint-test.js","hospitalrun/tests/mixins/charge-route.js","hospitalrun/tests/mixins/charge-route.lint-test.js","hospitalrun/tests/mixins/check-for-errors.js","hospitalrun/tests/mixins/check-for-errors.lint-test.js","hospitalrun/tests/mixins/custom-field-types.js","hospitalrun/tests/mixins/custom-field-types.lint-test.js","hospitalrun/tests/mixins/date-format.js","hospitalrun/tests/mixins/date-format.lint-test.js","hospitalrun/tests/mixins/diagnosis-actions.js","hospitalrun/tests/mixins/diagnosis-actions.lint-test.js","hospitalrun/tests/mixins/dob-days.js","hospitalrun/tests/mixins/dob-days.lint-test.js","hospitalrun/tests/mixins/edit-panel-props.js","hospitalrun/tests/mixins/edit-panel-props.lint-test.js","hospitalrun/tests/mixins/filter-list.js","hospitalrun/tests/mixins/filter-list.lint-test.js","hospitalrun/tests/mixins/friendly-id.js","hospitalrun/tests/mixins/friendly-id.lint-test.js","hospitalrun/tests/mixins/fulfill-request.js","hospitalrun/tests/mixins/fulfill-request.lint-test.js","hospitalrun/tests/mixins/hospitalrun-version.js","hospitalrun/tests/mixins/hospitalrun-version.lint-test.js","hospitalrun/tests/mixins/incident-statuses.js","hospitalrun/tests/mixins/incident-statuses.lint-test.js","hospitalrun/tests/mixins/inventory-adjustment-types.js","hospitalrun/tests/mixins/inventory-adjustment-types.lint-test.js","hospitalrun/tests/mixins/inventory-id.js","hospitalrun/tests/mixins/inventory-id.lint-test.js","hospitalrun/tests/mixins/inventory-locations.js","hospitalrun/tests/mixins/inventory-locations.lint-test.js","hospitalrun/tests/mixins/inventory-type-list.js","hospitalrun/tests/mixins/inventory-type-list.lint-test.js","hospitalrun/tests/mixins/is-update-disabled.js","hospitalrun/tests/mixins/is-update-disabled.lint-test.js","hospitalrun/tests/mixins/location-name.js","hospitalrun/tests/mixins/location-name.lint-test.js","hospitalrun/tests/mixins/map-oauth-params.js","hospitalrun/tests/mixins/map-oauth-params.lint-test.js","hospitalrun/tests/mixins/medication-details.js","hospitalrun/tests/mixins/medication-details.lint-test.js","hospitalrun/tests/mixins/modal-helper.js","hospitalrun/tests/mixins/modal-helper.lint-test.js","hospitalrun/tests/mixins/navigation.js","hospitalrun/tests/mixins/navigation.lint-test.js","hospitalrun/tests/mixins/number-format.js","hospitalrun/tests/mixins/number-format.lint-test.js","hospitalrun/tests/mixins/oauth-headers.js","hospitalrun/tests/mixins/oauth-headers.lint-test.js","hospitalrun/tests/mixins/operative-plan-statuses.js","hospitalrun/tests/mixins/operative-plan-statuses.lint-test.js","hospitalrun/tests/mixins/pagination-props.js","hospitalrun/tests/mixins/pagination-props.lint-test.js","hospitalrun/tests/mixins/paging-actions.js","hospitalrun/tests/mixins/paging-actions.lint-test.js","hospitalrun/tests/mixins/patient-appointments.js","hospitalrun/tests/mixins/patient-appointments.lint-test.js","hospitalrun/tests/mixins/patient-diagnosis.js","hospitalrun/tests/mixins/patient-diagnosis.lint-test.js","hospitalrun/tests/mixins/patient-id.js","hospitalrun/tests/mixins/patient-id.lint-test.js","hospitalrun/tests/mixins/patient-invoices.js","hospitalrun/tests/mixins/patient-invoices.lint-test.js","hospitalrun/tests/mixins/patient-list-route.js","hospitalrun/tests/mixins/patient-list-route.lint-test.js","hospitalrun/tests/mixins/patient-name.js","hospitalrun/tests/mixins/patient-name.lint-test.js","hospitalrun/tests/mixins/patient-notes.js","hospitalrun/tests/mixins/patient-notes.lint-test.js","hospitalrun/tests/mixins/patient-submodule.js","hospitalrun/tests/mixins/patient-submodule.lint-test.js","hospitalrun/tests/mixins/patient-visits.js","hospitalrun/tests/mixins/patient-visits.lint-test.js","hospitalrun/tests/mixins/payment-profiles.js","hospitalrun/tests/mixins/payment-profiles.lint-test.js","hospitalrun/tests/mixins/pikaday-component.js","hospitalrun/tests/mixins/pikaday-component.lint-test.js","hospitalrun/tests/mixins/pouch-find-indexes.js","hospitalrun/tests/mixins/pouch-find-indexes.lint-test.js","hospitalrun/tests/mixins/pouchdb.js","hospitalrun/tests/mixins/pouchdb.lint-test.js","hospitalrun/tests/mixins/progress-dialog.js","hospitalrun/tests/mixins/progress-dialog.lint-test.js","hospitalrun/tests/mixins/publish-statuses.js","hospitalrun/tests/mixins/publish-statuses.lint-test.js","hospitalrun/tests/mixins/result-validation.js","hospitalrun/tests/mixins/result-validation.lint-test.js","hospitalrun/tests/mixins/return-to.js","hospitalrun/tests/mixins/return-to.lint-test.js","hospitalrun/tests/mixins/setup-user-role.js","hospitalrun/tests/mixins/setup-user-role.lint-test.js","hospitalrun/tests/mixins/typeahead.js","hospitalrun/tests/mixins/typeahead.lint-test.js","hospitalrun/tests/mixins/unit-types.js","hospitalrun/tests/mixins/unit-types.lint-test.js","hospitalrun/tests/mixins/user-roles.js","hospitalrun/tests/mixins/user-roles.lint-test.js","hospitalrun/tests/mixins/user-session.js","hospitalrun/tests/mixins/user-session.lint-test.js","hospitalrun/tests/mixins/visit-types.js","hospitalrun/tests/mixins/visit-types.lint-test.js","hospitalrun/tests/models/abstract.js","hospitalrun/tests/models/abstract.lint-test.js","hospitalrun/tests/models/add-diagnosis.js","hospitalrun/tests/models/add-diagnosis.lint-test.js","hospitalrun/tests/models/allergy.js","hospitalrun/tests/models/allergy.lint-test.js","hospitalrun/tests/models/appointment.js","hospitalrun/tests/models/appointment.lint-test.js","hospitalrun/tests/models/attachment.js","hospitalrun/tests/models/attachment.lint-test.js","hospitalrun/tests/models/billing-line-item.js","hospitalrun/tests/models/billing-line-item.lint-test.js","hospitalrun/tests/models/custom-field.js","hospitalrun/tests/models/custom-field.lint-test.js","hospitalrun/tests/models/custom-form.js","hospitalrun/tests/models/custom-form.lint-test.js","hospitalrun/tests/models/diagnosis.js","hospitalrun/tests/models/diagnosis.lint-test.js","hospitalrun/tests/models/family-info.js","hospitalrun/tests/models/family-info.lint-test.js","hospitalrun/tests/models/imaging.js","hospitalrun/tests/models/imaging.lint-test.js","hospitalrun/tests/models/inc-category.js","hospitalrun/tests/models/inc-category.lint-test.js","hospitalrun/tests/models/incident-note.js","hospitalrun/tests/models/incident-note.lint-test.js","hospitalrun/tests/models/incident.js","hospitalrun/tests/models/incident.lint-test.js","hospitalrun/tests/models/inv-location.js","hospitalrun/tests/models/inv-location.lint-test.js","hospitalrun/tests/models/inv-purchase.js","hospitalrun/tests/models/inv-purchase.lint-test.js","hospitalrun/tests/models/inv-request.js","hospitalrun/tests/models/inv-request.lint-test.js","hospitalrun/tests/models/inventory-batch.js","hospitalrun/tests/models/inventory-batch.lint-test.js","hospitalrun/tests/models/inventory.js","hospitalrun/tests/models/inventory.lint-test.js","hospitalrun/tests/models/invoice.js","hospitalrun/tests/models/invoice.lint-test.js","hospitalrun/tests/models/lab.js","hospitalrun/tests/models/lab.lint-test.js","hospitalrun/tests/models/line-item-detail.js","hospitalrun/tests/models/line-item-detail.lint-test.js","hospitalrun/tests/models/lookup.js","hospitalrun/tests/models/lookup.lint-test.js","hospitalrun/tests/models/medication.js","hospitalrun/tests/models/medication.lint-test.js","hospitalrun/tests/models/operation-report.js","hospitalrun/tests/models/operation-report.lint-test.js","hospitalrun/tests/models/operative-plan.js","hospitalrun/tests/models/operative-plan.lint-test.js","hospitalrun/tests/models/option.js","hospitalrun/tests/models/option.lint-test.js","hospitalrun/tests/models/override-price.js","hospitalrun/tests/models/override-price.lint-test.js","hospitalrun/tests/models/patient-note.js","hospitalrun/tests/models/patient-note.lint-test.js","hospitalrun/tests/models/patient.js","hospitalrun/tests/models/patient.lint-test.js","hospitalrun/tests/models/payment.js","hospitalrun/tests/models/payment.lint-test.js","hospitalrun/tests/models/photo.js","hospitalrun/tests/models/photo.lint-test.js","hospitalrun/tests/models/price-profile.js","hospitalrun/tests/models/price-profile.lint-test.js","hospitalrun/tests/models/pricing.js","hospitalrun/tests/models/pricing.lint-test.js","hospitalrun/tests/models/proc-charge.js","hospitalrun/tests/models/proc-charge.lint-test.js","hospitalrun/tests/models/procedure.js","hospitalrun/tests/models/procedure.lint-test.js","hospitalrun/tests/models/report.js","hospitalrun/tests/models/report.lint-test.js","hospitalrun/tests/models/sequence.js","hospitalrun/tests/models/sequence.lint-test.js","hospitalrun/tests/models/social-expense.js","hospitalrun/tests/models/social-expense.lint-test.js","hospitalrun/tests/models/text-expansion.js","hospitalrun/tests/models/text-expansion.lint-test.js","hospitalrun/tests/models/user-role.js","hospitalrun/tests/models/user-role.lint-test.js","hospitalrun/tests/models/user.js","hospitalrun/tests/models/user.lint-test.js","hospitalrun/tests/models/visit.js","hospitalrun/tests/models/visit.lint-test.js","hospitalrun/tests/models/vital.js","hospitalrun/tests/models/vital.lint-test.js","hospitalrun/tests/patients/add-contact/controller.js","hospitalrun/tests/patients/add-contact/controller.lint-test.js","hospitalrun/tests/patients/admitted/controller.js","hospitalrun/tests/patients/admitted/controller.lint-test.js","hospitalrun/tests/patients/admitted/route.js","hospitalrun/tests/patients/admitted/route.lint-test.js","hospitalrun/tests/patients/delete/controller.js","hospitalrun/tests/patients/delete/controller.lint-test.js","hospitalrun/tests/patients/edit/controller.js","hospitalrun/tests/patients/edit/controller.lint-test.js","hospitalrun/tests/patients/edit/route.js","hospitalrun/tests/patients/edit/route.lint-test.js","hospitalrun/tests/patients/index/controller.js","hospitalrun/tests/patients/index/controller.lint-test.js","hospitalrun/tests/patients/index/route.js","hospitalrun/tests/patients/index/route.lint-test.js","hospitalrun/tests/patients/notes/controller.js","hospitalrun/tests/patients/notes/controller.lint-test.js","hospitalrun/tests/patients/operation-report/controller.js","hospitalrun/tests/patients/operation-report/controller.lint-test.js","hospitalrun/tests/patients/operation-report/route.js","hospitalrun/tests/patients/operation-report/route.lint-test.js","hospitalrun/tests/patients/operative-plan/controller.js","hospitalrun/tests/patients/operative-plan/controller.lint-test.js","hospitalrun/tests/patients/operative-plan/route.js","hospitalrun/tests/patients/operative-plan/route.lint-test.js","hospitalrun/tests/patients/outpatient/controller.js","hospitalrun/tests/patients/outpatient/controller.lint-test.js","hospitalrun/tests/patients/outpatient/route.js","hospitalrun/tests/patients/outpatient/route.lint-test.js","hospitalrun/tests/patients/photo/controller.js","hospitalrun/tests/patients/photo/controller.lint-test.js","hospitalrun/tests/patients/quick-add/controller.js","hospitalrun/tests/patients/quick-add/controller.lint-test.js","hospitalrun/tests/patients/reports/controller.js","hospitalrun/tests/patients/reports/controller.lint-test.js","hospitalrun/tests/patients/reports/route.js","hospitalrun/tests/patients/reports/route.lint-test.js","hospitalrun/tests/patients/route.js","hospitalrun/tests/patients/route.lint-test.js","hospitalrun/tests/patients/search/controller.js","hospitalrun/tests/patients/search/controller.lint-test.js","hospitalrun/tests/patients/search/route.js","hospitalrun/tests/patients/search/route.lint-test.js","hospitalrun/tests/patients/socialwork/expense/controller.js","hospitalrun/tests/patients/socialwork/expense/controller.lint-test.js","hospitalrun/tests/patients/socialwork/family-info/controller.js","hospitalrun/tests/patients/socialwork/family-info/controller.lint-test.js","hospitalrun/tests/pricing/delete/controller.js","hospitalrun/tests/pricing/delete/controller.lint-test.js","hospitalrun/tests/pricing/edit/controller.js","hospitalrun/tests/pricing/edit/controller.lint-test.js","hospitalrun/tests/pricing/edit/route.js","hospitalrun/tests/pricing/edit/route.lint-test.js","hospitalrun/tests/pricing/imaging/controller.js","hospitalrun/tests/pricing/imaging/controller.lint-test.js","hospitalrun/tests/pricing/imaging/route.js","hospitalrun/tests/pricing/imaging/route.lint-test.js","hospitalrun/tests/pricing/index/controller.js","hospitalrun/tests/pricing/index/controller.lint-test.js","hospitalrun/tests/pricing/index/route.js","hospitalrun/tests/pricing/index/route.lint-test.js","hospitalrun/tests/pricing/lab/controller.js","hospitalrun/tests/pricing/lab/controller.lint-test.js","hospitalrun/tests/pricing/lab/route.js","hospitalrun/tests/pricing/lab/route.lint-test.js","hospitalrun/tests/pricing/override/controller.js","hospitalrun/tests/pricing/override/controller.lint-test.js","hospitalrun/tests/pricing/procedure/controller.js","hospitalrun/tests/pricing/procedure/controller.lint-test.js","hospitalrun/tests/pricing/procedure/route.js","hospitalrun/tests/pricing/procedure/route.lint-test.js","hospitalrun/tests/pricing/profiles/controller.js","hospitalrun/tests/pricing/profiles/controller.lint-test.js","hospitalrun/tests/pricing/profiles/edit/controller.js","hospitalrun/tests/pricing/profiles/edit/controller.lint-test.js","hospitalrun/tests/pricing/profiles/route.js","hospitalrun/tests/pricing/profiles/route.lint-test.js","hospitalrun/tests/pricing/route.js","hospitalrun/tests/pricing/route.lint-test.js","hospitalrun/tests/pricing/search/controller.js","hospitalrun/tests/pricing/search/controller.lint-test.js","hospitalrun/tests/pricing/search/route.js","hospitalrun/tests/pricing/search/route.lint-test.js","hospitalrun/tests/pricing/ward/controller.js","hospitalrun/tests/pricing/ward/controller.lint-test.js","hospitalrun/tests/pricing/ward/route.js","hospitalrun/tests/pricing/ward/route.lint-test.js","hospitalrun/tests/print/invoice/controller.js","hospitalrun/tests/print/invoice/controller.lint-test.js","hospitalrun/tests/procedures/charge/controller.js","hospitalrun/tests/procedures/charge/controller.lint-test.js","hospitalrun/tests/procedures/edit/controller.js","hospitalrun/tests/procedures/edit/controller.lint-test.js","hospitalrun/tests/procedures/edit/route.js","hospitalrun/tests/procedures/edit/route.lint-test.js","hospitalrun/tests/procedures/medication/controller.js","hospitalrun/tests/procedures/medication/controller.lint-test.js","hospitalrun/tests/resolver.js","hospitalrun/tests/resolver.lint-test.js","hospitalrun/tests/router.js","hospitalrun/tests/router.lint-test.js","hospitalrun/tests/routes/abstract-edit-route.js","hospitalrun/tests/routes/abstract-edit-route.lint-test.js","hospitalrun/tests/routes/abstract-index-route.js","hospitalrun/tests/routes/abstract-index-route.lint-test.js","hospitalrun/tests/routes/abstract-module-route.js","hospitalrun/tests/routes/abstract-module-route.lint-test.js","hospitalrun/tests/routes/abstract-search-route.js","hospitalrun/tests/routes/abstract-search-route.lint-test.js","hospitalrun/tests/routes/application.js","hospitalrun/tests/routes/application.lint-test.js","hospitalrun/tests/routes/index.js","hospitalrun/tests/routes/index.lint-test.js","hospitalrun/tests/routes/login.js","hospitalrun/tests/routes/login.lint-test.js","hospitalrun/tests/serializers/application.js","hospitalrun/tests/serializers/application.lint-test.js","hospitalrun/tests/serializers/user.js","hospitalrun/tests/serializers/user.lint-test.js","hospitalrun/tests/services/config.js","hospitalrun/tests/services/config.lint-test.js","hospitalrun/tests/services/custom-forms.js","hospitalrun/tests/services/custom-forms.lint-test.js","hospitalrun/tests/services/database.js","hospitalrun/tests/services/database.lint-test.js","hospitalrun/tests/services/filesystem.js","hospitalrun/tests/services/filesystem.lint-test.js","hospitalrun/tests/services/lookup-lists.js","hospitalrun/tests/services/lookup-lists.lint-test.js","hospitalrun/tests/serviceworkers/pouchdb-sync.js","hospitalrun/tests/serviceworkers/pouchdb-sync.lint-test.js","hospitalrun/tests/styles/_base.stylelint-test.js","hospitalrun/tests/styles/_bootstrap.stylelint-test.js","hospitalrun/tests/styles/_layout.stylelint-test.js","hospitalrun/tests/styles/_print.stylelint-test.js","hospitalrun/tests/styles/_typography.stylelint-test.js","hospitalrun/tests/styles/_variables_mixins.stylelint-test.js","hospitalrun/tests/styles/app.stylelint-test.js","hospitalrun/tests/styles/basscss/_align.stylelint-test.js","hospitalrun/tests/styles/basscss/_border.stylelint-test.js","hospitalrun/tests/styles/basscss/_flexbox.stylelint-test.js","hospitalrun/tests/styles/basscss/_hide.stylelint-test.js","hospitalrun/tests/styles/basscss/_layout.stylelint-test.js","hospitalrun/tests/styles/basscss/_margin.stylelint-test.js","hospitalrun/tests/styles/basscss/_padding.stylelint-test.js","hospitalrun/tests/styles/basscss/_position.stylelint-test.js","hospitalrun/tests/styles/basscss/_type-scale.stylelint-test.js","hospitalrun/tests/styles/basscss/_typography.stylelint-test.js","hospitalrun/tests/styles/basscss/grid/_index.stylelint-test.js","hospitalrun/tests/styles/basscss/grid/lib/_grid.stylelint-test.js","hospitalrun/tests/styles/basscss/grid/lib/_lg-grid.stylelint-test.js","hospitalrun/tests/styles/basscss/grid/lib/_md-grid.stylelint-test.js","hospitalrun/tests/styles/basscss/grid/lib/_sm-grid.stylelint-test.js","hospitalrun/tests/styles/components/_alert.stylelint-test.js","hospitalrun/tests/styles/components/_buttons.stylelint-test.js","hospitalrun/tests/styles/components/_calendar.stylelint-test.js","hospitalrun/tests/styles/components/_dropdown.stylelint-test.js","hospitalrun/tests/styles/components/_form_styles.stylelint-test.js","hospitalrun/tests/styles/components/_imaging.stylelint-test.js","hospitalrun/tests/styles/components/_labs.stylelint-test.js","hospitalrun/tests/styles/components/_loading_notice.stylelint-test.js","hospitalrun/tests/styles/components/_pagination.stylelint-test.js","hospitalrun/tests/styles/components/_panel.stylelint-test.js","hospitalrun/tests/styles/components/_patient_history.stylelint-test.js","hospitalrun/tests/styles/components/_patient_summary.stylelint-test.js","hospitalrun/tests/styles/components/_progress-bar.stylelint-test.js","hospitalrun/tests/styles/components/_sidebar_nav.stylelint-test.js","hospitalrun/tests/styles/components/_tab_content.stylelint-test.js","hospitalrun/tests/styles/components/_tab_nav.stylelint-test.js","hospitalrun/tests/styles/components/_tables.stylelint-test.js","hospitalrun/tests/styles/components/_typeahead.stylelint-test.js","hospitalrun/tests/styles/views/_sign_in_screen.stylelint-test.js","hospitalrun/tests/template-deprecations-test.js","hospitalrun/tests/test-helper.js","hospitalrun/tests/test-helper.lint-test.js","hospitalrun/tests/transforms/custom-fields.js","hospitalrun/tests/transforms/custom-fields.lint-test.js","hospitalrun/tests/transforms/custom-forms.js","hospitalrun/tests/transforms/custom-forms.lint-test.js","hospitalrun/tests/transforms/operative-procedures.js","hospitalrun/tests/transforms/operative-procedures.lint-test.js","hospitalrun/tests/unit/components/nav-menu-test.js","hospitalrun/tests/unit/components/nav-menu-test.lint-test.js","hospitalrun/tests/unit/controllers/abstract-delete-controller-test.js","hospitalrun/tests/unit/controllers/abstract-delete-controller-test.lint-test.js","hospitalrun/tests/unit/controllers/abstract-edit-controller-test.js","hospitalrun/tests/unit/controllers/abstract-edit-controller-test.lint-test.js","hospitalrun/tests/unit/controllers/abstract-paged-controller-test.js","hospitalrun/tests/unit/controllers/abstract-paged-controller-test.lint-test.js","hospitalrun/tests/unit/controllers/abstract-report-controller-test.js","hospitalrun/tests/unit/controllers/abstract-report-controller-test.lint-test.js","hospitalrun/tests/unit/mixins/appointment-statuses-test.js","hospitalrun/tests/unit/mixins/appointment-statuses-test.lint-test.js","hospitalrun/tests/unit/mixins/can-edit-requested-test.js","hospitalrun/tests/unit/mixins/can-edit-requested-test.lint-test.js","hospitalrun/tests/unit/mixins/date-format-test.js","hospitalrun/tests/unit/mixins/date-format-test.lint-test.js","hospitalrun/tests/unit/mixins/dob-days-test.js","hospitalrun/tests/unit/mixins/dob-days-test.lint-test.js","hospitalrun/tests/unit/mixins/inventory-adjustment-types-test.js","hospitalrun/tests/unit/mixins/inventory-adjustment-types-test.lint-test.js","hospitalrun/tests/unit/mixins/location-name-test.js","hospitalrun/tests/unit/mixins/location-name-test.lint-test.js","hospitalrun/tests/unit/mixins/medication-details-test.js","hospitalrun/tests/unit/mixins/medication-details-test.lint-test.js","hospitalrun/tests/unit/mixins/number-format-test.js","hospitalrun/tests/unit/mixins/number-format-test.lint-test.js","hospitalrun/tests/unit/mixins/patient-diagnosis-test.js","hospitalrun/tests/unit/mixins/patient-diagnosis-test.lint-test.js","hospitalrun/tests/unit/mixins/patient-name-test.js","hospitalrun/tests/unit/mixins/patient-name-test.lint-test.js","hospitalrun/tests/unit/mixins/return-to-test.js","hospitalrun/tests/unit/mixins/return-to-test.lint-test.js","hospitalrun/tests/unit/models/add-diagnosis-test.js","hospitalrun/tests/unit/models/add-diagnosis-test.lint-test.js","hospitalrun/tests/unit/models/appointment-test.js","hospitalrun/tests/unit/models/appointment-test.lint-test.js","hospitalrun/tests/unit/models/billing-line-item-test.js","hospitalrun/tests/unit/models/billing-line-item-test.lint-test.js","hospitalrun/tests/unit/models/family-info-test.js","hospitalrun/tests/unit/models/family-info-test.lint-test.js","hospitalrun/tests/unit/models/imaging-test.js","hospitalrun/tests/unit/models/imaging-test.lint-test.js","hospitalrun/tests/unit/models/inv-location-test.js","hospitalrun/tests/unit/models/inv-location-test.lint-test.js","hospitalrun/tests/unit/models/inv-purchase-test.js","hospitalrun/tests/unit/models/inv-purchase-test.lint-test.js","hospitalrun/tests/unit/models/inv-request-test.js","hospitalrun/tests/unit/models/inv-request-test.lint-test.js","hospitalrun/tests/unit/models/inventory-batch-test.js","hospitalrun/tests/unit/models/inventory-batch-test.lint-test.js","hospitalrun/tests/unit/models/inventory-test.js","hospitalrun/tests/unit/models/inventory-test.lint-test.js","hospitalrun/tests/unit/models/invoice-test.js","hospitalrun/tests/unit/models/invoice-test.lint-test.js","hospitalrun/tests/unit/models/line-item-detail-test.js","hospitalrun/tests/unit/models/line-item-detail-test.lint-test.js","hospitalrun/tests/unit/models/medication-test.js","hospitalrun/tests/unit/models/medication-test.lint-test.js","hospitalrun/tests/unit/models/patient-note-test.js","hospitalrun/tests/unit/models/patient-note-test.lint-test.js","hospitalrun/tests/unit/models/patient-test.js","hospitalrun/tests/unit/models/patient-test.lint-test.js","hospitalrun/tests/unit/models/payment-test.js","hospitalrun/tests/unit/models/payment-test.lint-test.js","hospitalrun/tests/unit/models/proc-charge-test.js","hospitalrun/tests/unit/models/proc-charge-test.lint-test.js","hospitalrun/tests/unit/models/user-test.js","hospitalrun/tests/unit/models/user-test.lint-test.js","hospitalrun/tests/unit/models/visit-test.js","hospitalrun/tests/unit/models/visit-test.lint-test.js","hospitalrun/tests/unit/services/config-test.js","hospitalrun/tests/unit/services/config-test.lint-test.js","hospitalrun/tests/unit/services/filesystem-test.js","hospitalrun/tests/unit/services/filesystem-test.lint-test.js","hospitalrun/tests/unit/utils/email-validation-test.js","hospitalrun/tests/unit/utils/email-validation-test.lint-test.js","hospitalrun/tests/unit/utils/item-condition-test.js","hospitalrun/tests/unit/utils/item-condition-test.lint-test.js","hospitalrun/tests/unit/utils/select-values-test.js","hospitalrun/tests/unit/utils/select-values-test.lint-test.js","hospitalrun/tests/unit/utils/text-expansion-test.js","hospitalrun/tests/unit/utils/text-expansion-test.lint-test.js","hospitalrun/tests/users/delete/controller.js","hospitalrun/tests/users/delete/controller.lint-test.js","hospitalrun/tests/users/edit/controller.js","hospitalrun/tests/users/edit/controller.lint-test.js","hospitalrun/tests/users/edit/route.js","hospitalrun/tests/users/edit/route.lint-test.js","hospitalrun/tests/users/index/controller.js","hospitalrun/tests/users/index/controller.lint-test.js","hospitalrun/tests/users/index/route.js","hospitalrun/tests/users/index/route.lint-test.js","hospitalrun/tests/users/route.js","hospitalrun/tests/users/route.lint-test.js","hospitalrun/tests/utils/date-sort.js","hospitalrun/tests/utils/date-sort.lint-test.js","hospitalrun/tests/utils/email-validation.js","hospitalrun/tests/utils/email-validation.lint-test.js","hospitalrun/tests/utils/item-condition.js","hospitalrun/tests/utils/item-condition.lint-test.js","hospitalrun/tests/utils/patient-validation.js","hospitalrun/tests/utils/patient-validation.lint-test.js","hospitalrun/tests/utils/pouch-views.js","hospitalrun/tests/utils/pouch-views.lint-test.js","hospitalrun/tests/utils/select-values.js","hospitalrun/tests/utils/select-values.lint-test.js","hospitalrun/tests/utils/text-expansion.js","hospitalrun/tests/utils/text-expansion.lint-test.js","hospitalrun/tests/utils/unauthorized-error.js","hospitalrun/tests/utils/unauthorized-error.lint-test.js","hospitalrun/tests/utils/visit-statuses.js","hospitalrun/tests/utils/visit-statuses.lint-test.js","hospitalrun/tests/visits/charge/controller.js","hospitalrun/tests/visits/charge/controller.lint-test.js","hospitalrun/tests/visits/delete/controller.js","hospitalrun/tests/visits/delete/controller.lint-test.js","hospitalrun/tests/visits/edit/controller.js","hospitalrun/tests/visits/edit/controller.lint-test.js","hospitalrun/tests/visits/edit/route.js","hospitalrun/tests/visits/edit/route.lint-test.js","hospitalrun/tests/visits/procedures/delete/controller.js","hospitalrun/tests/visits/procedures/delete/controller.lint-test.js","hospitalrun/tests/visits/reports/edit/controller.js","hospitalrun/tests/visits/reports/edit/controller.lint-test.js","hospitalrun/tests/visits/reports/edit/route.js","hospitalrun/tests/visits/reports/edit/route.lint-test.js","hospitalrun/tests/visits/route.js","hospitalrun/tests/visits/route.lint-test.js","hospitalrun/tests/visits/vitals/delete/controller.js","hospitalrun/tests/visits/vitals/delete/controller.lint-test.js","hospitalrun/tests/visits/vitals/edit/controller.js","hospitalrun/tests/visits/vitals/edit/controller.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('hospitalrun/tests/acceptance/admin-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | admin', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /admin', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin');\n        select('.lookup-type', 'Visit Types');\n        andThen(function () {\n          assert.equal(find('h3.panel-title').text(), 'Visit Types', 'Visit Types header is displayed');\n          assert.equal(find('td.lookup-type-value:first').text(), 'Admission', 'Admission visit type displays');\n          click('button:contains(Update)');\n          waitToAppear('.modal-dialog');\n          andThen(function () {\n            assert.equal(find('.modal-title').text(), 'List Saved', 'Lookup list is saved');\n          });\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('add new lookup value', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin');\n        select('.lookup-type', 'Anesthesiologists');\n        click('button:contains(Add Value)');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Add Value', 'Add value modal is displayed');\n          fillIn('.lookup-type-value input', 'Dr Smith');\n          click('button:contains(Add):last');\n          andThen(function () {\n            waitToAppear('td.lookup-type-value:contains(Dr Smith)');\n            andThen(function () {\n              assert.equal(find('td.lookup-type-value:contains(Dr Smith)').length, 1, 'Added lookup type is added to list');\n            });\n          });\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete lookup value', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin');\n        select('.lookup-type', 'Anesthesia Types');\n        andThen(function () {\n          assert.equal(find('td.lookup-type-value:contains(Epidural)').length, 1, 'Have lookup type to delete from list');\n          click('button:contains(Delete)');\n          waitToAppear('.modal-dialog');\n        });\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Delete Value', 'Delete value modal is displayed');\n          click('.modal-footer button:contains(Ok)');\n        });\n        andThen(function () {\n          assert.equal(find('td.lookup-type-value:contains(Epidural)').length, 0, 'Deleted lookup type is removed from the list');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Update address options', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin/address');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/address');\n        fillIn('input', 'Address Label');\n        click('button:contains(Update)');\n        andThen(function () {\n          waitToAppear('.modal-dialog');\n          andThen(function () {\n            assert.equal(find('.modal-title').text(), 'Options Saved', 'Address Options Saved');\n          });\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Update header options', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin/print-header');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/print-header');\n        fillIn('input', 'Print Header Label');\n        click('button:contains(Update)');\n        andThen(function () {\n          waitToAppear('.modal-dialog');\n          andThen(function () {\n            assert.equal(find('.modal-title').text(), 'Options Saved', 'Header Options Saved');\n          });\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Update workflow options', function (assert) {\n    var selector = 'input[type=checkbox]';\n\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin/workflow');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/workflow', 'Correctly navigated to admin workflow');\n\n        setAllTo(false, function () {\n          visit('/admin/workflow');\n          andThen(function () {\n            setAllTo(true);\n          });\n        });\n      });\n    });\n\n    function setAllTo(checked, cb) {\n      Array.prototype.slice.call(document.querySelectorAll(selector)).forEach(function (node) {\n        node.checked = checked;\n      });\n      click('button:contains(Update)');\n      andThen(function () {\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Options Saved', 'Workflow Options Saved');\n          verifyAll(checked);\n          if (cb) {\n            cb();\n          }\n        });\n      });\n    }\n\n    function verifyAll(checked) {\n      Array.prototype.slice.call(document.querySelectorAll(selector)).forEach(function (node) {\n        assert.equal(node.checked, checked, 'Checkbox is ' + (checked ? 'checked' : 'unchecked'));\n      });\n    }\n  });\n});","define('hospitalrun/tests/acceptance/admin-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/admin-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/admin-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/appointments-test', ['exports', 'ember', 'qunit', 'moment', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _moment, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  var DATE_TIME_FORMAT = 'l h:mm A';\n  var TIME_FORMAT = 'h:mm';\n\n  (0, _qunit.module)('Acceptance | appointments', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /appointments', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/appointments');\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        findWithAssert('button:contains(new appointment)');\n        findWithAssert('.table-header');\n      });\n    });\n  });\n\n  (0, _qunit.test)('visiting /appointments/missed', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      var url = '/appointments';\n      var today = (0, _moment['default'])();\n      var tomorrow = (0, _moment['default'])().add(1, 'days');\n      var status = 'Missed';\n      createAppointment(assert, {\n        startDate: today,\n        endDate: tomorrow,\n        allDay: false,\n        status: status\n      });\n      visit(url);\n      andThen(function () {\n        assert.equal(currentURL(), url);\n        findWithAssert('.appointment-status:contains(' + status + ')');\n      });\n    });\n  });\n\n  (0, _qunit.test)('test appointment for today', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      visit('/appointments/today');\n      assert.equal(find('.appointment-date').length, 0, 'should have 0 appointment today');\n      visit('/appointments/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments/edit/new');\n        findWithAssert('button:contains(Cancel)');\n        findWithAssert('button:contains(Add)');\n      });\n\n      createAppointment(assert);\n\n      visit('/appointments/today');\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments/today');\n        assert.equal(find('.appointment-status').text(), 'Scheduled', 'should have 1 appointment today');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Creating a new appointment', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      visit('/appointments/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments/edit/new');\n        findWithAssert('button:contains(Cancel)');\n        findWithAssert('button:contains(Add)');\n      });\n\n      createAppointment(assert);\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        assert.equal(find('tr').length, 2, 'New appointment has been added');\n        findWithAssert('button:contains(Check In)');\n        findWithAssert('button:contains(Edit)');\n        findWithAssert('button:contains(Delete)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Checkin to a visit from appointment', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      createAppointment(assert);\n      visit('/appointments');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        assert.equal(find('tr').length, 2, 'New appointment has been added');\n        findWithAssert('button:contains(Check In)');\n        findWithAssert('button:contains(Edit)');\n        findWithAssert('button:contains(Delete)');\n      });\n\n      click('button:contains(Check In)');\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/checkin', 'Now in add visiting information route');\n      });\n      click('.panel-footer button:contains(Check In)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Checked In', 'Patient has been checked in');\n      });\n      click('button:contains(Ok)');\n      andThen(function () {\n        findWithAssert('button:contains(New Note)');\n        findWithAssert('button:contains(New Procedure)');\n        findWithAssert('button:contains(New Medication)');\n        findWithAssert('button:contains(New Lab)');\n        findWithAssert('button:contains(New Imaging)');\n        findWithAssert('button:contains(New Vitals)');\n        findWithAssert('button:contains(Add Item)');\n      });\n      click('button:contains(Return)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        assert.equal(find('button:contains(Check In)').length, 0, 'Check In button no longer appears');\n        findWithAssert('button:contains(Edit)');\n        findWithAssert('button:contains(Delete)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Delete an appointment', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      createAppointment(assert);\n      visit('/appointments');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        assert.equal(find('.appointment-date').length, 1, 'One appointment is listed');\n        findWithAssert('button:contains(Check In)');\n        findWithAssert('button:contains(Edit)');\n        findWithAssert('button:contains(Delete)');\n        click('button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Delete Appointment', 'Delete Appointment confirmation modal has been displayed');\n        click('.modal-dialog button:contains(Delete)');\n      });\n      andThen(function () {\n        waitToDisappear('.appointment-date');\n      });\n      andThen(function () {\n        assert.equal(find('.appointment-date').length, 0, 'No appointments are displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Appointment calendar', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      var today = (0, _moment['default'])().startOf('day');\n      var later = (0, _moment['default'])(today).add(1, 'hours');\n      var startTime = today.format(TIME_FORMAT);\n      var endTime = later.format(TIME_FORMAT);\n      var timeString = startTime + ' - ' + endTime;\n      createAppointment(assert, {\n        startDate: today,\n        endDate: later,\n        allDay: false,\n        status: 'Scheduled'\n      });\n\n      andThen(function () {\n        visit('/appointments/calendar');\n      });\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments/calendar');\n        assert.equal(find('.view-current-title').text(), 'Appointments Calendar', 'Appoinment Calendar displays');\n        assert.equal(find('.fc-content .fc-time').text(), timeString, 'Time appears in calendar');\n        assert.equal(find('.fc-title').text(), 'Lennex ZinyandoDr Test', 'Appoinment displays in calendar');\n        click('.fc-title');\n      });\n\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Edit Appointment', 'Edit Appointment displays');\n        assert.equal(find('.test-appointment-start input').val(), today.format(DATE_TIME_FORMAT), 'Start date/time are correct');\n        assert.equal(find('.test-appointment-end input').val(), later.format(DATE_TIME_FORMAT), 'End date/time are correct');\n      });\n    });\n  });\n\n  (0, _qunit.test)('visiting /appointments/search', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n\n      createAppointment(assert);\n      createAppointment(assert, {\n        startDate: (0, _moment['default'])().startOf('day').add(1, 'years'),\n        startTime: (0, _moment['default'])().startOf('day').add(1, 'years').format(TIME_FORMAT),\n        endDate: (0, _moment['default'])().endOf('day').add(1, 'years').add(2, 'days'),\n        endTime: (0, _moment['default'])().endOf('day').add(1, 'years').add(2, 'days').format(TIME_FORMAT)\n      });\n\n      andThen(function () {\n        visit('/appointments/search');\n      });\n\n      andThen(function () {\n        findWithAssert(':contains(Search Appointments)');\n        findWithAssert(':contains(Show Appointments On Or After)');\n        findWithAssert(':contains(Status)');\n        findWithAssert(':contains(Type)');\n        findWithAssert(':contains(With)');\n      });\n\n      andThen(function () {\n        // debugger;\n        var desiredDate = (0, _moment['default'])().endOf('day').add(363, 'days').format('l');\n        var datePicker = '.test-selected-start-date input';\n        selectDate(datePicker, desiredDate);\n        click('button:contains(Search)');\n      });\n\n      andThen(function () {\n        var date = (0, _moment['default'])().endOf('day').add(1, 'years').add(2, 'days').format('l');\n        findWithAssert('.appointment-status:contains(' + status + ')');\n        var element = 'tr:contains(' + date + ')';\n        findWithAssert(element);\n        date = (0, _moment['default'])().startOf('day').add(1, 'years');\n        element = find('tr:contains(' + date + ')');\n        assert.equal(element.length, 0);\n      });\n    });\n  });\n\n  (0, _qunit.test)('Theater scheduling', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      var later = (0, _moment['default'])();\n      later.hour(11);\n      later.minute(30);\n      var today = (0, _moment['default'])();\n      today.hour(10);\n      today.minute(30);\n      var startTime = today.format(TIME_FORMAT);\n      var endTime = later.format(TIME_FORMAT);\n      var timeString = startTime + ' - ' + endTime;\n\n      createAppointment(assert, {\n        endDate: later,\n        startDate: today,\n        isSurgery: true\n      });\n\n      andThen(function () {\n        visit('/appointments/theater');\n      });\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments/theater', 'Theater schedule url is correct.');\n        assert.equal(find('.view-current-title').text(), 'Theater Schedule', 'Theater Schedule displays');\n        assert.equal(find('.fc-content .fc-time').text(), timeString, 'Time appears in calendar');\n        assert.equal(find('.fc-title').text(), 'Lennex ZinyandoDr Test', 'Appoinment displays in calendar');\n        click('.fc-title');\n      });\n\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Edit Surgical Appointment', 'Edit Surgical Appointment displays');\n        assert.equal(find('.test-appointment-date input').val(), today.format('l'), 'Date is correct');\n        assert.equal(find('.start-hour').val(), today.hour(), 'Start hour is correct');\n        assert.equal(find('.start-minute').val(), today.minute(), 'Start minute is correct');\n        assert.equal(find('.end-hour').val(), later.hour(), 'End hour is correct');\n        assert.equal(find('.end-minute').val(), later.minute(), 'End minute is correct');\n      });\n    });\n  });\n\n  function createAppointment(assert) {\n    var appointment = arguments.length <= 1 || arguments[1] === undefined ? { startDate: new Date(), endDate: (0, _moment['default'])().add(1, 'day').toDate(), allDay: true, status: 'Scheduled' } : arguments[1];\n\n    if (appointment.isSurgery) {\n      visit('/appointments/edit/newsurgery');\n    } else {\n      visit('/appointments/edit/new');\n    }\n    typeAheadFillIn('.test-patient-input', 'Lennex Zinyando - P00017');\n    if (appointment.isSurgery) {\n      selectDate('.test-appointment-date input', appointment.startDate);\n      var endHour = getHour(appointment.endDate);\n      var endMinute = appointment.endDate.format('mm');\n      var startHour = getHour(appointment.startDate);\n      var startMinute = appointment.startDate.format('mm');\n      select('.end-hour', endHour);\n      select('.end-minute', endMinute);\n      select('.start-hour', startHour);\n      select('.start-minute', startMinute);\n    } else {\n      select('.test-appointment-status', appointment.status);\n      if (!appointment.allDay) {\n        click('.appointment-all-day input');\n        fillIn('.test-appointment-start input', appointment.startDate.format(DATE_TIME_FORMAT));\n        fillIn('.test-appointment-end input', appointment.endDate.format(DATE_TIME_FORMAT));\n      } else {\n        selectDate('.test-appointment-start input', appointment.startDate);\n        selectDate('.test-appointment-end input', appointment.endDate);\n      }\n    }\n    typeAheadFillIn('.test-appointment-location', 'Harare');\n    typeAheadFillIn('.test-appointment-with', 'Dr Test');\n    click('button:contains(Add)');\n    waitToAppear('.modal-dialog');\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Appointment Saved', 'Appointment has been saved');\n      click('.modal-footer button:contains(Ok)');\n    });\n    andThen(function () {\n      click('button:contains(Return)');\n    });\n  }\n\n  function getHour(date) {\n    var hour = date.format('h A');\n    if (hour.indexOf('12') === 0) {\n      if (hour === '12 AM') {\n        hour = 'Midnight';\n      } else {\n        hour = 'Noon';\n      }\n    }\n    return hour;\n  }\n});","define('hospitalrun/tests/acceptance/appointments-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/appointments-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/appointments-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/custom-forms-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | custom forms', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('crud operations on custom-forms', function (assert) {\n    var crusts = ['Thin', 'Deep Dish', 'Flatbread'];\n    var desserts = ['Ice Cream', 'Cookies', 'Cake'];\n    var toppings = ['Cheese', 'Pepperoni', 'Mushrooms'];\n\n    function addField(fieldType, label, values) {\n      click('button:contains(Add Field)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Value', 'Add Value modal displays.');\n        select('.custom-field-select', fieldType);\n        fillIn('.custom-field-label input', label);\n        fillIn('.custom-field-colspan input', '1');\n      });\n      if (values) {\n        click('button:contains(Add Value)');\n        andThen(function () {\n          fillIn('.custom-field-value:last', 'Delete Me');\n        });\n        andThen(function () {\n          assert.equal(find('.custom-field-value:contains(Delete Me)').length, 0, 'Field value successfully added');\n        });\n        andThen(function () {\n          click('button.delete-field-value');\n        });\n        andThen(function () {\n          assert.equal(find('.custom-field-value:contains(Delete Me)').length, 0, 'Field value successfully deleted');\n          values.forEach(function (value) {\n            click('button:contains(Add Value)');\n            andThen(function () {\n              fillIn('.custom-field-value:last', value);\n            });\n          });\n        });\n      }\n      andThen(function () {\n        click('.modal-footer button:contains(Add)');\n      });\n    }\n\n    function verifyPreview() {\n      click('button:contains(Preview)');\n      waitToAppear('.form-preview');\n      andThen(function () {\n        assert.equal(find('.form-preview label:contains(Pizza Toppings)').length, 1, 'Found Pizza Toppings Label');\n        toppings.forEach(function (topping) {\n          assert.equal(find('.form-preview label:contains(' + topping + '):has(input[type=checkbox])').length, 1, 'Found ' + topping + ' checkbox');\n        });\n        assert.equal(find('.form-preview label:contains(Pizza Crust)').length, 1, 'Found Pizza Toppings Label');\n        crusts.forEach(function (crust) {\n          assert.equal(find('.form-preview option:contains(' + crust + ')').length, 1, 'Found ' + crust + ' option');\n        });\n        assert.equal(find('.form-preview label:contains(Dessert)').length, 1, 'Found Pizza Toppings Label');\n        desserts.forEach(function (dessert) {\n          assert.equal(find('.form-preview label:contains(' + dessert + '):has(input[type=radio])').length, 1, 'Found ' + dessert + ' radio option');\n        });\n        assert.equal(find('.form-preview label:contains(Beverage)').length, 1, 'Found Beverage Label');\n        assert.equal(find('.form-preview input[id*=beverage]').length, 1, 'Found Beverage input');\n        assert.equal(find('.form-preview label:contains(Special Instructions)').length, 1, 'Found Special Instructions Label');\n        assert.equal(find('.form-preview textarea[id*=specialInstructions]').length, 1, 'Found special instructions textarea');\n        click('button:contains(Preview)'); // Hide preview to reset it back to being closed.\n      });\n    }\n\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/admin/custom-forms');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/custom-forms', 'Navigated to custom forms index page');\n        assert.equal(find('.custom-form-name').length, 0, 'No custom forms appears in the listing.');\n        click('button:contains(new form)');\n      });\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'New Custom Form', 'New custom form edit page displays');\n        assert.equal(currentURL(), '/admin/custom-forms/edit/new', 'Navigated to create new custom form');\n        fillIn('.custom-form-name input', 'Test Custom Form');\n        fillIn('.custom-form-columns input', '2');\n        select('.custom-form-type', 'Visit');\n        click('.panel-footer button:contains(Add)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Form Saved', 'Form is saved');\n        addField('Checkbox', 'Pizza Toppings', toppings);\n      });\n      andThen(function () {\n        addField('Dropdown', 'Pizza Crust', crusts);\n      });\n      andThen(function () {\n        addField('Radio', 'Dessert', desserts);\n      });\n      andThen(function () {\n        addField('Text', 'Beverage');\n      });\n      andThen(function () {\n        addField('Large Text', 'Special Instructions');\n      });\n      andThen(function () {\n        click('button:contains(Update)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Form Saved', 'Form is updated');\n        verifyPreview(1);\n      });\n      andThen(function () {\n        click('button:contains(Return)');\n        waitToAppear('.view-current-title:contains(Custom Forms)');\n      });\n      andThen(function () {\n        assert.equal(find('.custom-form-name:contains(Test Custom Form)').length, 1, 'Custom form appears in listing.');\n        click('button:contains(Edit)');\n        waitToAppear('button:contains(Preview)');\n      });\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Edit Custom Form', 'Custom form edit page displays');\n        verifyPreview(2);\n      });\n      andThen(function () {\n        click('button:contains(Return)');\n        waitToAppear('.view-current-title:contains(Custom Forms)');\n      });\n      andThen(function () {\n        click('button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Custom Form', 'Delete confirmation displays');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        assert.equal(find('.custom-form-name').length, 0, 'Deleted custom form disappears from custom form listing.');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/custom-forms-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/custom-forms-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/custom-forms-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/imaging-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | imaging', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /imaging', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/imaging');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging');\n        var newImagingButton = find('button:contains(new imaging)');\n        assert.equal(newImagingButton.length, 1, 'New Imaging button is visible');\n        findWithAssert('p:contains(No items found. )');\n        findWithAssert('a:contains(Create a new record?)');\n      });\n      click('button:contains(new imaging)');\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/edit/new');\n      });\n    });\n  });\n\n  (0, _qunit.test)('create a new imaging request', function (assert) {\n    runWithPouchDump('imaging', function () {\n      authenticateUser();\n      visit('/imaging/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/edit/new');\n      });\n      typeAheadFillIn('.patient-input', 'Joe Bagadonuts - P00001');\n      typeAheadFillIn('.imaging-type-input', 'Chest Scan');\n      typeAheadFillIn('.radiologist-input', 'Dr Test');\n      fillIn('.result-input input', 'Check is clear');\n      fillIn('textarea', 'Patient is healthy');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Imaging Request Saved', 'Imaging Request was saved successfully');\n      });\n      click('button:contains(Ok)');\n      andThen(function () {\n        findWithAssert('button:contains(Update)');\n        findWithAssert('button:contains(Return)');\n        findWithAssert('button:contains(Complete)');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-summary').length, 1, 'Patient summary is displayed');\n      });\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging');\n        assert.equal(find('tr').length, 3, 'Two imaging requests are displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('completed requests are displayed', function (assert) {\n    runWithPouchDump('imaging', function () {\n      authenticateUser();\n      visit('/imaging/completed');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/completed');\n        assert.equal(find('.table').length, 1, 'Requests table is visible');\n      });\n    });\n  });\n\n  (0, _qunit.test)('mark an imaging request as completed', function (assert) {\n    runWithPouchDump('imaging', function () {\n      authenticateUser();\n      visit('/imaging');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging');\n        assert.equal(find('.table').length, 1, 'Requests table is visible');\n        assert.equal(find('tr').length, 2, 'One imaging request not completed');\n      });\n      click('button:contains(Edit):first');\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/edit/12DEDA58-4670-7A74-BA8B-9CC5E5CA82E7');\n        findWithAssert('button:contains(Update)');\n        findWithAssert('button:contains(Return)');\n        findWithAssert('button:contains(Complete)');\n      });\n      click('button:contains(Complete)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Imaging Request Completed', 'Imaging Request was saved successfully');\n      });\n      click('button:contains(Ok)');\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging');\n        findWithAssert('a:contains(Create a new record?)');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/imaging-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/imaging-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/imaging-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/incident-test', ['exports', 'ember', 'qunit', 'moment', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _moment, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  var DATE_FORMAT = 'l';\n  var DATE_TIME_FORMAT = 'l h:mm A';\n  var DEPARTMENT = 'Pharmacy';\n  var INCIDENT_CATEGORY = 'Patient Falls';\n  var INCIDENT_CATEGORY_ITEM = 'Ambulating';\n  var INCIDENT_DESCRIPTION = 'Patient fell on wet floor that was recently mopped.';\n  var INCIDENT_NOTES = 'Additional Notes here';\n  var EDIT_INCIDENT_NOTE = 'The wet floor sign had fallen down and was no longer visible.';\n  var REPORTED_TO = 'Jack Bridges';\n\n  (0, _qunit.module)('Acceptance | Incidents', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('Incident category management', function (assert) {\n    runWithPouchDump('incident', function () {\n      authenticateUser();\n      visit('/admin/inc-category');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/inc-category', 'Incident Categories url is correct');\n        click('button:contains(+ new category)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/inc-category/edit/new', 'New incident category URL is correct');\n        fillIn('.incident-category-name input', 'Infection Control');\n        addItem(assert, 'Surgical Site Infection');\n      });\n      andThen(function () {\n        addItem(assert, 'Hospital Acquired Infection');\n      });\n      andThen(function () {\n        click('button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Item', 'Delete Item modal appears');\n        click('.modal-footer button:contains(Ok)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.incident-category-item:contains(Surgical Site Infection)').length, 0, 'Deleted incident category item disappears');\n        click('.panel-footer button:contains(Update)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Incident Category Saved', 'Incident Category saved modal appears');\n        click('button:contains(Return)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/inc-category', 'Incident Categories url is correct');\n        assert.equal(find('td.incident-catergory-name:contains(Infection Control)').length, 1, 'New incident category displays in listing');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Incident creation and editing', function (assert) {\n    runWithPouchDump('incident', function () {\n      var now = (0, _moment['default'])();\n      authenticateUser();\n      visit('/incident');\n      andThen(function () {\n        assert.equal(currentURL(), '/incident', 'Incident listing url is correct');\n        click('button:contains(+ new incident)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/incident/edit/new', 'Incident edit url is correct');\n        click('.sentinel-event input');\n        fillIn('.incident-date input', now.format(DATE_TIME_FORMAT));\n        typeAheadFillIn('.incident-department', DEPARTMENT);\n        fillIn('.reported-to', REPORTED_TO);\n        select('.incident-category', INCIDENT_CATEGORY);\n        waitToAppear('.incident-category-item option:contains(' + INCIDENT_CATEGORY_ITEM + ')');\n      });\n      andThen(function () {\n        select('.incident-category-item', INCIDENT_CATEGORY_ITEM);\n        typeAheadFillIn('.patient-name', 'Joe Bagadonuts - P00001');\n        waitToAppear('.patient-id:contains(P00001)');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-id').text(), 'P00001', 'Selected patient id appears');\n        fillIn('.incident-description textarea', 'Patient blacked out and fell down.');\n      });\n      andThen(function () {\n        click('.panel-footer button:contains(Add)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Incident Saved', ' Incident Saved modal appears');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        assert.equal(find('.tab-nav li a:contains(Notes)').length, 1, 'Notes tab appears');\n        assert.equal(find('.tab-nav li a:contains(Attachment)').length, 1, 'Attachment tab appears');\n        assert.equal(find('.tab-nav li a:contains(Harm Score)').length, 1, 'Harm Score custom form tab appears');\n        assert.equal(find('.tab-nav li a:contains(+ Add Form)').length, 1, 'Add Custom form tab appears');\n        click('button:contains(+ New Note)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        fillIn('.note-description textarea', INCIDENT_NOTES);\n        click('.modal-footer button:contains(Add)');\n      });\n      andThen(function () {\n        waitToDisappear('.modal-dialog');\n        waitToAppear('.note-description:contains(' + INCIDENT_NOTES + ')');\n      });\n      andThen(function () {\n        assert.equal(find('.note-description:contains(' + INCIDENT_NOTES + ')').length, 1, 'Added note appears in listing');\n        click('.tab-nav li a:contains(Attachment)');\n      });\n      andThen(function () {\n        click('button:contains(+ New Attachment)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Attachment', 'Add attachment dialog appears');\n        // Right now we don't have a good way to test adding attachments.\n        click('.modal-footer button:contains(Cancel)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        click('.tab-nav li a:contains(Harm Score)');\n      });\n      andThen(function () {\n        assert.equal(find('#customForm0 label:contains(No Actual Event)').length, 1, 'Always add custom form renders');\n        click('.tab-nav li a:contains(+ Add Form)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Custom Form', 'Add custom form dialog appears');\n        select('.form-to-add', 'Incident');\n      });\n      andThen(function () {\n        click('.modal-footer button:contains(Add Form)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.tab-nav li a:contains(Pre-Incident Risk Assessment)').length, 1, 'Pre-Incident Risk Assessment form tab now appears');\n        assert.equal(find('.tab-nav li a:contains(+ Add Form)').length, 0, 'Add Custom form tab disappears');\n        click('.tab-nav li a:contains(Pre-Incident Risk Assessment)');\n      });\n      andThen(function () {\n        assert.equal(find('#customForm1 label:contains(Minimum No injuries, low financial loss)').length, 1, 'Pre-Incident Risk Assessment custom form renders');\n        click('.panel-footer button:contains(Update)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Incident Saved', ' Incident Saved modal appears');\n        click('.modal-footer button:contains(Ok)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        click('.panel-footer button:contains(Return)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/incident', 'Incident listing url is correct');\n        assert.equal(find('.incident-row').length, 2, 'Two incidents appears');\n        assert.equal(find('.incident-row td.incident-date:contains(' + now.format(DATE_FORMAT) + ')').length, 1, 'Incident date appears in listing');\n        assert.equal(find('.incident-row td.incident-department:contains(' + DEPARTMENT + ')').length, 1, 'Incident department appears in listing');\n        assert.equal(find('.incident-row td.incident-category:contains(' + INCIDENT_CATEGORY + ')').length, 1, 'Incident category appears in listing');\n        assert.equal(find('.incident-row td.incident-category-item:contains(' + INCIDENT_CATEGORY_ITEM + ')').length, 1, 'Incident category item appears in listing');\n        assert.equal(find('.incident-row td.incident-status:last').text(), 'Reported', 'Incident status of reported appears in listing');\n        visit('/incident/edit/56c64d71-ba30-4271-b899-f6f6b031f589');\n      });\n      andThen(function () {\n        var incidentDate = (0, _moment['default'])(1489004400000);\n        assert.equal(currentURL(), '/incident/edit/56c64d71-ba30-4271-b899-f6f6b031f589', 'Incident edit url is correct');\n        assert.equal(find('.sentinel-event input:checked').length, 1, 'Sentinel Event checkbox is checked');\n        assert.equal(find('.incident-date input').val(), incidentDate.format(DATE_TIME_FORMAT), 'Date of incident displays');\n        assert.equal(find('.incident-department .tt-input').val(), 'Reception', 'Incident department displays');\n        assert.equal(find('.reported-to input').val(), 'Jane Bagadonuts', 'Reported to displays.');\n        assert.equal(find('.incident-category option:selected').text().trim(), 'Accident or Injury', 'Category displays');\n        assert.equal(find('.incident-category-item option:selected').text().trim(), 'Patient', 'Category item displays');\n        assert.equal(find('.patient-name .tt-input').val(), 'Joe Bagadonuts - P00001', 'Patient impacted name displays');\n        assert.equal(find('.patient-id').text(), 'P00001', 'Patient id displays');\n        assert.equal(find('.incident-description textarea').val(), 'Patient fell on wet floor.', 'Description displays');\n        fillIn('.incident-description textarea', INCIDENT_DESCRIPTION);\n      });\n      andThen(function () {\n        assert.equal(find('.incident-description textarea').val(), INCIDENT_DESCRIPTION, 'Updated description displays');\n        click('.panel-footer button:contains(Update)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Incident Saved', ' Incident Saved modal appears');\n        click('.modal-footer button:contains(Ok)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        click('#notes tr button:contains(Edit)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Edit Note', ' Edit Note modal appears');\n        fillIn('.note-description textarea', EDIT_INCIDENT_NOTE);\n      });\n      andThen(function () {\n        click('.modal-footer button:contains(Update)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.note-description').text(), EDIT_INCIDENT_NOTE, 'Note is updated');\n        click('#notes tr button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Note', ' Delete Note modal appears');\n        click('.modal-footer button:contains(Delete)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.note-description').length, 0, 'Note has been deleted');\n        click('.tab-nav li a:contains(Attachment)');\n        waitToAppear('#attachments td a:contains(Download)');\n      });\n      andThen(function () {\n        assert.equal(find('#attachments td a:contains(Download)').length, 1, 'Download button appears for attachment');\n        click('#attachments td button:contains(Edit)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Edit Attachment', ' Edit Attachment modal appears');\n        fillIn('.attachment-title input', 'Incident Report Form');\n      });\n      andThen(function () {\n        click('.modal-footer button:contains(Update)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('#attachments td:contains(Incident Report Form)').length, 1, 'Updated attachment title appears');\n        click('#attachments td button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Attachment', ' Delete Attachment modal appears');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        assert.equal(find('#attachments td:contains(Incident Report Form)').length, 0, 'Deleted attachment disappears');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Incident deletion', function (assert) {\n    runWithPouchDump('incident', function () {\n      authenticateUser();\n      visit('/incident');\n      andThen(function () {\n        assert.equal(currentURL(), '/incident', 'Incident listing url is correct');\n        assert.equal(find('.incident-row').length, 1, 'One incident appears');\n        click('.incident-row button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Incident', ' Delete Incident modal appears');\n        click('.modal-footer button:contains(Delete)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.incident-row').length, 0, 'Incident diappears from list');\n      });\n    });\n  });\n\n  function addItem(assert, itemName) {\n    click('button:contains(Add Item)');\n    waitToAppear('.modal-dialog');\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Add Category Item', 'Add Category Item modal appears');\n      fillIn('.incident-category-item input', itemName);\n    });\n    andThen(function () {\n      click('.modal-footer button:contains(Add)');\n      waitToAppear('.incident-category-item:contains(' + itemName + ')');\n    });\n    andThen(function () {\n      assert.equal(find('.incident-category-item:contains(' + itemName + ')').length, 1, 'New incident category item appears');\n    });\n  }\n});","define('hospitalrun/tests/acceptance/incident-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/incident-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/incident-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/inventory-test', ['exports', 'ember', 'qunit', 'moment', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _moment, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | inventory', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /inventory', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/inventory');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory');\n        findWithAssert('button:contains(new request)');\n        findWithAssert('button:contains(inventory received)');\n        findWithAssert('p:contains(No requests found. )');\n        findWithAssert('a:contains(Create a new request?)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Adding a new inventory item', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/inventory/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/edit/new');\n      });\n      fillIn('.test-inv-name input', 'Biogesic');\n      select('.test-inv-rank', 'B');\n      fillIn('textarea', 'Biogesic nga medisina');\n      select('.test-inv-type', 'Medication');\n      fillIn('.test-inv-cross input', '2600');\n      fillIn('.test-inv-reorder input', '100');\n      fillIn('.test-inv-price input', '5');\n      select('.test-inv-dist-unit', 'tablet');\n      fillIn('.test-inv-quantity input', '1000');\n      fillIn('.test-inv-cost input', '4000');\n      select('.test-inv-unit', 'tablet');\n      typeAheadFillIn('.test-vendor', 'Alpha Pharmacy');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Inventory Item Saved', 'Inventory Item was saved successfully');\n      });\n      click('button:contains(Ok)');\n\n      andThen(function () {\n        findWithAssert('button:contains(Add Purchase)');\n        findWithAssert('button:contains(Update)');\n        findWithAssert('button:contains(Return)');\n      });\n\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/listing');\n        assert.equal(find('tr').length, 2, 'One item is listed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Items with negative quantites should not be saved', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/inventory/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/edit/new');\n      });\n      fillIn('.test-inv-name input', 'Biogesic');\n      select('.test-inv-rank', 'B');\n      fillIn('textarea', 'Biogesic nga medisina');\n      select('.test-inv-type', 'Medication');\n      fillIn('.test-inv-cross input', '2600');\n      fillIn('.test-inv-reorder input', '100');\n      fillIn('.test-inv-price input', '5');\n      select('.test-inv-dist-unit', 'tablet');\n      fillIn('.test-inv-quantity input', '-1000');\n      fillIn('.test-inv-cost input', '4000');\n      select('.test-inv-unit', 'tablet');\n      typeAheadFillIn('.test-vendor', 'Alpha Pharmacy');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Warning!!!!', 'Inventory Item with negative quantity should not be saved.');\n      });\n      click('button:contains(Ok)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/edit/new');\n        findWithAssert('button:contains(Add)');\n        findWithAssert('button:contains(Cancel)');\n        assert.equal(find('.test-inv-quantity .help-block').text(), 'not a valid number', 'Error message should be present for invalid quantities');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Visiting /inventory/barcode', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory/listing');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/listing');\n        click('a:contains(Barcode)');\n        andThen(function () {\n          assert.equal(currentURL(), '/inventory/barcode/igbmk5zf_is');\n          findWithAssert('.panel-body img[src^=\"data:image\"]');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Deleting the last inventory item', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory/listing');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/listing');\n        click('button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Delete Item', 'Deleting confirmation.');\n        });\n        click('.modal-content button:contains(Delete)');\n        waitToAppear('.panel-body .alert-info');\n        andThen(function () {\n          assert.equal(currentURL(), '/inventory/listing');\n          findWithAssert('a:contains(Create a new record?)');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Creating a new inventory request', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory/request/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/request/new');\n      });\n      typeAheadFillIn('.test-inv-item', 'Biogesic - m00001 (1000 available)');\n      fillIn('.test-inv-quantity input', 500);\n      typeAheadFillIn('.test-delivery-location', 'Harare');\n      typeAheadFillIn('.test-delivery-aisle', 'C100');\n      typeAheadFillIn('.test-bill-to', 'Accounts Dept');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Request Updated', 'New request has been saved');\n      });\n      click('button:contains(Ok)');\n      andThen(function () {\n        findWithAssert('button:contains(Fulfill)');\n        findWithAssert('button:contains(Cancel)');\n      });\n      click('button:contains(Cancel)');\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory');\n        assert.equal(find('tr').length, 3, 'Two requests are now displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Fulfilling an inventory request', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory');\n        var tableRows = find('tr').length;\n        assert.equal(tableRows, 2, 'One request not fulfilled');\n      });\n      click('button:contains(Fulfill)');\n\n      andThen(function () {\n        findWithAssert('button:contains(Fulfill)');\n        findWithAssert('button:contains(Cancel)');\n      });\n      waitToAppear('.inventory-location option:contains(No Location)');\n      andThen(function () {\n        click('button:contains(Fulfill)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        var modalTitle = find('.modal-title');\n        assert.equal(modalTitle.text(), 'Request Fulfilled', 'Inventory request has been fulfilled');\n      });\n\n      click('button:contains(Ok)');\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Deleting an inventory request', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory', 'Navigated to /inventory');\n        assert.equal(find('button:contains(Delete)').length, 1, 'There is one request');\n      });\n\n      click('button:contains(Delete)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Item', 'Deleting confirmation');\n      });\n\n      click('.modal-content button:contains(Delete)');\n      waitToAppear('.panel-body .alert-info');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory', 'Navigated to /inventory');\n        assert.equal(find('button:contains(Delete)').length, 0, 'Request was deleted');\n      });\n    });\n  });\n\n  (0, _qunit.test)('User with add_inventory_request and without fulfill_inventory rights should not be able to delete others\\' requests', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser({\n        name: 'nurse.mgr',\n        roles: ['Nurse Manager', 'user'],\n        role: 'Nurse Manager'\n      });\n      visit('/inventory');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory', 'Navigated to /inventory');\n        assert.equal(find('button:contains(Delete)').length, 0, 'User doesn\\'t see Delete button');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Receiving inventory', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory/batch/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/batch/new');\n      });\n      typeAheadFillIn('.test-vendor', 'Alpha Pharmacy');\n      fillIn('.test-invoice-number input', 'P2345');\n      typeAheadFillIn('.test-inv-item', 'Biogesic - m00001');\n      fillIn('.test-inv-quantity input', 500);\n      fillIn('.test-inv-cost input', '2000');\n      waitToAppear('.inventory-distribution-unit');\n      andThen(function () {\n        click('button:contains(Save)');\n        waitToAppear('.modal-title');\n      });\n      andThen(function () {\n        var modalTitle = find('.modal-title');\n        assert.equal(modalTitle.text(), 'Inventory Purchases Saved', 'Inventory has been received');\n      });\n      click('button:contains(Ok)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/listing');\n      });\n    });\n  });\n\n  testSimpleReportForm('Detailed Adjustment');\n  testSimpleReportForm('Detailed Purchase');\n  testSimpleReportForm('Detailed Stock Usage');\n  testSimpleReportForm('Detailed Stock Transfer');\n  testSimpleReportForm('Detailed Expenses');\n  testSimpleReportForm('Expiration Date');\n  testSimpleReportForm('Summary Expenses');\n  testSimpleReportForm('Summary Purchase');\n  testSimpleReportForm('Summary Stock Usage');\n  testSimpleReportForm('Summary Stock Transfer');\n  testSimpleReportForm('Finance Summary');\n  testSingleDateReportForm('Inventory By Location');\n  testSingleDateReportForm('Inventory Valuation');\n\n  function testSimpleReportForm(reportName) {\n    (0, _qunit.test)(reportName + ' report can be generated', function (assert) {\n      runWithPouchDump('default', function () {\n        authenticateUser();\n        visit('/inventory/reports');\n        andThen(function () {\n          assert.equal(currentURL(), '/inventory/reports');\n        });\n        var startDate = (0, _moment['default'])('2015-10-01');\n        var endDate = (0, _moment['default'])('2015-10-31');\n        selectDate('.test-start-date input', startDate.toDate());\n        selectDate('.test-end-date input', endDate.toDate());\n        select('#report-type', '' + reportName);\n        click('button:contains(Generate Report)');\n        waitToAppear('.panel-title');\n\n        andThen(function () {\n          var reportTitle = reportName + ' Report ' + startDate.format('l') + ' - ' + endDate.format('l');\n          assert.equal(find('.panel-title').text().trim(), reportTitle, reportName + ' Report generated');\n          var exportLink = findWithAssert('a:contains(Export Report)');\n          assert.equal($(exportLink).attr('download'), reportTitle + '.csv');\n        });\n      });\n    });\n  }\n\n  function testSingleDateReportForm(reportName) {\n    (0, _qunit.test)(reportName + ' report can be generated', function (assert) {\n      runWithPouchDump('default', function () {\n        authenticateUser();\n        visit('/inventory/reports');\n        andThen(function () {\n          assert.equal(currentURL(), '/inventory/reports');\n        });\n        select('#report-type', '' + reportName);\n        click('button:contains(Generate Report)');\n        waitToAppear('.panel-title');\n\n        andThen(function () {\n          var reportTitle = reportName + ' Report ' + (0, _moment['default'])().format('l');\n          assert.equal(find('.panel-title').text().trim(), reportTitle, reportName + ' Report generated');\n          var exportLink = findWithAssert('a:contains(Export Report)');\n          assert.equal($(exportLink).attr('download'), reportTitle + '.csv');\n        });\n      });\n    });\n  }\n});","define('hospitalrun/tests/acceptance/inventory-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/inventory-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/inventory-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/invoices-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | invoices', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /invoices', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n      });\n    });\n  });\n\n  (0, _qunit.test)('create invoice', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices/edit/new');\n      });\n      typeAheadFillIn('.invoice-patient', 'Joe Bagadonuts - TCH 00001');\n      waitToAppear('.invoice-visit option:contains((Admission))');\n      andThen(function () {\n        select('.invoice-visit', '(Admission)');\n        fillIn('.external-invoice-no input', 'inv000002');\n      });\n      waitToAppear('button:contains(Update)');\n      andThen(function () {\n        click('button:contains(Update)');\n      });\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Invoice Saved', 'Invoice was saved successfully');\n      });\n    });\n  });\n\n  (0, _qunit.test)('print invoice', function (assert) {\n    runWithPouchDump('billing', function () {\n      window.print = _ember['default'].K; // Disable browser print dialog.\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n        assert.equal(find('.invoice-number:contains(inv00001)').length, 1, 'Invoice is available for printing');\n        click('button:contains(Edit)');\n        waitToAppear('button:contains(Print)');\n      });\n      andThen(function () {\n        click('button:contains(Print)');\n      });\n      andThen(function () {\n        assert.equal(find('.invoices-review').length, 1, 'Invoice is displayed for printing');\n      });\n    });\n  });\n\n  // test pricing profile\n  (0, _qunit.test)('pricing profiles', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/profiles');\n      andThen(function () {\n        assert.equal(find('.btn-primary:contains(+ new item)').length, 1, 'We can add a new pricing profile');\n        click('button:contains(+ new item)');\n        waitToAppear('h4:contains(New Pricing Profile)');\n      });\n      // % discount\n      andThen(function () {\n        fillIn('.pricing-profile-name input', '50% profile');\n        fillIn('.pricing-profile-percentage input', '50');\n        click('button:contains(Add)');\n        waitToAppear('button:contains(Ok)');\n        click('button:contains(Ok)');\n      });\n      andThen(function () {\n        click('button:contains(+ new item)');\n        waitToAppear('h4:contains(New Pricing Profile)');\n      });\n      // flat discount\n      andThen(function () {\n        fillIn('.pricing-profile-name input', '$100 discount');\n        fillIn('.pricing-profile-discount input', '100');\n        click('button:contains(Add)');\n        waitToAppear('button:contains(Ok)');\n        click('button:contains(Ok)');\n      });\n      andThen(function () {\n        click('button:contains(+ new item)');\n        waitToAppear('h4:contains(New Pricing Profile)');\n      });\n      // flat fee\n      andThen(function () {\n        fillIn('.pricing-profile-name input', '$150 fee');\n        fillIn('.pricing-set-fee input', '150');\n        click('button:contains(Add)');\n        waitToAppear('button:contains(Ok)');\n        click('button:contains(Ok)');\n      });\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n        assert.equal(find('.invoice-number:contains(inv00001)').length, 1, 'Invoice is available for modifying');\n        click('button:contains(Edit)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete invoice', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n        assert.equal(find('.invoice-number:contains(inv00001)').length, 1, 'Invoice is displayed for deletion');\n      });\n      click('button:contains(Delete)');\n      andThen(function () {\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.alert').text().trim(), 'Are you sure you wish to delete inv00001?', 'Invoice deletion confirm displays');\n      });\n      click('button:contains(Delete):last');\n      waitToDisappear('.invoice-number:contains(inv00001)');\n      andThen(function () {\n        assert.equal(find('.invoice-number:contains(inv00001)').length, 0, 'Invoice is deleted');\n      });\n    });\n  });\n\n  (0, _qunit.test)('add payment', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n      });\n      click('button:contains(Add Payment)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Payment', 'Add Payment modal displays');\n      });\n      fillIn('.payment-amount input', 100);\n      click('.update-payment-btn');\n      waitToAppear('.modal-title:contains(Payment Added)');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Payment Added', 'Payment was saved successfully');\n        click('.modal-footer button:contains(Ok)');\n        waitToDisappear('.modal-dialog');\n      });\n    });\n  });\n\n  (0, _qunit.test)('add deposit', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n      });\n      click('button:contains(add deposit)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Deposit', 'Add Deposit modal displays');\n      });\n      fillIn('.payment-amount input', 140);\n      typeAheadFillIn('.payment-patient', 'Joe Bagadonuts - TCH 00001');\n      click('.update-payment-btn');\n      waitToAppear('.modal-title:contains(Deposit Added)');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Deposit Added', 'Deposit was saved successfully');\n      });\n    });\n  });\n\n  (0, _qunit.test)('cashier role', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser({\n        name: 'cashier@hospitalrun.io',\n        roles: ['Cashier', 'user'],\n        role: 'Cashier',\n        prefix: 'p1'\n      });\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n        assert.equal(find('.primary-section-link').length, 2, 'Should have 2 navigations');\n        assert.equal(find('.primary-section-link:contains(Scheduling)').length, 1, 'should see Scheduling navigation');\n        assert.equal(find('.primary-section-link:contains(Billing)').length, 1, 'should see Billing navigation');\n\n        assert.equal(find('li:contains(Billed)').length, 1, 'should see Billed selection');\n        assert.equal(find('li:contains(Drafts)').length, 1, 'should see Drafts selection');\n        assert.equal(find('li:contains(All Invoices)').length, 1, 'should see All Invoices selection');\n      });\n      click('a:contains(Billing)');\n      andThen(function () {\n        assert.equal(find('.category-sub-item').length, 2, 'Should have 2 sub navigations');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/invoices-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/invoices-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/invoices-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/labs-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | labs', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /labs', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/labs');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/labs');\n        findWithAssert('a:contains(Create a new record?)');\n        findWithAssert('button:contains(new lab)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Adding a new lab request', function (assert) {\n    runWithPouchDump('labs', function () {\n      authenticateUser();\n      visit('/labs');\n\n      click('button:contains(new lab)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/labs/edit/new');\n      });\n\n      typeAheadFillIn('.test-patient-name', 'Lennex Zinyando - P00017');\n      typeAheadFillIn('.test-lab-type', 'Chest Scan');\n      fillIn('.test-result-input input', 'Chest is clear');\n      fillIn('textarea', 'Dr test ordered another scan');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Lab Request Saved', 'Lab Request was saved successfully');\n        findWithAssert('.patient-summary');\n      });\n\n      click('.modal-footer button:contains(Ok)');\n\n      andThen(function () {\n        assert.equal(find('.patient-summary').length, 1, 'Patient summary is displayed');\n      });\n\n      click('.panel-footer button:contains(Return)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/labs');\n        assert.equal(find('tr').length, 3, 'Two lab requests are displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Marking a lab request as completed', function (assert) {\n    runWithPouchDump('labs', function () {\n      authenticateUser();\n      visit('/labs/completed');\n\n      andThen(function () {\n        assert.equal(find('.alert-info').text().trim(), 'No completed items found.', 'No completed requests are displayed');\n      });\n\n      visit('/labs');\n      click('button:contains(Edit)');\n      click('button:contains(Complete)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Lab Request Completed', 'Lab Request was completed successfully');\n      });\n\n      click('.modal-footer button:contains(Ok)');\n      click('.panel-footer button:contains(Return)');\n      visit('/labs/completed');\n\n      andThen(function () {\n        assert.equal(find('tr').length, 2, 'One completed request is displayed');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/labs-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/labs-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/labs-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/login-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app', 'ember-cli-fake-server'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp, _emberCliFakeServer) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | login', {\n    beforeEach: function beforeEach() {\n      _emberCliFakeServer['default'].start();\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _emberCliFakeServer['default'].stop();\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting / redirects user to login', function (assert) {\n    assert.expect(1);\n    runWithPouchDump('default', function () {\n      visit('/');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/login');\n      });\n    });\n  });\n\n  (0, _qunit.test)('login with correct credentials', function (assert) {\n    login(assert);\n  });\n  (0, _qunit.test)('login with correct credentials but space around username', function (assert) {\n    login(assert, true);\n  });\n\n  (0, _qunit.test)('incorrect credentials shows an error message on the screen', function (assert) {\n    if (!window.ELECTRON) {\n      assert.expect(2);\n    }\n    runWithPouchDump('default', function () {\n      visit('/');\n\n      var errorMessage = 'Username or password is incorrect.';\n\n      (0, _emberCliFakeServer.stubRequest)('post', '/auth/login', function (request) {\n        assert.equal(request.requestBody, 'name=hradmin&password=tset', 'credential are sent to the server');\n        request.error({ 'error': 'unauthorized', 'reason': errorMessage });\n      });\n\n      fillIn('#identification', 'hradmin');\n      fillIn('#password', 'tset');\n      click('button:contains(Sign in)');\n      waitToAppear('.form-signin-alert');\n\n      andThen(function () {\n        assert.equal(find('.form-signin-alert').text(), errorMessage, 'Error reason is shown');\n      });\n    });\n  });\n\n  function login(assert, spaceAroundUsername) {\n    if (!window.ELECTRON) {\n      assert.expect(2);\n    }\n    runWithPouchDump('default', function () {\n      visit('/login');\n\n      (0, _emberCliFakeServer.stubRequest)('post', '/auth/login', function (request) {\n        assert.equal(request.requestBody, 'name=hradmin&password=test', !spaceAroundUsername ? 'credential are sent to the server' : 'username trimmed and credential are sent to the server');\n        request.ok({ 'ok': true, 'name': 'hradmin', 'roles': ['System Administrator', 'admin', 'user'] });\n      });\n\n      andThen(function () {\n        assert.equal(currentURL(), '/login');\n      });\n\n      fillIn('#identification', !spaceAroundUsername ? 'hradmin' : ' hradmin');\n      fillIn('#password', 'test');\n      click('button:contains(Sign in)');\n      andThen(function () {\n        waitToAppear('.sidebar-nav-logo');\n      });\n    });\n  }\n});","define('hospitalrun/tests/acceptance/login-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/login-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/login-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/medication-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | medication', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /medication', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/medication');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication');\n        findWithAssert('button:contains(new request)');\n        findWithAssert('button:contains(dispense medication)');\n        findWithAssert('button:contains(return medication)');\n        findWithAssert('p:contains(No items found. )');\n        findWithAssert('a:contains(Create a new medication request?)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('creating a new medication request', function (assert) {\n    runWithPouchDump('medication', function () {\n      authenticateUser();\n      visit('/medication/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication/edit/new');\n      });\n      typeAheadFillIn('.test-patient-input', 'Lennex Zinyando - P00017');\n      waitToAppear('.have-inventory-items');\n      andThen(function () {\n        typeAheadFillIn('.test-medication-input', 'Biogesic - m00001 (950 available)');\n      });\n      andThen(function () {\n        fillIn('textarea', '30 Biogesic Pills');\n        fillIn('.test-quantity-input input', '30');\n      });\n      waitToDisappear('.disabled-btn:contains(Add)');\n      andThen(function () {\n        click('button:contains(Add)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Medication Request Saved', 'New medication request has been saved');\n      });\n\n      click('button:contains(Ok)');\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/medication');\n        assert.equal(find('tr').length, 3, 'New medication request is now displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('fulfilling a medication request', function (assert) {\n    runWithPouchDump('medication', function () {\n      authenticateUser();\n      visit('/medication');\n      click('button:contains(Fulfill)');\n\n      andThen(function () {\n        assert.equal(find('.patient-summary').length, 1, 'Patient summary is displayed');\n      });\n      waitToAppear('.inventory-location option:contains(No Location)');\n      andThen(function () {\n        click('button:contains(Fulfill)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Medication Request Fulfilled', 'Medication Request has been Fulfilled');\n      });\n\n      click('button:contains(Ok)');\n      click('button:contains(Return)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication');\n        findWithAssert('p:contains(No items found. )');\n        findWithAssert('a:contains(Create a new medication request?)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('complete a medication request', function (assert) {\n    runWithPouchDump('medication', function () {\n      authenticateUser();\n      visit('/medication/completed');\n      assert.equal(find('.clickable').length, 0, 'Should have 0 completed request');\n      visit('/medication');\n      click('button:contains(Fulfill)');\n\n      andThen(function () {\n        assert.equal(find('.patient-summary').length, 1, 'Patient summary is displayed');\n      });\n      waitToAppear('.inventory-location option:contains(No Location)');\n      andThen(function () {\n        click('button:contains(Fulfill)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Medication Request Fulfilled', 'Medication Request has been Fulfilled');\n      });\n\n      click('button:contains(Ok)');\n      visit('/medication/completed');\n      andThen(function () {\n        assert.equal(currentURL(), '/medication/completed');\n        assert.equal(find('.clickable').length, 1, 'Should have 1 completed request');\n      });\n    });\n  });\n\n  (0, _qunit.test)('returning medication', function (assert) {\n    runWithPouchDump('medication', function () {\n      authenticateUser();\n      visit('/medication/return/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication/return/new');\n      });\n      waitToAppear('.have-inventory-items');\n      andThen(function () {\n        typeAheadFillIn('.test-medication-input', 'Biogesic - m00001');\n      });\n      andThen(function () {\n        fillIn('.test-medication-quantity input', 30);\n        waitToDisappear('.disabled-btn:contains(Return Medication)');\n      });\n      andThen(function () {\n        click('button:contains(Return Medication)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Medication Returned', 'Medication has been return successfully');\n      });\n      click('button:contains(Ok)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/medication-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/medication-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/medication-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/operative-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  var ADDITIONAL_NOTES = 'Additional Notes here';\n  var CASE_COMPLEXITY = 7;\n  var OPERATION_DESCRIPTION = 'Operation Description Goes Here';\n  var OPERATION_SURGEON = 'Dr Nick';\n  var PROCEDURE_FIX_ARM = 'fix broken arm';\n  var PROCEDURE_HIP = 'hip adductor release';\n\n  (0, _qunit.module)('Acceptance | Operative Plan and Operation Report', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('Plan and report creation', function (assert) {\n    runWithPouchDump('operative', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients', 'Patients listing url is correct');\n        click('button:contains(Edit)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/cd572865-dcc0-441e-a2ad-be400dc256da', 'Patient edit URL is correct');\n        assert.equal(find('a.primary-diagnosis:contains(Broken Arm)').length, 1, 'Primary diagnosis appears');\n        assert.equal(find('a.secondary-diagnosis:contains(Tennis Elbow)').length, 1, 'Secondary diagnosis appears');\n        click('a:contains(Add Operative Plan)');\n        waitToAppear('span.secondary-diagnosis:contains(Tennis Elbow)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/operative-plan/new?forPatientId=cd572865-dcc0-441e-a2ad-be400dc256da', 'New operative plan URL is correct');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient header displays');\n        assert.equal(find('.view-current-title').text(), 'New Operative Plan', 'New operative plan title is correct');\n        assert.equal(find('span.primary-diagnosis:contains(Broken Arm)').length, 1, 'Primary diagnosis appears as read only');\n        assert.equal(find('span.secondary-diagnosis:contains(Tennis Elbow)').length, 1, 'Secondary diagnosis appears as read only');\n        fillIn('.operation-description textarea', OPERATION_DESCRIPTION);\n        typeAheadFillIn('.procedure-description', PROCEDURE_HIP);\n      });\n      andThen(function () {\n        click('button:contains(Add Procedure)');\n        waitToAppear('.procedure-listing td.procedure-description');\n      });\n      andThen(function () {\n        assert.equal(find('.procedure-listing td.procedure-description').text(), PROCEDURE_HIP, 'Added procedure displays in procedure table');\n        typeAheadFillIn('.procedure-description', 'Delete Me');\n      });\n      andThen(function () {\n        click('button:contains(Add Procedure)');\n        waitToAppear('.procedure-listing td.procedure-description:contains(Delete Me)');\n      });\n      andThen(function () {\n        findWithAssert('.procedure-listing td.procedure-description:contains(Delete Me)');\n        click('.procedure-listing tr:last button:contains(Delete)');\n      });\n      andThen(function () {\n        assert.equal(find('.procedure-listing td.procedure-description:contains(Delete Me)').length, 0, 'Procedure is properly deleted');\n        typeAheadFillIn('.procedure-description', PROCEDURE_FIX_ARM); // Leave typeahead filled in with value to automatically add on save.\n        typeAheadFillIn('.plan-surgeon', OPERATION_SURGEON);\n        assert.equal(find('.plan-status select').val(), 'planned', 'Plan status is set to planned');\n        fillIn('.case-complexity input', CASE_COMPLEXITY);\n        fillIn('.admission-instructions textarea', 'Get blood tests done on admission.');\n        fillIn('.additional-notes textarea', ADDITIONAL_NOTES);\n      });\n      andThen(function () {\n        click('.panel-footer button:contains(Add)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Plan Saved', 'Plan saved modal displays');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Edit Operative Plan', 'Edit operative plan title is correct');\n        assert.equal(find('.procedure-listing td.procedure-description:contains(' + PROCEDURE_FIX_ARM + ')').length, 1, 'Procedure from typeahead gets added to procedure list on save');\n        click('button:contains(Return)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/cd572865-dcc0-441e-a2ad-be400dc256da', 'Return goes back to patient screen');\n        assert.equal(find('a:contains(Current Operative Plan)').length, 1, 'Link to newly created plan appears');\n        click('a:contains(Current Operative Plan)');\n      });\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Edit Operative Plan', 'Edit operative plan title is correct');\n        assert.equal(find('button:contains(Complete Plan)').length, 1, 'Complete Plan button appears');\n        click('button:contains(Complete Plan)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Plan Completed', 'Plan completed modal displays');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Edit Operation Report', 'Edit Operation Report title is correct');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient header displays');\n        assert.equal(find('a.primary-diagnosis:contains(Broken Arm)').length, 1, 'Primary diagnosis appears as editable');\n        assert.equal(find('a.secondary-diagnosis:contains(Tennis Elbow)').length, 1, 'Secondary diagnosis appears as  editable');\n        assert.equal(find('.operation-description textarea').val(), OPERATION_DESCRIPTION, 'Operation description is copied from operative plan');\n        assert.equal(find('.operation-surgeon .tt-input').val(), OPERATION_SURGEON, 'Surgeon is copied from operative plan');\n        assert.equal(find('.case-complexity input').val(), CASE_COMPLEXITY, 'Case complexity is copied from operative plan');\n        assert.equal(find('.procedure-listing td.procedure-description:contains(' + PROCEDURE_HIP + ')').length, 1, 'Procedure ' + PROCEDURE_HIP + ' is copied from operative plan');\n        assert.equal(find('.procedure-listing td.procedure-description:contains(' + PROCEDURE_FIX_ARM + ')').length, 1, 'Procedure ' + PROCEDURE_FIX_ARM + ' is copied from operative plan');\n        typeAheadFillIn('.operation-assistant', 'Dr Cindy');\n      });\n      andThen(function () {\n        click('.panel-footer button:contains(Update)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Report Saved', 'Report Saved modal displays');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        click('button:contains(Return)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/cd572865-dcc0-441e-a2ad-be400dc256da', 'Patient edit URL is correct');\n        assert.equal(find('a.patient-procedure:contains(fix broken arm)').length, 1, 'Procedure/operative report shows on patient header');\n        click('a.patient-procedure:contains(fix broken arm)');\n      });\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Edit Operation Report', 'Operation Report appears for editing');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/operative-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/operative-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/operative-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/outpatient-test', ['exports', 'ember', 'qunit', 'moment', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _moment, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | outpatient', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('Check In/Check Out Existing outpatient', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      visit('/patients/outpatient');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/outpatient', 'Outpatient url is correct');\n        assert.equal(find('.view-current-title').text(), 'Today\\'s Outpatients', 'Title is correct');\n        click('button:contains(Patient Check In)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/checkin', 'Check In url is correct');\n        typeAheadFillIn('.patient-name', 'Joe Bagadonuts - P00001');\n        waitToAppear('.patient-name .ps-info-data');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n        assert.equal(find('.new-patient-checkbox input:checked').length, 0, 'New Patient checkbox is not checked');\n        select('.visit-type', 'Clinic');\n        click('button:contains(Check In)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Checked In', 'Patient has been checked in');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        findWithAssert('button:contains(Check Out)');\n        click('button:contains(Return)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/outpatient', 'Returned to Outpatient');\n        assert.equal(find('.outpatient-list td:contains(Joe Bagadonuts)').length, 1, 'Checked in patient appears in list');\n        click('button:contains(Check Out)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Check Out', 'Patient checkout confirmation displays');\n        click('button:contains(Ok)');\n        waitToAppear('.modal-title:contains(Patient Checked Out)');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Checked Out', 'Patient has been checked out confirmation');\n        click('button:contains(Ok)');\n      });\n      andThen(function () {\n        assert.equal(find('.outpatient-list td:contains(Joe Bagadonuts)').length, 0, 'Checked out patient no longer appears');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Check In/Check Out new outpatient', function (assert) {\n    runWithPouchDump('patient', function () {\n      var visitDate = (0, _moment['default'])('2015-10-01');\n      var visitLocation = 'Outpatient Followup';\n      authenticateUser();\n      visit('/patients/outpatient');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/outpatient', 'Outpatient url is correct');\n        assert.equal(find('.view-current-title').text(), 'Today\\'s Outpatients', 'Title is correct');\n        click('button:contains(Patient Check In)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/checkin', 'Check In url is correct');\n        typeAheadFillIn('.patient-name', 'Jane Bagadonuts');\n      });\n      andThen(function () {\n        assert.equal(find('.new-patient-checkbox input:checked').length, 1, 'New Patient checkbox is checked');\n        selectDate('.checkin-date input', visitDate.toDate());\n        select('.visit-type', 'Followup');\n        typeAheadFillIn('.visit-location', visitLocation);\n      });\n      andThen(function () {\n        click('button:contains(Check In)');\n        waitToAppear('.modal-title:contains(New Patient)');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'New Patient', 'New Patient dialog appears');\n        click('.modal-footer button:contains(Add)');\n        waitToAppear('.modal-title:contains(Patient Checked In)');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Checked In', 'Patient has been checked in');\n        assert.equal(find('.modal-body').text().trim(), 'Jane Bagadonuts has been created and checked in.', 'Patient has been created and checked in');\n        click('button:contains(Ok)');\n      });\n      andThen(function () {\n        findWithAssert('button:contains(Check Out)');\n        click('button:contains(Return)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/outpatient', 'Returned to Outpatient');\n        assert.equal(find('.outpatient-list td:contains(Jane Bagadonuts)').length, 0, 'Checked in patient does not appears in list because of date');\n        selectDate('.outpatient-date input', visitDate.toDate());\n        click('button:contains(Search)');\n        waitToAppear('.view-current-title:contains(Outpatients for ' + visitDate.format('l') + ')');\n      });\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Outpatients for ' + visitDate.format('l'), 'Title updates to specified date');\n        waitToAppear('.outpatient-list td:contains(Jane Bagadonuts)');\n      });\n      andThen(function () {\n        assert.equal(find('.outpatient-list td:contains(Jane Bagadonuts)').length, 1, 'Checked in patient appears with date filtered.');\n        select('.outpatient-location', 'Hospital');\n        click('button:contains(Search)');\n      });\n      andThen(function () {\n        assert.equal(find('.outpatient-list td:contains(Jane Bagadonuts)').length, 0, 'Checked in patient does not appear because different location.');\n        findWithAssert('.outpatient-location option:contains(' + visitLocation + ')');\n        select('.outpatient-location', visitLocation);\n        click('button:contains(Search)');\n      });\n      andThen(function () {\n        assert.equal(find('.outpatient-list td:contains(Jane Bagadonuts)').length, 1, 'Checked in patient appears with date and location filtered.');\n        visit('/patients');\n      });\n      andThen(function () {\n        assert.equal(find('tr:last td:contains(Jane)').length, 1, 'New patient appears in patient listing.');\n        click('tr:last td button:contains(Check Out)');\n        waitToAppear('.view-current-title:contains(Edit Visit)');\n      });\n      andThen(function () {\n        assert.equal(find('.view-current-title').text(), 'Edit Visit', 'Visit displays on checkout from patient listing');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Jane Bagadonuts', 'Jane Bagadonuts patient record displays');\n        click('button:contains(Check Out)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Checked Out', 'Patient has been checked out confirmation');\n        click('button:contains(Ok)');\n      });\n      andThen(function () {\n        var checkoutDate = (0, _moment['default'])();\n        assert.equal(find('.checkout-date input').val(), checkoutDate.format('l h:mm A'), 'Check Out date properly set');\n        visit('/patients/outpatient');\n      });\n      andThen(function () {\n        assert.equal(find('.outpatient-list td:contains(Jane Bagadonuts)').length, 0, 'Checked out patient no longer appears');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/outpatient-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/outpatient-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/outpatient-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/patient-notes-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | patient notes', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('patient notes crud testing', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/new');\n        fillIn('.test-first-name input', 'John');\n        fillIn('.test-last-name input', 'Doe');\n      });\n      andThen(function () {\n        click('.panel-footer button:contains(Add)');\n        waitToAppear('.message:contains(The patient record for John Doe has been saved)');\n      });\n      andThen(function () {\n        assert.equal(find('.message').text(), 'The patient record for John Doe has been saved.');\n        waitToAppear('.patient-summary');\n      });\n      andThen(function () {\n        findWithAssert('.patient-summary');\n        click('[data-test-selector=visits-tab]');\n      });\n      andThen(function () {\n        findWithAssert('#visits');\n        click('button:contains(New Visit)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/new', 'Now in add visiting information route');\n        click('.panel-footer button:contains(Add)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Visit Saved', 'New visit has been saved');\n        click('button:contains(Ok)');\n      });\n      andThen(function () {\n        click('[data-test-selector=notes-tab]');\n      });\n      andThen(function () {\n        assert.equal(find('button:contains(New Note)').length, 1, 'New Note button in visible');\n        click('button:contains(New Note)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'New Note for John Doe', 'Notes modal appeared');\n        fillIn('.test-note-content textarea', 'This is a note.');\n        fillIn('.test-note-attribution input', 'Dr. Nick');\n      });\n      andThen(function () {\n        click('.modal-footer button:contains(Add)');\n        waitToDisappear('.modal-dialog');\n        waitToAppear('#visit-notes table tr td:contains(This is a note.)');\n      });\n      andThen(function () {\n        assert.equal(find('#visit-notes table tr td:contains(This is a note.)').length, 1, 'Successfully added note.');\n        click('#visit-notes table tr td button:contains(Edit)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        fillIn('.test-note-content textarea', 'This is an updated note.');\n      });\n      andThen(function () {\n        click('.modal-footer button:contains(Update)');\n        waitToDisappear('.modal-dialog');\n        waitToAppear('#visit-notes table tr td:contains(This is an updated note.)');\n      });\n      andThen(function () {\n        assert.equal(find('#visit-notes table tr td:contains(This is an updated note.)').length, 1, 'Successfully updated note.');\n        click('#visit-notes table tr td button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Note', 'Delete Note modal appeared');\n        click('.modal-footer button:contains(Ok)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('#visit-notes table tr td:contains(This is an updated note.)').length, 0, 'Successfully deleted note.');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/patient-notes-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/patient-notes-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/patient-notes-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/patients-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | patients', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /patients route', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients');\n        var noPatientsFound = find('[data-test-selector=\"no-patients-found\"]');\n        assert.equal(noPatientsFound.text().trim(), 'No patients found. Create a new patient record?', 'no records found');\n        var newPatientButton = find('button:contains(+ new patient)');\n        assert.equal(newPatientButton.length, 1, 'Add new patient button is visible');\n      });\n      click('button:contains(+ new patient)');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/new');\n      });\n    });\n  });\n\n  (0, _qunit.test)('View reports tab', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients/reports');\n\n      andThen(function () {\n        var generateReportButton = find('button:contains(Generate Report)');\n        assert.equal(currentURL(), '/patients/reports');\n        assert.equal(generateReportButton.length, 1, 'Generate Report button is visible');\n        var reportType = find('[data-test-selector=\"select-report-type\"]');\n        assert.equal(reportType.length, 1, 'Report type select is visible');\n        assert.equal(reportType.find(':selected').text().trim(), 'Admissions Detail', 'Default value selected\"');\n      });\n    });\n  });\n\n  var reportNames = ['Admissions Summary', 'Diagnostic Testing', 'Discharges Detail', 'Discharges Summary', 'Procedures Detail'];\n\n  reportNames.forEach(function (reportName) {\n    testSimpleReportForm(reportName);\n    testExportReportName(reportName);\n  });\n\n  (0, _qunit.test)('View reports tab | Patient Status', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients/reports');\n      select('[data-test-selector=\"select-report-type\"] select', 'Patient Status');\n\n      andThen(function () {\n        var generateReportButton = find('button:contains(Generate Report)');\n        assert.equal(currentURL(), '/patients/reports');\n        assert.equal(generateReportButton.length, 1, 'Generate Report button is visible');\n        var reportType = find('[data-test-selector=\"select-report-type\"] select');\n        assert.equal(reportType.length, 1, 'Report type select is visible');\n        assert.equal(reportType.find(':selected').text().trim(), 'Patient Status', 'Default value selected\"');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Testing admitted patient', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      visit('/patients/admitted');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/admitted');\n        assert.equal(find('.clickable').length, 1, 'One patient is listed');\n      });\n\n      click('button:contains(Discharge)');\n      waitToAppear('.view-current-title:contains(Edit Visit)');\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/03C7BF8B-04E0-DD9E-9469-96A5604F5340', 'should return visits/edit instead');\n      });\n      click('.panel-footer button:contains(Discharge)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Discharged', 'Patient has been discharged');\n      });\n\n      click('button:contains(Ok)');\n      visit('/patients/admitted');\n      waitToAppear('.view-current-title:contains(Admitted Patients)');\n      andThen(function () {\n        assert.equal(find('.clickable').length, 0, 'No patient is listed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Adding a new patient record', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/new');\n      });\n\n      fillIn('.test-first-name input', 'John');\n      fillIn('.test-last-name input', 'Doe');\n      click('.panel-footer button:contains(Add)');\n      waitToAppear('.message:contains(The patient record for John Doe has been saved)');\n      andThen(function () {\n        assert.equal(find('.message').text().trim(), 'The patient record for John Doe has been saved.');\n      });\n\n      waitToAppear('.patient-summary');\n\n      andThen(function () {\n        findWithAssert('.patient-summary');\n      });\n      andThen(function () {\n        findWithAssert('#general');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Delete a patient record', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients', 'Patient listing url is correct');\n        assert.equal(find('tr.clickable td:contains(Joe)').length, 1, 'One patient exists to delete.');\n        click('tr.clickable button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Patient', 'Delete Patient ');\n        assert.equal(find('.modal-body').text().trim(), 'Are you sure you wish to delete Joe Bagadonuts?', 'Patient information appears in modal');\n        click('.modal-footer button:contains(Delete)');\n        waitToDisappear('.modal-dialog');\n        waitToDisappear('tr.clickable td:contains(Joe)');\n      });\n      andThen(function () {\n        assert.equal(find('tr.clickable td:contains(Joe)').length, 0, 'Patient has been successfully deleted.');\n      });\n    });\n  });\n\n  function testSimpleReportForm(reportName) {\n    (0, _qunit.test)('View reports tab | ' + reportName + ' shows start and end dates', function (assert) {\n      runWithPouchDump('default', function () {\n        authenticateUser();\n        visit('/patients/reports');\n        select('[data-test-selector=\"select-report-type\"] select', reportName);\n\n        andThen(function () {\n          var reportStartDate = find('[data-test-selector=\"select-report-start-date\"]');\n          var reportEndDate = find('[data-test-selector=\"select-report-end-date\"]');\n          assert.equal(reportStartDate.length, 1, 'Report start date select is visible');\n          assert.equal(reportEndDate.length, 1, 'Report end date select is visible');\n          var reportType = find('[data-test-selector=\"select-report-type\"] select');\n          assert.equal(reportType.find(':selected').text().trim(), reportName, reportName + ' option selected');\n        });\n      });\n    });\n  }\n\n  function testExportReportName(reportName) {\n    (0, _qunit.test)('View reports tab | Export reports name for ' + reportName + ' shows report name, start and end dates', function (assert) {\n      runWithPouchDump('default', function () {\n        authenticateUser();\n        visit('/patients/reports');\n        select('[data-test-selector=\"select-report-type\"] select', reportName);\n\n        andThen(function () {\n          assert.equal(currentURL(), '/patients/reports');\n        });\n\n        fillIn('[data-test-selector=\"select-report-start-date\"] input', '12/11/2016');\n        fillIn('[data-test-selector=\"select-report-end-date\"] input', '12/31/2016');\n\n        click('button:contains(Generate Report)');\n        waitToAppear('.panel-title');\n\n        andThen(function () {\n          var exportReportButton = findWithAssert('a:contains(Export Report)');\n          assert.equal($(exportReportButton).attr('download'), reportName + ' Report 12/11/2016 - 12/31/2016.csv');\n        });\n      });\n    });\n  }\n});","define('hospitalrun/tests/acceptance/patients-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/patients-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/patients-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/pricing-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  function verifyPricingLists(path, includesPrices, excludesPrices, assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit(path);\n      andThen(function () {\n        assert.equal(currentURL(), path);\n        includesPrices.forEach(function (priceName) {\n          assert.equal(find('.price-name:contains(' + priceName + ')').length, 1, priceName + ' displays');\n        });\n        excludesPrices.forEach(function (priceName) {\n          assert.equal(find('.price-name:contains(' + priceName + ')').length, 0, priceName + ' is not present');\n        });\n      });\n    });\n  }\n\n  (0, _qunit.module)('Acceptance | pricing', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /pricing', function (assert) {\n    var includesPrices = ['Xray Hand', 'Blood test', 'Leg Casting', 'Gauze pad'];\n    verifyPricingLists('/pricing', includesPrices, [], assert);\n  });\n\n  (0, _qunit.test)('visiting /pricing/imaging', function (assert) {\n    var excludesPrices = ['Blood test', 'Leg Casting', 'Gauze pad'];\n    var includesPrices = ['Xray Hand'];\n    verifyPricingLists('/pricing/imaging', includesPrices, excludesPrices, assert);\n  });\n\n  (0, _qunit.test)('visiting /pricing/lab', function (assert) {\n    var excludesPrices = ['Xray Hand', 'Leg Casting', 'Gauze pad'];\n    var includesPrices = ['Blood test'];\n    verifyPricingLists('/pricing/lab', includesPrices, excludesPrices, assert);\n  });\n\n  (0, _qunit.test)('visiting /pricing/procedure', function (assert) {\n    var excludesPrices = ['Xray Hand', 'Blood test', 'Gauze pad'];\n    var includesPrices = ['Leg Casting'];\n    verifyPricingLists('/pricing/procedure', includesPrices, excludesPrices, assert);\n  });\n\n  (0, _qunit.test)('visiting /pricing/ward', function (assert) {\n    var excludesPrices = ['Xray Hand', 'Blood test', 'Leg Casting'];\n    var includesPrices = ['Gauze pad'];\n    verifyPricingLists('/pricing/ward', includesPrices, excludesPrices, assert);\n  });\n\n  (0, _qunit.test)('create new price', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/pricing/edit/new');\n        fillIn('.price-name input', 'Xray Foot');\n        fillIn('.price-amount input', 100);\n        fillIn('.price-department input', 'Imaging');\n        select('.price-category', 'Imaging');\n        click('button:contains(Add):last');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Pricing Item Saved', 'Pricing Item saved');\n          click('button:contains(Ok)');\n        });\n        andThen(function () {\n          click('button:contains(Add Override)');\n          waitToAppear('.modal-dialog');\n        });\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Add Override', 'Add Override Dialog displays');\n          select('.pricing-profile', 'Half off');\n          fillIn('.pricing-override-price input', 20);\n        });\n        andThen(function () {\n          click('button:contains(Add):last');\n          waitToAppear('.override-profile');\n        });\n        andThen(function () {\n          assert.equal(find('.override-profile').text(), 'Half off', 'Pricing override saved');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete price', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/lab');\n      andThen(function () {\n        assert.equal(currentURL(), '/pricing/lab');\n        assert.equal(find('.price-name:contains(Blood test)').length, 1, 'Price exists to delete');\n        click('button:contains(Delete)');\n      });\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.alert').text().trim(), 'Are you sure you wish to delete Blood test?', 'Pricing item is displayed for deletion');\n      });\n      click('button:contains(Delete):last');\n      waitToDisappear('.price-name:contains(Blood test)');\n      andThen(function () {\n        assert.equal(find('.price-name:contains(Blood test)').length, 0, 'Price disappears from price list');\n      });\n    });\n  });\n\n  (0, _qunit.test)('create new pricing profile', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/profiles');\n      andThen(function () {\n        assert.equal(currentURL(), '/pricing/profiles');\n        click('button:contains(+ new item)');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'New Pricing Profile', 'New Pricing Profile modal appears');\n        });\n        fillIn('.pricing-profile-name input', 'Quarter Off');\n        fillIn('.pricing-profile-percentage input', 25);\n        fillIn('.pricing-profile-discount input', 10);\n        andThen(function () {\n          click('button:contains(Add)');\n        });\n        waitToAppear('.modal-title:contains(Pricing Profile Saved)');\n        click('button:contains(Ok)');\n        waitToAppear('.pricing-profile-name:contains(Quarter Off)');\n        andThen(function () {\n          assert.equal(find('.pricing-profile-name:contains(Quarter Off)').text(), 'Quarter Off', 'New price profile displays');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete pricing profile', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/profiles');\n      andThen(function () {\n        assert.equal(currentURL(), '/pricing/profiles');\n        assert.equal(find('.pricing-profile-name:contains(Half off)').length, 1, 'Pricing profile exists to delete');\n        click('button:contains(Delete)');\n      });\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Delete Profile', 'Pricing Profile delete confirmation is displayed');\n      });\n      click('button:contains(Ok)');\n      waitToDisappear('.pricing-profile-name:contains(Half off)');\n      andThen(function () {\n        assert.equal(find('.pricing-profile-name:contains(Half off)').length, 0, 'Pricing profile disappears from list');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/pricing-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/pricing-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pricing-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/procedure-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | procedures', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  testWithVisit('Add procedure', function (assert) {\n    var procedureDesc = 'Release Left Elbow Bursa and Ligament, Percutaneous Approach';\n    assert.equal(find('#visit-procedures tr').length, 2, 'One procedure is listed for the visit');\n    click('button:contains(New Procedure)');\n    andThen(function () {\n      typeAheadFillIn('.procedure-description', procedureDesc);\n      typeAheadFillIn('.procedure-physician', 'Dr Jones');\n      updateProcedure(assert, 'Add');\n    });\n    andThen(function () {\n      click('button:contains(Return)');\n    });\n    andThen(function () {\n      assert.equal(find('#visit-procedures tr').length, 3, 'Two procedure are listed for the visit');\n      assert.equal(find('#visit-procedures td:contains(' + procedureDesc + ')').length, 1, 'New procedure description is listed for the visit');\n    });\n  });\n\n  testWithVisit('Edit procedure', function (assert) {\n    click('#visit-procedures button:contains(Edit)');\n    andThen(function () {\n      assert.equal(currentURL(), '/visits/procedures/edit/398B4F58-152F-1476-8ED1-329C4D85E25F', 'Procedure url is correct');\n      fillIn('.procedure-notes', 'Abdominals blood glucose level blood pressure carbohydrate medications');\n    });\n    andThen(function () {\n      click('button:contains(Add Item)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Add Charge Item', 'Add Charge Item modal appears');\n      typeAheadFillIn('.charge-item-name', 'Gauze pad');\n      click('.modal-footer button:contains(Add)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n      waitToAppear('td.charge-item-name:contains(Gauze pad)');\n    });\n    andThen(function () {\n      assert.equal(find('td.charge-item-name:contains(Gauze pad)').length, 1, 'New charge item appears');\n      click('.charge-items tr:last button:contains(Edit)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Edit Charge Item', 'Edit Charge Item modal appears');\n      typeAheadFillIn('.charge-item-name', 'Gauze padding');\n    });\n    andThen(function () {\n      click('.modal-footer button:contains(Update)');\n    });\n    andThen(function () {\n      waitToAppear('td.charge-item-name:contains(Gauze padding)');\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('td.charge-item-name:contains(Gauze padding)').length, 1, 'Updated charge item appears');\n      assert.equal(find('.medication-charges tr').length, 2, 'One medication charge exists');\n      assert.equal(find('.medication-charges button:contains(Add Medication)').length, 1, 'Add medication button exists');\n      click('button:contains(Add Medication)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Add Medication Used', 'Add Medication Used modal appears');\n      typeAheadFillIn('.medication-used', 'Cefazolin 500mg vial (Hazolin) - m00001 (999998 available)');\n      waitToDisappear('.disabled-btn:contains(Add)');\n    });\n    andThen(function () {\n      click('.modal-footer button:contains(Add)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      updateProcedure(assert, 'Update');\n    });\n    andThen(function () {\n      assert.equal(find('.medication-charges td:contains(Cefazolin 500mg vial)').length, 2, 'Two medication charges exists');\n      click('.medication-charges button:contains(Edit):first');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Edit Medication Used', 'Edit Medication Used modal appears here');\n      fillIn('.medication-quantity input', 2);\n      click('.modal-footer button:contains(Update)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n      waitToAppear('.medication-charge-quantity:contains(2)');\n    });\n    andThen(function () {\n      assert.equal(find('.medication-charge-quantity:first').text(), '2', 'Updated medication quantity appears');\n      updateProcedure(assert, 'Update');\n    });\n    andThen(function () {\n      click('.charge-items tr:last button:contains(Delete)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Delete Charge Item', 'Delete Charge Item dialog displays');\n      click('.modal-footer button:contains(Ok)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n      waitToDisappear('.charge-items tr:last button:contains(Delete)');\n    });\n    andThen(function () {\n      click('.medication-charges tr:last button:contains(Delete)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Delete Medication Used', 'Delete Medication Used dialog displays');\n      click('.modal-footer button:contains(Ok)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      updateProcedure(assert, 'Update');\n    });\n    andThen(function () {\n      waitToAppear('button:contains(Return)');\n    });\n    andThen(function () {\n      click('button:contains(Return)');\n    });\n    andThen(function () {\n      click('#visit-procedures button:contains(Edit)');\n    });\n    andThen(function () {\n      assert.equal(currentURL(), '/visits/procedures/edit/398B4F58-152F-1476-8ED1-329C4D85E25F', 'Returned back to procedure');\n      assert.equal(find('td.charge-item-name').length, 0, 'Charge item is deleted');\n      assert.equal(find('.medication-charges tr').length, 2, 'Medication used is deleted');\n    });\n  });\n\n  testWithVisit('Delete procedure', function (assert) {\n    assert.equal(find('#visit-procedures tr').length, 2, 'One procedure is displayed to delete');\n    click('#visit-procedures button:contains(Delete)');\n    waitToAppear('.modal-dialog');\n    andThen(function () {});\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Delete Procedure', 'Delete Procedure confirmation displays');\n      click('.modal-footer button:contains(Delete)');\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('#visit-procedures tr').length, 1, 'Procedure is deleted');\n    });\n  });\n\n  function testWithVisit(testLabel, testFunction) {\n    (0, _qunit.test)(testLabel, function (assert) {\n      runWithPouchDump('patient', function () {\n        authenticateUser();\n        visit('/patients');\n        andThen(function () {\n          assert.equal(currentURL(), '/patients', 'Patient url is correct');\n          click('button:contains(Edit)');\n        });\n        andThen(function () {\n          assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n          click('[data-test-selector=visits-tab]');\n          waitToAppear('#visits button:contains(Edit)');\n        });\n        andThen(function () {\n          click('#visits button:contains(Edit)');\n        });\n        andThen(function () {\n          assert.equal(currentURL(), '/visits/edit/03C7BF8B-04E0-DD9E-9469-96A5604F5340', 'Visit url is correct');\n          testFunction(assert);\n        });\n      });\n    });\n  }\n\n  function updateProcedure(assert, buttonText) {\n    andThen(function () {\n      click('.panel-footer button:contains(' + buttonText + ')');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Procedure Saved', 'Procedure Saved dialog displays');\n      click('button:contains(Ok)');\n    });\n  }\n});","define('hospitalrun/tests/acceptance/procedure-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/procedure-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/procedure-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/role-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app', 'hospitalrun/mixins/user-roles'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp, _hospitalrunMixinsUserRoles) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | roles', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /admin/roles', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin/roles');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/roles');\n        select('.role-select', 'Doctor');\n      });\n      andThen(function () {\n        assert.equal(find('.checkbox-appointments input:checked').length, 0, 'Appointments checkbox is not checked');\n        assert.equal(find('.checkbox-addAppointment input:checked').length, 0, 'Add appointments checkbox is not checked');\n      });\n      click('.checkbox-appointments input');\n      click('.checkbox-addAppointment input');\n      andThen(function () {\n        assert.equal(find('.checkbox-appointments input:checked').length, 1, 'Appointments checkbox is checked');\n        assert.equal(find('.checkbox-addAppointment input:checked').length, 1, 'Add appointments checkbox is checked');\n        click('button:contains(Update)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Role Saved', 'Role has been saved');\n        assert.equal(find('.modal-body').text().trim(), 'The Doctor role has been saved.', 'Doctor role has been saved');\n        click('button:contains(Ok)');\n        invalidateSession();\n        visit('/login');\n      });\n      andThen(function () {\n        authenticateUser({\n          name: 'doctor@hospitalrun.io',\n          roles: ['Doctor', 'user'],\n          role: 'Doctor',\n          prefix: 'p1'\n        });\n      });\n      visit('/appointments/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments/edit/new', 'Doctor can now navigate to new appointments');\n        assert.equal(find('.view-current-title').text(), 'New Appointment', 'New appointment screen displays');\n      });\n    });\n  });\n\n  _hospitalrunMixinsUserRoles.PREDEFINED_USER_ROLES.forEach(function (role) {\n    if (role.defaultRoute && role.name !== 'User Administrator') {\n      (0, _qunit.test)('Testing User Role homescreen for ' + role.name, function (assert) {\n        runWithPouchDump('default', function () {\n          authenticateUser({\n            roles: role.roles,\n            role: role.name,\n            authenticated: {\n              role: role.name\n            }\n          });\n          visit('/');\n          waitToAppear('.view-current-title');\n          andThen(function () {\n            var defaultURL = role.defaultRoute.replace('.index', '');\n            if (defaultURL === 'users') {\n              defaultURL = 'admin/users';\n            }\n            assert.equal(currentURL(), '/' + defaultURL, 'Correct homepage displays for role ' + role.name);\n            invalidateSession();\n          });\n        });\n      });\n    }\n  });\n});","define('hospitalrun/tests/acceptance/role-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/role-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/role-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/users-test', ['exports', 'ember', 'ember-cli-fake-server', 'pouchdb', 'npm:pouchdb-adapter-memory', 'hospitalrun/tests/helpers/start-app', 'hospitalrun/mixins/user-roles', 'qunit'], function (exports, _ember, _emberCliFakeServer, _pouchdb, _npmPouchdbAdapterMemory, _hospitalrunTestsHelpersStartApp, _hospitalrunMixinsUserRoles, _qunit) {\n  'use strict';\n\n  var MOCK_USER_DATA = [{\n    'id': 'org.couchdb.user:hradmin',\n    'key': 'org.couchdb.user:hradmin',\n    'value': { 'rev': '1-242f3d5b5eb8596144f8a6300f9f5a2f' },\n    'doc': {\n      '_id': 'org.couchdb.user:hradmin',\n      '_rev': '1-242f3d5b5eb8596144f8a6300f9f5a2f',\n      'password_scheme': 'pwdscheme',\n      'iterations': 10,\n      'name': 'hradmin',\n      'roles': ['System Administrator', 'admin', 'user'],\n      'type': 'user',\n      'userPrefix': 'p',\n      'derived_key': 'derivedkeyhere',\n      'salt': 'saltgoeshere',\n      'displayName': 'HospitalRun Administrator',\n      'email': 'hradmin@hospitalrun.io'\n    }\n  }, {\n    'id': 'org.couchdb.user:joe@donuts.com',\n    'key': 'org.couchdb.user:joe@donuts.com',\n    'value': {\n      'rev': '1-ef3d54502f2cc8e8f73d8547881f0836'\n    },\n    'doc': {\n      '_id': 'org.couchdb.user:joe@donuts.com',\n      '_rev': '1-ef3d54502f2cc8e8f73d8547881f0836',\n      'password_scheme': 'pbkdf2',\n      'iterations': 10,\n      'displayName': 'Joe Bagadonuts',\n      'email': 'joe@donuts.com',\n      'name': 'joe@donuts.com',\n      'roles': ['Hospital Administrator', 'user'],\n      'userPrefix': 'p01',\n      'type': 'user',\n      'derived_key': 'derivedkeyhere',\n      'salt': 'saltgoeshere'\n    }\n  }];\n\n  var RSVP = _ember['default'].RSVP;\n\n  function addAllUsers(assert) {\n    if (window.ELECTRON) {\n      return _addOfflineUsers();\n    }\n    (0, _emberCliFakeServer.stubRequest)('get', '/db/_users/_all_docs', function (request) {\n      var expectedQuery = {\n        include_docs: 'true',\n        startkey: '\"org.couchdb.user\"'\n      };\n      assert.equal(JSON.stringify(request.queryParams), JSON.stringify(expectedQuery), 'All Users request sent to the server');\n      request.ok({\n        'total_rows': 1,\n        'offset': 1,\n        'rows': MOCK_USER_DATA\n      });\n    });\n    return RSVP.resolve();\n  }\n\n  function _addOfflineUsers() {\n    return wait().then(function () {\n      _pouchdb['default'].plugin(_npmPouchdbAdapterMemory['default']);\n      var usersDB = new _pouchdb['default']('_users', {\n        adapter: 'memory'\n      });\n      var joeUser = MOCK_USER_DATA[1];\n      // hradmin already added by run-with-pouch-dump\n      delete joeUser.doc._rev;\n      return usersDB.put(joeUser.doc);\n    });\n  }\n\n  (0, _qunit.module)('Acceptance | users', {\n    beforeEach: function beforeEach() {\n      _emberCliFakeServer['default'].start();\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _emberCliFakeServer['default'].stop();\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /admin/users', function (assert) {\n    runWithPouchDump('default', function () {\n      var role = _hospitalrunMixinsUserRoles.PREDEFINED_USER_ROLES.findBy('name', 'User Administrator');\n      authenticateUser({\n        roles: role.roles,\n        role: role.name,\n        authenticated: {\n          role: role.name\n        }\n      });\n      addAllUsers(assert);\n      andThen(function () {\n        visit('/'); // Default home page for User Administrator is admin/users\n        andThen(function () {\n          assert.equal(currentURL(), '/admin/users', 'User Administrator initial page displays');\n          assert.equal(find('td.user-display-name:first').text(), 'HospitalRun Administrator');\n          assert.equal(find('td.user-name:first').text(), 'hradmin');\n          assert.equal(find('td.user-email:first').text(), 'hradmin@hospitalrun.io');\n          assert.equal(find('td.user-role:first').text(), 'System Administrator');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('create new user', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      addAllUsers(assert);\n      andThen(function () {\n        visit('/admin/users');\n        (0, _emberCliFakeServer.stubRequest)('put', '/db/_users/org.couchdb.user:jane@donuts.com', function (request) {\n          var expectedBody = {\n            _id: 'org.couchdb.user:jane@donuts.com',\n            deleted: false,\n            displayName: 'Jane Bagadonuts',\n            email: 'jane@donuts.com',\n            name: 'jane@donuts.com',\n            password: 'password',\n            roles: ['Hospital Administrator', 'user'],\n            userPrefix: 'p02',\n            type: 'user'\n          };\n          assert.equal(request.requestBody, JSON.stringify(expectedBody), 'New user data sent to the server');\n          request.ok({\n            'ok': true,\n            'id': 'org.couchdb.user:jane@donuts.com',\n            'rev': '1-ef3d54502f2cc8e8f73d8547881f0836'\n          });\n        });\n\n        visit('/admin/users/edit/new');\n        andThen(function () {\n          select('.user-role', 'Hospital Administrator');\n          fillIn('.user-display-name input', 'Jane Bagadonuts');\n          fillIn('.user-email input', 'jane@donuts.com');\n          fillIn('.user-password input', 'password');\n          click('button:contains(Add)');\n          waitToAppear('.modal-dialog');\n          andThen(function () {\n            assert.equal(find('.modal-title').text(), 'User Saved', 'User was saved successfully');\n            assert.equal(find('.view-current-title').text(), 'Edit User', 'Page title changed to Edit User');\n          });\n          click('button:contains(Ok)');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete user', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      addAllUsers(assert);\n      andThen(function () {\n        (0, _emberCliFakeServer.stubRequest)('put', '/db/_users/org.couchdb.user:joe@donuts.com', function (request) {\n          var expectedBody = {\n            _id: 'org.couchdb.user:joe@donuts.com',\n            derived_key: 'derivedkeyhere',\n            deleted: true,\n            displayName: 'Joe Bagadonuts',\n            email: 'joe@donuts.com',\n            iterations: 10,\n            name: 'joe@donuts.com',\n            password_scheme: 'pbkdf2',\n            _rev: '1-ef3d54502f2cc8e8f73d8547881f0836',\n            roles: ['deleted'],\n            salt: 'saltgoeshere',\n            userPrefix: 'p01',\n            type: 'user'\n          };\n          assert.equal(request.requestBody, JSON.stringify(expectedBody), 'Delete user request sent to the server');\n          request.ok({\n            'ok': true,\n            'id': 'org.couchdb.user:joe@donuts.com',\n            'rev': '1-ef3d54502f2cc8e8f73d8547881f0836'\n          });\n        });\n\n        visit('/admin/users');\n        andThen(function () {\n          click('button:contains(Delete):last');\n          waitToAppear('.modal-dialog');\n          andThen(function () {\n            assert.equal(find('.alert').text().trim(), 'Are you sure you wish to delete ?', 'User is displayed for deletion');\n          });\n          click('button:contains(Delete):last');\n          andThen(function () {\n            assert.equal(find('.user-email:contains(joe@donuts.com)').length, 0, 'User disappears from user list');\n          });\n        });\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/users-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/users-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/users-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/visit-test', ['exports', 'ember', 'moment', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _moment, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  var isEmpty = _ember['default'].isEmpty;\n\n  var visitData = {\n    outPatient: {\n      LOCATION: 'Springfield Hospital',\n      EXAMINER: 'Sarah Kearney',\n      PRIMARY_DIAGNOSIS: 'ACL deficient knee, right',\n      SECONDARY_DIAGNOSIS: 'ACL deficient knee, left',\n      OPERATION_DESCRIPTION: 'Describe Operation here',\n      PROCEDURE_SPLINT: 'application of long arm post splint',\n      ADMISSION_INSTRUCTIONS: 'Admission Instructions here',\n      OPD_PROCEDURE_DESCRIPTION: 'Bilateral knee Release',\n      OPD_PROCEDURE_PHYSICIAN: 'Sarah Kearney',\n      LAB_TYPE: 'Cholesterol',\n      IMAGING_TYPE: 'Cervical Spine AP-L',\n      APPOINTMENT_START_DATE: (0, _moment['default'])().add(7, 'days').format('l h:mm A'),\n      APPOINTMENT_END_DATE: (0, _moment['default'])().add(8, 'days').format('l h:mm A'),\n      NOTE_CONTENT: 'OPD notes are entered here'\n    },\n    admission: {\n      EXAMINER: 'Drederick Willie',\n      NOTE_CONTENT: 'Patient notes are entered here'\n    }\n  };\n\n  (0, _qunit.module)('Acceptance | visits', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('Add admission visit', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      addVisit(assert);\n      andThen(function () {\n        addAdmissionData(assert);\n      });\n      andThen(function () {\n        newReport(assert, 'Discharge');\n      });\n      andThen(function () {\n        checkDischargeReport(assert);\n      });\n      andThen(function () {\n        saveReport(assert, 'Discharge');\n      });\n      andThen(function () {\n        viewReport(assert, 'Discharge');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Add OPD visit', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      addVisit(assert, 'Clinic');\n      andThen(function () {\n        addOutpatientData(assert);\n      });\n      andThen(function () {\n        newReport(assert, 'OPD');\n      });\n      andThen(function () {\n        checkOPDReport(assert);\n      });\n      andThen(function () {\n        saveReport(assert, 'OPD');\n      });\n      andThen(function () {\n        viewReport(assert, 'OPD');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Edit visit', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients', 'Patient url is correct');\n        click('button:contains(Edit)');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n        click('[data-test-selector=visits-tab]');\n        waitToAppear('#visits button:contains(Edit)');\n      });\n      andThen(function () {\n        click('#visits button:contains(Edit)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/03C7BF8B-04E0-DD9E-9469-96A5604F5340', 'Visit url is correct');\n        click('a:contains(Add Allergy)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Allergy', 'Add Allergy dialog displays');\n        fillIn('.test-allergy input', 'Oatmeal');\n        click('.modal-footer button:contains(Add)');\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('a.allergy-button:contains(Oatmeal)').length, 1, 'New allergy appears');\n        click('a:contains(Add Diagnosis)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Diagnosis', 'Add Diagnosis dialog displays');\n        fillIn('.diagnosis-text input', 'Broken Arm');\n        click('.modal-footer button:contains(Add)');\n        waitToAppear('a.primary-diagnosis');\n      });\n      andThen(function () {\n        assert.equal(find('a.primary-diagnosis:contains(Broken Arm)').length, 1, 'New primary diagnosis appears');\n        click('button:contains(New Medication)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/medication/edit/new?forVisitId=03C7BF8B-04E0-DD9E-9469-96A5604F5340', 'New medication url is correct');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'New medication prepopulates with patient');\n        click('button:contains(Cancel)');\n      });\n      andThen(function () {\n        click('button:contains(New Lab)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/labs/edit/new?forVisitId=03C7BF8B-04E0-DD9E-9469-96A5604F5340', 'New lab url is correct');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'New lab prepopulates with patient');\n        click('button:contains(Cancel)');\n      });\n      andThen(function () {\n        click('button:contains(New Imaging)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/edit/new?forVisitId=03C7BF8B-04E0-DD9E-9469-96A5604F5340', 'New imaging url is correct');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'New imaging prepopulates with patient');\n        click('button:contains(Cancel)');\n      });\n      andThen(function () {\n        click('button:contains(New Vitals)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        fillIn('.temperature-text input', '34.56');\n        fillIn('.weight-text input', '34.56');\n        fillIn('.height-text input', '34.56');\n        fillIn('.sbp-text input', '34.56');\n        fillIn('.dbp-text input', '34.56');\n        fillIn('.heart-rate-text input', '34.56');\n        fillIn('.respiratory-rate-text input', '34.56');\n        click('.modal-footer button:contains(Add)');\n        waitToAppear('#visit-vitals tr:last td:contains(34.56)');\n      });\n      andThen(function () {\n        assert.equal(find('#visit-vitals tr:last td:contains(34.56)').length, 7, 'New vitals appears');\n        click('button:contains(Add Item)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        typeAheadFillIn('.charge-item-name', 'Gauze pad');\n        click('.modal-footer button:contains(Add)');\n      });\n      andThen(function () {\n        waitToDisappear('.modal-dialog');\n        waitToAppear('td.charge-item-name');\n      });\n      andThen(function () {\n        assert.equal(find('td.charge-item-name').text(), 'Gauze pad', 'New charge item appears');\n      });\n      andThen(function () {\n        updateVisit(assert, 'Update');\n      });\n      andThen(function () {\n        click('a.primary-diagnosis:contains(Broken Arm)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Edit Diagnosis', 'Edit Diagnosis modal appears');\n        assert.equal(find('.modal-footer button:contains(Delete)').length, 1, 'Delete button appears');\n      });\n      andThen(function () {\n        click('.modal-footer button:contains(Delete)');\n      });\n      andThen(function () {\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        click('#visit-vitals tr:last button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Vitals', 'Delete Vitals dialog displays');\n        click('.modal-footer button:contains(Delete)');\n        click('[data-test-selector=charges-tab]');\n      });\n      andThen(function () {\n        click('.charge-items tr:last button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Charge Item', 'Delete Charge Item dialog displays');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        waitToDisappear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('a.primary-diagnosis:contains(Broken Arm)').length, 0, 'New primary diagnosis is deleted');\n        assert.equal(find('#visit-vitals tr:last td:contains(34.56)').length, 0, 'Vital is deleted');\n        assert.equal(find('td.charge-item-name').length, 0, 'Charge item is deleted');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Delete visit', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients', 'Patient url is correct');\n        click('button:contains(Edit)');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n        click('[data-test-selector=visits-tab]');\n        waitToAppear('#visits button:contains(Delete)'); // Make sure visits have been retrieved.\n      });\n      andThen(function () {\n        assert.equal(find('#visits tr').length, 2, 'One visit is displayed to delete');\n        click('#visits button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Visit', 'Delete Visit confirmation displays');\n        click('.modal-footer button:contains(Delete)');\n      });\n      andThen(function () {\n        waitToDisappear('.modal-dialog');\n        waitToDisappear('#visits td:contains(Fall from in-line roller-skates, initial encounter)');\n      });\n      andThen(function () {\n        assert.equal(find('#visits tr').length, 1, 'Visit is deleted');\n      });\n    });\n  });\n\n  function addVisit(assert, type) {\n    visit('/patients');\n    andThen(function () {\n      assert.equal(currentURL(), '/patients', 'Patient url is correct');\n      click('button:contains(Edit)');\n    });\n    andThen(function () {\n      assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n      click('[data-test-selector=visits-tab]');\n      waitToAppear('#visits button:contains(Edit)');\n    });\n    andThen(function () {\n      click('#visits button:contains(New Visit)');\n      waitToAppear('#visit-info');\n    });\n    andThen(function () {\n      assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts displays as patient for visit');\n      updateVisit(assert, 'Add', type);\n    });\n  }\n\n  function addOutpatientData(assert) {\n    typeAheadFillIn('.visit-location', visitData.outPatient.LOCATION);\n    typeAheadFillIn('.visit-examiner', visitData.outPatient.EXAMINER);\n    andThen(function () {\n      click('a:contains(Add Diagnosis)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Add Diagnosis', 'Add Diagnosis dialog displays');\n      fillIn('.diagnosis-text input', visitData.outPatient.PRIMARY_DIAGNOSIS);\n      click('.modal-footer button:contains(Add)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      click('a:contains(Add Diagnosis)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Add Diagnosis', 'Add Diagnosis dialog displays');\n      fillIn('.diagnosis-text input', visitData.outPatient.SECONDARY_DIAGNOSIS);\n      click('.secondary-diagnosis input');\n    });\n    andThen(function () {\n      click('.modal-footer button:contains(Add)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n      waitToAppear('a.secondary-diagnosis:contains(' + visitData.outPatient.SECONDARY_DIAGNOSIS + ')');\n    });\n    andThen(function () {\n      click('a:contains(Add Operative Plan)');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('/patients/operative-plan/new?forVisitId') > -1, 'New operative plan URL is visited');\n      assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient header displays');\n      assert.equal(find('.view-current-title').text(), 'New Operative Plan', 'New operative plan title is correct');\n      fillIn('.operation-description textarea', visitData.outPatient.OPERATION_DESCRIPTION);\n      typeAheadFillIn('.procedure-description', visitData.outPatient.PROCEDURE_SPLINT);\n      click('button:contains(Add Procedure)');\n      waitToAppear('.procedure-listing td.procedure-description');\n      fillIn('.admission-instructions textarea', visitData.outPatient.ADMISSION_INSTRUCTIONS);\n    });\n    updateVisitData(assert, 'Plan Saved');\n    andThen(function () {\n      click('[data-test-selector=procedures-tab]');\n      waitToAppear('[data-test-selector=new-procedure-btn]');\n      assert.equal(find('[data-test-selector=new-procedure-btn]').text().trim(), 'New Procedure', 'New Procedure button displayed');\n      click('[data-test-selector=new-procedure-btn]');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('visits/procedures/edit/new?forVisitId') > -1, 'New Procedures URL is visited');\n      typeAheadFillIn('.procedure-description', visitData.outPatient.OPD_PROCEDURE_DESCRIPTION);\n      typeAheadFillIn('.procedure-physician', visitData.outPatient.OPD_PROCEDURE_PHYSICIAN);\n    });\n    updateVisitData(assert, 'Procedure Saved');\n    andThen(function () {\n      click('button:contains(New Lab)');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('/labs/edit/new?forVisitId') > -1, 'New Lab URL is visited');\n      typeAheadFillIn('.test-lab-type', visitData.outPatient.LAB_TYPE);\n    });\n    updateVisitData(assert, 'Lab Request Saved');\n    andThen(function () {\n      click('button:contains(New Imaging)');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('/imaging/edit/new?forVisitId') > -1, 'New Imaging URL is visited');\n      typeAheadFillIn('.imaging-type-input', visitData.outPatient.IMAGING_TYPE);\n    });\n    updateVisitData(assert, 'Imaging Request Saved');\n    andThen(function () {\n      click('button:contains(New Appointment)');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('/appointments/edit/new?forVisitId') > -1, 'New Appointment URL is visited');\n      click('.appointment-all-day input');\n      fillIn('.test-appointment-start input', visitData.outPatient.APPOINTMENT_START_DATE);\n      fillIn('.test-appointment-end input', visitData.outPatient.APPOINTMENT_END_DATE);\n    });\n    updateVisitData(assert, 'Appointment Saved');\n    andThen(function () {\n      click('[data-test-selector=notes-tab]');\n      waitToAppear('[data-test-selector=new-note-btn]');\n      click('[data-test-selector=new-note-btn]');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'New Note for Joe Bagadonuts', 'New Note dialog displays');\n      fillIn('.test-note-content textarea', visitData.outPatient.NOTE_CONTENT);\n      click('.modal-footer button:contains(Add)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('visits/edit/') > -1, 'Returns back to visit URL');\n    });\n  }\n\n  function addAdmissionData(assert) {\n    typeAheadFillIn('.visit-examiner', visitData.admission.EXAMINER);\n    andThen(function () {\n      click('[data-test-selector=notes-tab]');\n      waitToAppear('[data-test-selector=new-note-btn]');\n      click('[data-test-selector=new-note-btn]');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'New Note for Joe Bagadonuts', 'New Note dialog displays');\n      fillIn('.test-note-content textarea', visitData.admission.NOTE_CONTENT);\n      click('.modal-footer button:contains(Add)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('visits/edit/') > -1, 'Returns back to visit URL');\n    });\n  }\n\n  function newReport(assert, type) {\n    andThen(function () {\n      click('[data-test-selector=reports-tab]');\n      waitToAppear('[data-test-selector=report-btn]');\n      assert.equal(find('[data-test-selector=report-btn]').text().trim(), 'New ' + type + ' Report', 'Discharge report can be created for this type of visit');\n      click('[data-test-selector=report-btn]');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('visits/reports/edit/new') > -1, 'Report url is correct');\n      assert.equal(find('.view-current-title').text(), 'New ' + type + ' Report', type + ' report title displayed correctly');\n      assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Patient record displays');\n    });\n  }\n\n  function checkOPDReport(assert) {\n    andThen(function () {\n      assert.equal(find('.patient-id .ps-info-data').text(), 'P00001', 'Patient ID is displayed');\n      assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Patient First Name & Last Name is displayed');\n      assert.equal(find('.test-visit-date .test-visit-date-label').text().trim(), 'Date of Visit:', 'Visit date label displayed');\n      assert.ok(!isEmpty(find('.test-visit-date .test-visit-date-data').text()), 'Visit date is displayed');\n      findWithAssert('.test-visit-type .test-visit-type-label:contains(Visit Type)');\n      assert.equal(find('.test-visit-type .test-visit-type-data').text(), 'Clinic', 'Visit Type is displayed');\n      findWithAssert('.test-examiner .test-examiner-label:contains(Examiner)');\n      assert.equal(find('.test-examiner .test-examiner-data').text(), visitData.outPatient.EXAMINER, 'Visit Examiner is displayed');\n      findWithAssert('.test-location .test-location-label:contains(Visit Location)');\n      assert.equal(find('.test-location .test-location-data').text(), visitData.outPatient.LOCATION, 'Visit Location is displayed');\n      findWithAssert('.primary-diagnosis:contains(' + visitData.outPatient.PRIMARY_DIAGNOSIS + ')');\n      findWithAssert('.secondary-diagnosis:contains(' + visitData.outPatient.SECONDARY_DIAGNOSIS + ')');\n      findWithAssert('.test-opd-procedure .test-opd-procedure-label:contains(Procedures)');\n      assert.ok(find('.test-opd-procedure .test-opd-procedure-data').text().indexOf(visitData.outPatient.OPD_PROCEDURE_DESCRIPTION) > -1, 'OPD Procedure is displayed');\n      findWithAssert('.test-labs .test-labs-label:contains(Labs)');\n      assert.ok(find('.test-labs .test-labs-data').text().indexOf(visitData.outPatient.LAB_TYPE) > -1, 'Lab request is displayed');\n      findWithAssert('.test-images .test-images-label:contains(Images)');\n      assert.ok(find('.test-images .test-images-data').text().indexOf(visitData.outPatient.IMAGING_TYPE) > -1, 'Image request is displayed');\n      findWithAssert('.test-operative-plan .test-operative-plan-label:contains(Operative Plan)');\n      findWithAssert('.test-operative-plan .test-operative-plan-description-label:contains(Operation Description:)');\n      assert.equal(find('.test-operative-plan .test-operative-plan-description-data').text(), visitData.outPatient.OPERATION_DESCRIPTION);\n      findWithAssert('.test-operative-plan .test-operative-plan-procedures-label:contains(Planned Procedures:)');\n      assert.equal(find('.test-operative-plan .test-operative-plan-procedures-description').text(), visitData.outPatient.PROCEDURE_SPLINT);\n      findWithAssert('.test-operative-plan .test-operative-plan-instructions-label:contains(Instructions upon Admission:)');\n      assert.equal(find('.test-operative-plan .test-operative-plan-instructions-data').text(), visitData.outPatient.ADMISSION_INSTRUCTIONS, 'Admission Instruction is displayed');\n    });\n  }\n\n  function checkDischargeReport(assert) {\n    andThen(function () {\n      findWithAssert('.test-examiner .test-examiner-label:contains(Examiner)');\n      assert.equal(find('.test-examiner .test-examiner-data').text(), visitData.admission.EXAMINER, 'Examiner is displayed');\n      assert.equal(find('.test-visit-date .test-visit-date-label').text().trim(), 'Admission Date:', 'Visit date label displays as admission');\n      assert.equal(find('.test-visit-date .test-visit-discharge-date-label').text().trim(), 'Discharge Date:', 'Discharge date label displays');\n      findWithAssert('.test-notes .test-notes-label:contains(Notes)');\n      assert.ok(find('.test-notes .test-notes-data').text().indexOf(visitData.admission.NOTE_CONTENT) > -1, 'Notes are displayed');\n    });\n  }\n\n  function saveReport(assert, type) {\n    andThen(function () {\n      click('.panel-footer button:contains(Add)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Report saved', type + ' report saved successfully');\n      click('button:contains(Ok)');\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.view-current-title').text(), type + ' Report', 'Report title updated correctly');\n      assert.ok(find('.panel-footer button:contains(Print)').is(':visible'), 'Print button is now visible');\n      click('button:contains(Return)');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('visits/edit/') > -1, 'Visit url is correct');\n    });\n  }\n\n  function viewReport(assert, type) {\n    andThen(function () {\n      click('[data-test-selector=reports-tab]');\n      waitToAppear('[data-test-selector=view-report-btn]');\n      click('[data-test-selector=view-report-btn]');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('visits/reports/edit') > -1, 'Edit report url is correct');\n      assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Patient record displays');\n      assert.equal(find('.view-current-title').text(), type + ' Report', 'Report title displayed correctly');\n      assert.ok(find('.panel-footer button:contains(Print)').is(':visible'), 'Print button is visible');\n    });\n  }\n\n  function updateVisitData(assert, modalTitle) {\n    andThen(function () {\n      click('.panel-footer button:contains(Add)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), modalTitle, modalTitle + ' modal displays');\n      click('.modal-footer button:contains(Ok)');\n    });\n    andThen(function () {\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      click('button:contains(Return)');\n    });\n    andThen(function () {\n      assert.ok(currentURL().indexOf('visits/edit/') > -1, 'Returns back to visit URL');\n    });\n  }\n\n  function updateVisit(assert, buttonText, visitType) {\n    andThen(function () {\n      if (visitType) {\n        select('select[id*=\"visitType\"]', visitType);\n        waitToDisappear('label[for*=\"display_endDate\"]');\n      }\n      click('.panel-footer button:contains(' + buttonText + ')');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Visit Saved', 'Visit Saved dialog displays');\n      click('button:contains(Ok)');\n    });\n  }\n});","define('hospitalrun/tests/acceptance/visit-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/visit-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/visit-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/adapters/application', ['exports', 'hospitalrun/mixins/check-for-errors', 'ember', 'npm:uuid', 'ember-concurrency-test-waiter/with-test-waiter', 'ember-pouch', 'ember-concurrency'], function (exports, _hospitalrunMixinsCheckForErrors, _ember, _npmUuid, _emberConcurrencyTestWaiterWithTestWaiter, _emberPouch, _emberConcurrency) {\n  'use strict';\n\n  var reads = _ember['default'].computed.reads;\n  var get = _ember['default'].get;\n  var bind = _ember['default'].run.bind;\n  exports['default'] = _emberPouch.Adapter.extend(_hospitalrunMixinsCheckForErrors['default'], {\n    ajax: _ember['default'].inject.service(),\n    database: _ember['default'].inject.service(),\n    db: reads('database.mainDB'),\n    usePouchFind: reads('database.usePouchFind'),\n\n    _specialQueries: ['containsValue', 'mapReduce'],\n\n    _esDefaultSize: 25,\n\n    _executeContainsSearch: function _executeContainsSearch(store, type, query) {\n      var _this = this;\n\n      var usePouchFind = get(this, 'usePouchFind');\n      if (usePouchFind) {\n        return this._executePouchDBFind(store, type, query);\n      }\n      var typeName = this.getRecordTypeName(type);\n      var searchUrl = '/search/hrdb/' + typeName + '/_search';\n      if (query.containsValue && query.containsValue.value) {\n        var _ret = (function () {\n          var queryString = '';\n          query.containsValue.keys.forEach(function (key) {\n            if (!_ember['default'].isEmpty(queryString)) {\n              queryString = queryString + ' OR ';\n            }\n            var queryValue = query.containsValue.value;\n            switch (key.type) {\n              case 'contains':\n                {\n                  queryValue = '*' + queryValue + '*';\n                  break;\n                }\n              case 'fuzzy':\n                {\n                  queryValue = queryValue + '~';\n                  break;\n                }\n            }\n            queryString = queryString + 'data.' + key.name + ':' + queryValue;\n          });\n          var ajax = get(_this, 'ajax');\n          if (_ember['default'].isEmpty(query.size)) {\n            query.size = _this.get('_esDefaultSize');\n          }\n\n          return {\n            v: ajax.request(searchUrl, {\n              dataType: 'json',\n              data: {\n                q: queryString,\n                size: _this.get('_esDefaultSize')\n              }\n            }).then(function (results) {\n              if (results && results.hits && results.hits.hits) {\n                var resultDocs = _ember['default'].A(results.hits.hits).map(function (hit) {\n                  var mappedResult = hit._source;\n                  mappedResult.id = hit._id;\n                  return mappedResult;\n                });\n                var response = {\n                  rows: resultDocs\n                };\n                return _this._handleQueryResponse(response, store, type);\n              } else if (results.rows) {\n                return _this._handleQueryResponse(results, store, type);\n              } else {\n                throw new Error('Search results are not valid');\n              }\n            })['catch'](function () {\n              // Try pouch db find if ajax fails\n              return _this._executePouchDBFind(store, type, query);\n            })\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      } else {\n        throw new Error('invalid query');\n      }\n    },\n\n    _executePouchDBFind: function _executePouchDBFind(store, type, query) {\n      this._init(store, type);\n      var db = this.get('db');\n      var recordTypeName = this.getRecordTypeName(type);\n      var queryParams = {\n        selector: {\n          $or: []\n        }\n      };\n      if (query.containsValue && query.containsValue.value) {\n        (function () {\n          var regexp = new RegExp(query.containsValue.value, 'i');\n          query.containsValue.keys.forEach(function (key) {\n            var subQuery = {};\n            subQuery['data.' + key.name] = { $regex: regexp };\n            queryParams.selector.$or.push(subQuery);\n          });\n        })();\n      }\n\n      return db.find(queryParams).then(function (pouchRes) {\n        return db.rel.parseRelDocs(recordTypeName, pouchRes.docs);\n      });\n    },\n\n    _handleQueryResponse: function _handleQueryResponse(response, store, type) {\n      var _this2 = this;\n\n      var database = this.get('database');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        if (response.rows.length > 0) {\n          (function () {\n            var ids = response.rows.map(function (row) {\n              return database.getEmberId(row.id);\n            });\n            _this2.findRecord(store, type, ids).then(function (findResponse) {\n              var primaryRecordName = type.modelName.camelize().pluralize();\n              var sortedValues = [];\n              // Sort response in order of ids\n              ids.forEach(function (id) {\n                var resolvedRecord = findResponse[primaryRecordName].findBy('id', id);\n                sortedValues.push(resolvedRecord);\n              });\n              findResponse[primaryRecordName] = sortedValues;\n              resolve(findResponse);\n            }, reject);\n          })();\n        } else {\n          var emptyResponse = {};\n          emptyResponse[type.modelName] = [];\n          resolve(emptyResponse);\n        }\n      });\n    },\n\n    /**\n     * @private\n     * Look for nulls and maxvalues in start key because those keys can't be handled by the sort/list function\n     */\n    _doesStartKeyContainSpecialCharacters: function _doesStartKeyContainSpecialCharacters(startkey) {\n      var haveSpecialCharacters = false;\n      var maxValue = this.get('maxValue');\n      if (!_ember['default'].isEmpty(startkey) && _ember['default'].isArray(startkey)) {\n        startkey.forEach(function (keyvalue) {\n          if (keyvalue === null || keyvalue === maxValue) {\n            haveSpecialCharacters = true;\n          }\n        });\n      }\n      return haveSpecialCharacters;\n    },\n\n    _startChangesToStoreListener: function _startChangesToStoreListener() {\n      var db = this.get('db');\n      if (db) {\n        this.changes = db.changes({\n          since: 'now',\n          live: true,\n          returnDocs: false\n        }).on('change', bind(this, 'onChange')).on('error', _ember['default'].K); // Change sometimes throws weird 500 errors that we can ignore\n        db.changesListener = this.changes;\n      }\n    },\n\n    generateIdForRecord: function generateIdForRecord() {\n      return _npmUuid['default'].v4();\n    },\n\n    query: function query(store, type, _query, options) {\n      var _this3 = this;\n\n      var specialQuery = false;\n      for (var i = 0; i < this._specialQueries.length; i++) {\n        if (_ember['default'].get(_query, this._specialQueries[i])) {\n          specialQuery = true;\n          break;\n        }\n      }\n\n      if (!specialQuery) {\n        if (_query.options) {\n          this._init(store, type);\n          var recordTypeName = this.getRecordTypeName(type);\n          return this.get('db').rel.find(recordTypeName, _query.options);\n        } else {\n          return this._super(store, type, _query, options);\n        }\n      } else {\n        var _ret4 = (function () {\n          var mapReduce = null;\n          var queryParams = {};\n          if (_query.options) {\n            queryParams = _ember['default'].copy(_query.options);\n            if (_query.sortKey || _query.filterBy) {\n              if (_query.sortDesc) {\n                queryParams.sortDesc = _query.sortDesc;\n              }\n              if (_query.sortKey) {\n                queryParams.sortKey = _query.sortKey;\n              }\n              if (!_this3._doesStartKeyContainSpecialCharacters(queryParams.startkey)) {\n                queryParams.sortLimit = queryParams.limit;\n                delete queryParams.limit;\n                queryParams.sortStartKey = JSON.stringify(queryParams.startkey);\n                delete queryParams.startkey;\n              } else if (queryParams.startkey) {\n                queryParams.startkey = JSON.stringify(queryParams.startkey);\n              }\n              if (_query.filterBy) {\n                queryParams.filterBy = JSON.stringify(_query.filterBy);\n              }\n              if (queryParams.endkey) {\n                queryParams.endkey = JSON.stringify(queryParams.endkey);\n              }\n              _query.useList = true;\n            }\n          }\n          queryParams.reduce = false;\n          queryParams.include_docs = false;\n          if (_query.mapReduce) {\n            mapReduce = _query.mapReduce;\n          } else if (_query.containsValue) {\n            return {\n              v: _this3._executePouchDBFind(store, type, _query)\n            };\n          }\n          var database = get(_this3, 'database');\n          return {\n            v: new _ember['default'].RSVP.Promise(function (resolve, reject) {\n              var db = _this3.get('db');\n              try {\n                if (mapReduce) {\n                  if (_query.useList) {\n                    queryParams.include_docs = true;\n                    var listParams = {\n                      query: queryParams\n                    };\n                    db.list(mapReduce + '/sort/' + mapReduce, listParams, function (err, response) {\n                      if (err) {\n                        reject(database.handleErrorResponse(err));\n                      } else {\n                        var responseJSON = JSON.parse(response.body);\n                        _this3._handleQueryResponse(responseJSON, store, type).then(resolve, reject);\n                      }\n                    });\n                  } else {\n                    db.query(mapReduce, queryParams, function (err, response) {\n                      if (err) {\n                        reject(database.handleErrorResponse(err));\n                      } else {\n                        _this3._handleQueryResponse(response, store, type).then(resolve, reject);\n                      }\n                    });\n                  }\n                } else {\n                  db.allDocs(queryParams, function (err, response) {\n                    if (err) {\n                      reject(database.handleErrorResponse(err));\n                    } else {\n                      _this3._handleQueryResponse(response, store, type).then(resolve, reject);\n                    }\n                  });\n                }\n              } catch (err) {\n                reject(database.handleErrorResponse(err));\n              }\n            }, 'findQuery in application-pouchdb-adapter')\n          };\n        })();\n\n        if (typeof _ret4 === 'object') return _ret4.v;\n      }\n    },\n\n    createRecord: function createRecord(store, type, record) {\n      return this._checkForErrors(this._super(store, type, record));\n    },\n\n    findAll: function findAll(store, type) {\n      return this._checkForErrors(this._super(store, type));\n    },\n\n    findMany: function findMany(store, type, ids) {\n      return this._checkForErrors(this._super(store, type, ids));\n    },\n\n    findHasMany: function findHasMany(store, record, link, rel) {\n      return this._checkForErrors(this._super(store, record, link, rel));\n    },\n\n    findRecord: function findRecord(store, type, id) {\n      return this._checkForErrors(this._super(store, type, id));\n    },\n\n    updateRecord: function updateRecord(store, type, record) {\n      return this._checkForErrors(this._super(store, type, record));\n    },\n\n    deleteRecord: function deleteRecord(store, type, record) {\n      return this._checkForErrors(this._super(store, type, record));\n    },\n\n    checkForErrorsTask: (0, _emberConcurrencyTestWaiterWithTestWaiter['default'])((0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(callPromise) {\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        var _this4 = this;\n\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            context$1$0.next = 2;\n            return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n              callPromise.then(resolve, function (err) {\n                var database = get(_this4, 'database');\n                reject(database.handleErrorResponse(err));\n              });\n            });\n\n          case 2:\n            return context$1$0.abrupt('return', context$1$0.sent);\n\n          case 3:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this);\n    }))),\n\n    _checkForErrors: function _checkForErrors(callPromise) {\n      return get(this, 'checkForErrorsTask').perform(callPromise);\n    }\n\n  });\n});","define('hospitalrun/tests/adapters/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/adapters/user', ['exports', 'ember', 'hospitalrun/mixins/check-for-errors', 'ember-data', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsCheckForErrors, _emberData, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var ENDPOINT = '/db/_users/';\n\n  var RESTAdapter = _emberData['default'].RESTAdapter;\n  var computed = _ember['default'].computed;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  exports['default'] = RESTAdapter.extend(_hospitalrunMixinsCheckForErrors['default'], _hospitalrunMixinsUserSession['default'], {\n    defaultSerializer: 'couchdb',\n\n    config: inject.service(),\n    database: inject.service(),\n    session: inject.service(),\n\n    oauthHeaders: alias('database.oauthHeaders'),\n    standAlone: alias('config.standAlone'),\n    usersDB: alias('database.usersDB'),\n\n    headers: computed('oauthHeaders', function () {\n      var oauthHeaders = get(this, 'oauthHeaders');\n      if (_ember['default'].isEmpty(oauthHeaders)) {\n        return {};\n      } else {\n        return oauthHeaders;\n      }\n    }),\n\n    ajaxError: function ajaxError(jqXHR) {\n      var error = this._super(jqXHR);\n      if (jqXHR && jqXHR.status === 401) {\n        var jsonErrors = _ember['default'].$.parseJSON(jqXHR.responseText);\n        window.Hospitalrun.__container__.lookup('controller:application').transitionToRoute('login');\n        return new _emberData['default'].InvalidError(jsonErrors);\n      } else {\n        return error;\n      }\n    },\n\n    /**\n    @method ajaxOptions Overriden here so that we can specify xhr with credentials\n    @private\n    @param {String} url\n    @param {String} type The request type GET, POST, PUT, DELETE etc.\n    @param {Object} options\n    @return {Object} hash\n    */\n    ajaxOptions: function ajaxOptions(url, type, options) {\n      options = options || {};\n      options.xhrFields = { withCredentials: true };\n      return this._super(url, type, options);\n    },\n\n    /**\n      Called by the store when a newly created record is\n      saved via the `save` method on a model record instance.\n      The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\n      to a URL computed by `buildURL`.\n      See `serialize` for information on how to customize the serialized form\n      of a record.\n      @method createRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    createRecord: function createRecord(store, type, snapshot) {\n      return this.updateRecord(store, type, snapshot);\n    },\n\n    /**\n      Called by the store when a record is deleted.\n      The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.\n      @method deleteRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    deleteRecord: function deleteRecord(store, type, snapshot) {\n      return this.updateRecord(store, type, snapshot, true);\n    },\n\n    /**\n      Called by the store in order to fetch the JSON for a given\n      type and ID.\n      The `findRecord` method makes an Ajax request to a URL computed by\n      `buildURL`, and returns a promise for the resulting payload.\n      This method performs an HTTP `GET` request with the id provided as part of the query string.\n      @since 1.13.0\n      @method findRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {String} id\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    findRecord: function findRecord(store, type, id, snapshot) {\n      if (get(this, 'standAlone') === true) {\n        return this._offlineFind(id);\n      } else {\n        return this._checkForErrors(this._super(store, type, id, snapshot));\n      }\n    },\n\n    /**\n      Called by the store in order to fetch a JSON array for all\n      of the records for a given type.\n      The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\n      promise for the resulting payload.\n      @method findAll\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {String} sinceToken\n      @param {DS.SnapshotRecordArray} snapshotRecordArray\n      @return {Promise} promise\n    */\n    findAll: function findAll(store, type, sinceToken, snapshotRecordArray) {\n      var ajaxData = {\n        data: {\n          include_docs: true,\n          startkey: '\"org.couchdb.user\"'\n        }\n      };\n      if (get(this, 'standAlone') === true) {\n        return this._offlineFindAll(ajaxData.data);\n      } else {\n        var url = this.buildURL(type.modelName, null, snapshotRecordArray, 'findAll');\n        return this._checkForErrors(this.ajax(url, 'GET', ajaxData));\n      }\n    },\n\n    shouldReloadAll: function shouldReloadAll() {\n      return true;\n    },\n\n    /**\n     Called by the store when an existing record is saved\n     via the `save` method on a model record instance.\n      The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\n     to a URL computed by `buildURL`.\n      See `serialize` for information on how to customize the serialized form\n     of a record.\n      @method updateRecord\n     @param {DS.Store} store\n     @param {subclass of DS.Model} type\n     @param {DS.Snapshot} record\n     @param {boolean} deleteUser true if we are deleting the user.\n     @returns {Promise} promise\n    */\n    updateRecord: function updateRecord(store, type, record, deleteUser) {\n      var data = {};\n      var serializer = store.serializerFor(record.modelName);\n      serializer.serializeIntoHash(data, type, record, { includeId: true });\n      data.type = 'user';\n      if (deleteUser) {\n        data.deleted = true;\n        delete data.oauth;\n        data.roles = ['deleted'];\n      }\n      if (_ember['default'].isEmpty(data._rev)) {\n        delete data._rev;\n      }\n      data = this._cleanPasswordAttrs(data);\n      if (get(this, 'standAlone') === true) {\n        return this._offlineUpdateRecord(data);\n      } else {\n        var putURL = this._buildURL('user', get(record, 'id'));\n        return this._checkForErrors(this.ajax(putURL, 'PUT', {\n          data: data\n        }));\n      }\n    },\n    /**\n     Builds a URL for a `store.findAll(type)` call.\n     Example:\n     ```app/adapters/comment.js\n     import DS from 'ember-data';\n     export default DS.JSONAPIAdapter.extend({\n       urlForFindAll(id, modelName, snapshot) {\n         return 'data/comments.json';\n       }\n     });\n     ```\n     @method urlForFindAll\n     @param {String} modelName\n     @param {DS.SnapshotRecordArray} snapshot\n     @return {String} url\n     */\n    urlForFindAll: function urlForFindAll() /* modelName, snapshot */{\n      return ENDPOINT + '_all_docs';\n    },\n\n    /**\n      @method urlPrefix\n      @private\n      @param {String} path\n      @param {String} parentURL\n      @return {String} urlPrefix\n    */\n    urlPrefix: function urlPrefix() /* path, parentURL */{\n      return ENDPOINT;\n    },\n\n    /**\n      @method _buildURL\n      @private\n      @param {String} modelName\n      @param {String} id\n      @return {String} url\n    */\n    _buildURL: function _buildURL(modelName, id) {\n      return '' + ENDPOINT + id;\n    },\n\n    /**\n     Remove null/empty password fields from payload sent to server\n     */\n    _cleanPasswordAttrs: function _cleanPasswordAttrs(data) {\n      var attrsToCheck = ['derived_key', 'password', 'password_scheme', 'password_sha', 'salt', 'iterations'];\n      attrsToCheck.forEach(function (attr) {\n        if (_ember['default'].isEmpty(data[attr])) {\n          delete data[attr];\n        }\n      });\n      return data;\n    },\n\n    /**\n     Called by find in we're in standAlone mode.\n      @method private\n      @param {String} id - document id we are retrieving\n    @returns {Promise} promise\n    */\n    _offlineFind: function _offlineFind(id) {\n      var _this = this;\n\n      var usersDB = get(this, 'database.usersDB');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        usersDB.get(id).then(resolve)['catch'](function (err) {\n          var database = get(_this, 'database');\n          reject(database.handleErrorResponse(err));\n        });\n      });\n    },\n\n    /**\n    Called by updateRecord in we're in standAlone mode.\n     @method private\n    @param {POJO} data - the data we're going to search for in Pouch\n    @returns {Promise} promise\n    */\n    _offlineFindAll: function _offlineFindAll(data) {\n      var usersDB = get(this, 'database.usersDB');\n      return usersDB.allDocs(data);\n    },\n\n    /**\n    Called by updateRecord in we're in standAlone mode.\n     @method private\n    @param {POJO} data - the data we're going to store in Pouch\n    @returns {Promise} promise\n    */\n    _offlineUpdateRecord: function _offlineUpdateRecord(data) {\n      var usersDB = get(this, 'usersDB');\n      return usersDB.put(data);\n    }\n\n  });\n});","define('hospitalrun/tests/adapters/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/address/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    hideCancelButton: true,\n    updateCapability: 'update_config',\n\n    afterUpdate: function afterUpdate() {\n      this.displayAlert(this.get('i18n').t('admin.address.titles.optionsSaved'), this.get('i18n').t('admin.address.messages.addressSaved'));\n    }\n  });\n});","define('hospitalrun/tests/admin/address/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/address/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/address/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/address/route', ['exports', 'ember', 'hospitalrun/routes/abstract-edit-route', 'ember-concurrency', 'ember-i18n', 'hospitalrun/utils/unauthorized-error'], function (exports, _ember, _hospitalrunRoutesAbstractEditRoute, _emberConcurrency, _emberI18n, _hospitalrunUtilsUnauthorizedError) {\n  'use strict';\n\n  function _instanceof(left, right) { if (right != null && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    newTitle: (0, _emberI18n.translationMacro)('admin.address.newTitle'),\n    editTitle: (0, _emberI18n.translationMacro)('admin.address.editTitle'),\n\n    model: function model() {\n      return this.get('fetchAddressOptions').perform();\n    },\n\n    fetchAddressOptions: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {\n      var store;\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            store = this.get('store');\n            context$1$0.prev = 1;\n            context$1$0.next = 4;\n            return store.find('option', 'address_options');\n\n          case 4:\n            return context$1$0.abrupt('return', context$1$0.sent);\n\n          case 7:\n            context$1$0.prev = 7;\n            context$1$0.t0 = context$1$0['catch'](1);\n\n            if (!_instanceof(context$1$0.t0, _hospitalrunUtilsUnauthorizedError['default'])) {\n              context$1$0.next = 11;\n              break;\n            }\n\n            throw context$1$0.t0;\n\n          case 11:\n            return context$1$0.abrupt('return', store.push(this.get('defaultAddressOption')));\n\n          case 12:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this, [[1, 7]]);\n    })).keepLatest().cancelOn('deactivate'),\n\n    defaultAddressOption: computed(function () {\n      return this.get('store').normalize('option', {\n        id: 'address_options',\n        value: {\n          address1Label: this.get('i18n').t('admin.address.addressLabel'),\n          address1Include: true\n        }\n      });\n    })\n  });\n});","define('hospitalrun/tests/admin/address/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/address/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/address/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/custom-forms/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'npm:uuid'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _npmUuid) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    customForms: _ember['default'].inject.service(),\n    preview: false,\n    previewModel: _ember['default'].Object.create(),\n    updateCapability: 'update_config',\n\n    afterUpdate: function afterUpdate() {\n      var customForms = this.get('customForms');\n      var model = this.get('model');\n      customForms.resetCustomFormByType(model.get('formType'));\n      this.displayAlert(this.get('i18n').t('admin.customForms.titles.formSaved'), this.get('i18n').t('admin.customForms.messages.formSaved', this.get('model')));\n    },\n\n    actions: {\n      addField: function addField() {\n        var newField = this.store.createRecord('custom-field');\n        this.send('openModal', 'admin.custom-forms.field-edit', newField);\n      },\n\n      deleteField: function deleteField(field) {\n        var fields = this.get('model.fields');\n        fields.removeObject(field);\n      },\n\n      editField: function editField(field) {\n        if (isEmpty(field)) {\n          field = this.store.createRecord('custom-field');\n        }\n        this.send('openModal', 'admin.custom-forms.field-edit', field);\n      },\n\n      moveFieldDown: function moveFieldDown(field) {\n        var fields = this.get('model.fields');\n        var currentFieldIdx = fields.indexOf(field);\n        var nextField = fields.objectAt(currentFieldIdx + 1);\n        fields.replace(currentFieldIdx, 2, [nextField, field]);\n      },\n\n      moveFieldUp: function moveFieldUp(field) {\n        var fields = this.get('model.fields');\n        var previousFieldIdx = fields.indexOf(field) - 1;\n        var previousField = fields.objectAt(previousFieldIdx);\n        fields.replace(previousFieldIdx, 2, [field, previousField]);\n      },\n\n      togglePreview: function togglePreview() {\n        this.toggleProperty('preview');\n      },\n\n      updateField: function updateField(field) {\n        if (field.get('isNew')) {\n          this._addNewField(field);\n        }\n        this.get('model').save();\n      }\n    },\n\n    formName: computed('model.name', function () {\n      var i18n = this.get('i18n');\n      var formName = this.get('model.name');\n      if (isEmpty(formName)) {\n        return i18n.t('admin.customForms.labels.newForm');\n      } else {\n        return formName;\n      }\n    }),\n\n    formTypeValues: ['incident', 'operativePlan', 'patient', 'socialwork', 'visit', 'opdReport', 'dischargeReport', 'lab'],\n\n    formTypes: computed(function () {\n      var i18n = this.get('i18n');\n      var formTypeValues = this.get('formTypeValues');\n      return formTypeValues.map(function (formTypeId) {\n        return {\n          id: formTypeId,\n          value: i18n.t('admin.customForms.labels.' + formTypeId + 'FormType')\n        };\n      }).sort(function (a, b) {\n        return _ember['default'].compare(a.value.toString(), b.value.toString());\n      });\n    }),\n\n    lastFieldIndex: computed('model.fields.length', function () {\n      return this.get('model.fields.length') - 1;\n    }),\n\n    fieldTypeLabel: function fieldTypeLabel(fieldType) {\n      var i18n = this.get('i18n');\n      return i18n.t('admin.customForms.labels.' + fieldType);\n    },\n\n    _addNewField: function _addNewField(field) {\n      var changedAttributes = field.changedAttributes();\n      var fieldAttributes = {};\n      var store = this.get('store');\n      this._generatePropertyNames(field);\n      Object.keys(changedAttributes).forEach(function (attributeName) {\n        var _changedAttributes$attributeName = _slicedToArray(changedAttributes[attributeName], 2);\n\n        var newValue = _changedAttributes$attributeName[1];\n\n        fieldAttributes[attributeName] = newValue;\n      });\n      fieldAttributes.property = field.get('property');\n      var newField = store.push({\n        data: {\n          id: _npmUuid['default'].v4(),\n          type: 'custom-field',\n          attributes: fieldAttributes\n        }\n      });\n      var formFields = this.get('model.fields');\n      formFields.addObject(newField);\n    },\n\n    _generatePropertyNames: function _generatePropertyNames(field) {\n      var type = field.get('type');\n      var propertyName = this._getPropertyName(field);\n      if (type === 'checkbox') {\n        var values = field.get('values');\n        values.forEach(function (value, index) {\n          value.set('property', '' + propertyName + (index + 1));\n        });\n      } else {\n        field.set('property', propertyName);\n      }\n    },\n\n    _getPropertyName: function _getPropertyName(field) {\n      var camelizedLabel = field.get('label').camelize();\n      var labelIndex = 1;\n      var propertyName = camelizedLabel;\n      while (this._isPropertyUsed(propertyName) && labelIndex < 10) {\n        propertyName = '' + camelizedLabel + ++labelIndex;\n      }\n      return propertyName;\n    },\n\n    _isPropertyUsed: function _isPropertyUsed(propertyName) {\n      var fields = this.get('model.fields');\n      var existingProperty = fields.findBy('property', propertyName);\n      if (!isEmpty(existingProperty)) {\n        return true;\n      } else {\n        var checkboxes = fields.filterBy('type', 'checkbox');\n        return checkboxes.any(function (checkbox) {\n          existingProperty = checkbox.get('values').findBy('property', propertyName);\n          if (!isEmpty(existingProperty)) {\n            return true;\n          }\n        });\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/admin/custom-forms/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/custom-forms/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/custom-forms/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/custom-forms/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    newTitle: (0, _emberI18n.translationMacro)('admin.customForms.titles.newCustomForm'),\n    editTitle: (0, _emberI18n.translationMacro)('admin.customForms.titles.editCustomForm'),\n    modelName: 'custom-form',\n\n    actions: {\n      allItems: function allItems() {\n        this.transitionTo('admin.custom-forms');\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/custom-forms/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/custom-forms/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/custom-forms/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/custom-forms/field-edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    editController: _ember['default'].inject.controller('admin/custom-forms/edit'),\n    cancelAction: 'closeModal',\n    i18n: _ember['default'].inject.service(),\n\n    actions: {\n      addValue: function addValue() {\n        var fieldValues = this.get('model.values');\n        if (isEmpty(fieldValues)) {\n          var model = this.get('model');\n          fieldValues = [];\n          model.set('values', fieldValues);\n        }\n        fieldValues.addObject(_ember['default'].Object.create());\n      },\n\n      deleteValue: function deleteValue(valueToDelete) {\n        var fieldValues = this.get('model.values');\n        fieldValues.removeObject(valueToDelete);\n      },\n\n      selectType: function selectType(fieldType) {\n        this.get('model').set('type', fieldType);\n      },\n\n      update: function update() {\n        this.get('editController').send('updateField', this.get('model'));\n        this.send('closeModal');\n      }\n    },\n\n    fieldTypeValues: ['checkbox', 'radio', 'select', 'text', 'textarea'],\n\n    fieldTypes: computed(function () {\n      var i18n = this.get('i18n');\n      var fieldTypeValues = this.get('fieldTypeValues');\n      return fieldTypeValues.map(function (fieldTypeId) {\n        return {\n          id: fieldTypeId,\n          value: i18n.t('admin.customForms.labels.' + fieldTypeId)\n        };\n      }).sort(function (a, b) {\n        return _ember['default'].compare(a.value.toString(), b.value.toString());\n      });\n    }),\n\n    showValues: computed('model.type', function () {\n      var type = this.get('model.type');\n      return type === 'checkbox' || type === 'radio' || type === 'select';\n    })\n\n  });\n});","define('hospitalrun/tests/admin/custom-forms/field-edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/custom-forms/field-edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/custom-forms/field-edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/custom-forms/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    addPermission: 'update_config',\n    deletePermission: 'update_config'\n  });\n});","define('hospitalrun/tests/admin/custom-forms/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/custom-forms/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/custom-forms/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/custom-forms/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _hospitalrunMixinsModalHelper, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsUserSession['default'], {\n    newButtonAction: computed(function () {\n      if (this.currentUserCan('update_config')) {\n        return 'newItem';\n      } else {\n        return null;\n      }\n    }),\n    newButtonText: (0, _emberI18n.translationMacro)('admin.customForms.buttons.newForm'),\n\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('admin.customForms.titles.customForms');\n    }),\n    model: function model() {\n      var store = this.get('store');\n      return store.findAll('custom-form');\n    },\n\n    actions: {\n      deleteItem: function deleteItem(item) {\n        var i18n = this.get('i18n');\n        var model = _ember['default'].Object.create({\n          itemToDelete: item\n        });\n        var message = i18n.t('messages.delete', { name: item.get('name') });\n        var title = i18n.t('admin.customForms.titles.deleteForm');\n        this.displayConfirm(title, message, 'deleteCustomForm', model);\n      },\n\n      deleteCustomForm: function deleteCustomForm(model) {\n        model.itemToDelete.set('archived', true);\n        model.itemToDelete.save().then(function () {\n          model.itemToDelete.unloadRecord();\n        });\n      },\n\n      editItem: function editItem(item) {\n        this.transitionTo('admin.custom-forms.edit', item);\n      },\n\n      newItem: function newItem() {\n        this.transitionTo('admin.custom-forms.edit', 'new');\n      }\n\n    }\n  });\n});","define('hospitalrun/tests/admin/custom-forms/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/custom-forms/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/custom-forms/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/loaddb/controller', ['exports', 'ember', 'ember-i18n', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/progress-dialog'], function (exports, _ember, _emberI18n, _hospitalrunMixinsModalHelper, _hospitalrunMixinsProgressDialog) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsProgressDialog['default'], {\n    database: _ember['default'].inject.service(),\n    fileSystem: _ember['default'].inject.service('filesystem'),\n    progressMessage: (0, _emberI18n.translationMacro)('admin.loaddb.progressMessage'),\n    progressTitle: (0, _emberI18n.translationMacro)('admin.loaddb.progressTitle'),\n    syncResults: null,\n    fileImportedName: null,\n\n    actions: {\n      loadFile: function loadFile() {\n        var _this = this;\n\n        var fileSystem = this.get('fileSystem');\n        var fileToImport = this.get('importFile');\n        if (!fileToImport || !fileToImport.type) {\n          this.displayAlert(this.get('i18n').t('admin.loaddb.displayAlertTitle'), this.get('i18n').t('admin.loaddb.displayAlertMessage'));\n        } else {\n          this.showProgressModal();\n          this.set('syncResults');\n          this.set('fileImportedName');\n          fileSystem.fileToString(fileToImport).then(function (fileAsString) {\n            var database = _this.get('database');\n            var fileName = _this.get('importFile.name');\n            _this.set('fileImportedName', fileName);\n            _this.set('importFile');\n            _this.set('model.importFileName');\n            database.loadDBFromDump(fileAsString).then(function (results) {\n              _this.closeProgressModal();\n              _this.set('syncResults', results);\n            })['catch'](function (err) {\n              _this.displayAlert(_this.get('i18n').t('admin.loaddb.errorDisplayAlertTitle'), _this.get('i18n').t('admin.loaddb.errorDisplayAlertMessage', { error: JSON.stringify(err) }));\n            });\n          });\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/loaddb/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/loaddb/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/loaddb/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/loaddb/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    hideNewButton: false,\n    editTitle: (0, _emberI18n.translationMacro)('admin.loaddb.editTitle'),\n\n    database: inject.service(),\n\n    beforeModel: function beforeModel() {\n      if (!this.currentUserCan('load_db')) {\n        this.transitionTo('application');\n      }\n    },\n\n    // Make sure database is available for import\n    model: function model() {\n      var _this = this;\n\n      var database = get(this, 'database');\n      return database.getDBInfo()['catch'](function (err) {\n        return _this.send('error', database.handleErrorResponse(err));\n      });\n    }\n  });\n});","define('hospitalrun/tests/admin/loaddb/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/loaddb/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/loaddb/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/lookup/controller', ['exports', 'ember', 'hospitalrun/mixins/billing-categories', 'npm:csv-parse', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/inventory-type-list', 'hospitalrun/mixins/unit-types', 'hospitalrun/mixins/visit-types', 'ember-keyboard'], function (exports, _ember, _hospitalrunMixinsBillingCategories, _npmCsvParse, _hospitalrunMixinsModalHelper, _hospitalrunMixinsInventoryTypeList, _hospitalrunMixinsUnitTypes, _hospitalrunMixinsVisitTypes, _emberKeyboard) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsBillingCategories['default'], _emberKeyboard.EKMixin, _hospitalrunMixinsInventoryTypeList['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsUnitTypes['default'], _hospitalrunMixinsVisitTypes['default'], {\n    fileSystem: inject.service('filesystem'),\n    lookupLists: inject.service(),\n\n    canEditValues: computed('model.lookupType', function () {\n      var lookupType = this.get('model.lookupType');\n      return lookupType !== 'imaging_pricing_types' && lookupType !== 'lab_pricing_types';\n    }),\n\n    lookupTypes: computed(function () {\n      return [{\n        name: this.get('i18n').t('admin.lookup.anesthesiaTypes'),\n        value: 'anesthesia_types',\n        model: {\n          procedure: 'anesthesiaType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.anesthesiologists'),\n        value: 'anesthesiologists',\n        model: {\n          procedure: 'anesthesiologist'\n        }\n      }, {\n        defaultValues: 'defaultBillingCategories',\n        name: this.get('i18n').t('admin.lookup.billingCategories'),\n        value: 'billing_categories',\n        models: {\n          'billing-line-item': 'category'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.clinicList'),\n        value: 'clinic_list',\n        models: { // Models that use this lookup -- use this later to update models on lookup changes\n          patient: 'clinic'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.countryList'),\n        value: 'country_list',\n        models: {\n          patient: 'country'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.diagnosisList'),\n        value: 'diagnosis_list',\n        models: {\n          diagnosis: 'diagnosis'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.cptCodeList'),\n        value: 'cpt_code_list',\n        models: {\n          procedure: 'cptCode'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.expenseAccountList'),\n        value: 'expense_account_list',\n        models: {\n          'inv-request': 'expenseAccount',\n          pricing: 'expenseAccount'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.aisleLocationList'),\n        value: 'aisle_location_list',\n        models: {\n          inventory: 'aisleLocation',\n          'inv-location': 'aisleLocation',\n          'inv-purchase': 'aisleLocation',\n          'inv-request': ['deliveryAisle', 'locationsAffected' // Special use case that we need to handle\n          ]\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.warehouseList'),\n        value: 'warehouse_list',\n        models: {\n          inventory: 'location',\n          'inv-location': 'location',\n          'inv-purchase': 'location',\n          'inv-request': ['deliveryLocation', 'locationsAffected' // Special use case that we need to handle\n          ]\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.incidentDepartments'),\n        value: 'incident_departments',\n        models: {\n          incident: 'department'\n        }\n      }, {\n        defaultValues: 'defaultInventoryTypes',\n        name: this.get('i18n').t('admin.lookup.inventoryTypes'),\n        value: 'inventory_types',\n        models: {\n          inventory: 'inventoryType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.imagingPricingTypes'),\n        value: 'imaging_pricing_types',\n        models: {\n          pricing: 'pricingType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.labPricingTypes'),\n        value: 'lab_pricing_types',\n        models: {\n          pricing: 'pricingType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.patientStatusList'),\n        value: 'patient_status_list',\n        models: {\n          patient: 'status'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.physicianList'),\n        value: 'physician_list',\n        models: {\n          appointment: 'provider',\n          visit: 'examiner',\n          procedure: ['assistant', 'physician']\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.procedureList'),\n        value: 'procedure_list',\n        models: {\n          procedure: 'description'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.procedureLocations'),\n        value: 'procedure_locations',\n        models: {\n          procedure: 'location'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.procedurePricingTypes'),\n        value: 'procedure_pricing_types',\n        models: {\n          pricing: 'pricingType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.radiologists'),\n        value: 'radiologists',\n        model: {\n          imaging: 'radiologist'\n        }\n      }, {\n        name: this.get('i18n').t('labels.sex'),\n        value: 'sex',\n        model: {\n          patient: 'sex'\n        }\n      }, {\n        defaultValues: 'defaultUnitList',\n        name: this.get('i18n').t('admin.lookup.unitTypes'),\n        value: 'unit_types',\n        models: {\n          inventory: 'distributionUnit',\n          'inv-purchase': 'distributionUnit'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.vendorList'),\n        value: 'vendor_list',\n        models: {\n          'inv-purchase': 'vendor'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.visitLocationList'),\n        value: 'visit_location_list',\n        models: {\n          appointment: 'location',\n          visit: 'location'\n        }\n      }, {\n        defaultValues: 'defaultVisitTypes',\n        name: this.get('i18n').t('admin.lookup.visitTypes'),\n        value: 'visit_types',\n        models: {\n          visit: 'visitType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.wardPricingTypes'),\n        value: 'ward_pricing_types',\n        models: {\n          pricing: 'pricingType'\n        }\n      }];\n    }),\n\n    importFile: computed.alias('lookupTypeList.importFile'),\n\n    lookupTitle: computed('model.lookupType', function () {\n      var lookupType = this.get('model.lookupType');\n      var lookupTypes = this.get('lookupTypes');\n      var lookupDesc = undefined;\n      if (!_ember['default'].isEmpty(lookupType)) {\n        lookupDesc = lookupTypes.findBy('value', lookupType);\n        if (!_ember['default'].isEmpty(lookupDesc)) {\n          return lookupDesc.name;\n        }\n      }\n    }),\n\n    lookupTypeList: computed('model.lookupType', function () {\n      var lookupType = this.get('model.lookupType');\n      var lookupItem = undefined;\n      if (!_ember['default'].isEmpty(lookupType)) {\n        lookupItem = this.get('model').findBy('id', lookupType);\n        if (_ember['default'].isEmpty(lookupItem) || !lookupItem.get('isLoaded')) {\n          var defaultValues = [];\n          var lookupTypes = this.get('lookupTypes');\n          var lookupDesc = lookupTypes.findBy('value', lookupType);\n          var store = this.get('store');\n          if (!_ember['default'].isEmpty(lookupDesc) && !_ember['default'].isEmpty(lookupDesc.defaultValues)) {\n            defaultValues = this.get(lookupDesc.defaultValues);\n          }\n          lookupItem = store.push(store.normalize('lookup', {\n            id: lookupType,\n            value: defaultValues\n          }));\n        }\n        if (!_ember['default'].isEmpty(lookupItem) && _ember['default'].isEmpty(lookupItem.get('userCanAdd'))) {\n          lookupItem.set('userCanAdd', true);\n        }\n        return lookupItem;\n      }\n    }),\n\n    lookupTypeValues: computed('model.lookupType', 'lookupTypeList.value.[]', function () {\n      var _this = this;\n\n      var lookupType = this.get('model.lookupType');\n      var values = this.get('lookupTypeList.value');\n      if (!_ember['default'].isEmpty(values)) {\n        values.sort(this._sortValues);\n        values = values.map(function (value) {\n          return {\n            canModify: _this._canModifyValue(value, lookupType),\n            value: value\n          };\n        });\n      }\n      return _ember['default'].ArrayProxy.create({ content: _ember['default'].A(values) });\n    }),\n\n    showOrganizeByType: computed('model.lookupType', function () {\n      var lookupType = this.get('model.lookupType');\n      return !_ember['default'].isEmpty(lookupType) && lookupType.indexOf('pricing_types') > 0;\n    }),\n\n    _canModifyValue: function _canModifyValue(value, lookupType) {\n      switch (lookupType) {\n        case 'inventory_types':\n          {\n            if (value === 'Medication') {\n              return false;\n            }\n            break;\n          }\n        case 'lab_pricing_types':\n          {\n            if (value === 'Lab Procedure') {\n              return false;\n            }\n            break;\n          }\n        case 'imaging_pricing_types':\n          {\n            if (value === 'Imaging Procedure') {\n              return false;\n            }\n            break;\n          }\n        case 'visit_types':\n          {\n            if (value === 'Admission') {\n              return false;\n            } else if (value === 'Imaging') {\n              return false;\n            } else if (value === 'Lab') {\n              return false;\n            } else if (value === 'Pharmacy') {\n              return false;\n            }\n          }\n      }\n      return true;\n    },\n\n    _importLookupList: function _importLookupList(file) {\n      var _this2 = this;\n\n      var fileSystem = get(this, 'fileSystem');\n      var lookupTypeList = get(this, 'lookupTypeList');\n      var lookupValues = get(lookupTypeList, 'value');\n      fileSystem.fileToString(file).then(function (values) {\n        (0, _npmCsvParse['default'])(values, { trim: true }, function (err, data) {\n          data.forEach(function (row) {\n            var _row = _slicedToArray(row, 1);\n\n            var newValue = _row[0];\n\n            if (!lookupValues.includes(newValue)) {\n              lookupValues.addObject(newValue);\n            }\n          });\n          lookupValues.sort();\n          var i18n = get(_this2, 'i18n');\n          var message = i18n.t('admin.lookup.alertImportListSaveMessage');\n          var title = i18n.t('admin.lookup.alertImportListSaveTitle');\n          lookupTypeList.save().then(function () {\n            var lookupLists = get(_this2, 'lookupLists');\n            lookupLists.resetLookupList(get(lookupTypeList, 'id'));\n            _this2.displayAlert(title, message);\n            _this2.set('importFile');\n            _this2.set('model.importFileName');\n          });\n        });\n      });\n    },\n\n    _sortValues: function _sortValues(a, b) {\n      return _ember['default'].compare(a.toLowerCase(), b.toLowerCase());\n    },\n\n    activateKeyboard: _ember['default'].on('init', function () {\n      this.set('keyboardActivated', true);\n    }),\n\n    updateListKeyboard: _ember['default'].on((0, _emberKeyboard.keyDown)('ctrl+KeyS'), (0, _emberKeyboard.keyDown)('cmd+KeyS'), function (event) {\n      this.send('updateList');\n      event.preventDefault();\n    }),\n\n    actions: {\n      addValue: function addValue() {\n        this.send('openModal', 'admin.lookup.edit', _ember['default'].Object.create({\n          isNew: true\n        }));\n      },\n      confirmDeleteValue: function confirmDeleteValue(value) {\n        var i18n = this.get('i18n');\n        var title = i18n.t('admin.lookup.titles.deleteLookupValue');\n        var message = i18n.t('messages.delete', { name: value });\n        this.displayConfirm(title, message, 'deleteValue', _ember['default'].Object.create({\n          valueToDelete: value\n        }));\n      },\n      deleteValue: function deleteValue(value) {\n        var lookupTypeList = this.get('lookupTypeList');\n        var lookupTypeValues = lookupTypeList.get('value');\n        var valueToDelete = value.get('valueToDelete');\n        lookupTypeValues.removeObject(valueToDelete.toString());\n        lookupTypeList.save();\n      },\n      editValue: function editValue(value) {\n        if (!_ember['default'].isEmpty(value)) {\n          this.send('openModal', 'admin.lookup.edit', _ember['default'].Object.create({\n            isNew: false,\n            originalValue: value.toString(),\n            value: value.toString()\n          }));\n        }\n      },\n      importList: function importList() {\n        var fileToImport = this.get('importFile');\n        if (!fileToImport || !fileToImport.type) {\n          this.displayAlert(this.get('i18n').t('admin.lookup.alertImportListTitle'), this.get('i18n').t('admin.lookup.alertImportListMessage'));\n        } else {\n          this._importLookupList(fileToImport);\n        }\n      },\n      updateList: function updateList() {\n        var _this3 = this;\n\n        var lookupTypeList = this.get('lookupTypeList');\n        lookupTypeList.save().then(function () {\n          var lookupLists = get(_this3, 'lookupLists');\n          lookupLists.resetLookupList(get(lookupTypeList, 'id'));\n          _this3.displayAlert(_this3.get('i18n').t('admin.lookup.alertImportListUpdateTitle'), _this3.get('i18n').t('admin.lookup.alertImportListUpdateMessage'));\n        });\n      },\n      updateValue: function updateValue(valueObject) {\n        var updateList = false;\n        var lookupTypeList = this.get('lookupTypeList');\n        var values = lookupTypeList.get('value');\n        var value = valueObject.get('value');\n        if (valueObject.get('isNew')) {\n          updateList = true;\n        } else {\n          var originalValue = valueObject.get('originalValue');\n          if (value !== originalValue) {\n            values.removeObject(originalValue);\n            updateList = true;\n            // TODO UPDATE ALL EXISTING DATA LOOKUPS (NODEJS JOB)\n          }\n        }\n        if (updateList) {\n          values.addObject(value);\n          values = values.sort(this._sortValues);\n          lookupTypeList.set('value', values);\n          this.send('updateList');\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/lookup/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/lookup/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/lookup/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/lookup/edit/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    editController: _ember['default'].inject.controller('admin/lookup'),\n    showUpdateButton: true,\n\n    updateButtonAction: 'update',\n    updateButtonText: (function () {\n      var i18n = this.get('i18n');\n      if (this.get('model.isNew')) {\n        return i18n.t('buttons.add');\n      } else {\n        return i18n.t('buttons.update');\n      }\n    }).property('model.isNew'),\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        if (!_ember['default'].isEmpty(this.get('model.value'))) {\n          this.get('editController').send('updateValue', this.get('model'));\n          this.send('closeModal');\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/lookup/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/lookup/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/lookup/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/lookup/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n', 'ember'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    hideNewButton: true,\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('admin.lookup.pageTitle');\n    }),\n    model: function model() {\n      var _this = this;\n\n      return this.store.findAll('lookup')['catch'](function (error) {\n        return _this.send('error', error);\n      });\n    },\n\n    afterModel: function afterModel(model) {\n      model.set('lookupType', 'anesthesia_types');\n    },\n\n    actions: {\n      deleteValue: function deleteValue(value) {\n        this.controller.send('deleteValue', value);\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/lookup/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/lookup/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/lookup/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/print-header/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    hideCancelButton: true,\n    updateCapability: 'update_config',\n\n    afterUpdate: function afterUpdate() {\n      this.displayAlert(this.get('i18n').t('admin.header.titles.optionsSaved'), this.get('i18n').t('admin.header.messages.headerSaved'));\n    }\n  });\n});","define('hospitalrun/tests/admin/print-header/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/print-header/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/print-header/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/print-header/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n', 'hospitalrun/utils/unauthorized-error'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n, _hospitalrunUtilsUnauthorizedError) {\n  'use strict';\n\n  function _instanceof(left, right) { if (right != null && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    newTitle: (0, _emberI18n.translationMacro)('admin.header.newTitle'),\n    editTitle: (0, _emberI18n.translationMacro)('admin.header.editTitle'),\n    model: function model() {\n      var _this = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        _this.get('store').find('option', 'print_header').then(function (headerOptions) {\n          resolve(headerOptions);\n        }, function (err) {\n          if (_instanceof(err, _hospitalrunUtilsUnauthorizedError['default'])) {\n            reject(err);\n          } else {\n            var store = _this.get('store');\n            var newConfig = store.push(store.normalize('option', {\n              id: 'print_header',\n              value: {\n                facilityName: _this.get('i18n').t('admin.header.facilityName'),\n                headerLine1: _this.get('i18n').t('admin.header.headerLine1')\n              }\n            }));\n            resolve(newConfig);\n          }\n        });\n      });\n    }\n  });\n});","define('hospitalrun/tests/admin/print-header/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/print-header/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/print-header/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/query/controller', ['exports', 'ember', 'hospitalrun/mixins/edit-panel-props', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunMixinsEditPanelProps, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsEditPanelProps['default'], {\n    hideCancelButton: true,\n    showUpdateButton: true,\n    updateButtonAction: 'query',\n    updateButtonText: 'Query', // admin function not requiring i8ln\n\n    objectTypeList: ['appointment', 'imaging', 'inv-location', 'inv-purchase', 'inv-request', 'inventory', 'invoice', 'lab', 'medication', 'patient', 'photo', 'procedure', 'visit', 'vital'],\n\n    objectTypes: _ember['default'].computed.map('objectTypeList', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n\n    actions: {\n      query: function query() {\n        var fieldName = this.get('fieldName');\n        var objectType = this.get('objectType');\n        var queryValue = this.get('queryValue');\n        var query = {\n          containsValue: {\n            value: queryValue,\n            keys: [fieldName]\n          }\n        };\n        this.store.query(objectType, query).then((function (results) {\n          var _this = this;\n\n          if (_ember['default'].isEmpty(results)) {\n            this.set('errorMessage', 'Query returned no results.');\n            this.set('haveError', true);\n            this.set('showQueryResults', false);\n          } else {\n            (function () {\n              var currentValue = undefined;\n              var attributes = ['id'];\n              var resultRows = [];\n              results.get('firstObject').eachAttribute(function (name) {\n                attributes.push(name);\n              });\n\n              results.forEach(function (result) {\n                var resultRow = [];\n                /* resultRow.push({\n                    name: 'id',\n                    value: result.get('id')\n                }); */\n                attributes.forEach(function (attribute) {\n                  currentValue = result.get(attribute);\n                  if (!_ember['default'].isEmpty(currentValue)) {\n                    resultRow.push({\n                      name: attribute,\n                      value: currentValue\n                    });\n                  }\n                });\n                resultRows.push(resultRow);\n              });\n              _this.set('resultRows', resultRows);\n              _this.set('haveError', false);\n              _this.set('showQueryResults', true);\n            })();\n          }\n        }).bind(this), (function (error) {\n          this.set('errorMessage', error);\n          this.set('haveError', true);\n          this.set('showQueryResults', false);\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/query/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/query/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/query/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/query/route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsUserSession['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    beforeModel: function beforeModel() {\n      if (!this.currentUserCan('query_db')) {\n        this.transitionTo('application');\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/query/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/query/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/query/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/roles/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/user-roles', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUserRoles, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUserRoles['default'], _hospitalrunMixinsUserSession['default'], {\n    currentRole: '',\n    disabledAction: false,\n    hideCancelButton: true,\n    updateCapability: 'define_user_roles',\n    filteredRoles: _ember['default'].computed.filter('userRoles', function (userRole) {\n      return userRole.name !== 'System Administrator';\n    }),\n\n    availableCapabilities: [{\n      name: 'admin',\n      capabilities: ['admin', 'loadDb', 'updateConfig', 'defineUserRoles']\n    }, {\n      name: 'appointments',\n      capabilities: ['appointments', 'addAppointment']\n    }, {\n      name: 'billing',\n      capabilities: ['billing', 'addBillingDiagnosis', 'addCharge', 'addPricing', 'addPricingProfile', 'addInvoice', 'addPayment', 'deleteInvoice', 'deletePricing', 'deletePricingProfile', 'editInvoice', 'invoices', 'overrideInvoice', 'pricing', 'cashier', 'listPaidInvoices']\n    }, {\n      name: 'patients',\n      capabilities: ['patients', 'addAllergy', 'addDiagnosis', 'addNote', 'addOperativePlan', 'addOperationReport', 'addPhoto', 'addPatient', 'addProcedure', 'addSocialwork', 'addVisit', 'addVitals', 'admitPatient', 'deleteNote', 'deletePhoto', 'deletePatient', 'deleteAppointment', 'deleteDiagnosis', 'deleteProcedure', 'deleteSocialwork', 'deleteVitals', 'deleteVisit', 'dischargePatient', 'patientReports', 'visits']\n    }, {\n      name: 'medication',\n      capabilities: ['medication', 'addMedication', 'deleteMedication', 'fulfillMedication']\n    }, {\n      name: 'labs',\n      capabilities: ['labs', 'addLab', 'completeLab', 'deleteLab']\n    }, {\n      name: 'imaging',\n      capabilities: ['imaging', 'addImaging', 'completeImaging', 'deleteImaging']\n    }, {\n      name: 'incident',\n      capabilities: ['incident', 'addIncident', 'addIncidentCategory', 'deleteIncident', 'deleteIncidentCategory', 'manageIncidents', 'generateIncidentReport']\n    }, {\n      name: 'inventory',\n      capabilities: ['inventory', 'addInventoryRequest', 'addInventoryItem', 'addInventoryPurchase', 'adjustInventoryLocation', 'deleteInventoryItem', 'fulfillInventory']\n    }],\n\n    missingCapablities: _ember['default'].computed('availableCapabilities', 'defaultCapabilities', function () {\n      var availableCapabilities = this.get('availableCapabilities');\n      var capabilityBySection = Object.keys(availableCapabilities);\n      var defaultCapabilities = Object.keys(this.get('defaultCapabilities'));\n      var missing = [];\n      defaultCapabilities.forEach(function (capability) {\n        var capabilityUsed = false;\n        capabilityBySection.forEach(function (sectionName) {\n          var section = availableCapabilities[sectionName];\n          if (section.capabilities.includes(capability.camelize())) {\n            capabilityUsed = true;\n          }\n        });\n        if (!capabilityUsed) {\n          missing.push(capability + ' - ' + capability.camelize());\n        }\n      });\n      return missing;\n    }),\n\n    capabilitySections: _ember['default'].computed.map('availableCapabilities', function (section) {\n      var _this = this;\n\n      var mappedCapabilities = [];\n      section.capabilities.forEach(function (key) {\n        mappedCapabilities.push({\n          key: key,\n          name: _this.get('i18n').t('admin.roles.capability.' + key)\n        });\n      });\n      return {\n        name: this.get('i18n').t('admin.roles.capability.' + section.name),\n        capabilities: mappedCapabilities\n      };\n    }),\n\n    actions: {\n      selectRole: function selectRole(role) {\n        var _this2 = this;\n\n        var roleToUpdate = this.get('model').findBy('id', role.dasherize());\n        this.set('currentRole', role);\n        this.set('roleToUpdate', roleToUpdate);\n        try {\n          if (roleToUpdate) {\n            (function () {\n              var capabilities = roleToUpdate.get('capabilities');\n              _this2.get('availableCapabilities').forEach(function (section) {\n                section.capabilities.forEach(function (capability) {\n                  if (capabilities.includes(capability)) {\n                    _this2.set(capability, true);\n                  } else {\n                    _this2.set(capability, false);\n                  }\n                });\n              });\n            })();\n          } else {\n            (function () {\n              var defaultCapabilities = _this2.get('defaultCapabilities');\n              Object.keys(defaultCapabilities).forEach(function (capability) {\n                var capabilityRoles = defaultCapabilities[capability];\n                if (capabilityRoles.includes(role)) {\n                  _this2.set(capability.camelize(), true);\n                } else {\n                  _this2.set(capability.camelize(), false);\n                }\n              });\n            })();\n          }\n        } catch (ex) {\n          console.log('ex setting role:', ex);\n        }\n      },\n\n      update: function update() {\n        var _this3 = this;\n\n        var currentRole = this.get('currentRole');\n        var roleToUpdate = this.get('roleToUpdate');\n        if (_ember['default'].isEmpty(roleToUpdate)) {\n          roleToUpdate = this.get('store').createRecord('user-role', {\n            id: currentRole.dasherize(),\n            name: currentRole\n          });\n        }\n        var capabilitiesToSave = [];\n        this.get('availableCapabilities').forEach(function (section) {\n          section.capabilities.forEach(function (capability) {\n            if (_this3.get(capability) === true) {\n              capabilitiesToSave.push(capability);\n            }\n          });\n        });\n        roleToUpdate.set('capabilities', capabilitiesToSave);\n        roleToUpdate.save().then(function () {\n          _this3.displayAlert(_this3.get('i18n').t('admin.roles.titles.roleSaved'), _this3.get('i18n').t('admin.roles.messages.roleSaved', { roleName: currentRole }));\n        });\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/admin/roles/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/roles/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/roles/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/roles/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    newTitle: (0, _emberI18n.translationMacro)('admin.userRoles'),\n    editTitle: (0, _emberI18n.translationMacro)('admin.userRoles'),\n    model: function model() {\n      return this.get('store').findAll('user-role');\n    }\n  });\n});","define('hospitalrun/tests/admin/roles/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/roles/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/roles/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_user',\n    allowSearch: false,\n    moduleName: 'admin',\n    sectionTitle: 'Admin',\n\n    editPath: (function () {\n      return 'users.edit';\n    }).property(),\n\n    deletePath: (function () {\n      return 'users.delete';\n    }).property()\n  });\n});","define('hospitalrun/tests/admin/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/textreplace/controller', ['exports', 'ember', 'ember-validations'], function (exports, _ember, _emberValidations) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_emberValidations['default'], {\n    hideCancelButton: true,\n    updateCapability: 'update_config',\n\n    createExpansion: (function () {\n      var newExpansion = this.get('store').createRecord('text-expansion');\n      this.set('newExpansion', newExpansion);\n    }).on('init'),\n\n    actions: {\n      cancelExpansion: function cancelExpansion() {\n        this.createExpansion();\n      }\n    },\n\n    validations: {\n      'newExpansion.from': {\n        presence: true\n      },\n      'newExpansion.to': {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/textreplace/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/textreplace/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/textreplace/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/textreplace/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n', 'ember'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('admin.textReplacements.pageTitle');\n    }),\n    hideNewButton: true,\n\n    model: function model() {\n      var store = this.get('store');\n      return store.findAll('text-expansion').then(function (result) {\n        return result.filter(function (model) {\n          var isNew = model.get('isNew');\n          return !isNew;\n        });\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      controller.createExpansion();\n    },\n\n    actions: {\n      addExpansion: function addExpansion(newExpansion) {\n        var _this = this;\n\n        newExpansion.save().then(function () {\n          _this.refresh();\n        })['catch'](function () {\n          _this.refresh();\n        });\n      },\n\n      deleteExpansion: function deleteExpansion(expansion) {\n        var _this2 = this;\n\n        expansion.deleteRecord();\n        expansion.save().then(function () {\n          _this2.refresh();\n        })['catch'](function () {\n          _this2.refresh();\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/textreplace/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/textreplace/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/textreplace/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/visit-forms/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsVisitTypes['default'], {\n    hideCancelButton: true,\n    updateCapability: 'update_config',\n    visitTypesList: computed.alias('model.visitTypesList'),\n\n    visitFormsForEditing: computed('model.visitForms', 'visitTypes', function () {\n      var visitForms = this.get('model.visitForms');\n      var visitTypes = this.get('visitTypes');\n\n      var editList = visitTypes.map(function (visitType) {\n        if (!visitForms[visitType.value]) {\n          visitForms[visitType.value] = 'initial';\n        }\n        return {\n          type: visitType.value,\n          form: visitForms[visitType.value]\n        };\n      });\n      return editList;\n    }),\n\n    visitTemplateIds: ['initial', 'followup'],\n\n    visitTemplates: computed(function () {\n      var i18n = this.get('i18n');\n      var visitTemplateIds = this.get('visitTemplateIds');\n      return visitTemplateIds.map(function (currentId) {\n        return {\n          id: currentId,\n          value: i18n.t('admin.visitForms.labels.' + currentId)\n        };\n      });\n    }),\n\n    afterUpdate: function afterUpdate() {\n      this.displayAlert(this.get('i18n').t('admin.address.titles.optionsSaved'), this.get('i18n').t('admin.address.messages.addressSaved'));\n    },\n\n    actions: {\n      selectForm: function selectForm(visitType, event) {\n        var visitForms = this.get('model.visitForms');\n        visitForms[visitType] = event.target.value;\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/visit-forms/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/visit-forms/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/visit-forms/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/visit-forms/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    editTitle: (0, _emberI18n.translationMacro)('admin.visitForms.titles.visitForms'),\n    newTitle: _ember['default'].computed.alias('editTitle'),\n    model: function model() {\n      var store = this.get('store');\n      var promiseHash = {\n        visitFormsOption: store.find('option', 'visit_forms'),\n        visitTypes: store.find('lookup', 'visit_types')\n      };\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        _ember['default'].RSVP.hashSettled(promiseHash).then(function (results) {\n          var model = _ember['default'].Object.create();\n          if (results.visitTypes.state === 'fulfilled') {\n            model.set('visitTypesList', results.visitTypes.value);\n          }\n          if (results.visitFormsOption.state === 'fulfilled') {\n            model.set('visitForms', results.visitFormsOption.value);\n          } else {\n            model.set('visitForms', {});\n          }\n          resolve(model);\n        }, reject);\n      });\n    }\n  });\n});","define('hospitalrun/tests/admin/visit-forms/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/visit-forms/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/visit-forms/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/workflow/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    hideCancelButton: true,\n    updateCapability: 'update_config',\n\n    afterUpdate: function afterUpdate() {\n      this.displayAlert(this.get('i18n').t('admin.workflow.titles.optionsSaved'), this.get('i18n').t('admin.workflow.messages.optionsSaved'));\n    }\n  });\n});","define('hospitalrun/tests/admin/workflow/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/workflow/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/workflow/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/workflow/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    editTitle: (0, _emberI18n.translationMacro)('admin.workflow.editTitle'),\n\n    model: function model() {\n      var store = this.get('store');\n      return store.find('option', 'workflow_options')['catch'](function () {\n        // create a new workflow_option if none exists\n        return store.push(store.normalize('option', {\n          id: 'workflow_options',\n          value: {\n            admissionDeposit: false,\n            clinicPrepayment: false,\n            followupPrepayment: false,\n            outpatientLabPrepayment: false,\n            outpatientImagingPrepayment: false,\n            outpatientMedicationPrepayment: false\n          }\n        }));\n      });\n    }\n  });\n});","define('hospitalrun/tests/admin/workflow/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/workflow/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/workflow/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/allergy/edit/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _ember, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    i18n: inject.service(),\n    editController: alias('model.editController'),\n    newAllergy: false,\n\n    additionalButtons: computed('model.isNew', function () {\n      var model = get(this, 'model');\n      var btn = get(this, 'i18n').t('buttons.delete');\n      var isNew = get(model, 'isNew');\n      if (!isNew) {\n        return [{\n          'class': 'btn btn-default warning',\n          buttonAction: 'deleteAllergy',\n          buttonIcon: 'octicon octicon-x',\n          buttonText: btn\n        }];\n      }\n    }),\n\n    title: _ember['default'].computed('model', function () {\n      var model = get(this, 'model');\n      var i18n = get(this, 'i18n');\n      var isNew = get(model, 'isNew');\n      if (!isNew) {\n        return i18n.t('allergies.titles.editAllergy');\n      } else {\n        return i18n.t('allergies.titles.addAllergy');\n      }\n    }),\n\n    beforeUpdate: function beforeUpdate() {\n      var allergy = get(this, 'model');\n      set(this, 'newAllergy', get(allergy, 'isNew'));\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    afterUpdate: function afterUpdate(allergy) {\n      var newAllergy = get(this, 'newAllergy');\n      if (newAllergy) {\n        get(this, 'editController').send('addAllergy', allergy);\n        set(this, 'name', '');\n      } else {\n        this.send('closeModal');\n      }\n    },\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      deleteAllergy: function deleteAllergy() {\n        var allergy = get(this, 'model');\n        get(this, 'editController').send('deleteAllergy', allergy);\n      }\n    }\n  });\n});","define('hospitalrun/tests/allergy/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - allergy/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'allergy/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/app', ['exports', 'ember', 'hospitalrun/tests/resolver', 'ember-load-initializers', 'hospitalrun/tests/config/environment'], function (exports, _ember, _hospitalrunTestsResolver, _emberLoadInitializers, _hospitalrunTestsConfigEnvironment) {\n  'use strict';\n\n  var App = undefined;\n\n  _ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = _ember['default'].Application.extend({\n    modulePrefix: _hospitalrunTestsConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _hospitalrunTestsConfigEnvironment['default'].podModulePrefix,\n    Resolver: _hospitalrunTestsResolver['default']\n  });\n\n  (0, _emberLoadInitializers['default'])(App, _hospitalrunTestsConfigEnvironment['default'].modulePrefix);\n\n  exports['default'] = App;\n});","define('hospitalrun/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/calendar/controller', ['exports', 'hospitalrun/appointments/index/controller', 'hospitalrun/mixins/appointment-statuses', 'moment', 'hospitalrun/mixins/visit-types', 'hospitalrun/utils/select-values', 'ember'], function (exports, _hospitalrunAppointmentsIndexController, _hospitalrunMixinsAppointmentStatuses, _moment, _hospitalrunMixinsVisitTypes, _hospitalrunUtilsSelectValues, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend(_hospitalrunMixinsAppointmentStatuses['default'], _hospitalrunMixinsVisitTypes['default'], {\n    appointmentType: null,\n    endDate: null,\n    location: null,\n    provider: null,\n    queryParams: ['appointmentType', 'endDate', 'provider', 'status', 'startDate', 'location', 'viewType'],\n    startDate: null,\n    status: null,\n    viewType: 'agendaWeek',\n\n    appointmentsController: inject.controller('appointments'),\n    locations: alias('appointmentsController.locationList.value'),\n    physicians: alias('appointmentsController.physicianList.value'),\n\n    calendarDate: computed('startDate', function () {\n      var startDate = get(this, 'startDate');\n      if (!isEmpty(startDate)) {\n        return (0, _moment['default'])(parseInt(startDate));\n      }\n    }),\n\n    locationList: computed('locations', function () {\n      return _hospitalrunUtilsSelectValues['default'].selectValues(get(this, 'locations'), true);\n    }),\n\n    physicianList: computed('physicians', function () {\n      return _hospitalrunUtilsSelectValues['default'].selectValues(get(this, 'physicians'), true);\n    }),\n\n    _getSelectedFilteringCriteria: function _getSelectedFilteringCriteria() {\n      var rawCriteria = {\n        status: get(this, 'model.selectedStatus'),\n        type: get(this, 'model.selectedAppointmentType'),\n        provider: get(this, 'model.selectedProvider'),\n        location: get(this, 'model.selectedLocation')\n      };\n\n      return {\n        status: isEmpty(rawCriteria.status) ? null : rawCriteria.status,\n        type: isEmpty(rawCriteria.type) ? null : rawCriteria.type,\n        provider: isEmpty(rawCriteria.provider) ? null : rawCriteria.provider,\n        location: isEmpty(rawCriteria.location) ? null : rawCriteria.location\n      };\n    },\n\n    actions: {\n      clearFilteringCriteria: function clearFilteringCriteria() {\n        set(this, 'model.selectedStatus', null);\n        set(this, 'model.selectedAppointmentType', null);\n        set(this, 'model.selectedProvider', null);\n        set(this, 'model.selectedLocation', null);\n        this.send('filter');\n      },\n\n      createNewAppointment: function createNewAppointment(dateClicked) {\n        var newAppointment = this.store.createRecord('appointment', {\n          appointmentType: 'Admission',\n          allDay: false,\n          selectPatient: true,\n          startDate: dateClicked.local().toDate()\n        });\n        this.send('editAppointment', newAppointment);\n      },\n\n      filter: function filter() {\n        var criteria = this._getSelectedFilteringCriteria();\n        this.setProperties({\n          appointmentType: criteria.type,\n          provider: criteria.provider,\n          status: criteria.status,\n          location: criteria.location\n        });\n      },\n\n      handleVisualConfigurationChanged: function handleVisualConfigurationChanged(newConfiguration) {\n        this.setProperties(newConfiguration);\n      },\n\n      navigateToAppointment: function navigateToAppointment(calendarEvent) {\n        this.send('editAppointment', calendarEvent.referencedAppointment);\n      },\n\n      updateAppointment: function updateAppointment(calendarEvent) {\n        var _this = this;\n\n        var appointmentToUpdate = calendarEvent.referencedAppointment;\n        var newEnd = calendarEvent.end.local().toDate();\n        var newStart = calendarEvent.start.local().toDate();\n        set(appointmentToUpdate, 'startDate', newStart);\n        set(appointmentToUpdate, 'endDate', newEnd);\n        appointmentToUpdate.save()['catch'](function (error) {\n          _this.send('error', error, 'appointments.calendar');\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/calendar/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/calendar/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/calendar/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/calendar/route', ['exports', 'hospitalrun/appointments/index/route', 'ember', 'ember-i18n'], function (exports, _hospitalrunAppointmentsIndexRoute, _ember, _emberI18n) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend({\n    dateIntervalEnd: null,\n    dateIntervalStart: null,\n    editReturn: 'appointments.calendar',\n    filterParams: ['appointmentType', 'provider', 'status', 'location'],\n    modelName: 'appointment',\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('appointments.calendarTitle');\n    }),\n\n    queryParams: {\n      appointmentType: { refreshModel: true },\n      endDate: { refreshModel: true },\n      provider: { refreshModel: true },\n      status: { refreshModel: true },\n      startDate: { refreshModel: true },\n      location: { refreshModel: true },\n      viewType: { refreshModel: false }\n    },\n\n    model: function model(params) {\n      return this._super(params).then(this._createCalendarEvents.bind(this)).then(function (calendarEvents) {\n        calendarEvents.selectedAppointmentType = params.appointmentType;\n        calendarEvents.selectedProvider = params.provider;\n        calendarEvents.selectedStatus = params.status;\n        calendarEvents.selectedLocation = params.location;\n        return calendarEvents;\n      });\n    },\n\n    _createCalendarEvent: function _createCalendarEvent(appointment) {\n      var title = get(appointment, 'patient.displayName');\n      var provider = get(appointment, 'provider');\n      if (!isEmpty(provider)) {\n        title = title + '\\n' + provider;\n      }\n      var event = {\n        allDay: get(appointment, 'allDay'),\n        title: title,\n        start: get(appointment, 'startDate'),\n        end: get(appointment, 'endDate'),\n        referencedAppointment: appointment\n      };\n      var location = get(appointment, 'location');\n      if (isEmpty(location)) {\n        var i18n = get(this, 'i18n');\n        location = i18n.t('appointments.labels.noLocation').toString();\n      }\n      event.resourceId = location.toLowerCase();\n      return event;\n    },\n\n    _createCalendarEvents: function _createCalendarEvents(appointments) {\n      var _this = this;\n\n      var events = [];\n      var resources = [];\n      appointments.forEach(function (appointment) {\n        var event = _this._createCalendarEvent(appointment);\n        events.push(event);\n        var resourceId = get(event, 'resourceId');\n        if (!resources.findBy('id', resourceId)) {\n          resources.push({\n            id: resourceId,\n            title: get(event, 'referencedAppointment.location')\n          });\n        }\n      });\n      return {\n        events: events,\n        resources: resources\n      };\n    },\n\n    _modelQueryParams: function _modelQueryParams(params) {\n      var endDate = params.endDate;\n      var startDate = params.startDate;\n\n      if (endDate === null || startDate === null) {\n        return this._super(params);\n      }\n      var searchOptions = {\n        startkey: [parseInt(startDate), parseInt(startDate), this._getMinPouchId()],\n        endkey: [parseInt(endDate), parseInt(endDate), this._getMaxPouchId()]\n      };\n\n      return {\n        options: searchOptions,\n        mapReduce: 'appointments_by_date'\n      };\n    }\n  });\n});","define('hospitalrun/tests/appointments/calendar/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/calendar/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/calendar/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: 'Delete Appointment',\n\n    afterDeleteAction: (function () {\n      var deleteFromPatient = this.get('model.deleteFromPatient');\n      if (deleteFromPatient) {\n        return 'appointmentDeleted';\n      } else {\n        return 'closeModal';\n      }\n    }).property('model.deleteFromPatient')\n  });\n});","define('hospitalrun/tests/appointments/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/appointment-statuses', 'ember', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsAppointmentStatuses, _ember, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsAppointmentStatuses['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsVisitTypes['default'], {\n    findPatientVisits: false,\n    updateCapability: 'add_appointment',\n\n    appointmentsController: inject.controller('appointments'),\n    physicianList: alias('appointmentsController.physicianList'),\n    surgeryLocationList: alias('appointmentsController.surgeryLocationList'),\n    visitLocationList: alias('appointmentsController.locationList'),\n    visitTypesList: alias('appointmentsController.visitTypesList'),\n\n    cancelAction: computed('model.returnTo', function () {\n      var returnTo = get(this, 'model.returnTo');\n      if (_ember['default'].isEmpty(returnTo)) {\n        return this._super();\n      } else {\n        return 'returnTo';\n      }\n    }),\n\n    isAdmissionAppointment: computed('model.appointmentType', function () {\n      var model = get(this, 'model');\n      var appointmentType = get(model, 'appointmentType');\n      var isAdmissionAppointment = appointmentType === 'Admission';\n      return isAdmissionAppointment;\n    }),\n\n    lookupListsToUpdate: computed('model.appointmentType', function () {\n      var appointmentType = get(this, 'model.appointmentType');\n      var lists = [{\n        name: 'physicianList',\n        property: 'model.provider',\n        id: 'physician_list'\n      }];\n      if (appointmentType === 'Surgery') {\n        lists.push({\n          name: 'visitLocationList',\n          property: 'model.location',\n          id: 'visit_location_list'\n        });\n      } else {\n        lists.push({\n          name: 'surgeryLocationList',\n          property: 'model.location',\n          id: 'procedure_locations'\n        });\n      }\n    }),\n\n    showTime: computed('model.allDay', 'isAdmissionAppointment', function () {\n      var allDay = get(this, 'model.allDay');\n      var isAdmissionAppointment = get(this, 'isAdmissionAppointment');\n      return !allDay && isAdmissionAppointment;\n    }),\n\n    afterUpdate: function afterUpdate(model) {\n      var i18n = get(this, 'i18n');\n      var patientInfo = {\n        patient: get(model, 'patient.displayName')\n      };\n      var message = i18n.t('appointments.messages.appointmentSaved', patientInfo);\n      var title = i18n.t('appointments.titles.appointmentSaved');\n      this.displayAlert(title, message);\n    },\n\n    actions: {\n      appointmentTypeChanged: function appointmentTypeChanged(appointmentType) {\n        var model = get(this, 'model');\n        set(model, 'appointmentType', appointmentType);\n        var isAdmissionAppointment = get(this, 'isAdmissionAppointment');\n        set(model, 'allDay', isAdmissionAppointment);\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/add-to-patient-route', 'ember', 'moment', 'hospitalrun/mixins/patient-list-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsAddToPatientRoute, _ember, _moment, _hospitalrunMixinsPatientListRoute, _emberI18n) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var resolve = _ember['default'].RSVP.resolve;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsAddToPatientRoute['default'], _hospitalrunMixinsPatientListRoute['default'], {\n\n    editTitle: (0, _emberI18n.translationMacro)('appointments.editTitle'),\n    modelName: 'appointment',\n    newButtonText: (0, _emberI18n.translationMacro)('appointments.buttons.newButton'),\n\n    newTitle: (0, _emberI18n.translationMacro)('appointments.newTitle'),\n\n    getNewData: function getNewData(params) {\n      var idParam = get(this, 'idParam');\n      var newData = {\n        appointmentType: 'Admission',\n        allDay: true,\n        selectPatient: true,\n        startDate: new Date()\n      };\n      if (!isEmpty(idParam) && params[idParam] === 'newsurgery') {\n        newData.appointmentType = 'Surgery';\n        newData.allDay = false;\n        newData.endDate = (0, _moment['default'])().add('1', 'hours').toDate();\n        newData.returnTo = 'appointments.theater';\n      }\n      return resolve(newData);\n    },\n\n    getScreenTitle: function getScreenTitle(model) {\n      var appointmentType = get(model, 'appointmentType');\n      if (appointmentType === 'Surgery') {\n        var i18n = get(this, 'i18n');\n        var isNew = get(model, 'isNew');\n        if (isNew) {\n          return i18n.t('appointments.titles.newSurgicalAppointment');\n        } else {\n          return i18n.t('appointments.titles.editSurgicalAppointment');\n        }\n      } else {\n        return this._super(model);\n      }\n    },\n\n    model: function model(params) {\n      var idParam = this.get('idParam');\n      var modelId = params[idParam];\n      if (!isEmpty(idParam) && modelId.indexOf('new') === 0) {\n        if (!isEmpty(params.forPatientId)) {\n          var modelPromise = this._super(params);\n          return this._setPatientOnModel(modelPromise, params.forPatientId);\n        } else if (!isEmpty(params.forVisitId)) {\n          var modelPromise = this._super(params);\n          return this._setVisitOnModel(modelPromise, params.forVisitId);\n        } else {\n          return this._createNewRecord(params);\n        }\n      } else {\n        return this._super(params);\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/appointments/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    canAddVisit: (function () {\n      return this.currentUserCan('add_visit');\n    }).property(),\n\n    canEdit: (function () {\n      // Add and edit are the same capability\n      return this.currentUserCan('add_appointment');\n    }).property(),\n\n    canDelete: (function () {\n      return this.currentUserCan('delete_appointment');\n    }).property(),\n\n    sortProperties: ['startDate', 'endDate'],\n    sortAscending: true\n  });\n});","define('hospitalrun/tests/appointments/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'moment', 'ember-i18n', 'ember'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _moment, _emberI18n, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    editReturn: 'appointments.index',\n    modelName: 'appointment',\n    newButtonText: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('appointments.buttons.newButton');\n    }),\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('appointments.thisWeek');\n    }),\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var endDate = item.get('endDate');\n      var id = this._getPouchIdFromItem(item);\n      var startDate = item.get('startDate');\n      if (endDate && endDate !== '') {\n        endDate = new Date(endDate);\n        if (endDate.getTime) {\n          endDate = endDate.getTime();\n        }\n      }\n      if (startDate && startDate !== '') {\n        startDate = new Date(startDate);\n        if (startDate.getTime) {\n          startDate = startDate.getTime();\n        }\n      }\n\n      return [startDate, endDate, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var endOfWeek = (0, _moment['default'])().endOf('week').toDate().getTime();\n      var startOfWeek = (0, _moment['default'])().startOf('week').toDate().getTime();\n      var maxId = this._getMaxPouchId();\n      return {\n        options: {\n          startkey: [startOfWeek, null, null],\n          endkey: [endOfWeek, endOfWeek, maxId]\n        },\n        mapReduce: 'appointments_by_date'\n      };\n    },\n\n    actions: {\n      editAppointment: function editAppointment(appointment) {\n        appointment.set('returnTo', this.get('editReturn'));\n        this.send('editItem', appointment);\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    addCapability: 'add_appointment',\n    allowSearch: false,\n    currentScreenTitle: (0, _emberI18n.translationMacro)('appointments.currentScreenTitle'),\n    editTitle: (0, _emberI18n.translationMacro)('appointments.editTitle'),\n    newTitle: (0, _emberI18n.translationMacro)('appointments.newTitle'),\n    moduleName: 'appointments',\n    newButtonText: (0, _emberI18n.translationMacro)('appointments.buttons.newButton'),\n    sectionTitle: (0, _emberI18n.translationMacro)('appointments.sectionTitle'),\n\n    actions: {\n      checkIn: function checkIn(appointment) {\n        var patient = appointment.get('patient');\n        var visitProps = appointment.getProperties('startDate', 'endDate', 'location', 'patient');\n        visitProps.visitType = appointment.get('appointmentType');\n        visitProps.examiner = appointment.get('provider');\n        visitProps.appointment = appointment;\n        visitProps.hidePatientSelection = true;\n        visitProps.patient = patient;\n        visitProps.returnTo = 'appointments';\n        this.transitionTo('visits.edit', 'checkin').then((function (newRoute) {\n          newRoute.currentModel.setProperties(visitProps);\n          newRoute.controller.getPatientDiagnoses(patient, newRoute.currentModel);\n        }).bind(this));\n      }\n    },\n\n    additionalModels: [{\n      name: 'physicianList',\n      findArgs: ['lookup', 'physician_list']\n    }, {\n      name: 'locationList',\n      findArgs: ['lookup', 'visit_location_list']\n    }, {\n      name: 'surgeryLocationList',\n      findArgs: ['lookup', 'procedure_locations']\n    }, {\n      name: 'visitTypesList',\n      findArgs: ['lookup', 'visit_types']\n    }]\n  });\n});","define('hospitalrun/tests/appointments/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/search/controller', ['exports', 'hospitalrun/appointments/index/controller', 'hospitalrun/mixins/appointment-statuses', 'ember', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunAppointmentsIndexController, _hospitalrunMixinsAppointmentStatuses, _ember, _hospitalrunUtilsSelectValues, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend(_hospitalrunMixinsAppointmentStatuses['default'], _hospitalrunMixinsVisitTypes['default'], {\n    appointmentsController: _ember['default'].inject.controller('appointments'),\n    appointmentType: null,\n    physicians: _ember['default'].computed.alias('appointmentsController.physicianList.value'),\n    physicianList: (function () {\n      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('physicians'), true);\n    }).property('physicians'),\n\n    provider: null,\n    queryParams: ['appointmentType', 'provider', 'status', 'startKey', 'startDate'],\n    selectedProvider: null,\n    selectedStatus: null,\n    sortProperties: null,\n    startDate: null,\n    startKey: [],\n    status: null,\n    visitTypesList: _ember['default'].computed.alias('appointmentsController.visitTypesList'),\n\n    actions: {\n      search: function search() {\n        var appointmentType = this.get('model.selectedAppointmentType');\n        var fieldsToSet = {\n          startKey: [],\n          previousStartKey: null,\n          previousStartKeys: []\n        };\n        var provider = this.get('model.selectedProvider');\n        var status = this.get('model.selectedStatus');\n        var startDate = this.get('model.selectedStartingDate');\n\n        if (_ember['default'].isEmpty(appointmentType)) {\n          fieldsToSet.appointmentType = null;\n        } else {\n          fieldsToSet.appointmentType = appointmentType;\n        }\n        if (_ember['default'].isEmpty(provider)) {\n          fieldsToSet.provider = null;\n        } else {\n          fieldsToSet.provider = provider;\n        }\n        if (_ember['default'].isEmpty(status)) {\n          fieldsToSet.status = null;\n        } else {\n          fieldsToSet.status = status;\n        }\n        if (!_ember['default'].isEmpty(startDate)) {\n          fieldsToSet.startDate = startDate.getTime();\n        }\n        if (!_ember['default'].isEmpty(fieldsToSet)) {\n          this.setProperties(fieldsToSet);\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/search/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/search/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/search/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/search/route', ['exports', 'hospitalrun/appointments/index/route', 'hospitalrun/mixins/date-format', 'ember', 'moment', 'ember-i18n'], function (exports, _hospitalrunAppointmentsIndexRoute, _hospitalrunMixinsDateFormat, _ember, _moment, _emberI18n) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend(_hospitalrunMixinsDateFormat['default'], {\n    editReturn: 'appointments.search',\n    filterParams: ['appointmentType', 'provider', 'status'],\n    modelName: 'appointment',\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('appointments.searchTitle');\n    }),\n\n    queryParams: {\n      appointmentType: { refreshModel: true },\n      provider: { refreshModel: true },\n      status: { refreshModel: true },\n      startDate: { refreshModel: true },\n      startKey: { refreshModel: true }\n    },\n\n    _modelQueryParams: function _modelQueryParams(params) {\n      var startDate = params.startDate;\n\n      var maxValue = this.get('maxValue');\n      if (_ember['default'].isEmpty(startDate)) {\n        startDate = (0, _moment['default'])();\n      } else {\n        startDate = (0, _moment['default'])(parseInt(startDate));\n      }\n      var startOfDay = startDate.startOf('day').toDate().getTime();\n      var searchOptions = {\n        startkey: [startOfDay, null, 'appointment_'],\n        endkey: [maxValue, maxValue, 'appointment_' + maxValue]\n      };\n      return {\n        options: searchOptions,\n        mapReduce: 'appointments_by_date'\n      };\n    },\n\n    model: function model(params) {\n      return this._super(params).then((function (model) {\n        model.setProperties({\n          selectedAppointmentType: params.appointmentType,\n          selectedProvider: params.provider,\n          selectedStatus: params.status\n        });\n        var startDate = params.startDate;\n\n        startDate = new Date();\n        if (!_ember['default'].isEmpty(params.startDate)) {\n          startDate.setTime(params.startDate);\n        }\n        model.set('selectedStartingDate', startDate);\n        model.set('display_selectedStartingDate', this._dateFormat(startDate));\n        return model;\n      }).bind(this));\n    }\n\n  });\n});","define('hospitalrun/tests/appointments/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/theater/controller', ['exports', 'hospitalrun/appointments/calendar/controller'], function (exports, _hospitalrunAppointmentsCalendarController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsCalendarController['default'].extend({\n    dayGroupByResource: {\n      day: {\n        groupByResource: true\n      }\n    },\n\n    actions: {\n      createNewAppointment: function createNewAppointment(dateClicked) {\n        var newAppointment = this.store.createRecord('appointment', {\n          appointmentType: 'Surgery',\n          selectPatient: true,\n          startDate: dateClicked.local().toDate(),\n          endDate: dateClicked.add('1', 'hours').local().toDate()\n        });\n        this.send('editAppointment', newAppointment);\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/theater/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/theater/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/theater/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/theater/route', ['exports', 'hospitalrun/appointments/calendar/route', 'ember-i18n', 'ember'], function (exports, _hospitalrunAppointmentsCalendarRoute, _emberI18n, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunAppointmentsCalendarRoute['default'].extend({\n    editReturn: 'appointments.theater',\n    newButtonText: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('appointments.buttons.scheduleSurgery');\n    }),\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('appointments.titles.theaterSchedule');\n    }),\n\n    _modelQueryParams: function _modelQueryParams(params) {\n      var queryParams = this._super(params);\n      queryParams.mapReduce = 'surgical_appointments_by_date';\n      return queryParams;\n    },\n\n    actions: {\n      newItem: function newItem() {\n        this.transitionTo('appointments.edit', 'newsurgery');\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/theater/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/theater/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/theater/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/today/controller', ['exports', 'hospitalrun/appointments/index/controller'], function (exports, _hospitalrunAppointmentsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend({\n    startKey: []\n  });\n});","define('hospitalrun/tests/appointments/today/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/today/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/today/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/today/route', ['exports', 'hospitalrun/appointments/index/route', 'moment', 'ember-i18n', 'ember'], function (exports, _hospitalrunAppointmentsIndexRoute, _moment, _emberI18n, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend({\n    editReturn: 'appointments.today',\n    modelName: 'appointment',\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('appointments.todayTitle');\n    }),\n\n    _modelQueryParams: function _modelQueryParams() {\n      var endOfDay = (0, _moment['default'])().endOf('day').toDate().getTime();\n      var maxValue = this.get('maxValue');\n      var startOfDay = (0, _moment['default'])().startOf('day').toDate().getTime();\n      return {\n        options: {\n          startkey: [startOfDay, null, 'appointment_'],\n          endkey: [endOfDay, endOfDay, 'appointment_' + maxValue]\n        },\n        mapReduce: 'appointments_by_date'\n      };\n    }\n  });\n});","define('hospitalrun/tests/appointments/today/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/today/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/today/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/authenticators/custom', ['exports', 'ember', 'ember-simple-auth/authenticators/base', 'npm:crypto', 'hospitalrun/mixins/map-oauth-params', 'hospitalrun/mixins/oauth-headers'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase, _npmCrypto, _hospitalrunMixinsMapOauthParams, _hospitalrunMixinsOauthHeaders) {\n  'use strict';\n\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var RSVP = _ember['default'].RSVP;\n  exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend(_hospitalrunMixinsMapOauthParams['default'], _hospitalrunMixinsOauthHeaders['default'], {\n    ajax: _ember['default'].inject.service(),\n    config: _ember['default'].inject.service(),\n    database: _ember['default'].inject.service(),\n    serverEndpoint: '/auth/login',\n\n    standAlone: alias('config.standAlone'),\n    usersDB: alias('database.usersDB'),\n\n    _checkUser: function _checkUser(user, oauthConfigs) {\n      var _this = this;\n\n      return new RSVP.Promise(function (resolve, reject) {\n        var headers = _this.getOAuthHeaders(oauthConfigs);\n        _this._makeRequest({ name: user.name }, '/chkuser', headers).then(function (response) {\n          if (response.error) {\n            reject(response);\n          }\n          user.displayName = response.displayName;\n          user.role = response.role;\n          user.prefix = response.prefix;\n          resolve(user);\n        })['catch'](function () {\n          // If chkuser fails, user is probably offline; resolve with currently stored credentials\n          resolve(user);\n        });\n      });\n    },\n\n    _finishAuth: function _finishAuth(user, oauthConfigs) {\n      var config = this.get('config');\n      var database = this.get('database');\n      config.setCurrentUser(user);\n      return database.setup().then(function () {\n        user.oauthConfigs = oauthConfigs;\n        return user;\n      });\n    },\n\n    _makeRequest: function _makeRequest(data, url, headers, method) {\n      if (!url) {\n        url = this.serverEndpoint;\n      }\n      var ajax = get(this, 'ajax');\n      var params = {\n        type: 'POST',\n        data: data,\n        dataType: 'json',\n        contentType: 'application/x-www-form-urlencoded',\n        xhrFields: {\n          withCredentials: true\n        }\n      };\n      if (method) {\n        params.type = method;\n      }\n      if (headers) {\n        params.headers = headers;\n      }\n\n      return ajax.request(url, params);\n    },\n\n    _saveOAuthConfigs: function _saveOAuthConfigs(params) {\n      var config = get(this, 'config');\n      var oauthConfigs = this.mapOauthParams(params);\n      return config.saveOauthConfigs(oauthConfigs).then(function () {\n        return oauthConfigs;\n      });\n    },\n\n    /**\n     Authenticate using google auth credentials or credentials from couch db.\n     @method authenticate\n     @param {Object} credentials The credentials to authenticate the session with\n     @return {RSVP.Promise} A promise that resolves when an access token is successfully acquired from the server and rejects otherwise\n     */\n    authenticate: function authenticate(credentials) {\n      var _this2 = this;\n\n      var standAlone = get(this, 'standAlone');\n      if (standAlone === true) {\n        return this._authenticateStandAlone(credentials);\n      }\n      if (credentials.google_auth) {\n        return this._saveOAuthConfigs(credentials.params).then(function (oauthConfigs) {\n          return _this2._checkUser({ name: credentials.params.i }, oauthConfigs).then(function (user) {\n            return _this2._finishAuth(user, oauthConfigs);\n          });\n        });\n      }\n\n      var username = this._getUserName(credentials);\n      var data = { name: username, password: credentials.password };\n      return this._makeRequest(data).then(function (user) {\n        if (user.error) {\n          throw new Error(user.errorResult || 'Unauthorized user');\n        }\n        var userInfo = {\n          displayName: user.displayName,\n          prefix: user.prefix,\n          role: user.role\n        };\n        userInfo.name = username;\n\n        return _this2._saveOAuthConfigs(user).then(function (oauthConfigs) {\n          return _this2._finishAuth(userInfo, oauthConfigs);\n        });\n      });\n    },\n\n    invalidate: function invalidate(data) {\n      var standAlone = get(this, 'standAlone');\n      if (this.useGoogleAuth || standAlone) {\n        return RSVP.resolve();\n      } else {\n        // Ping the remote db to make sure we still have connectivity before logging off.\n        var headers = this.getOAuthHeaders(data.oauthConfigs);\n        var remoteDBUrl = get(this, 'database').getRemoteDBUrl();\n        return this._makeRequest({}, remoteDBUrl, headers, 'GET');\n      }\n    },\n\n    restore: function restore(data) {\n      if (window.ELECTRON) {\n        // config service has not been setup yet, so config.standAlone not available yet\n        return RSVP.resolve(data);\n      }\n      return this._checkUser(data, data.oauthConfigs);\n    },\n\n    _authenticateStandAlone: function _authenticateStandAlone(credentials) {\n      var _this3 = this;\n\n      var usersDB = get(this, 'usersDB');\n      return new RSVP.Promise(function (resolve, reject) {\n        var username = _this3._getUserName(credentials);\n        usersDB.get('org.couchdb.user:' + username).then(function (user) {\n          var salt = user.salt;\n          var iterations = user.iterations;\n          var derived_key = user.derived_key;\n          var password = credentials.password;\n\n          _this3._checkPassword(password, salt, iterations, derived_key, function (error, isCorrectPassword) {\n            if (error) {\n              reject(error);\n            }\n            if (!isCorrectPassword) {\n              reject(new Error('UNAUTHORIZED'));\n            }\n            user.role = _this3._getPrimaryRole(user);\n            _this3._finishAuth(user, {}).then(resolve, reject);\n          });\n        }, reject);\n      });\n    },\n\n    // Based on https://github.com/hoodiehq/hoodie-account-server-api/blob/master/lib/utils/validate-password.js\n    _checkPassword: function _checkPassword(password, salt, iterations, derivedKey, callback) {\n      _npmCrypto['default'].pbkdf2(password, salt, iterations, 20, 'sha1', function (error, derivedKeyCheck) {\n        if (error) {\n          return callback(error);\n        }\n        callback(null, derivedKeyCheck.toString('hex') === derivedKey);\n      });\n    },\n\n    _getPrimaryRole: function _getPrimaryRole(user) {\n      var primaryRole = '';\n      if (user.roles) {\n        user.roles.forEach(function (role) {\n          if (role !== 'user' && role !== 'admin') {\n            primaryRole = role;\n          }\n        });\n      }\n      return primaryRole;\n    },\n\n    _getUserName: function _getUserName(credentials) {\n      var username = credentials.identification;\n      if (typeof username === 'string' && username) {\n        username = username.trim();\n      }\n      return username;\n    }\n\n  });\n});","define('hospitalrun/tests/authenticators/custom.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - authenticators/custom.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/custom.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/action-checkbox', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    // From http://emberjs.jsbin.com/rwjblue/58/edit?html,css,js,output\n    attributeBindings: ['type', 'value'],\n    tagName: 'input',\n    type: 'checkbox',\n    checked: false,\n\n    _updateElementValue: (function () {\n      this.set('checked', this.$().prop('checked'));\n    }).on('didInsertElement'),\n\n    change: function change() {\n      this._updateElementValue();\n      this.sendAction('action', this.get('value'), this.get('checked'));\n    }\n  });\n});","define('hospitalrun/tests/components/action-checkbox.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/action-checkbox.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/action-checkbox.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/array-display', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    isArray: (function () {\n      var content = this.get('content');\n      return _ember['default'].isArray(content);\n    }).property('content')\n  });\n});","define('hospitalrun/tests/components/array-display.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/array-display.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/array-display.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/calendar-control', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Component.extend({\n    calendarHeader: {\n      center: 'agendaDay,agendaWeek,month',\n      left: 'title',\n      right: 'today prev,next'\n    },\n    defaultDate: null,\n    defaultView: 'agendaWeek',\n    height: 500,\n    onDayClick: null,\n    onEventClick: null,\n    onEventDrop: null,\n    onEventResize: null,\n    userCanEdit: false,\n\n    visualConfiguration: {\n      endDate: null,\n      startDate: null,\n      viewType: null\n    },\n\n    /**\n     * FullCalendar gives the start and end timestamps based on UTC (eg start at\n     * midnight UTC and end at 11:59PM UTC), but for our purposes we want to show\n     * users events that start at midnight their timezone and end at 11:59PM in\n     * their timezone.  This function takes a UTC timestamps from fullcalendar\n     * and returns the timestamp in the users timezone (eg midnight UTC is returned\n     * as midnight EST for EST users).\n     * @param timestamp A number representing the milliseconds elapsed between\n     * 1 January 1970 00:00:00 UTC and the given date.\n     * @return String timestamp in users timezone.\n     */\n    _convertDateFromUTCToLocal: function _convertDateFromUTCToLocal(date) {\n      return (0, _moment['default'])(date.utc().format('YYYY-MM-DD HH:mm:ss')).valueOf();\n    },\n\n    actions: {\n      handleRenderingComplete: function handleRenderingComplete(view) {\n        function configurationsDiffer(firstConfig, secondConfig) {\n          return firstConfig.startDate !== secondConfig.startDate || firstConfig.endDate !== secondConfig.endDate || firstConfig.viewType !== secondConfig.viewType;\n        }\n\n        var currentConfiguration = get(this, 'visualConfiguration');\n\n        var newConfiguration = {\n          startDate: this._convertDateFromUTCToLocal(view.intervalStart),\n          endDate: this._convertDateFromUTCToLocal(view.intervalEnd),\n          viewType: view.name\n        };\n\n        if (isEmpty(currentConfiguration.startDate) && isEmpty(currentConfiguration.endDate)) {\n          set(this, 'visualConfiguration', newConfiguration);\n        } else if (configurationsDiffer(currentConfiguration, newConfiguration)) {\n          set(this, 'visualConfiguration', newConfiguration);\n          get(this, 'onVisualConfigurationChanged')(newConfiguration);\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/calendar-control.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/calendar-control.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/calendar-control.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/charge-quantity', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    i18n: _ember['default'].inject.service(),\n    classNames: ['col-xs-2', 'form-group'],\n    classNameBindings: ['hasError'],\n    tagName: 'td',\n    pricingItem: null,\n\n    didReceiveAttrs: function didReceiveAttrs() /* attrs */{\n      this._super.apply(this, arguments);\n      this.quantitySelected = _ember['default'].computed.alias('model.' + this.get('pricingItem.id'));\n    },\n\n    hasError: (function () {\n      var quantitySelected = this.get('quantitySelected');\n      return !_ember['default'].isEmpty(quantitySelected) && isNaN(quantitySelected);\n    }).property('quantitySelected'),\n\n    quantityHelp: (function () {\n      if (this.get('hasError')) {\n        return this.get('i18n').t('errors.invalidNumber');\n      }\n    }).property('hasError')\n\n  });\n});","define('hospitalrun/tests/components/charge-quantity.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/charge-quantity.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/charge-quantity.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/charges-by-type-tab', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    attributeBindings: ['role'],\n    classNameBindings: ['active'],\n    index: null,\n    pricingList: null,\n    role: 'presentation',\n    tagName: 'li',\n\n    active: (function () {\n      var index = this.get('index');\n      return index === 0;\n    }).property(),\n\n    tabId: (function () {\n      return this.get('pricingType').toLowerCase().dasherize();\n    }).property('pricingType'),\n\n    tabHref: (function () {\n      var tabId = this.get('tabId');\n      return '#' + tabId;\n    }).property('tabId')\n  });\n});","define('hospitalrun/tests/components/charges-by-type-tab.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/charges-by-type-tab.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/charges-by-type-tab.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/checkbox-or-typeahead', ['exports', 'ember', 'hospitalrun/components/select-or-typeahead'], function (exports, _ember, _hospitalrunComponentsSelectOrTypeahead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsSelectOrTypeahead['default'].extend({\n    checkboxesPerRow: 5,\n    model: null,\n\n    _getLabelFromContent: function _getLabelFromContent(object) {\n      var optionLabelPath = this.get('optionLabelPath');\n      return _ember['default'].get(object, optionLabelPath);\n    },\n\n    _getValueFromContent: function _getValueFromContent(object) {\n      var optionValuePath = this.get('optionValuePath');\n      return _ember['default'].get(object, optionValuePath);\n    },\n\n    _mapCheckboxValues: function _mapCheckboxValues(value) {\n      return {\n        label: this._getLabelFromContent(value),\n        value: this._getValueFromContent(value)\n      };\n    },\n\n    _setup: (function () {\n      var property = this.get('property');\n      _ember['default'].defineProperty(this, 'errors', _ember['default'].computed('model.errors.' + property, function () {\n        var property = this.get('property');\n        var errors = this.get('model.errors.' + property);\n        if (!_ember['default'].isEmpty(errors)) {\n          return errors[0];\n        }\n      }));\n    }).on('init'),\n\n    checkboxRows: (function () {\n      var checkboxRows = [];\n      var checkboxesPerRow = this.get('checkboxesPerRow');\n      var content = this.get('content');\n      var allValues = content.copy();\n      while (allValues.length > 0) {\n        var checkBoxRowValues = allValues.splice(0, checkboxesPerRow).map(this._mapCheckboxValues.bind(this));\n        checkboxRows.push(checkBoxRowValues);\n      }\n      return checkboxRows;\n    }).property('content', 'checkboxesPerRow'),\n\n    actions: {\n      checkboxChanged: function checkboxChanged(value, checked) {\n        var property = this.get('property');\n        var propertyName = 'model.' + property;\n        var selectedValues = this.get(propertyName);\n        if (!_ember['default'].isArray(selectedValues)) {\n          selectedValues = [];\n        }\n        if (checked && !selectedValues.includes(value)) {\n          selectedValues.addObject(value);\n        } else if (!checked && selectedValues.includes(value)) {\n          selectedValues.removeObject(value);\n        }\n        this.set(propertyName, selectedValues);\n        this.set('selection', selectedValues);\n        this.get('model').validate()['catch'](_ember['default'].K);\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/components/checkbox-or-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/checkbox-or-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/checkbox-or-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/custom-form-manager', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  var Component = _ember['default'].Component;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  exports['default'] = Component.extend(_hospitalrunUtilsSelectValues['default'], {\n    customForms: inject.service(),\n    formType: null,\n    formsForType: null,\n    model: null,\n    openModalAction: 'openModal',\n\n    formsForSelect: alias('customForms.formsForSelect'),\n    formsToDisplay: alias('customForms.formsToDisplay'),\n    showAddButton: alias('customForms.showAddButton'),\n\n    didReceiveAttrs: function didReceiveAttrs() /* attrs */{\n      this._super.apply(this, arguments);\n      var customForms = get(this, 'customForms');\n      var formType = get(this, 'formType');\n      var model = get(this, 'model');\n      customForms.setupForms(formType, model);\n    },\n\n    actions: {\n      addForm: function addForm() {\n        var model = get(this, 'model');\n        var formsForSelect = get(this, 'formsForSelect');\n        this.sendAction('openModalAction', 'custom-form-add', _ember['default'].Object.create({\n          modelToAddTo: model,\n          customForms: formsForSelect\n        }));\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/custom-form-manager.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/custom-form-manager.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-form-manager.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/custom-form', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunUtilsSelectValues['default'], {\n    classNames: 'detail-section-content',\n    propertyPrefix: '',\n    fieldsByRow: computed('form', 'form.fields.[]', 'form.columns', function () {\n      var _this = this;\n\n      var rows = [];\n      var form = this.get('form');\n      var fields = this.get('form.fields');\n      if (!isEmpty(form) && !isEmpty(fields)) {\n        (function () {\n          var numberOfColumns = _this.getWithDefault('form.columns', 1);\n          var currentRow = [];\n\n          var colCount = 0;\n          var colWidth = Math.floor(12 / numberOfColumns);\n          fields.forEach(function (field) {\n            var classNames = field.get('classNames');\n            if (!classNames) {\n              classNames = '';\n            }\n            var colSpan = field.get('colSpan') || 1;\n            if (colCount === numberOfColumns || colCount + colSpan > numberOfColumns) {\n              rows.push(currentRow.slice());\n              currentRow = [];\n              colCount = 0;\n            }\n            classNames += ' col-sm-' + colWidth * colSpan;\n            field.set('displayClassNames', classNames);\n            if (field.get('type') === 'radio') {\n              field.set('mappedValues', field.get('values').map(function (value) {\n                return _ember['default'].get(value, 'label');\n              }));\n            }\n            currentRow.push(field);\n            colCount += colSpan;\n          });\n          if (colCount > 0) {\n            rows.push(currentRow);\n          }\n        })();\n      }\n      return rows;\n    })\n  });\n});","define('hospitalrun/tests/components/custom-form.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/custom-form.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-form.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/date-filter', ['exports', 'ember', 'hospitalrun/mixins/pikaday-component'], function (exports, _ember, _hospitalrunMixinsPikadayComponent) {\n  'use strict';\n\n  var Component = _ember['default'].Component;\n  exports['default'] = Component.extend(_hospitalrunMixinsPikadayComponent['default'], {\n    classNames: ['input-group'],\n    dateSetAction: 'filter',\n\n    actions: {\n      clearFilter: function clearFilter() {\n        var $input = this.$('input');\n        $input.val('');\n        this.sendAction('dateSetAction');\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/date-filter.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/date-filter.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-filter.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/date-input', ['exports', 'ember', 'ember-rapid-forms/components/html-input', 'hospitalrun/mixins/pikaday-component'], function (exports, _ember, _emberRapidFormsComponentsHtmlInput, _hospitalrunMixinsPikadayComponent) {\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsHtmlInput['default'].extend(_hospitalrunMixinsPikadayComponent['default'], {\n    _shouldSetDate: function _shouldSetDate(currentDate, picker) {\n      return picker && (_ember['default'].isEmpty(currentDate) || _ember['default'].isEmpty(picker.getDate()) || currentDate.getTime && picker.getDate().getTime() !== currentDate.getTime());\n    },\n\n    currentDateChangedValue: function currentDateChangedValue() {\n      var currentDate = this.get('currentDate');\n      var picker = this.get('_picker');\n      if (!_ember['default'].isEmpty(currentDate) && this._shouldSetDate(currentDate, picker)) {\n        picker.setDate(currentDate);\n      }\n    },\n\n    format: (function () {\n      var showTime = this.get('showTime');\n      if (showTime) {\n        return 'l h:mm A';\n      } else {\n        return 'l';\n      }\n    }).property('mainComponent.showTime'),\n\n    showTimeChanged: (function () {\n      var picker = this.get('_picker');\n      if (picker) {\n        picker.destroy();\n        this.didInsertElement();\n      }\n    }).observes('mainComponent.showTime'),\n\n    dateSet: function dateSet() {\n      var currentDate = this.get('currentDate');\n      var picker = this.get('_picker');\n      if (this._shouldSetDate(currentDate, picker)) {\n        var newDate = picker.getDate();\n        var mainComponent = this.get('mainComponent');\n        var dateSetAction = mainComponent.get('dateSetAction');\n        this.set('currentDate', newDate);\n        if (!_ember['default'].isEmpty(dateSetAction)) {\n          mainComponent.sendAction('dateSetAction', newDate);\n        }\n      }\n    },\n\n    didReceiveAttrs: function didReceiveAttrs() /* attrs */{\n      this._super.apply(this, arguments);\n      var dateProperty = this.get('mainComponent.originalPropery');\n      var displayPropertyName = 'display_' + dateProperty;\n      this.currentDate = _ember['default'].computed.alias('mainComponent.model.' + dateProperty);\n      this.minDate = _ember['default'].computed.alias('mainComponent.minDate');\n      this.maxDate = _ember['default'].computed.alias('mainComponent.maxDate');\n      this.showTime = _ember['default'].computed.alias('mainComponent.showTime');\n      this.yearRange = _ember['default'].computed.alias('mainComponent.yearRange');\n      this.addObserver('mainComponent.model.' + dateProperty, this, this.currentDateChangedValue);\n      _ember['default'].Binding.from('mainComponent.model.errors.' + dateProperty).to('mainComponent.model.errors.' + displayPropertyName).connect(this);\n    }\n\n  });\n});","define('hospitalrun/tests/components/date-input.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/date-input.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-input.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/date-picker', ['exports', 'ember-rapid-forms/components/em-input'], function (exports, _emberRapidFormsComponentsEmInput) {\n  // Dervied from http://spin.atomicobject.com/2013/10/29/ember-js-date-picker/\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({\n    dateSetAction: null, // Specify an action to fire when a date is selected\n    htmlComponent: 'date-input',\n    minDate: null,\n    maxDate: null,\n    originalPropery: null,\n    showTime: false,\n    yearRange: 10,\n\n    didReceiveAttrs: function didReceiveAttrs(attrs) {\n      var dateProperty = this.get('property');\n      var displayPropertyName = 'display_' + dateProperty;\n      this.set('property', displayPropertyName);\n      this.set('originalPropery', dateProperty);\n      this._super(attrs);\n    }\n  });\n});","define('hospitalrun/tests/components/date-picker.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/date-picker.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-picker.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/date-time-picker', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Component.extend({\n    i18n: _ember['default'].inject.service(),\n    dateTimePickerDate: null,\n    datePickerClass: '',\n    endDate: _ember['default'].computed.alias('model.endDate'),\n    endHour: null,\n    endMinute: null,\n    label: '',\n    startDate: _ember['default'].computed.alias('model.startDate'),\n    startHour: null,\n    startMinute: null,\n\n    didReceiveAttrs: function didReceiveAttrs() {\n      var endDate = (0, _moment['default'])(this.get('endDate'));\n      var startDate = (0, _moment['default'])(this.get('startDate'));\n      if (isEmpty(endDate)) {\n        endDate = startDate;\n      }\n      this.set('endHour', endDate.hour());\n      this.set('endMinute', endDate.minute());\n      this.set('startHour', startDate.hour());\n      this.set('startMinute', startDate.minute());\n      this.set('dateTimePickerDate', startDate.toDate());\n      this._updateDates();\n    },\n\n    hourList: computed(function () {\n      var hour = undefined;\n      var hourList = [];\n      var i18n = this.get('i18n');\n      for (hour = 0; hour < 24; hour++) {\n        var hourText = undefined;\n        var hourProp = {\n          hour: hour % 12 // Show hour in 12 hour am/pm format\n        };\n        if (hour === 0) {\n          hourText = i18n.t('components.dateTimePicker.midnight');\n        } else if (hour === 12) {\n          hourText = i18n.t('components.dateTimePicker.noon');\n        } else if (hour < 12) {\n          hourText = i18n.t('components.dateTimePicker.amHour', hourProp);\n        } else {\n          hourText = i18n.t('components.dateTimePicker.pmHour', hourProp);\n        }\n        hourList.push({\n          name: hourText,\n          value: hour\n        });\n      }\n      return hourList;\n    }),\n\n    isAllDay: computed('model.allDay', function () {\n      var allDay = this.get('model.allDay');\n      if (allDay) {\n        this.set('startHour', 0);\n        this.set('startMinute', 0);\n        this.set('endHour', 23);\n        this.set('endMinute', 59);\n        this._updateDates();\n      }\n      return allDay;\n    }),\n\n    minuteList: computed(function () {\n      var minute = undefined;\n      var minuteList = [];\n      for (minute = 0; minute < 60; minute++) {\n        minuteList.push({\n          name: String('00' + minute).slice(-2),\n          value: minute\n        });\n      }\n      return minuteList;\n    }),\n\n    actions: {\n      dateChanged: function dateChanged() /* newDate */{\n        this._updateDates();\n      },\n\n      endHourChanged: function endHourChanged(endHour) {\n        this.set('endHour', endHour);\n        this._updateDates();\n      },\n\n      endMinuteChanged: function endMinuteChanged(endMinute) {\n        this.set('endMinute', endMinute);\n        this._updateDates();\n      },\n\n      startHourChanged: function startHourChanged(startHour) {\n        this.set('startHour', startHour);\n        this._updateDates();\n      },\n\n      startMinuteChanged: function startMinuteChanged(startMinute) {\n        this.set('startMinute', startMinute);\n        this._updateDates();\n      }\n    },\n\n    endTimeHasError: computed('model.isValid', function () {\n      var endDateError = this.get('model.errors.endDate');\n      return endDateError.length > 0;\n    }),\n\n    _updateDates: function _updateDates() {\n      var _this = this;\n\n      _ember['default'].run.once(this, function () {\n        var datePrefixes = ['start', 'end'];\n        datePrefixes.forEach(function (datePrefix) {\n          var dateProperty = datePrefix + 'Date';\n          var dateToChange = _this.get(dateProperty);\n          var dateSelected = _this.get('dateTimePickerDate');\n          var hour = _this.get(datePrefix + 'Hour');\n          var minute = _this.get(datePrefix + 'Minute');\n          if (!_ember['default'].isEmpty(dateSelected)) {\n            dateToChange = (0, _moment['default'])(dateSelected);\n            dateToChange.hour(hour);\n            dateToChange.minute(minute);\n            _this.set(dateProperty, dateToChange.toDate());\n          }\n        });\n        var model = _this.get('model');\n        model.validate()['catch'](_ember['default'].K);\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/components/date-time-picker.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/date-time-picker.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-time-picker.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/edit-panel', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    editPanelProps: null,\n    cancelAction: 'cancel',\n\n    actions: {\n      cancel: function cancel() {\n        this.sendAction('cancelAction');\n      },\n      disabledAction: function disabledAction() {\n        this.sendAction('editPanelProps.disabledAction');\n      },\n      fireButtonAction: function fireButtonAction(buttonAction) {\n        this.set(buttonAction, buttonAction);\n        this.sendAction(buttonAction);\n      },\n      updateButtonAction: function updateButtonAction() {\n        this.sendAction('editPanelProps.updateButtonAction');\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/edit-panel.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/edit-panel.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-panel.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/expand-text', ['exports', 'ember', 'hospitalrun/tests/utils/text-expansion'], function (exports, _ember, _hospitalrunTestsUtilsTextExpansion) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  var Component = _ember['default'].Component;\n  var htmlSafe = _ember['default'].String.htmlSafe;\n  var computed = _ember['default'].computed;\n  var inject = _ember['default'].inject;\n  exports['default'] = Component.extend({\n    i18n: inject.service(),\n    store: inject.service(),\n\n    userText: '',\n\n    didInsertElement: function didInsertElement() {\n      var _this = this;\n\n      var feedbackDiv = document.createElement('div');\n      feedbackDiv.style.position = 'absolute';\n\n      var _$ = this.$('textarea');\n\n      var _$2 = _slicedToArray(_$, 1);\n\n      var textarea = _$2[0];\n\n      this.set('textarea', textarea);\n      var textPos = textarea.getBoundingClientRect();\n      var fbStyle = feedbackDiv.style;\n      fbStyle.top = textPos.bottom + 'px';\n      fbStyle.left = textPos.left + 'px';\n      fbStyle.width = textarea.offsetWidth + 'px';\n      // THIS CODE NEEDS TO BE CHANGED -- INLINE STYLES ARE EVIL!\n      fbStyle.backgroundColor = 'lightyellow';\n      fbStyle.borderStyle = 'solid';\n      fbStyle.borderWidth = '1px';\n      fbStyle.borderRadius = '3px';\n      fbStyle.paddingLeft = '5px';\n      fbStyle.visibility = 'hidden';\n\n      this.set('feedbackDiv', feedbackDiv);\n      this.get('feedbackText');\n      this.get('activeExpansionSite');\n\n      this.get('store').findAll('text-expansion').then(function (expansions) {\n        return expansions.reduce(function (prev, curr) {\n          prev[curr.get('from')] = curr.get('to');\n          return prev;\n        }, {});\n      }).then(function (expansions) {\n        _this.set('expansions', expansions);\n      });\n    },\n\n    keyUp: function keyUp(k) {\n      var textArea = k.target;\n      var text = textArea.value;\n      this.set('userText', text);\n      this.set('cursorLocation', textArea.selectionStart);\n    },\n\n    keyDown: function keyDown(k) {\n      if (k.keyCode === 13) {\n        var possibleSwaps = this.get('possibleSwaps');\n        if (possibleSwaps && possibleSwaps.length === 1) {\n          var swapTo = possibleSwaps[0].to;\n          var activeSite = this.get('activeExpansionSite');\n          var sliceLength = activeSite.match.length;\n          var currentText = k.target.value;\n          var modifiedText = currentText.slice(0, activeSite.index) + swapTo + currentText.slice(activeSite.index + sliceLength);\n          k.target.value = modifiedText;\n\n          k.preventDefault();\n          k.returnValue = false;\n          k.cancelBubble = true;\n          return false;\n        }\n      }\n    },\n\n    // Find an expandable word that has the cursor within it\n    activeExpansionSite: computed('userText', 'cursorLocation', function () {\n\n      var userText = this.get('userText');\n      var textarea = this.get('textarea');\n      if (!textarea) {\n        return null;\n      }\n      var cursorLoc = textarea.selectionStart;\n      var subjects = _hospitalrunTestsUtilsTextExpansion['default'].findExpansionSubjects(userText);\n      var sites = _hospitalrunTestsUtilsTextExpansion['default'].findExpansionSites(userText, subjects);\n\n      return sites.find(function (s) {\n        var endIndex = s.index + s.match.length;\n\n        return cursorLoc >= s.index && cursorLoc <= endIndex;\n      });\n    }),\n\n    // If an expansion site is active, which possible swaps could occur there?\n    possibleSwaps: computed('activeExpansionSite', 'expansions', function () {\n      var _this2 = this;\n\n      var activeSite = this.get('activeExpansionSite');\n\n      if (activeSite) {\n        var _ret = (function () {\n          var expansions = _this2.get('expansions');\n          return {\n            v: Object.keys(expansions).filter(function (ex) {\n              return ex.startsWith(activeSite.term);\n            }).sort().map(function (from) {\n              return {\n                from: from,\n                to: expansions[from]\n              };\n            })\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n    }),\n\n    expansionText: computed('possibleSwaps', 'activeExpansionSite', 'userText', function () {\n      var result = '';\n\n      var i18n = this.get('i18n');\n      var possibleSwaps = this.get('possibleSwaps');\n      if (possibleSwaps) {\n        var activeSite = this.get('activeExpansionSite');\n\n        if (possibleSwaps.length === 1) {\n          var swapTo = possibleSwaps[0].to;\n          result = i18n.t('admin.textReplacements.performExpand', { from: activeSite.term, to: swapTo });\n        } else if (possibleSwaps.length > 1) {\n          var possible = possibleSwaps.map(function (swap) {\n            return swap.from;\n          }).join(', ');\n          result = i18n.t('admin.textReplacements.possibleExpansions', { possible: possible });\n        } else {\n          result = i18n.t('admin.textReplacements.noMatches', { term: activeSite.term });\n        }\n      }\n\n      return result;\n    }),\n\n    expansionDivStyle: computed('expansionText', function () {\n      var expansionText = this.get('expansionText');\n      var visiblility = expansionText ? 'visible' : 'hidden';\n      var textArea = this.get('textarea');\n\n      var styleString = 'visibility: ' + visiblility + ';';\n\n      if (textArea) {\n        var textPos = textArea.getBoundingClientRect();\n        styleString += ' top: ' + textPos.bottom + 'px; left: ' + textPos.left + 'px; width: ' + textArea.offsetWidth + 'px;';\n      }\n      return htmlSafe(styleString);\n    })\n  });\n});","define('hospitalrun/tests/components/expand-text.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/expand-text.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/expand-text.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/ext-radio', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    includeOtherOption: false,\n    otherOptionLabel: null,\n    showInline: false,\n\n    haveLabel: (function () {\n      var firstRadio = this.get('content.firstObject');\n      return !_ember['default'].isEmpty(firstRadio.label);\n    }).property('content'),\n\n    radioClass: (function () {\n      if (this.get('showInline')) {\n        return 'radio-inline';\n      } else {\n        return 'radio';\n      }\n    }).property('showInline')\n  });\n});","define('hospitalrun/tests/components/ext-radio.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/ext-radio.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ext-radio.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/file-upload', ['exports', 'hospitalrun/components/image-upload'], function (exports, _hospitalrunComponentsImageUpload) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsImageUpload['default'].extend({\n    resizeFile: false\n  });\n});","define('hospitalrun/tests/components/file-upload.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/file-upload.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/file-upload.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/icd10-pcs-typeahead', ['exports', 'hospitalrun/components/icd10-typeahead'], function (exports, _hospitalrunComponentsIcd10Typeahead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsIcd10Typeahead['default'].extend();\n});","define('hospitalrun/tests/components/icd10-pcs-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/icd10-pcs-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/icd10-pcs-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/icd10-typeahead', ['exports', 'hospitalrun/components/type-ahead'], function (exports, _hospitalrunComponentsTypeAhead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({\n    'class': 'scrollable-typeahead',\n    minlength: 2,\n    selectionKey: 'id',\n    setOnBlur: true,\n    templates: {\n      header: '<div class=\"alert alert-success well-sm query-results\" role=\"alert\"></div>'\n    },\n\n    _sourceQuery: function _sourceQuery(query, cb) {\n      // Custom source function\n      // Get the data from the Blodhound engine and process it.\n      this.bloodhound.get(query, (function (suggestions) {\n        cb(suggestions);\n        // Set the headers content.\n        var $header = this.$('.query-results');\n        $header.html('<strong><em>' + query + '</em></strong> returned <strong>' + suggestions.length + '</strong> results');\n      }).bind(this));\n    },\n\n    _getSource: function _getSource() {\n      return this._sourceQuery.bind(this);\n    }\n  });\n});","define('hospitalrun/tests/components/icd10-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/icd10-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/icd10-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/image-upload', ['exports', 'ember', 'ember-rapid-forms/components/em-input'], function (exports, _ember, _emberRapidFormsComponentsEmInput) {\n  'use strict';\n\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({\n    fileInputEl: null,\n    isImage: true,\n    resizeFile: true,\n    selectedFile: null,\n    type: 'file',\n\n    _fileChanged: function _fileChanged() {\n      var _this = this;\n\n      var inputEl = this.get('fileInputEl');\n      var resize = this.get('resizeFile');\n\n      if (!isEmpty(inputEl.files[0]) && resize) {\n        (function () {\n          // Derived from https://github.com/josefrichter/resize/blob/master/public/preprocess.js\n          var blobURL = window.URL.createObjectURL(inputEl.files[0]); // and get it's URL\n          // helper Image object\n          var image = new Image();\n          image.src = blobURL;\n          image.addEventListener('load', (function () {\n            window.URL.revokeObjectURL(blobURL);\n            // have to wait till it's loaded\n            this.set('selectedFile', this._resizeImage(image)); // send it to canvas\n            this.set('isImage', true);\n          }).bind(_this));\n          image.addEventListener('error', (function () {\n            // if image load fails, file probably isn't an image, so don't resize\n            window.URL.revokeObjectURL(blobURL);\n            this.set('selectedFile', inputEl.files[0]);\n            this.set('isImage', false);\n          }).bind(_this));\n        })();\n      } else {\n        this.set('isImage', false);\n        this.set('selectedFile', inputEl.files[0]);\n      }\n    },\n\n    /**\n     * Resize the image to no larger than 1024px so that file sizes\n     * are not too large.\n     */\n    _resizeImage: function _resizeImage(img) {\n      // Derived from https://github.com/josefrichter/resize/blob/master/public/preprocess.js\n      var canvas = document.createElement('canvas');\n      var height = img.height;\n      var width = img.width;\n\n      var maxHeight = 1024;\n      var maxWidth = 1024;\n\n      // calculate the width and height, constraining the proportions\n      if (width > height) {\n        if (width > maxWidth) {\n          // height *= max_width / width;\n          height = Math.round(height *= maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          // width *= max_height / height;\n          width = Math.round(width *= maxHeight / height);\n          height = maxHeight;\n        }\n      }\n\n      // resize the canvas and draw the image data into it\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n\n      var dataURI = canvas.toDataURL('image/png');\n      var binary = atob(dataURI.split(',')[1]);\n      var array = [];\n      for (var i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n      }\n      return new Blob([new Uint8Array(array)], { type: 'image/png' });\n    },\n\n    didInsertElement: function didInsertElement() {\n      var $input = this.$('input');\n      this.set('fileInputEl', $input[0]);\n      $input.on('change', this._fileChanged.bind(this));\n    }\n\n  });\n});","define('hospitalrun/tests/components/image-upload.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/image-upload.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/image-upload.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/inventory-location-picker', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    calculatedLocationPickers: null,\n    doingSetup: false,\n    label: null,\n    locationList: null,\n    quantityRequested: null,\n\n    locationChange: function locationChange() {\n      var doingSetup = this.get('doingSetup');\n      var locationList = this.get('locationList');\n      var locationPickers = this.get('calculatedLocationPickers');\n      var quantityRequested = this.get('quantityRequested');\n      var quantitySatisfiedIdx = -1;\n      var selectedLocations = [];\n      if (!doingSetup) {\n        locationPickers.reduce(function (previousValue, item, index) {\n          var selectedLocation = item.get('selectedLocation');\n          var returnValue = undefined;\n          if (_ember['default'].isEmpty(selectedLocation)) {\n            returnValue = previousValue;\n          } else {\n            returnValue = previousValue + selectedLocation.get('quantity');\n          }\n          if (quantitySatisfiedIdx === -1 && returnValue >= quantityRequested) {\n            quantitySatisfiedIdx = index;\n          }\n          return returnValue;\n        }, 0);\n        if (quantitySatisfiedIdx > -1) {\n          if (locationPickers.get('length') > quantitySatisfiedIdx + 1) {\n            locationPickers = locationPickers.slice(0, quantitySatisfiedIdx + 1);\n            this.set('calculatedLocationPickers', locationPickers);\n          }\n        } else {\n          locationPickers.addObject(_ember['default'].Object.create());\n        }\n        this._setupLocationPickers(locationPickers, locationList);\n      }\n      locationPickers.forEach(function (locationPicker) {\n        selectedLocations.addObject(locationPicker.get('selectedLocation'));\n      });\n      this.set('componentSelectedLocations', selectedLocations);\n    },\n\n    _setup: (function () {\n      _ember['default'].Binding.from('selectedLocations').to('componentSelectedLocations').connect(this);\n    }).on('init'),\n\n    _setupLocationPickers: function _setupLocationPickers(locationPickers, locationList, setInitialLocation) {\n      locationPickers.reduce(function (previousValue, item) {\n        var selectedLocation = item.get('selectedLocation');\n        item.set('subLocationList', previousValue.map(_hospitalrunUtilsSelectValues['default'].selectObjectMap));\n        if (!previousValue.includes(selectedLocation) || setInitialLocation) {\n          item.set('selectedLocation', previousValue.get('firstObject'));\n        }\n        item.set('label', 'And');\n        return previousValue.filter(function (location) {\n          return item.get('selectedLocation.id') !== location.get('id');\n        });\n      }, locationList);\n      var firstPicker = locationPickers.get('firstObject');\n      if (!_ember['default'].isEmpty(firstPicker)) {\n        firstPicker.set('label', this.get('label'));\n      }\n      this.set('calculatedLocationPickers', locationPickers);\n    },\n\n    locationPickers: (function () {\n      var locationList = this.get('locationList');\n      var locationPickers = [];\n      var quantityRequested = this.get('quantityRequested');\n      if (_ember['default'].isEmpty(locationList) || _ember['default'].isEmpty(quantityRequested)) {\n        // We need both a locationList and a quantityRequested\n        return;\n      }\n      this.set('doingSetup', true);\n      locationList.reduce(function (previousValue, location) {\n        if (previousValue < quantityRequested) {\n          locationPickers.addObject(_ember['default'].Object.create());\n        }\n        return previousValue + location.get('quantity');\n      }, 0);\n      this._setupLocationPickers(locationPickers, locationList, true);\n      this.locationChange();\n      this.set('doingSetup', false);\n      return this.get('calculatedLocationPickers');\n    }).property('calculatedLocationPickers', 'locationList', 'quantityRequested')\n  });\n});","define('hospitalrun/tests/components/inventory-location-picker.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/inventory-location-picker.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/inventory-location-picker.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/inventory-typeahead', ['exports', 'ember', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunComponentsTypeAhead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({\n    classNameBindings: ['haveInventoryItems'],\n    displayKey: 'name',\n    showQuantity: true,\n    i18n: _ember['default'].inject.service(),\n    store: _ember['default'].inject.service(),\n\n    _mapInventoryItems: function _mapInventoryItems(item) {\n      var returnObj = {};\n      if (this.get('showQuantity') && item.quantity) {\n        returnObj.name = item.name + ' - ' + item.friendlyId + ' (' + this.get('i18n').t('inventory.labels.availableQuantity', { quantity: item.quantity }) + ')';\n      } else {\n        returnObj.name = item.name + ' - ' + item.friendlyId;\n      }\n      returnObj[this.get('selectionKey')] = item;\n      return returnObj;\n    },\n\n    haveInventoryItems: (function () {\n      var content = this.get('content');\n      if (!_ember['default'].isEmpty(content) && content.length > 0) {\n        return 'have-inventory-items';\n      }\n    }).property('content'),\n\n    mappedContent: (function () {\n      var content = this.get('content');\n      var mapped = [];\n      if (content) {\n        mapped = content.map(this._mapInventoryItems.bind(this));\n      }\n      return mapped;\n    }).property('content'),\n\n    contentChanged: (function () {\n      var bloodhound = this.get('bloodhound');\n      var content = this.get('content');\n      if (bloodhound) {\n        bloodhound.clear();\n        bloodhound.add(content.map(this._mapInventoryItems.bind(this)));\n      }\n    }).observes('content.[]'),\n\n    itemSelected: function itemSelected(selectedInventoryItem) {\n      var _this = this;\n\n      this._super();\n      var store = this.get('store');\n      if (!_ember['default'].isEmpty(selectedInventoryItem)) {\n        store.find('inventory', selectedInventoryItem.id).then(function (inventoryItem) {\n          var model = _this.get('model');\n          model.set('inventoryItem', inventoryItem);\n          _ember['default'].run.once(_this, function () {\n            model.validate()['catch'](_ember['default'].K);\n          });\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/inventory-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/inventory-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/inventory-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/item-listing', ['exports', 'ember', 'hospitalrun/mixins/paging-actions'], function (exports, _ember, _hospitalrunMixinsPagingActions) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPagingActions['default'], {\n    classNames: ['panel', 'panel-primary']\n  });\n});","define('hospitalrun/tests/components/item-listing.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/item-listing.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/item-listing.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/language-select', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    config: _ember['default'].inject.service(),\n    i18n: _ember['default'].inject.service(),\n\n    languageOptions: (function () {\n      var i18n = this.get('i18n');\n      return i18n.get('locales').map(function (item) {\n        return {\n          id: item,\n          name: i18n.t('languages.' + item)\n        };\n      });\n    }).property('currentLanguage'),\n\n    onFinish: null,\n\n    _setUserLanguage: function _setUserLanguage(language) {\n      var configDB = this.get('config.configDB');\n      configDB.get('current_user').then(function (user) {\n        user.i18n = language;\n        configDB.put(user);\n      });\n    },\n\n    actions: {\n      selectLanguage: function selectLanguage(selection) {\n        this._setUserLanguage(selection);\n        this.set('i18n.locale', selection);\n        this.get('onFinish')();\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/components/language-select.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/language-select.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/language-select.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/loading-message', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'span',\n    showLoadingMessages: false,\n    loadingMessages: [(0, _emberI18n.translationMacro)('loading.messages.0'), (0, _emberI18n.translationMacro)('loading.messages.1'), (0, _emberI18n.translationMacro)('loading.messages.2'), (0, _emberI18n.translationMacro)('loading.messages.3'), (0, _emberI18n.translationMacro)('loading.messages.4'), (0, _emberI18n.translationMacro)('loading.messages.5'), (0, _emberI18n.translationMacro)('loading.messages.6'), (0, _emberI18n.translationMacro)('loading.messages.7'), (0, _emberI18n.translationMacro)('loading.messages.8'), (0, _emberI18n.translationMacro)('loading.messages.9'), (0, _emberI18n.translationMacro)('loading.messages.10'), (0, _emberI18n.translationMacro)('loading.messages.11')],\n\n    _setRandomMessage: function _setRandomMessage() {\n      var loadingMessages = this.get('loadingMessages');\n      var idx = Math.floor(Math.random() * loadingMessages.length);\n      this.set('message', loadingMessages[idx]);\n      this.set('timer', _ember['default'].run.later(this, this._setRandomMessage, 1000));\n    },\n\n    didInsertElement: function didInsertElement() {\n      this._setRandomMessage();\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      var timer = this.get('timer');\n      if (!_ember['default'].isEmpty(timer)) {\n        _ember['default'].run.cancel(timer);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/loading-message.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/loading-message.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/loading-message.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/location-select', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    locationPicker: null,\n\n    _setup: (function () {\n      this.locationChange = this.currentLocationChanged.bind(this);\n    }).on('init'),\n\n    currentLocationChanged: function currentLocationChanged(newLocation) {\n      this.get('locationPicker').set('selectedLocation', newLocation);\n      _ember['default'].run.once(this, function () {\n        this.get('parentView').locationChange();\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/components/location-select.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/location-select.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/location-select.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/medication-allergy', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var _get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Component.extend({\n    classNames: 'ps-info-group long-form',\n\n    canAddAllergy: null,\n    patient: null,\n    editAllergyAction: 'editAllergy',\n    showAddAllergyAction: 'showAddAllergy',\n\n    showAllergies: computed('canAddAllergy', 'patient.allergies.[]', {\n      get: function get() {\n        var canAddAllergy = _get(this, 'canAddAllergy');\n        var patientAllergies = _get(this, 'patient.allergies');\n        return canAddAllergy || !isEmpty(patientAllergies);\n      }\n    }),\n\n    actions: {\n      editAllergy: function editAllergy(allergy) {\n        this.sendAction('editAllergyAction', allergy);\n      },\n\n      createNewAllergy: function createNewAllergy() {\n        this.sendAction('showAddAllergyAction');\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/medication-allergy.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/medication-allergy.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/medication-allergy.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/modal-dialog', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    i18n: _ember['default'].inject.service(),\n    cancelAction: 'cancel',\n    closeModalAction: 'closeModal',\n    hideCancelButton: false,\n    hideUpdateButton: false,\n    isUpdateDisabled: false,\n    title: '',\n    updateButtonAction: '',\n    updateButtonClass: '',\n    updateButtonText: '',\n    cancelButtonText: '',\n    cancelBtnText: (function () {\n      var cancelText = this.get('cancelButtonText');\n      if (_ember['default'].isEmpty(cancelText)) {\n        return this.get('i18n').t('buttons.cancel');\n      } else {\n        return cancelText;\n      }\n    }).property('cancelButtonText'),\n    actions: {\n      cancelAction: function cancelAction() {\n        this.sendAction('cancelAction');\n      },\n\n      fireButtonAction: function fireButtonAction(buttonAction) {\n        this.set(buttonAction, buttonAction);\n        this.sendAction(buttonAction);\n      },\n\n      updateAction: function updateAction() {\n        this.sendAction('updateButtonAction');\n      }\n\n    },\n\n    didInsertElement: function didInsertElement() {\n      var $modal = this.$('.modal').modal();\n\n      $modal.on('hidden.bs.modal', (function () {\n        this.sendAction('closeModalAction');\n        this.sendAction('cancelAction');\n      }).bind(this));\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      var $modal = this.$('.modal');\n      $modal.off('hidden.bs.modal');\n      $modal.modal('hide');\n      // jquery fixes\n      $('body').removeClass('modal-open');\n      $('.modal-backdrop').remove();\n    }\n  });\n});","define('hospitalrun/tests/components/modal-dialog.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/modal-dialog.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/modal-dialog.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/nav-menu', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsUserSession['default'], {\n    callCloseSettings: 'closeSettings',\n    callNavAction: 'navAction',\n    classNames: ['primary-nav-item'],\n    isShowing: false,\n    nav: null,\n    tagName: 'div',\n\n    show: computed('nav', 'session.data.authenticated.userCaps', function () {\n      this._setupSubNav();\n      return this.currentUserCan(get(this, 'nav').capability);\n    }),\n\n    _setup: (function () {\n      var nav = get(this, 'nav');\n      nav.closeSubnav = (function () {\n        set(this, 'isShowing', false);\n      }).bind(this);\n      this._setupSubNav();\n    }).on('init'),\n\n    _setupSubNav: function _setupSubNav() {\n      var _this = this;\n\n      var nav = get(this, 'nav');\n      nav.subnav.forEach(function (item) {\n        set(item, 'show', _this.currentUserCan(item.capability));\n      });\n    },\n\n    actions: {\n      resetNav: function resetNav() {\n        this.sendAction('callCloseSettings');\n      },\n\n      toggleContent: function toggleContent() {\n        this.toggleProperty('isShowing');\n        this.sendAction('callNavAction', this.nav);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/nav-menu.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/nav-menu.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-menu.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/nav-paging', ['exports', 'ember', 'hospitalrun/mixins/paging-actions'], function (exports, _ember, _hospitalrunMixinsPagingActions) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPagingActions['default'], {\n    classNames: ['paging-buttons'],\n    paginationProps: null\n  });\n});","define('hospitalrun/tests/components/nav-paging.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/nav-paging.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-paging.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/number-input', ['exports', 'ember-rapid-forms/components/em-input'], function (exports, _emberRapidFormsComponentsEmInput) {\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({\n    sanitizeFunction: function sanitizeFunction(value) {\n      return value.replace(new RegExp(/([^0-9|.]+)/g), '');\n    },\n\n    focusOut: function focusOut() {\n      this._sanitizeValue();\n      return this._super();\n    },\n\n    keyUp: function keyUp() {\n      this._sanitizeValue();\n      return this._super();\n    },\n\n    _sanitizeValue: function _sanitizeValue() {\n      var model = this.get('model');\n      var property = this.get('property');\n      var currentValue = model.get(property);\n      var clean = this.get('sanitizeFunction')(currentValue);\n      model.set(property, clean);\n    }\n  });\n});","define('hospitalrun/tests/components/number-input.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/number-input.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/number-input.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/operative-procedures', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports.addProcedure = _addProcedure;\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  var _get = _ember['default'].get;\n  var set = _ember['default'].set;\n\n  function _addProcedure(model) {\n    var procedures = _get(model, 'procedures');\n    var description = _get(model, 'procedureDescription');\n    if (!isEmpty(description)) {\n      procedures.addObject({\n        description: description\n      });\n      set(model, 'procedureDescription', null);\n    }\n  }\n\n  exports['default'] = _ember['default'].Component.extend({\n    model: null,\n    procedureList: null,\n    haveProcedures: computed('model.procedures.[]', {\n      get: function get() {\n        return !isEmpty(_get(this, 'model.procedures'));\n      }\n    }),\n\n    actions: {\n      addProcedure: function addProcedure() {\n        var model = _get(this, 'model');\n        _addProcedure(model);\n      },\n\n      deleteProcedure: function deleteProcedure(procedureToDelete) {\n        var model = _get(this, 'model');\n        var procedures = _get(model, 'procedures');\n        procedures.removeObject(procedureToDelete);\n        model.validate();\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/components/operative-procedures.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/operative-procedures.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/operative-procedures.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/patient-diagnosis', ['exports', 'ember', 'hospitalrun/mixins/patient-diagnosis', 'ember-i18n', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsPatientDiagnosis, _emberI18n, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var _get = _ember['default'].get;\n\n  var DIAGNOSIS_KEYS = ['diagnosisContainer', 'hideInActiveDiagnoses', 'diagnosisContainer.diagnoses.@each.active', 'diagnosisContainer.diagnoses.@each.secondaryDiagnosis'];\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPatientDiagnosis['default'], _hospitalrunMixinsUserSession['default'], {\n    i18n: _ember['default'].inject.service(),\n    allowAddDiagnosis: false,\n    diagnosisContainer: null,\n    diagnosisProperty: null,\n    diagnosisList: null,\n    editDiagnosisAction: 'editDiagnosis',\n    hideInActiveDiagnoses: true,\n    showAddDiagnosisAction: 'showAddDiagnosis',\n    primaryDiagnosisLabel: (0, _emberI18n.translationMacro)('patients.labels.primaryDiagnosis'),\n    secondaryDiagnosisLabel: (0, _emberI18n.translationMacro)('patients.labels.secondaryDiagnosis'),\n\n    canAddDiagnosis: computed('allowAddDiagnosis', {\n      get: function get() {\n        var allowAddDiagnosis = _get(this, 'allowAddDiagnosis');\n        return allowAddDiagnosis && this.currentUserCan('add_diagnosis');\n      }\n    }),\n\n    havePrimaryDiagnoses: computed('primaryDiagnoses.length', {\n      get: function get() {\n        var primaryDiagnosesLength = this.get('primaryDiagnoses.length');\n        return primaryDiagnosesLength > 0;\n      }\n    }),\n\n    haveSecondaryDiagnoses: computed('secondaryDiagnoses.length', {\n      get: function get() {\n        var secondaryDiagnosesLength = this.get('secondaryDiagnoses.length');\n        return secondaryDiagnosesLength > 0;\n      }\n    }),\n\n    primaryDiagnoses: computed.apply(undefined, DIAGNOSIS_KEYS.concat([{\n      get: function get() {\n        var diagnosisContainer = this.get('diagnosisContainer');\n        var hideInActiveDiagnoses = this.get('hideInActiveDiagnoses');\n        return this.getDiagnoses(diagnosisContainer, hideInActiveDiagnoses, false);\n      }\n    }])),\n\n    secondaryDiagnoses: computed.apply(undefined, DIAGNOSIS_KEYS.concat([{\n      get: function get() {\n        var diagnosisContainer = this.get('diagnosisContainer');\n        var hideInActiveDiagnoses = this.get('hideInActiveDiagnoses');\n        return this.getDiagnoses(diagnosisContainer, hideInActiveDiagnoses, true);\n      }\n    }])),\n\n    showPrimaryDiagnoses: computed('canAddDiagnosis', 'havePrimaryDiagnoses', {\n      get: function get() {\n        return this.get('canAddDiagnosis') || this.get('havePrimaryDiagnoses');\n      }\n    }),\n\n    actions: {\n      editDiagnosis: function editDiagnosis(diagnosis) {\n        this.sendAction('editDiagnosisAction', diagnosis);\n      },\n\n      showAddDiagnosis: function showAddDiagnosis() {\n        this.sendAction('showAddDiagnosisAction');\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/components/patient-diagnosis.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/patient-diagnosis.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/patient-diagnosis.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/patient-orders', ['exports', 'ember', 'hospitalrun/mixins/filter-list', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsFilterList, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsFilterList['default'], _hospitalrunMixinsUserSession['default'], {\n    editImagingAction: 'editImaging',\n    editLabAction: 'editLab',\n    editMedicationAction: 'editMedication',\n    filterBy: null,\n    filterValue: null,\n    newImagingAction: 'newImaging',\n    newLabAction: 'newLab',\n    newMedicationAction: 'newMedication',\n    showDeleteImagingAction: 'showDeleteImaging',\n    showDeleteLabAction: 'showDeleteLab',\n    showDeleteMedicationAction: 'showDeleteMedication',\n    sortKey: null,\n    sortDesc: false,\n    orderTypeFilters: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return [i18n.t('components.patientOrders.labels.imagingOrderType').toString(), i18n.t('components.patientOrders.labels.labOrderType').toString(), i18n.t('components.patientOrders.labels.medicationOrderType').toString()];\n    }),\n\n    canAddImaging: _ember['default'].computed(function () {\n      return this.currentUserCan('add_imaging');\n    }),\n\n    canAddLab: _ember['default'].computed(function () {\n      return this.currentUserCan('add_lab');\n    }),\n\n    canAddMedication: _ember['default'].computed(function () {\n      return this.currentUserCan('add_medication');\n    }),\n\n    canDeleteImaging: _ember['default'].computed(function () {\n      return this.currentUserCan('delete_imaging');\n    }),\n\n    canDeleteLab: _ember['default'].computed(function () {\n      return this.currentUserCan('delete_lab');\n    }),\n\n    canDeleteMedication: _ember['default'].computed(function () {\n      return this.currentUserCan('delete_medication');\n    }),\n\n    filteredList: computed('orderList.[]', 'filterBy', 'filterValue', function () {\n      var filterBy = this.get('filterBy');\n      var filterValue = this.get('filterValue');\n      var orderList = this.get('orderList');\n      orderList = this.filterList(orderList, filterBy, filterValue);\n      return orderList;\n    }),\n\n    orderList: computed('visit.imaging.[]', 'visit.labs.[]', 'visit.medication.[]', function () {\n      var _this = this;\n\n      var i18n = this.get('i18n');\n      var imaging = this.get('visit.imaging');\n      var labs = this.get('visit.labs');\n      var medication = this.get('visit.medication');\n      var orderList = new _ember['default'].A();\n      orderList.addObjects(imaging.map(function (item) {\n        item.set('orderType', i18n.t('components.patientOrders.labels.imagingOrderType'));\n        item.set('name', item.get('imagingType.name'));\n        item.set('dateProcessed', item.get('imagingDate'));\n        _this._setPermissions(item, 'canAddImaging', 'canDeleteImaging');\n        return item;\n      }));\n      orderList.addObjects(labs.map(function (item) {\n        item.set('orderType', i18n.t('components.patientOrders.labels.labOrderType'));\n        item.set('name', item.get('labType.name'));\n        item.set('dateProcessed', item.get('labDate'));\n        _this._setPermissions(item, 'canAddLab', 'canDeleteLab');\n        return item;\n      }));\n      orderList.addObjects(medication.map(function (item) {\n        item.set('orderType', i18n.t('components.patientOrders.labels.medicationOrderType'));\n        item.set('name', item.get('medicationName'));\n        item.set('dateProcessed', item.get('prescriptionDate'));\n        item.set('result', '');\n        item.set('notes', item.get('prescription'));\n        _this._setPermissions(item, 'canAddMedication', 'canDeleteMedication');\n        return item;\n      }));\n      return orderList;\n    }),\n\n    sortedOrders: _ember['default'].computed('filteredList', 'sortKey', 'sortDesc', function () {\n      var filteredList = this.get('filteredList');\n      var sortDesc = this.get('sortDesc');\n      var sortKey = this.get('sortKey');\n      if (_ember['default'].isEmpty(filteredList) || _ember['default'].isEmpty(sortKey)) {\n        return filteredList;\n      }\n      filteredList = filteredList.sort(function (a, b) {\n        var compareA = a.get(sortKey);\n        var compareB = b.get(sortKey);\n        if (sortKey === 'orderType') {\n          compareA = compareA.toString();\n          compareB = compareB.toString();\n        }\n        if (sortDesc) {\n          return _ember['default'].compare(compareB, compareA);\n        } else {\n          return _ember['default'].compare(compareA, compareB);\n        }\n      });\n      return filteredList;\n    }),\n\n    i18n: _ember['default'].inject.service(),\n    visit: null,\n\n    _setPermissions: function _setPermissions(item, editPerm, deletePerm) {\n      if (item.get('canEdit')) {\n        if (this.get(editPerm)) {\n          item.set('canEdit', true);\n        }\n        if (this.get(deletePerm)) {\n          item.set('canDelete', true);\n        }\n      }\n    },\n\n    actions: {\n      filter: function filter(filterBy, filterValue) {\n        this.setProperties({\n          filterBy: filterBy,\n          filterValue: filterValue\n        });\n      },\n\n      newImaging: function newImaging() {\n        this.sendAction('newImagingAction');\n      },\n\n      newLab: function newLab() {\n        this.sendAction('newLabAction');\n      },\n\n      newMedication: function newMedication() {\n        this.sendAction('newMedicationAction');\n      },\n\n      editOrder: function editOrder(order) {\n        var modelName = order.get('constructor.modelName').capitalize();\n        this.sendAction('edit' + modelName + 'Action', order);\n      },\n\n      showDeleteOrder: function showDeleteOrder(order) {\n        var modelName = order.get('constructor.modelName').capitalize();\n        this.sendAction('showDelete' + modelName + 'Action', order);\n      },\n\n      sortByKey: function sortByKey(sortBy, sortDesc) {\n        this.setProperties({\n          sortKey: sortBy,\n          sortDesc: sortDesc\n        });\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/components/patient-orders.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/patient-orders.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/patient-orders.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/patient-summary', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var _get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsUserSession['default'], {\n    allowAddAllergy: false,\n    allowAddDiagnosis: false,\n    allowAddOperativePlan: false,\n    classNames: ['patient-summary'],\n    diagnosisContainer: null,\n    diagnosisList: null,\n    disablePatientLink: false,\n    editAllergyAction: 'editAllergy',\n    editDiagnosisAction: 'editDiagnosis',\n    editOperativePlanAction: 'editOperativePlan',\n    editOperationReportAction: 'editOperationReport',\n    editProcedureAction: 'editProcedure',\n    hideInActiveDiagnoses: true,\n    patient: null,\n    patientProcedures: null,\n    showAddAllergyAction: 'showAddAllergy',\n    showAddDiagnosisAction: 'showAddDiagnosis',\n    showPatientAction: 'showPatient',\n\n    canAddAllergy: computed('allowAddAllergy', {\n      get: function get() {\n        var allowAddAllergy = _get(this, 'allowAddAllergy');\n        return allowAddAllergy && this.currentUserCan('add_allergy');\n      }\n    }),\n\n    canAddOperativePlan: computed('allowAddOperativePlan', {\n      get: function get() {\n        var allowAddOperativePlan = _get(this, 'allowAddOperativePlan');\n        return allowAddOperativePlan && this.currentUserCan('add_operative_plan');\n      }\n    }),\n\n    currentOperativePlan: computed('patient.operativePlans.@each.status', {\n      get: function get() {\n        var operativePlans = _get(this, 'patient.operativePlans');\n        return operativePlans.findBy('isPlanned', true);\n      }\n    }),\n\n    haveProcedures: computed('patientProcedures.length', function () {\n      var proceduresLength = this.get('patientProcedures.length');\n      return proceduresLength > 0;\n    }),\n\n    shouldLinkToPatient: computed('disablePatientLink', function () {\n      var disablePatientLink = this.get('disablePatientLink');\n      return !disablePatientLink;\n    }),\n\n    didReceiveAttrs: function didReceiveAttrs() {\n      this._super.apply(this, arguments);\n      var diagnosisContainer = _get(this, 'diagnosisContainer');\n      if (isEmpty(diagnosisContainer)) {\n        set(this, 'diagnosisContainer', _get(this, 'patient'));\n      }\n    },\n\n    actions: {\n      addOperativePlan: function addOperativePlan() {\n        this.sendAction('editOperativePlanAction');\n      },\n\n      editOperativePlan: function editOperativePlan(operativePlan) {\n        this.sendAction('editOperativePlanAction', operativePlan);\n      },\n\n      linkToPatient: function linkToPatient() {\n        var shouldLink = this.get('shouldLinkToPatient');\n        if (shouldLink) {\n          var patient = this.get('patient');\n          var returnTo = this.get('returnTo');\n          var returnToContext = this.get('returnToContext');\n          patient.set('returnTo', returnTo);\n          patient.set('returnToContext', returnToContext);\n          this.sendAction('showPatientAction', this.get('patient'));\n        }\n      },\n\n      editAllergy: function editAllergy(allergy) {\n        this.sendAction('editAllergyAction', allergy);\n      },\n\n      editDiagnosis: function editDiagnosis(diagnosis) {\n        this.sendAction('editDiagnosisAction', diagnosis);\n      },\n\n      editProcedure: function editProcedure(procedure) {\n        var report = _get(procedure, 'report');\n        if (isEmpty(report)) {\n          this.sendAction('editProcedureAction', procedure);\n        } else {\n          this.sendAction('editOperationReportAction', report);\n        }\n      },\n\n      showAddAllergy: function showAddAllergy() {\n        this.sendAction('showAddAllergyAction');\n      },\n\n      showAddDiagnosis: function showAddDiagnosis() {\n        this.sendAction('showAddDiagnosisAction');\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/patient-summary.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/patient-summary.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/patient-summary.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/patient-typeahead', ['exports', 'ember', 'hospitalrun/mixins/patient-name', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunMixinsPatientName, _hospitalrunComponentsTypeAhead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend(_hospitalrunMixinsPatientName['default'], {\n    displayKey: 'name',\n    selectedAction: 'selectedPatientChanged',\n    setOnBlur: true,\n\n    _mapPatient: function _mapPatient(item) {\n      var returnObj = {};\n      returnObj.name = this.getPatientDisplayName(item) + ' - ' + this.getPatientDisplayId(item);\n      returnObj[this.get('selectionKey')] = item;\n      return returnObj;\n    },\n\n    contentChanged: (function () {\n      var bloodhound = this.get('bloodhound');\n      var content = this.get('content');\n      if (bloodhound) {\n        bloodhound.clear();\n        if (!_ember['default'].isEmpty(content)) {\n          bloodhound.add(content.map(this._mapPatient.bind(this)));\n        }\n      }\n    }).observes('content.[]'),\n\n    mappedContent: (function () {\n      var content = this.get('content');\n      var mapped = [];\n      if (content) {\n        mapped = content.map(this._mapPatient.bind(this));\n      }\n      return mapped;\n    }).property('content')\n\n  });\n});","define('hospitalrun/tests/components/patient-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/patient-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/patient-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/photo-display', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    computedPhotoUrl: null,\n    filesystem: _ember['default'].inject.service(),\n    isFileSystemEnabled: _ember['default'].computed.alias('filesystem.isFileSystemEnabled'),\n    fileName: _ember['default'].computed.alias('photo.fileName'),\n    photo: null,\n    url: _ember['default'].computed.alias('photo.url'),\n\n    photoUrl: (function () {\n      var computedPhotoUrl = this.get('computedPhotoUrl');\n      var fileName = this.get('fileName');\n      var filesystem = this.get('filesystem');\n      var isFileSystemEnabled = this.get('isFileSystemEnabled');\n      var url = this.get('url');\n      if (!_ember['default'].isEmpty(computedPhotoUrl)) {\n        return computedPhotoUrl;\n      } else if (isFileSystemEnabled) {\n        filesystem.pathToFileSystemURL(fileName).then((function (photoUrl) {\n          if (!_ember['default'].isEmpty(photoUrl)) {\n            this.set('computedPhotoUrl', photoUrl);\n          }\n        }).bind(this));\n      }\n      return url;\n    }).property('computedPhotoUrl', 'fileName', 'url')\n  });\n});","define('hospitalrun/tests/components/photo-display.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/photo-display.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/photo-display.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/price-list', ['exports', 'ember', 'hospitalrun/mixins/charge-actions'], function (exports, _ember, _hospitalrunMixinsChargeActions) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsChargeActions['default'], {\n    attributeBindings: ['tabId:id', 'role'],\n    charges: _ember['default'].computed.alias('model.charges'),\n    classNameBindings: ['active'],\n    classNames: ['tab-pane'],\n    index: null,\n    model: null,\n    pricingList: null,\n    pricingType: null,\n    role: 'tab',\n    setChargeQuantityAction: 'setChargeQuantity',\n\n    active: (function () {\n      var index = this.get('index');\n      return index === 0;\n    }).property(),\n\n    pricingListByType: (function () {\n      var pricingList = this.get('pricingList');\n      var pricingType = this.get('pricingType');\n      var rows = [];\n      if (!_ember['default'].isEmpty(pricingList)) {\n        pricingList = pricingList.filterBy('pricingType', pricingType);\n        pricingList = pricingList.map((function (pricingItem) {\n          var chargesForItem = this.findChargeForPricingItem(pricingItem, this.get('charges'));\n          if (chargesForItem) {\n            this.sendAction('setChargeQuantityAction', pricingItem.id, chargesForItem.get('quantity'));\n          }\n          return pricingItem;\n        }).bind(this));\n        var offset = 0;\n        var _pricingList = pricingList;\n        var _length = _pricingList.length;\n\n        while (offset < _length) {\n          rows.push(pricingList.slice(offset, offset + 6));\n          offset += 6;\n        }\n      }\n      return rows;\n    }).property('pricingType', 'pricingList'),\n\n    tabId: (function () {\n      return this.get('pricingType').toLowerCase().dasherize();\n    }).property('pricingType')\n\n  });\n});","define('hospitalrun/tests/components/price-list.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/price-list.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/price-list.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/pricing-typeahead', ['exports', 'ember', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunComponentsTypeAhead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({\n    displayKey: 'name',\n    setOnBlur: true,\n\n    _mapContentItems: function _mapContentItems() {\n      var content = this.get('content');\n      if (content) {\n        var mapped = content.filter(function (item) {\n          return !_ember['default'].isEmpty(item);\n        });\n        mapped = mapped.map((function (item) {\n          var returnObj = {};\n          returnObj.name = item.name;\n          returnObj[this.get('selectionKey')] = item;\n          return returnObj;\n        }).bind(this));\n        return mapped;\n      } else {\n        return [];\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/pricing-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/pricing-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pricing-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/print-this', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Component.extend({\n    print: true,\n    delay: null,\n\n    didInsertElement: function didInsertElement() {\n      if (get(this, 'print')) {\n        var delay = get(this, 'delay');\n        if (!isEmpty(delay) && !isNaN(delay) && delay > 0) {\n          _ember['default'].run.later(null, function () {\n            window.print();\n          }, delay);\n        } else {\n          _ember['default'].run.scheduleOnce('afterRender', this, function () {\n            window.print();\n          });\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/print-this.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/print-this.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/print-this.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/quantity-calc', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Component.extend({\n    quantityGroups: [],\n    calculated: null,\n    currentUnit: null,\n    targetUnit: null,\n    unitList: null,\n\n    didReceiveAttrs: function didReceiveAttrs() /* attrs */{\n      this._super.apply(this, arguments);\n      var quantityGroups = this.get('quantityGroups');\n      if (isEmpty(quantityGroups)) {\n        var calculated = this.get('calculated');\n        var targetUnit = this.get('targetUnit');\n        quantityGroups.addObject({\n          index: 0,\n          unit: targetUnit,\n          firstQuantity: true,\n          quantity: calculated\n        });\n      }\n    },\n\n    showTotal: (function () {\n      var calculated = this.get('calculated');\n      var quantityGroups = this.get('quantityGroups');\n      if (quantityGroups.length > 1 && !_ember['default'].isEmpty(calculated) && !isNaN(calculated)) {\n        return true;\n      }\n      return false;\n    }).property('calculated'),\n\n    currentQuantityGroups: (function () {\n      var firstQuantityObject = undefined;\n      var quantityGroups = this.get('quantityGroups');\n      var targetUnit = this.get('targetUnit');\n      firstQuantityObject = quantityGroups.get('firstObject');\n      if (!_ember['default'].isEmpty(firstQuantityObject)) {\n        var selectedUnit = firstQuantityObject.unit;\n        if (_ember['default'].isEmpty(selectedUnit)) {\n          this.set('quantityGroups.firstObject.unit', targetUnit);\n        } else {\n          this.updateCurrentUnit(selectedUnit, 0);\n        }\n      }\n      return quantityGroups;\n    }).property('quantityGroups', 'targetUnit'),\n\n    calculateTotal: function calculateTotal() {\n      var quantityGroups = this.get('quantityGroups');\n      var haveQuantities = false;\n      var lastObject = quantityGroups.get('lastObject');\n      var targetUnit = this.get('targetUnit');\n      haveQuantities = quantityGroups.every(function (item) {\n        var quantity = item.quantity;\n        var unit = item.unit;\n\n        return !_ember['default'].isEmpty(quantity) && !_ember['default'].isEmpty(unit) && !isNaN(quantity);\n      });\n      if (haveQuantities && lastObject.unit === targetUnit) {\n        var newValue = quantityGroups.reduce(function (previousValue, item) {\n          return previousValue * parseInt(item.quantity);\n        }, 1);\n        this.set('calculated', newValue);\n      } else {\n        this.set('calculated');\n      }\n    },\n\n    updateCurrentUnit: function updateCurrentUnit(selectedUnit, index) {\n      var targetUnit = this.get('targetUnit');\n      var quantityGroups = this.get('quantityGroups');\n      var groupLength = quantityGroups.length;\n      if (!_ember['default'].isEmpty(targetUnit)) {\n        if (selectedUnit === targetUnit) {\n          // Done\n          if (index < groupLength - 1) {\n            quantityGroups.removeAt(index + 1, groupLength - 1 - index);\n          }\n        } else {\n          if (index === groupLength - 1) {\n            quantityGroups.addObject({\n              unitName: selectedUnit,\n              unit: targetUnit,\n              index: quantityGroups.length\n            });\n          } else {\n            _ember['default'].set(quantityGroups.objectAt(index + 1), 'unitName', selectedUnit);\n          }\n        }\n        _ember['default'].run.once(this, this.calculateTotal);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/quantity-calc.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/quantity-calc.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/quantity-calc.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/quantity-conv', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    firstQuantity: false,\n    quantity: null,\n    quantityHelp: null,\n    unitName: null,\n    unit: null,\n    resetUnitName: false,\n    targetUnit: _ember['default'].computed.alias('parentView.targetUnit'),\n    unitList: null,\n\n    unitClass: (function () {\n      var selectedUnit = this.get('unit');\n      var targetUnit = this.get('targetUnit');\n      var unitClass = 'has-success';\n      if (!_ember['default'].isEmpty(targetUnit) && _ember['default'].isEmpty(selectedUnit)) {\n        this.set('unitHelp', 'please select a unit');\n        unitClass = 'has-error';\n      } else {\n        if (_ember['default'].isEmpty(targetUnit)) {\n          unitClass = '';\n        }\n        this.set('unitHelp');\n      }\n      this.get('parentView').updateCurrentUnit(selectedUnit, this.get('index'));\n      return unitClass;\n    }).property('targetUnit', 'unit'),\n\n    quantityClass: (function () {\n      var quantity = this.get('quantity');\n      var quantityClass = 'has-success';\n      var targetUnit = this.get('targetUnit');\n      if (!_ember['default'].isEmpty(targetUnit) && (_ember['default'].isEmpty(quantity) || isNaN(quantity) || quantity < 0)) {\n        this.set('quantityHelp', 'not a valid number');\n        quantityClass = 'has-error';\n      } else {\n        if (_ember['default'].isEmpty(targetUnit)) {\n          quantityClass = '';\n        }\n        this.set('quantityHelp');\n      }\n      _ember['default'].run.once(this, function () {\n        this.get('parentView').calculateTotal();\n      });\n      return quantityClass;\n    }).property('quantity', 'targetUnit')\n  });\n});","define('hospitalrun/tests/components/quantity-conv.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/quantity-conv.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/quantity-conv.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/role-select', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    // possible passed-in values with their defaults:\n    content: null,\n    prompt: null,\n    optionValuePath: 'roles',\n    optionLabelPath: 'name',\n    action: _ember['default'].K, // action to fire on change\n\n    // shadow the passed-in `selection` to avoid\n    // leaking changes to it via a 2-way binding\n    _selection: _ember['default'].computed.reads('selection'),\n\n    init: function init() {\n      this._super.apply(this, arguments);\n      if (!this.get('content')) {\n        this.set('content', []);\n      }\n    },\n\n    actions: {\n      change: function change() {\n        var selectEl = this.$('select').get(0);\n        var selectedIndex = selectEl.selectedIndex;\n\n        var content = this.get('content');\n\n        // decrement index by 1 if we have a prompt\n        var hasPrompt = !!this.get('prompt');\n        var contentIndex = hasPrompt ? selectedIndex - 1 : selectedIndex;\n\n        var selection = content[contentIndex].roles;\n\n        // set the local, shadowed selection to avoid leaking\n        // changes to `selection` out via 2-way binding\n        this.set('_selection', selection);\n\n        var changeCallback = this.get('action');\n        changeCallback(selection);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/role-select.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/role-select.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/role-select.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/search-listing', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    action: 'allItems',\n    actions: {\n      allItems: function allItems() {\n        this.sendAction();\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/search-listing.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/search-listing.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/search-listing.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/select-or-typeahead', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    name: 'select-or-typeahead',\n    className: null,\n    hint: true,\n    label: null,\n    list: null,\n    optionLabelPath: 'value',\n    optionValuePath: 'id',\n    property: null,\n    prompt: ' ',\n    selection: null,\n    setOnBlur: true,\n    typeAheadType: null,\n\n    content: (function () {\n      var list = this.get('list');\n      var optionLabelPath = this.get('optionLabelPath');\n      var optionValuePath = this.get('optionValuePath');\n      var userCanAdd = this.get('userCanAdd');\n\n      if (!_ember['default'].isEmpty(list) && list.get) {\n        var contentList = list.get('value');\n        if (_ember['default'].isEmpty(contentList)) {\n          return [];\n        }\n\n        if (!userCanAdd && optionLabelPath === 'value' && optionValuePath === 'id') {\n          return contentList.map(_hospitalrunUtilsSelectValues['default'].selectValuesMap);\n        } else {\n          return contentList;\n        }\n      }\n    }).property('list.value.[]'),\n\n    usePricingTypeAhead: (function () {\n      return this.get('typeAheadType') === 'pricing';\n    }).property('typeAheadType'),\n\n    userCanAdd: (function () {\n      var list = this.get('list');\n      if (!_ember['default'].isEmpty(list) && list.get) {\n        return list.get('userCanAdd');\n      } else {\n        return true;\n      }\n    }).property('list.userCanAdd')\n  });\n});","define('hospitalrun/tests/components/select-or-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/select-or-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/select-or-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/smart-prescription', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].TextArea.extend(_ember['default'].TargetActionSupport, {\n    valueDidChange: _ember['default'].observer('value', function () {\n      this.triggerAction({\n        action: 'search'\n      });\n    })\n  });\n});","define('hospitalrun/tests/components/smart-prescription.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/smart-prescription.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/smart-prescription.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/sortable-column', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    classNames: ['sortable-column'],\n    tagName: 'th',\n    action: 'sortByKey',\n    filterAction: 'filter',\n    filterBy: null,\n    filteredBy: null,\n    filterType: 'list',\n    sortDesc: false,\n    sortBy: null,\n    sortKey: null,\n    filtered: false,\n\n    sorted: (function () {\n      var sortBy = this.get('sortBy');\n      var sortKey = this.get('sortKey');\n      return sortBy === sortKey;\n    }).property('sortBy', 'sortKey'),\n\n    actions: {\n      sort: function sort() {\n        var sortBy = this.get('sortBy');\n        var sorted = this.get('sorted');\n        var sortDesc = false;\n        if (sorted) {\n          sortDesc = this.toggleProperty('sortDesc');\n        }\n        this.sendAction('action', sortBy, sortDesc);\n      },\n\n      filter: function filter(filterValue) {\n        if (_ember['default'].isEmpty(filterValue)) {\n          this.set('filtered');\n        } else {\n          this.set('filtered', true);\n        }\n        var filterBy = this.get('filterBy');\n        var $dropdown = this.$('.dropdown-toggle');\n        $dropdown.dropdown('toggle');\n        this.sendAction('filterAction', filterBy, filterValue);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/sortable-column.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/sortable-column.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sortable-column.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/take-photo', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  var TAKE_PICTURE = 'takeAPicture';\n  var UPLOAD_FILE = 'uploadAFile';\n  var FILE_SOURCES = [TAKE_PICTURE, UPLOAD_FILE];\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  var set = _ember['default'].set;\n\n  // Derived from https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos and\n  // https://github.com/samdutton/simpl/blob/master/getusermedia/sources/js/main.js\n  exports['default'] = _ember['default'].Component.extend({\n    defaultPhotoSource: null,\n    canvas: null,\n    height: 0,\n    isImage: false,\n    photo: null,\n    photoFile: null,\n    photoSource: null,\n    selectedCamera: null,\n    setupCamera: false,\n    sourceLabel: null,\n    video: null,\n    videoSources: null,\n    width: 200,\n\n    i18n: inject.service(),\n\n    canCaptureVideo: computed(function () {\n      return navigator.mediaDevices && navigator.mediaDevices.getUserMedia;\n    }),\n\n    photoSources: computed(function () {\n      var i18n = get(this, 'i18n');\n      return FILE_SOURCES.map(function (source) {\n        return {\n          label: i18n.t('components.takePhoto.labels.' + source),\n          value: source\n        };\n      });\n    }),\n\n    sourceChooserLabel: computed('sourceLabel', function () {\n      var i18n = get(this, 'i18n');\n      var sourceLabel = get(this, 'sourceLabel');\n      if (isEmpty(sourceLabel)) {\n        return i18n.t('components.takePhoto.how');\n      } else {\n        return sourceLabel;\n      }\n    }),\n\n    showFileUpload: computed('photoSource', function () {\n      var photoSource = get(this, 'photoSource');\n      return photoSource === UPLOAD_FILE;\n    }),\n\n    showCameraSelect: computed('videoSources', function () {\n      var showFileUpload = get(this, 'showFileUpload');\n      var videoSources = get(this, 'videoSources');\n      return !showFileUpload && videoSources && videoSources.length > 1;\n    }),\n\n    didInsertElement: function didInsertElement() {\n      var canCaptureVideo = get(this, 'canCaptureVideo');\n      var photoSource = get(this, 'defaultPhotoSource');\n      if (isEmpty(photoSource)) {\n        if (canCaptureVideo) {\n          photoSource = TAKE_PICTURE;\n        } else {\n          photoSource = UPLOAD_FILE;\n        }\n      }\n      this._photoSourceChanged(photoSource);\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      this._stopStream();\n    },\n\n    /**\n     * Setup the specified camera\n     */\n    _cameraChange: function _cameraChange(selectedCamera) {\n      set(this, 'selectedCamera', selectedCamera);\n      var stream = get(this, 'stream');\n      var video = get(this, 'video');\n      if (!_ember['default'].isEmpty(stream)) {\n        video.src = null;\n        this._stopStream();\n      }\n      var videoSource = get(this, 'selectedCamera');\n      var constraints = {\n        audio: false,\n        video: {\n          deviceId: videoSource\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(this._gotStream.bind(this))['catch'](this._errorCallback);\n      this._setupVideo();\n    },\n\n    _errorCallback: function _errorCallback(error) {\n      console.log('navigator.mediaDevices.getUserMedia error: ', error);\n    },\n\n    /**\n     * Callback for MediaStreamTrack.getSources\n     */\n    _gotSources: function _gotSources(sourceInfos) {\n      var cameraCount = 0;\n      var cameraLabel = undefined;\n      var videoSources = [];\n      for (var i = 0; i !== sourceInfos.length; ++i) {\n        var sourceInfo = sourceInfos[i];\n        if (sourceInfo.kind === 'videoinput') {\n          cameraLabel = 'Camera \\'' + ++cameraCount;\n          if (sourceInfo.label) {\n            cameraLabel += ' (' + sourceInfo.label + ')';\n          }\n          videoSources.addObject({\n            deviceId: sourceInfo.deviceId,\n            label: cameraLabel\n          });\n        }\n      }\n      set(this, 'videoSources', videoSources);\n      if (videoSources.length > 0) {\n        set(this, 'selectedCamera', videoSources[0].deviceId);\n        this._cameraChange(videoSources[0].deviceId);\n      }\n    },\n\n    /**\n     * Callback handler for getUserMedia.\n     */\n    _gotStream: function _gotStream(stream) {\n      if (this.isDestroyed) {\n        this._stopStream(stream);\n      } else {\n        var video = get(this, 'video');\n        set(this, 'stream', stream); // make stream available to object\n        video.srcObject = stream;\n        video.play();\n      }\n    },\n\n    _photoSourceChanged: function _photoSourceChanged(photoSource) {\n      var camera = this.$('.camera');\n      var setupCamera = get(this, 'setupCamera');\n      set(this, 'photoSource', photoSource);\n      if (photoSource === UPLOAD_FILE) {\n        camera.hide();\n      } else {\n        camera.show();\n        if (!setupCamera) {\n          var canvas = this.$('canvas').get(0);\n          var photo = this.$('img').get(0);\n          var video = this.$('video').get(0);\n          this.setProperties({\n            canvas: canvas,\n            photo: photo,\n            video: video\n          });\n          if (navigator.mediaDevices) {\n            if (!navigator.mediaDevices.enumerateDevices) {\n              if (navigator.mediaDevices.getUserMedia) {\n                var constraints = { audio: false, video: true };\n                navigator.mediaDevices.getUserMedia(constraints).then(this._gotStream.bind(this))['catch'](this._errorCallback);\n                this._setupCanPlayListener(video);\n              }\n            } else {\n              navigator.mediaDevices.enumerateDevices().then(this._gotSources.bind(this))['catch'](this._errorCallback);\n              this._setupCanPlayListener(video);\n            }\n          }\n          set(this, 'setupCamera', true);\n        }\n      }\n    },\n\n    _setupCanPlayListener: function _setupCanPlayListener(video) {\n      // Remove listener if it was already added before.\n      video.removeEventListener('canplay', this._setupVideo.bind(this), false);\n      video.addEventListener('canplay', this._setupVideo.bind(this), false);\n    },\n\n    /**\n     * Setup the dimensions for the video preview and picture elements.\n     */\n    _setupVideo: function _setupVideo() {\n      var canvas = get(this, 'canvas');\n      var height = get(this, 'height');\n      var video = get(this, 'video');\n      var width = get(this, 'width');\n      height = video.videoHeight / (video.videoWidth / width);\n      video.setAttribute('width', width);\n      video.setAttribute('height', height);\n      canvas.setAttribute('width', width);\n      canvas.setAttribute('height', height);\n      this.setProperties({\n        height: height,\n        width: width\n      });\n    },\n\n    _stopStream: function _stopStream(stream) {\n      var streamToStop = stream || get(this, 'stream');\n      if (!_ember['default'].isEmpty(streamToStop)) {\n        if (typeof streamToStop.active === 'undefined') {\n          streamToStop.stop();\n        } else {\n          var _streamToStop$getTracks = streamToStop.getTracks();\n\n          var _streamToStop$getTracks2 = _slicedToArray(_streamToStop$getTracks, 1);\n\n          var track = _streamToStop$getTracks2[0];\n\n          track.stop();\n        }\n      }\n    },\n\n    actions: {\n      cameraChange: function cameraChange(selectedCamera) {\n        this._cameraChange(selectedCamera);\n      },\n\n      photoSourceChange: function photoSourceChange(photoSource) {\n        this._photoSourceChanged(photoSource);\n      },\n\n      takePhoto: function takePhoto() {\n        var canvas = get(this, 'canvas');\n        var height = get(this, 'height');\n        var video = get(this, 'video');\n        var width = get(this, 'width');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.getContext('2d').drawImage(video, 0, 0, width, height);\n        var data = canvas.toDataURL('image/png');\n        var binary = atob(data.split(',')[1]);\n        var array = [];\n        for (var i = 0; i < binary.length; i++) {\n          array.push(binary.charCodeAt(i));\n        }\n        set(this, 'photoFile', new Blob([new Uint8Array(array)], { type: 'image/png' }));\n        set(this, 'isImage', true);\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/components/take-photo.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/take-photo.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/take-photo.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/text-search', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].TextField.extend(_ember['default'].TargetActionSupport, {\n    change: function change() {\n      this.triggerAction({\n        action: 'search'\n      });\n    },\n    didInsertElement: function didInsertElement() {\n      this.$().focus();\n    }\n  });\n});","define('hospitalrun/tests/components/text-search.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/text-search.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/text-search.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/type-ahead', ['exports', 'ember-rapid-forms/components/em-input', 'hospitalrun/mixins/typeahead'], function (exports, _emberRapidFormsComponentsEmInput, _hospitalrunMixinsTypeahead) {\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend(_hospitalrunMixinsTypeahead['default']);\n});","define('hospitalrun/tests/components/type-ahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/type-ahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/type-ahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/typeahead-filter', ['exports', 'ember', 'hospitalrun/mixins/typeahead'], function (exports, _ember, _hospitalrunMixinsTypeahead) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsTypeahead['default'], {\n    classNames: ['input-group'],\n    selectedAction: 'filter',\n    setOnBlur: false,\n\n    actions: {\n      clearFilter: function clearFilter() {\n        var $input = this.$('.tt-input');\n        $input.val('');\n        this.sendAction('selectedAction');\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/typeahead-filter.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/typeahead-filter.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/typeahead-filter.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/upcoming-appointments', ['exports', 'ember-data', 'ember', 'moment'], function (exports, _emberData, _ember, _moment) {\n  'use strict';\n\n  var PromiseArray = _emberData['default'].PromiseArray;\n  var Component = _ember['default'].Component;\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = Component.extend({\n    patient: null,\n\n    database: inject.service(),\n    store: inject.service(),\n\n    appointments: computed('patient', function () {\n      var patient = get(this, 'patient');\n      if (!isEmpty(patient)) {\n        var database = get(this, 'database');\n        var endDate = (0, _moment['default'])().add(10, 'years').toDate().getTime();\n        var maxApptId = database.getMaxPouchId('appointment');\n        var minApptId = database.getMinPouchId('appointment');\n        var patientId = get(patient, 'id');\n        var startDate = (0, _moment['default'])().toDate().getTime();\n        var store = get(this, 'store');\n        var appointmentPromise = store.query('appointment', {\n          options: {\n            startkey: [patientId, startDate, startDate, minApptId],\n            endkey: [patientId, endDate, endDate, maxApptId]\n          },\n          mapReduce: 'appointments_by_patient'\n        });\n        return PromiseArray.create({\n          promise: appointmentPromise\n        });\n      }\n    })\n  });\n});","define('hospitalrun/tests/components/upcoming-appointments.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/upcoming-appointments.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/upcoming-appointments.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/abstract-delete-controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    afterDeleteAction: 'closeModal',\n    showUpdateButton: true,\n    updateButtonText: 'Delete',\n    updateButtonAction: 'delete',\n\n    isUpdateDisabled: false,\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      'delete': function _delete() {\n        var recordToDelete = this.get('model');\n        recordToDelete.set('archived', true);\n        recordToDelete.save().then((function () {\n          recordToDelete.unloadRecord();\n          this.send(this.get('afterDeleteAction'), recordToDelete);\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/controllers/abstract-delete-controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/abstract-delete-controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/abstract-delete-controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/abstract-edit-controller', ['exports', 'ember', 'hospitalrun/mixins/edit-panel-props', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/mixins/modal-helper', 'ember-concurrency', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsEditPanelProps, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunMixinsModalHelper, _emberConcurrency, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  var RSVP = _ember['default'].RSVP;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsEditPanelProps['default'], _hospitalrunMixinsIsUpdateDisabled['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsUserSession['default'], {\n    cancelAction: 'allItems',\n\n    cancelButtonText: (function () {\n      var i18n = get(this, 'i18n');\n      var hasDirtyAttributes = get(this, 'model.hasDirtyAttributes');\n      if (hasDirtyAttributes) {\n        return i18n.t('buttons.cancel');\n      } else {\n        return i18n.t('buttons.returnButton');\n      }\n    }).property('model.hasDirtyAttributes'),\n\n    disabledAction: (function () {\n      var model = get(this, 'model');\n      if (model.validate) {\n        model.validate()['catch'](_ember['default'].K);\n      }\n      var isValid = model.get('isValid');\n      if (!isValid) {\n        return 'showDisabledDialog';\n      }\n    }).property('model.isValid'),\n\n    isNewOrDeleted: (function () {\n      return get(this, 'model.isNew') || get(this, 'model.isDeleted');\n    }).property('model.isNew', 'model.isDeleted'),\n\n    lookupLists: inject.service(),\n    /**\n     *  Lookup lists that should be updated when the model has a new value to add to the lookup list.\n     *  lookupListsToUpdate: [{\n     *      name: 'countryList', //Name of property containing lookup list\n     *      property: 'country', //Corresponding property on model that potentially contains a new value to add to the list\n     *      id: 'country_list' //Id of the lookup list to update\n     *  }\n     */\n    lookupListsLastUpdate: null,\n    lookupListsToUpdate: null,\n\n    showUpdateButton: (function () {\n      var updateButtonCapability = get(this, 'updateCapability');\n      return this.currentUserCan(updateButtonCapability);\n    }).property('updateCapability'),\n\n    updateButtonAction: 'update',\n    updateButtonText: (function () {\n      var i18n = get(this, 'i18n');\n      if (get(this, 'model.isNew')) {\n        return i18n.t('buttons.add');\n      } else {\n        return i18n.t('buttons.update');\n      }\n    }).property('model.isNew'),\n    updateCapability: null,\n\n    /* Silently update and then fire the specified action. */\n    silentUpdate: function silentUpdate(action, whereFrom) {\n      var _this = this;\n\n      return this.get('updateTask').perform(true).then(function () {\n        _this.send(action, whereFrom);\n      });\n    },\n\n    /**\n     * Task to update the model and perform the before update and after update\n     * @param skipAfterUpdate boolean (optional) indicating whether or not\n     * to skip the afterUpdate call.\n     */\n    updateTask: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(skipAfterUpdate) {\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        var _this2 = this;\n\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            context$1$0.prev = 0;\n            context$1$0.next = 3;\n            return this.beforeUpdate().then(function () {\n              return _this2.saveModel(skipAfterUpdate);\n            })['catch'](function (err) {\n              return _this2._handleError(err);\n            });\n\n          case 3:\n            context$1$0.next = 8;\n            break;\n\n          case 5:\n            context$1$0.prev = 5;\n            context$1$0.t0 = context$1$0['catch'](0);\n\n            this._handleError(context$1$0.t0);\n\n          case 8:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this, [[0, 5]]);\n    })).enqueue(),\n\n    /**\n     * Add the specified value to the lookup list if it doesn't already exist in the list.\n     * @param lookupList array the lookup list to add to.\n     * @param value string the value to add.\n     * @param listsToUpdate array the lookup lists that need to be saved.\n     * @param listsName string name of the list to add the value to.\n     */\n    _addValueToLookupList: function _addValueToLookupList(lookupList, value, listsToUpdate, listName) {\n      var lookupListValues = lookupList.get('value');\n      if (!_ember['default'].isArray(lookupListValues)) {\n        lookupListValues = [];\n      }\n      if (!lookupListValues.includes(value)) {\n        lookupListValues.push(value);\n        lookupListValues.sort();\n        lookupList.set('value', lookupListValues);\n        if (!listsToUpdate.includes(lookupList)) {\n          listsToUpdate.push(lookupList);\n        }\n        this.set(listName, lookupList);\n      }\n    },\n\n    _cancelUpdate: function _cancelUpdate() {\n      var cancelledItem = get(this, 'model');\n      cancelledItem.rollbackAttributes();\n    },\n\n    _handleError: function _handleError(err) {\n      if (!err.ignore) {\n        var i18n = get(this, 'i18n');\n        var errorDetails = err;\n        if (!errorDetails.message) {\n          errorDetails.message = err.toString();\n        }\n        this.displayAlert(i18n.t('alerts.errorExclamation'), i18n.t('messages.saveActionException', errorDetails));\n      }\n    },\n\n    actions: {\n      cancel: function cancel() {\n        this._cancelUpdate();\n        this.send(get(this, 'cancelAction'));\n      },\n\n      returnTo: function returnTo() {\n        this._cancelUpdate();\n        var returnTo = get(this, 'model.returnTo');\n        var returnToContext = get(this, 'model.returnToContext');\n        if (isEmpty(returnToContext)) {\n          this.transitionToRoute(returnTo);\n        } else {\n          this.transitionToRoute(returnTo, returnToContext);\n        }\n      },\n\n      showDisabledDialog: function showDisabledDialog() {\n        var i18n = get(this, 'i18n');\n        this.displayAlert(i18n.t('alerts.warningExclamation'), i18n.t('messages.requiredFieldsCorrectErrors'));\n      },\n\n      /**\n       * Update the model and perform the before update and after update\n       * @param skipAfterUpdate boolean (optional) indicating whether or not\n       * to skip the afterUpdate call.\n       */\n      update: function update(skipAfterUpdate) {\n        return this.get('updateTask').perform(skipAfterUpdate);\n      }\n    },\n\n    /**\n     * Override this function to perform logic after record update\n     * @param record the record that was just updated.\n     */\n    afterUpdate: function afterUpdate() {},\n\n    /**\n     * Override this function to perform logic before record update.\n     * @returns {Promise} Promise that resolves after before update is done.\n     */\n    beforeUpdate: function beforeUpdate() {\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    /**\n     * Save the model and then (optionally) run the after update.\n     * @param skipAfterUpdate boolean (optional) indicating whether or not\n     * to skip the afterUpdate call.\n     */\n    saveModel: function saveModel(skipAfterUpdate) {\n      var _this3 = this;\n\n      return get(this, 'model').save().then(function (record) {\n        _this3.updateLookupLists().then(function () {\n          if (!skipAfterUpdate) {\n            _this3.afterUpdate(record);\n          }\n        });\n      })['catch'](function (error) {\n        _this3.send('error', error);\n      });\n    },\n\n    /**\n     * Update any new values added to a lookup list\n     */\n    updateLookupLists: function updateLookupLists() {\n      var _this4 = this;\n\n      var lookupListsToUpdate = get(this, 'lookupListsToUpdate');\n      var listsToUpdate = _ember['default'].A();\n      var lookupPromises = [];\n      if (!isEmpty(lookupListsToUpdate)) {\n        lookupListsToUpdate.forEach(function (list) {\n          var propertyValue = get(_this4, get(list, 'property'));\n          var lookupListToUpdate = get(_this4, get(list, 'name'));\n          if (!isEmpty(propertyValue)) {\n            if (!isEmpty(lookupListToUpdate) && lookupListToUpdate.then) {\n              lookupPromises.push(lookupListToUpdate.then(function (lookupList) {\n                return _this4._checkListForUpdate(list, lookupList, listsToUpdate, propertyValue);\n              }));\n            } else {\n              _this4._checkListForUpdate(list, lookupListToUpdate, listsToUpdate, propertyValue);\n            }\n          }\n        });\n        if (!isEmpty(lookupPromises)) {\n          return RSVP.all(lookupPromises).then(function () {\n            var lookupLists = get(_this4, 'lookupLists');\n            var updatePromises = [];\n            listsToUpdate.forEach(function (list) {\n              updatePromises.push(list.save().then(function () {\n                set(_this4, 'lookupListsLastUpdate', new Date().getTime());\n                lookupLists.resetLookupList(get(list, 'id'));\n              }));\n            });\n            return RSVP.all(updatePromises);\n          });\n        }\n      }\n      return RSVP.resolve();\n    },\n\n    _checkListForUpdate: function _checkListForUpdate(listInfo, lookupList, listsToUpdate, propertyValue) {\n      var store = get(this, 'store');\n      if (!lookupList) {\n        lookupList = store.push(store.normalize('lookup', {\n          id: listInfo.id,\n          value: [],\n          userCanAdd: true\n        }));\n      }\n      if (_ember['default'].isArray(propertyValue)) {\n        propertyValue.forEach((function (value) {\n          this._addValueToLookupList(lookupList, value, listsToUpdate, listInfo.name);\n        }).bind(this));\n      } else {\n        this._addValueToLookupList(lookupList, propertyValue, listsToUpdate, listInfo.name);\n      }\n      return lookupList;\n    }\n\n  });\n});","define('hospitalrun/tests/controllers/abstract-edit-controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/abstract-edit-controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/abstract-edit-controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/abstract-paged-controller', ['exports', 'ember', 'hospitalrun/mixins/pagination-props', 'hospitalrun/mixins/progress-dialog', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsPaginationProps, _hospitalrunMixinsProgressDialog, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsPaginationProps['default'], _hospitalrunMixinsProgressDialog['default'], _hospitalrunMixinsUserSession['default'], {\n    addPermission: null,\n    deletePermission: null,\n    nextStartKey: null,\n    previousStartKey: null,\n    previousStartKeys: [],\n    progressMessage: 'Loading Records.  Please wait...',\n    progressTitle: 'Loading',\n    queryParams: ['startKey', 'sortKey', 'sortDesc'],\n    sortDesc: false,\n    sortKey: null,\n\n    canAdd: (function () {\n      return this.currentUserCan(this.get('addPermission'));\n    }).property(),\n\n    canDelete: (function () {\n      return this.currentUserCan(this.get('deletePermission'));\n    }).property(),\n\n    canEdit: (function () {\n      // Default to using add permission\n      return this.currentUserCan(this.get('addPermission'));\n    }).property(),\n\n    showActions: (function () {\n      return this.get('canAdd') || this.get('canEdit') || this.get('canDelete');\n    }).property('canAdd', 'canEdit', 'canDelete'),\n\n    disablePreviousPage: (function () {\n      return _ember['default'].isEmpty(this.get('previousStartKey'));\n    }).property('previousStartKey'),\n\n    disableNextPage: (function () {\n      return _ember['default'].isEmpty(this.get('nextStartKey'));\n    }).property('nextStartKey'),\n\n    showPagination: (function () {\n      return !_ember['default'].isEmpty(this.get('previousStartKey')) || !_ember['default'].isEmpty(this.get('nextStartKey'));\n    }).property('nextStartKey', 'previousStartKey'),\n\n    hasRecords: _ember['default'].computed('model.length', {\n      get: function get() {\n        var model = this.get('model');\n        if (!_ember['default'].isEmpty(model)) {\n          return model.get('length') > 0;\n        } else {\n          return false;\n        }\n      }\n    }),\n\n    actions: {\n      nextPage: function nextPage() {\n        var key = this.get('nextStartKey');\n        var previousStartKeys = this.get('previousStartKeys');\n        var firstKey = this.get('firstKey');\n        this.set('previousStartKey', firstKey);\n        previousStartKeys.push(firstKey);\n        this.set('startKey', key);\n        this.showProgressModal();\n      },\n      previousPage: function previousPage() {\n        var key = this.get('previousStartKey');\n        var previousStartKeys = this.get('previousStartKeys');\n        previousStartKeys.pop();\n        this.set('startKey', key);\n        this.set('previousStartKey', previousStartKeys.pop());\n        this.set('previousStartKeys', previousStartKeys);\n        this.showProgressModal();\n      },\n      sortByKey: function sortByKey(sortKey, sortDesc) {\n        this.setProperties({\n          previousStartKey: null,\n          previousStartKeys: [],\n          nextStartKey: null,\n          sortDesc: sortDesc,\n          sortKey: sortKey,\n          startKey: null,\n          firstKey: null\n        });\n        this.showProgressModal();\n      }\n    }\n  });\n});","define('hospitalrun/tests/controllers/abstract-paged-controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/abstract-paged-controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/abstract-paged-controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/abstract-report-controller', ['exports', 'ember', 'hospitalrun/mixins/date-format', 'hospitalrun/mixins/modal-helper', 'moment', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/pagination-props', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog'], function (exports, _ember, _hospitalrunMixinsDateFormat, _hospitalrunMixinsModalHelper, _moment, _hospitalrunMixinsNumberFormat, _hospitalrunMixinsPaginationProps, _hospitalrunMixinsPouchdb, _hospitalrunMixinsProgressDialog) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsPaginationProps['default'], _hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsProgressDialog['default'], {\n    defaultErrorMessage: 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.',\n    offset: 0,\n    limit: 25,\n    progressMessage: 'Please wait while your report is generated.',\n    progressTitle: 'Generating Report',\n    reportColumns: null,\n    reportHeaders: null,\n    reportRows: [],\n    reportTitle: null,\n    reportType: null,\n    reportTypes: null,\n    showFirstPageButton: true,\n    showLastPageButton: true,\n    showReportResults: false,\n\n    /**\n     * Add a row to the report using the selected columns to add the row.\n     * @param {Array} row the row to add\n     * @param {boolean} skipFormatting true if formatting should be skipped.\n     * @param reportColumns {Object} the columns to display on the report;\n     * optional, if not set, the property reportColumns on the controller\n     * will be used.\n     * @param reportAction {Object} action to fire on row when row is clicked.\n     */\n    _addReportRow: function _addReportRow(row, skipFormatting, reportColumns, rowAction) {\n      var columnValue = undefined;\n      var reportRows = this.get('reportRows');\n      var reportRow = [];\n      if (_ember['default'].isEmpty(reportColumns)) {\n        reportColumns = this.get('reportColumns');\n      }\n      for (var column in reportColumns) {\n        if (reportColumns[column].include) {\n          columnValue = _ember['default'].get(row, reportColumns[column].property);\n          if (_ember['default'].isEmpty(columnValue)) {\n            reportRow.push('');\n          } else if (reportColumns[column].format === '_numberFormat') {\n            if (skipFormatting) {\n              reportRow.push(columnValue);\n            } else {\n              reportRow.push(this._numberFormat(columnValue));\n            }\n          } else if (!skipFormatting && reportColumns[column].format) {\n            reportRow.push(this[reportColumns[column].format](columnValue));\n          } else {\n            reportRow.push(columnValue);\n          }\n        }\n      }\n      if (rowAction) {\n        reportRows.addObject({\n          rowAction: rowAction,\n          row: reportRow\n        });\n      } else {\n        reportRows.addObject(reportRow);\n      }\n    },\n\n    /**\n     * Finish up the report by setting headers, titles and export.\n     * @param reportColumns {Object} the columns to display on the report;\n     * optional, if not set, the property reportColumns on the controller\n     * will be used.\n     */\n    _finishReport: function _finishReport(reportColumns) {\n      this.set('showReportResults', true);\n      this.set('offset', 0);\n      this._setReportHeaders(reportColumns);\n      this._setReportTitle();\n      this._generateExport();\n      this.closeProgressModal();\n    },\n\n    _generateExport: function _generateExport() {\n      var csvRows = [];\n      var reportHeaders = this.get('reportHeaders');\n      var dataArray = [reportHeaders];\n      dataArray.addObjects(this.get('reportRows'));\n      dataArray.forEach(function (reportRow) {\n        var rowToAdd = undefined;\n        if (reportRow.row) {\n          rowToAdd = reportRow.row;\n        } else {\n          rowToAdd = reportRow;\n        }\n        rowToAdd = rowToAdd.map(function (column) {\n          if (!column) {\n            return '';\n          } else if (column.replace) {\n            return column.replace('\"', '\"\"');\n          } else {\n            return column;\n          }\n        });\n        csvRows.push('\"' + rowToAdd.join('\",\"') + '\"');\n      });\n      var csvString = csvRows.join('\\r\\n');\n      var uriContent = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csvString);\n      this.set('csvExport', uriContent);\n    },\n\n    _notifyReportError: function _notifyReportError(errorMessage) {\n      var i18n = this.get('i18n');\n      this.closeProgressModal();\n      this.displayAlert(i18n.t('alerts.reportError'), i18n.t('messages.reportError'));\n      throw new Error(errorMessage);\n    },\n\n    _setReportHeaders: function _setReportHeaders(reportColumns) {\n      var reportHeaders = [];\n      if (_ember['default'].isEmpty(reportColumns)) {\n        reportColumns = this.get('reportColumns');\n      }\n      for (var column in reportColumns) {\n        if (reportColumns[column].include) {\n          reportHeaders.push(reportColumns[column].label);\n        }\n      }\n      this.set('reportHeaders', reportHeaders);\n    },\n\n    _setReportTitle: function _setReportTitle() {\n      var endDate = this.get('endDate');\n      var formattedEndDate = '';\n      var formattedStartDate = '';\n      var reportType = this.get('reportType');\n      var reportTypes = this.get('reportTypes');\n      var startDate = this.get('startDate');\n      if (!_ember['default'].isEmpty(endDate)) {\n        formattedEndDate = (0, _moment['default'])(endDate).format('l');\n      }\n\n      var reportDesc = reportTypes.findBy('value', reportType);\n      if (_ember['default'].isEmpty(startDate)) {\n        this.set('reportTitle', this.get('i18n').t('inventory.reports.titleSingleDate', {\n          name: reportDesc.name,\n          date: formattedEndDate\n        }));\n      } else {\n        formattedStartDate = (0, _moment['default'])(startDate).format('l');\n        this.set('reportTitle', this.get('i18n').t('inventory.reports.titleDateRange', {\n          name: reportDesc.name,\n          startDate: formattedStartDate,\n          endDate: formattedEndDate\n        }));\n      }\n    },\n\n    actions: {\n      firstPage: function firstPage() {\n        this.set('offset', 0);\n      },\n\n      nextPage: function nextPage() {\n        var limit = this.get('limit');\n        this.incrementProperty('offset', limit);\n      },\n\n      previousPage: function previousPage() {\n        var limit = this.get('limit');\n        this.decrementProperty('offset', limit);\n      },\n\n      lastPage: function lastPage() {\n        var reportRowLength = this.get('reportRows.length');\n        var limit = this.get('limit');\n        var pages = parseInt(reportRowLength / limit);\n        this.set('offset', pages * limit);\n      }\n\n    },\n\n    currentReportRows: (function () {\n      var limit = this.get('limit');\n      var offset = this.get('offset');\n      var reportRows = this.get('reportRows');\n      return reportRows.slice(offset, offset + limit);\n    }).property('reportRows.[]', 'offset', 'limit'),\n\n    disablePreviousPage: (function () {\n      return this.get('offset') === 0;\n    }).property('offset'),\n\n    disableNextPage: (function () {\n      var limit = this.get('limit');\n      var length = this.get('reportRows.length');\n      var offset = this.get('offset');\n      return offset + limit >= length;\n    }).property('offset', 'limit', 'reportRows.length'),\n\n    showPagination: (function () {\n      var length = this.get('reportRows.length');\n      var limit = this.get('limit');\n      return length > limit;\n    }).property('reportRows.length')\n\n  });\n});","define('hospitalrun/tests/controllers/abstract-report-controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/abstract-report-controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/abstract-report-controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/application', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    filesystem: _ember['default'].inject.service(),\n    session: _ember['default'].inject.service(),\n    _setup: (function () {\n      var fileSystem = this.get('filesystem');\n      fileSystem.setup();\n    }).on('init')\n  });\n});","define('hospitalrun/tests/controllers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/index', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var alias = _ember['default'].computed.alias;\n  var inject = _ember['default'].inject;\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsUserSession['default'], {\n    config: inject.service(),\n    database: inject.service(),\n    standAlone: alias('config.standAlone'),\n    needsUserSetup: alias('config.needsUserSetup'),\n    // on init, look up the list of users and determine if there's a need for a needsUserSetup msg\n    init: function init() {\n      var _this = this;\n\n      if (get(this, 'standAlone')) {\n        get(this, 'database.usersDB').allDocs().then(function (results) {\n          if (results.total_rows <= 1) {\n            set(_this, 'config.needsUserSetup', true);\n          }\n        });\n      }\n    },\n    actions: {\n      newUser: function newUser() {\n        this.send('createNewUser');\n      }\n    }\n  });\n});","define('hospitalrun/tests/controllers/index.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/index.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/login', ['exports', 'ember', 'ember-ajax/errors'], function (exports, _ember, _emberAjaxErrors) {\n  'use strict';\n\n  var LoginController = _ember['default'].Controller.extend({\n    session: _ember['default'].inject.service(),\n    errorMessage: null,\n    identification: null,\n    password: null,\n\n    actions: {\n      authenticate: function authenticate() {\n        var _this = this;\n\n        var _getProperties = this.getProperties('identification', 'password');\n\n        var identification = _getProperties.identification;\n        var password = _getProperties.password;\n\n        this.get('session').authenticate('authenticator:custom', {\n          identification: identification,\n          password: password\n        })['catch'](function (err) {\n          if ((0, _emberAjaxErrors.isAbortError)(err) || (0, _emberAjaxErrors.isTimeoutError)(err)) {\n            _this.set('errorMessage', false);\n            _this.set('offlineError', true);\n          } else {\n            _this.set('errorMessage', true);\n            _this.set('offlineError', false);\n          }\n        });\n      }\n    }\n  });\n\n  exports['default'] = LoginController;\n});","define('hospitalrun/tests/controllers/login.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/login.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/navigation', ['exports', 'ember', 'hospitalrun/mixins/hospitalrun-version', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/progress-dialog', 'hospitalrun/mixins/user-session', 'hospitalrun/mixins/navigation'], function (exports, _ember, _hospitalrunMixinsHospitalrunVersion, _hospitalrunMixinsModalHelper, _hospitalrunMixinsProgressDialog, _hospitalrunMixinsUserSession, _hospitalrunMixinsNavigation) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsHospitalrunVersion['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsProgressDialog['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsNavigation['default'], {\n    ajax: _ember['default'].inject.service(),\n    application: _ember['default'].inject.controller(),\n    allowSearch: false,\n    config: _ember['default'].inject.service(),\n    currentSearchText: null,\n    currentRouteName: _ember['default'].computed.alias('application.currentRouteName'),\n    progressTitle: 'Searching',\n    searchRoute: null,\n    session: _ember['default'].inject.service(),\n    syncStatus: '',\n    currentOpenNav: null,\n    role: '',\n    selectedLanguage: null,\n\n    actions: {\n      about: function about() {\n        var _this = this;\n\n        var version = this.get('version');\n        this.get('ajax').request('/serverinfo').then(function (siteInfo) {\n          var message = 'Version: ' + version;\n          if (!_ember['default'].isEmpty(siteInfo)) {\n            message += ' Site Info: ' + siteInfo;\n          }\n          _this.displayAlert(_this.get('i18n').t('navigation.about'), message);\n        });\n      },\n\n      invalidateSession: function invalidateSession() {\n        var _this2 = this;\n\n        var session = this.get('session');\n        if (session.get('isAuthenticated')) {\n          session.invalidate()['catch'](function () {\n            var i18n = _this2.get('i18n');\n            var message = i18n.t('navigation.messages.logoutFailed');\n            var title = i18n.t('navigation.titles.logoutFailed');\n            _this2.displayAlert(title, message);\n          });\n        }\n      },\n\n      search: function search() {\n        if (this.allowSearch && this.searchRoute) {\n          var currentRouteName = this.get('currentRouteName');\n          var currentSearchText = this.get('currentSearchText');\n          var textToFind = this.get('searchText');\n          if (currentSearchText !== textToFind || currentRouteName.indexOf('.search') === -1) {\n            this.set('searchText', '');\n            this.set('progressMessage', 'Searching for ' + textToFind + '. Please wait...');\n            this.showProgressModal();\n            this.transitionToRoute(this.searchRoute + '/' + textToFind);\n          }\n        }\n      },\n\n      navAction: function navAction(nav) {\n        if (this.currentOpenNav && this.currentOpenNav.route !== nav.route) {\n          this.currentOpenNav.closeSubnav();\n        }\n        this.set('currentOpenNav', nav);\n        this.transitionToRoute(nav.route);\n        this.set('isShowingSettings', false);\n      },\n\n      toggleSettings: function toggleSettings() {\n        this.toggleProperty('isShowingSettings');\n        var session = this.get('session');\n        var userRole = session.get('data.authenticated.role');\n        this.set('role', userRole);\n      },\n\n      closeSettings: function closeSettings() {\n        this.set('isShowingSettings', false);\n      }\n\n    }\n  });\n});","define('hospitalrun/tests/controllers/navigation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/navigation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/navigation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/custom-form-add/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    updateAction: 'addForm',\n\n    actions: {\n      addForm: function addForm() {\n        var modelToAddTo = this.get('model.modelToAddTo');\n        var modelCustomForms = modelToAddTo.get('customForms');\n        var selectedForm = this.get('model.selectedForm');\n        if (isEmpty(modelCustomForms)) {\n          modelCustomForms = _ember['default'].Object.create();\n          modelToAddTo.set('customForms', modelCustomForms);\n        }\n        modelCustomForms.set(selectedForm, _ember['default'].Object.create());\n        modelToAddTo.notifyPropertyChange('customForms');\n        this.send('closeModal');\n      }\n    },\n\n    isUpdateDisabled: computed('model.selectedForm', function () {\n      return isEmpty(this.get('model.selectedForm'));\n    })\n\n  });\n});","define('hospitalrun/tests/custom-form-add/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - custom-form-add/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'custom-form-add/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/diagnosis/edit/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _ember, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    updateCapability: 'add_diagnosis',\n    editController: _ember['default'].computed.alias('model.editController'),\n    diagnosisList: _ember['default'].computed.alias('editController.diagnosisList'),\n    newDiagnosis: false,\n\n    lookupListsToUpdate: [{\n      name: 'diagnosisList',\n      property: 'model.diagnosis',\n      id: 'diagnosis_list'\n    }],\n\n    additionalButtons: computed('model.isNew', function () {\n      var i8n = this.get('i18n');\n      var isNew = this.get('model.isNew');\n      if (!isNew) {\n        return [{\n          'class': 'btn btn-default warning',\n          buttonAction: 'deleteDiagnosis',\n          buttonIcon: 'octicon octicon-x',\n          buttonText: i8n.t('buttons.delete')\n        }];\n      }\n    }),\n\n    canDeleteDiagnosis: computed(function () {\n      return this.currentUserCan('delete_diagnosis');\n    }),\n\n    title: computed('model.isNew', function () {\n      var i8n = this.get('i18n');\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return i8n.t('diagnosis.titles.addDiagnosis');\n      } else {\n        return i8n.t('diagnosis.titles.editDiagnosis');\n      }\n    }),\n\n    afterUpdate: function afterUpdate(diagnosis) {\n      var newDiagnosis = this.get('newDiagnosis');\n      if (newDiagnosis) {\n        this.get('editController').send('addDiagnosis', diagnosis);\n      } else {\n        this.send('closeModal');\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var diagnosis = this.get('model');\n      this.set('newDiagnosis', diagnosis.get('isNew'));\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      deleteDiagnosis: function deleteDiagnosis() {\n        var diagnosis = this.get('model');\n        this.get('editController').send('deleteDiagnosis', diagnosis);\n      }\n    }\n  });\n});","define('hospitalrun/tests/diagnosis/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - diagnosis/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'diagnosis/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/dialog/controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Controller.extend({\n    showUpdateButton: true,\n    isUpdateDisabled: false,\n\n    cancelAction: computed('model.cancelAction', function () {\n      var cancelAction = get(this, 'model.cancelAction');\n      if (isEmpty(cancelAction)) {\n        cancelAction = 'cancel';\n      }\n      return cancelAction;\n    }),\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      confirm: function confirm() {\n        var closeModalOnConfirm = this.getWithDefault('model.closeModalOnConfirm', true);\n        var confirmAction = this.getWithDefault('model.confirmAction', 'model.confirm');\n        this.send(confirmAction, get(this, 'model'));\n        if (closeModalOnConfirm) {\n          this.send('closeModal');\n        }\n      },\n\n      ok: function ok() {\n        var okAction = get(this, 'model.okAction');\n        var okContext = get(this, 'model.okContext');\n        if (isEmpty(okContext)) {\n          okContext = get(this, 'model');\n        }\n        if (!isEmpty(okAction)) {\n          this.send(okAction, okContext);\n        }\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/dialog/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - dialog/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dialog/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/electron', ['exports'], function (exports) {\n  /* jshint undef: false */\n  /* eslint-env node */\n\n  'use strict';\n\n  var _require = require('electron');\n\n  var app = _require.app;\n  var BrowserWindow = _require.BrowserWindow;\n\n  var mainWindow = null;\n\n  app.on('window-all-closed', function onWindowAllClosed() {\n    if (process.platform !== 'darwin') {\n      app.quit();\n    }\n  });\n\n  app.on('ready', function onReady() {\n    mainWindow = new BrowserWindow({\n      width: 800,\n      height: 600,\n      backgroundThrottling: false\n    });\n\n    delete mainWindow.module;\n\n    if (process.env.EMBER_ENV === 'test') {\n      mainWindow.loadURL('file://' + __dirname + '/index.html');\n    } else {\n      mainWindow.loadURL('file://' + __dirname + '/dist/index.html');\n    }\n\n    mainWindow.on('closed', function onClosed() {\n      mainWindow = null;\n    });\n  });\n});","define('hospitalrun/tests/electron.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - electron.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'electron.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/ember-electron/main', ['exports'], function (exports) {\n  /* jshint node:true */\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  var _require = require('electron');\n\n  var app = _require.app;\n  var BrowserWindow = _require.BrowserWindow;\n  var protocol = _require.protocol;\n\n  var _require2 = require('path');\n\n  var dirname = _require2.dirname;\n  var resolve = _require2.resolve;\n\n  var url = require('url');\n  var protocolServe = require('electron-protocol-serve');\n\n  var mainWindow = null;\n\n  // The testUrl is a file: url pointing to our index.html, with some query\n  // params we need to preserve for testem. So we need to register our ember\n  // protocol accordingly.\n\n  var _process$argv = _slicedToArray(process.argv, 3);\n\n  var indexUrl = _process$argv[2];\n\n  var _url$parse = url.parse(indexUrl);\n\n  var indexPath = _url$parse.pathname;\n  var indexQuery = _url$parse.search;\n\n  var emberAppLocation = 'serve://dist' + indexQuery;\n\n  protocol.registerStandardSchemes(['serve'], { secure: true });\n  // The index.html is in the tests/ directory, so we want all other assets to\n  // load from its parent directory\n  protocolServe({\n    cwd: resolve(dirname(indexPath), '..'),\n    app: app,\n    protocol: protocol,\n    indexPath: indexPath\n  });\n\n  app.on('window-all-closed', function onWindowAllClosed() {\n    if (process.platform !== 'darwin') {\n      app.quit();\n    }\n  });\n\n  app.on('ready', function onReady() {\n    mainWindow = new BrowserWindow({\n      width: 800,\n      height: 600,\n      backgroundThrottling: false\n    });\n\n    delete mainWindow.module;\n\n    mainWindow.loadURL(emberAppLocation);\n\n    mainWindow.on('closed', function onClosed() {\n      mainWindow = null;\n    });\n  });\n});","define('hospitalrun/tests/ember-electron/main.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - ember-electron/main.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-electron/main.js should pass ESLint.\\n');\n  });\n});","define(\"hospitalrun/tests/ember-sinon-qunit/test\", [\"exports\", \"ember-sinon-qunit/test-support/test\"], function (exports, _emberSinonQunitTestSupportTest) {\n  exports[\"default\"] = function () {\n    console.warn(\"Using deprecated import path for ember-sinon-qunit; use `import test from 'ember-sinon-qunit/test-support/test';` instead.\");\n    return _emberSinonQunitTestSupportTest[\"default\"].apply(this, arguments);\n  };\n});\n// backwards compatibility","define('hospitalrun/tests/finishgauth/route', ['exports', 'ember', 'hospitalrun/mixins/map-oauth-params', 'hospitalrun/mixins/setup-user-role'], function (exports, _ember, _hospitalrunMixinsMapOauthParams, _hospitalrunMixinsSetupUserRole) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsMapOauthParams['default'], _hospitalrunMixinsSetupUserRole['default'], {\n    config: _ember['default'].inject.service(),\n    database: _ember['default'].inject.service(),\n    session: _ember['default'].inject.service(),\n    model: function model(params) {\n      if (params.k && params.s1 && params.s2 && params.t) {\n        this.get('session').authenticate('authenticator:custom', {\n          google_auth: true,\n          params: params\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/finishgauth/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - finishgauth/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'finishgauth/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/authenticate-user', ['exports', 'ember', 'hospitalrun/tests/helpers/ember-simple-auth'], function (exports, _ember, _hospitalrunTestsHelpersEmberSimpleAuth) {\n  'use strict';\n\n  var merge = _ember['default'].merge;\n\n  _ember['default'].Test.registerHelper('authenticateUser', function (app) {\n    var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var expiresAt = new Date().getTime() + 600000;\n    (0, _hospitalrunTestsHelpersEmberSimpleAuth.authenticateSession)(app, merge({\n      name: 'hradmin',\n      roles: ['System Administrator', 'admin', 'user'],\n      expires_at: expiresAt,\n      role: 'System Administrator',\n      prefix: 'p1'\n    }, attrs));\n  });\n\n  _ember['default'].Test.registerHelper('invalidateSession', function (app) {\n    (0, _hospitalrunTestsHelpersEmberSimpleAuth.invalidateSession)(app);\n  });\n});","define('hospitalrun/tests/helpers/authenticate-user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/authenticate-user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/authenticate-user.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/date-format', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (params, hash) {\n    if (!_ember['default'].isEmpty(params[0])) {\n      var dateFormat = 'l';\n\n      var _params = _slicedToArray(params, 1);\n\n      var date = _params[0];\n\n      if (hash && hash.format) {\n        dateFormat = hash.format;\n      }\n      if (date && typeof date.get == 'function') {\n        date = date.get('content');\n      }\n      return (0, _moment['default'])(date).format(dateFormat);\n    }\n  });\n});","define('hospitalrun/tests/helpers/date-format.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/date-format.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/date-format.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('hospitalrun/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('hospitalrun/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _ember, _emberKeyboard, _emberKeyboardFixturesModifiersArray, _emberKeyboardUtilsGetCmdKey) {\n\n  var keyEvent = function keyEvent(app, attributes, type, element) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (_emberKeyboardFixturesModifiersArray['default'].indexOf(attribute) > -1) {\n        attribute = attribute === 'cmd' ? (0, _emberKeyboardUtilsGetCmdKey['default'])() : attribute;\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(element || document, type, event);\n  };\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('keyDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keydown', element);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keyup', element);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyPress', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keypress', element);\n    });\n  };\n});","define('hospitalrun/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});\n/* global wait */","define('hospitalrun/tests/helpers/html-line-break', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1);\n\n    var text = _ref2[0];\n\n    if (text !== null && typeof text !== 'undefined') {\n      return _ember['default'].String.htmlSafe(text.replace(/\\n/g, '<br>'));\n    } else {\n      return null;\n    }\n  });\n});","define('hospitalrun/tests/helpers/html-line-break.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/html-line-break.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/html-line-break.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/is-equal-array', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var lhs = _ref2[0];\n    var rhs = _ref2[1];\n\n    if (!_ember['default'].isArray(lhs) || !_ember['default'].isArray(rhs) || lhs.get('length') !== rhs.get('length')) {\n      return false;\n    }\n    return lhs.every(function (item) {\n      return rhs.includes(item);\n    });\n  });\n});","define('hospitalrun/tests/helpers/is-equal-array.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/is-equal-array.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-equal-array.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/is-equal', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var lhs = _ref2[0];\n    var rhs = _ref2[1];\n\n    return lhs === rhs;\n  });\n});","define('hospitalrun/tests/helpers/is-equal.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/is-equal.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-equal.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/is-not', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1);\n\n    var value = _ref2[0];\n\n    return !value;\n  });\n});","define('hospitalrun/tests/helpers/is-not.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/is-not.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-not.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'hospitalrun/tests/helpers/start-app', 'hospitalrun/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _hospitalrunTestsHelpersStartApp, _hospitalrunTestsHelpersDestroyApp) {\n  'use strict';\n\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _hospitalrunTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('hospitalrun/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/number-format', ['exports', 'ember', 'hospitalrun/mixins/number-format'], function (exports, _ember, _hospitalrunMixinsNumberFormat) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  var NumberHandler = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']);\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1);\n\n    var number = _ref2[0];\n\n    var numberHandler = new NumberHandler();\n    return numberHandler._numberFormat(number);\n  });\n});","define('hospitalrun/tests/helpers/number-format.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/number-format.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/number-format.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/read-path', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var object = _ref2[0];\n    var path = _ref2[1];\n\n    if (_ember['default'].isEmpty(path)) {\n      return object;\n    } else {\n      return _ember['default'].get(object, path);\n    }\n  });\n});","define('hospitalrun/tests/helpers/read-path.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/read-path.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/read-path.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/resolver', ['exports', 'hospitalrun/resolver', 'hospitalrun/config/environment'], function (exports, _hospitalrunResolver, _hospitalrunConfigEnvironment) {\n  'use strict';\n\n  var resolver = _hospitalrunResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _hospitalrunConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _hospitalrunConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('hospitalrun/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/run-with-pouch-dump', ['exports', 'hospitalrun/utils/pouch-views', 'ember', 'pouchdb', 'npm:pouchdb-adapter-memory', 'npm:pouchdb-users', 'hospitalrun/services/database', 'hospitalrun/services/config', 'npm:worker-pouch/client'], function (exports, _hospitalrunUtilsPouchViews, _ember, _pouchdb, _npmPouchdbAdapterMemory, _npmPouchdbUsers, _hospitalrunServicesDatabase, _hospitalrunServicesConfig, _npmWorkerPouchClient) {\n  /* jshint ignore:start */\n  'use strict';\n\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n\n  function cleanupDatabases(maindb, dbs) {\n    return wait().then(function () {\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        if (maindb.changesListener) {\n          maindb.changesListener.cancel();\n          maindb.changesListener.on('complete', function () {\n            destroyDatabases(dbs).then(resolve, reject);\n          });\n        } else {\n          destroyDatabases(dbs).then(resolve, reject);\n        }\n      });\n    });\n  }\n\n  function destroyDatabases(dbs) {\n    var destroyQueue = [];\n    dbs.forEach(function (db) {\n      destroyQueue.push(db.info().then(function () {\n        return db.destroy();\n      }));\n    });\n    return _ember['default'].RSVP.all(destroyQueue);\n  }\n\n  function runWithPouchDumpAsyncHelper(app, dumpName, functionToRun) {\n    _pouchdb['default'].plugin(_npmPouchdbAdapterMemory['default']);\n    _pouchdb['default'].plugin(_npmPouchdbUsers['default']);\n\n    var db = new _pouchdb['default']('hospitalrun-test-database', {\n      adapter: 'memory'\n    });\n    var configDB = new _pouchdb['default']('hospitalrun-test-config-database', {\n      adapter: 'memory'\n    });\n    var usersDB = undefined;\n    if (window.ELECTRON) {\n      usersDB = new _pouchdb['default']('_users', {\n        adapter: 'memory'\n      });\n    }\n    var dump = require('hospitalrun/tests/fixtures/' + dumpName)['default'];\n    var promise = db.load(dump);\n\n    var InMemoryDatabaseService = _hospitalrunServicesDatabase['default'].extend({\n\n      createDB: function createDB(configs) {\n        var standAlone = get(this, 'standAlone');\n        if (standAlone || !configs.config_external_search) {\n          set(this, 'usePouchFind', true);\n        }\n        if (standAlone) {\n          return promise.then(function () {\n            return db;\n          });\n        }\n        if (!window.ELECTRON && navigator.serviceWorker) {\n          // Use pouch-worker to run the DB in the service worker\n          return navigator.serviceWorker.ready.then(function () {\n            if (navigator.serviceWorker.controller && navigator.serviceWorker.controller.postMessage) {\n              _pouchdb['default'].adapter('worker', _npmWorkerPouchClient['default']);\n              db = new _pouchdb['default']('hospitalrun-test-database', {\n                adapter: 'worker',\n                worker: function worker() {\n                  return navigator.serviceWorker;\n                }\n              });\n              return db.load(dump).then(function () {\n                return db;\n              });\n            } else {\n              return promise.then(function () {\n                return db;\n              });\n            }\n          });\n        } else {\n          return promise.then(function () {\n            return db;\n          });\n        }\n      },\n      createUsersDB: function createUsersDB() {\n        var _this = this;\n\n        return usersDB.installUsersBehavior().then(function () {\n          set(_this, 'usersDB', usersDB);\n          return usersDB.put({\n            _id: 'org.couchdb.user:hradmin',\n            displayName: 'HospitalRun Administrator',\n            email: 'hradmin@hospitalrun.io',\n            type: 'user',\n            name: 'hradmin',\n            password: 'test',\n            roles: ['System Administrator', 'admin', 'user'],\n            userPrefix: 'p1'\n          });\n        })['catch'](function (err) {\n          console.log('Error creating users db!!!', err);\n        });\n      }\n    });\n\n    var InMemoryConfigService = _hospitalrunServicesConfig['default'].extend({\n      createDB: function createDB() {\n        return configDB;\n      },\n      replicateConfigDB: function replicateConfigDB() {\n        return configDB.get('config_disable_offline_sync').then(function (doc) {\n          if (doc.value !== true) {\n            doc.value = true;\n            return configDB.put(doc);\n          }\n        })['catch'](function () {\n          return configDB.put({\n            _id: 'config_disable_offline_sync',\n            value: true\n          });\n        });\n      }\n    });\n\n    app.__deprecatedInstance__.register('service:config', InMemoryConfigService);\n    app.__deprecatedInstance__.register('service:database', InMemoryDatabaseService);\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      promise.then(function () {\n        db.setMaxListeners(35);\n        (0, _hospitalrunUtilsPouchViews['default'])(db, true, dumpName).then(function () {\n          functionToRun();\n          andThen(function () {\n            var databasesToClean = [configDB, db];\n            if (window.ELECTRON) {\n              databasesToClean.push(usersDB);\n            }\n            cleanupDatabases(db, databasesToClean).then(function () {\n              configDB = null;\n              db = null;\n              if (window.ELECTRON) {\n                usersDB = null;\n              }\n              resolve();\n            }, function (err) {\n              console.log('error cleaning up dbs:', err);\n            });\n          });\n        });\n      }, function (err) {\n        console.log('error loading db', JSON.stringify(err, null, 2));\n      });\n    });\n  }\n\n  _ember['default'].Test.registerAsyncHelper('runWithPouchDump', runWithPouchDumpAsyncHelper);\n  /* jshint ignore:end */\n});","define('hospitalrun/tests/helpers/run-with-pouch-dump.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/run-with-pouch-dump.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/run-with-pouch-dump.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/select-date', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {\n  // Derived from https://raw.githubusercontent.com/edgycircle/ember-pikaday/master/addon/helpers/pikaday.js\n  'use strict';\n\n  function triggerNativeEvent(element, eventName) {\n    if (document.createEvent) {\n      var _event = document.createEvent('Events');\n      _event.initEvent(eventName, true, false);\n      element.dispatchEvent(_event);\n    } else {\n      element.fireEvent('on' + eventName);\n    }\n  }\n\n  _ember['default'].Test.registerAsyncHelper('selectDate', function (app, selector, date) {\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      click(selector);\n      waitToAppear('.pika-single:not(.is-hidden)').then(function () {\n        fillIn(selector, (0, _moment['default'])(date).format('l'));\n        andThen(function () {\n          triggerNativeEvent(app.$(selector)[0], 'change');\n          resolve();\n        });\n      });\n    });\n  });\n});","define('hospitalrun/tests/helpers/select-date.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/select-date.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/select-date.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/select', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  _ember['default'].Test.registerAsyncHelper('select', function (app, selector) {\n    for (var _len = arguments.length, texts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      texts[_key - 2] = arguments[_key];\n    }\n\n    var $options = app.testHelpers.findWithAssert(selector + ' option');\n\n    $options.each(function () {\n      var _this = this;\n\n      var $option = _ember['default'].$(this);\n\n      _ember['default'].run(function () {\n        _this.selected = texts.some(function (text) {\n          return $option.is(':contains(\\'' + text + '\\')');\n        });\n        if (_this.selected) {\n          $option.trigger('change');\n        }\n      });\n    });\n\n    return app.testHelpers.wait();\n  });\n});","define('hospitalrun/tests/helpers/select.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/select.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/select.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/start-app', ['exports', 'ember', 'hospitalrun/app', 'hospitalrun/config/environment', 'hospitalrun/tests/helpers/run-with-pouch-dump', 'hospitalrun/tests/helpers/authenticate-user', 'hospitalrun/tests/helpers/select', 'hospitalrun/tests/helpers/select-date', 'hospitalrun/tests/helpers/typeahead-fillin', 'hospitalrun/tests/helpers/wait-to-appear'], function (exports, _ember, _hospitalrunApp, _hospitalrunConfigEnvironment, _hospitalrunTestsHelpersRunWithPouchDump, _hospitalrunTestsHelpersAuthenticateUser, _hospitalrunTestsHelpersSelect, _hospitalrunTestsHelpersSelectDate, _hospitalrunTestsHelpersTypeaheadFillin, _hospitalrunTestsHelpersWaitToAppear) {\n  'use strict';\n\n  exports['default'] = startApp;\n\n  function createTranslationWrapper(original, context) {\n    function t(str, data) {\n      var result = original.call(context, str, data);\n      if (result.indexOf && result.indexOf('Missing translation') > -1) {\n        throw new Error(result);\n      }\n\n      return result.string || result;\n    }\n\n    return t;\n  }\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _hospitalrunConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _hospitalrunApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    var translationService = application.__container__.lookup('service:i18n');\n    application.__container__.lookup('service:i18n').t = createTranslationWrapper(translationService.t, translationService);\n\n    return application;\n  }\n});","define('hospitalrun/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/typeahead-fillin', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  _ember['default'].Test.registerAsyncHelper('typeAheadFillIn', function (app, selector, value) {\n    var typeAheadSelector = selector + ' .tt-input';\n    fillIn(typeAheadSelector, value);\n    triggerEvent(typeAheadSelector, 'input');\n    triggerEvent(typeAheadSelector, 'blur');\n    return app.testHelpers.wait();\n  });\n});","define('hospitalrun/tests/helpers/typeahead-fillin.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/typeahead-fillin.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/typeahead-fillin.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n  var run = _ember['default'].run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('hospitalrun/tests/helpers/wait-to-appear', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  function isVisible(selector) {\n    return $(selector).length > 0;\n  }\n\n  function checkVisibility(selector, interval, resolve, visibility) {\n    if (isVisible(selector) === visibility) {\n      resolve($(selector));\n    } else {\n      _ember['default'].run.later(null, function () {\n        checkVisibility(selector, interval, resolve, visibility);\n      }, interval);\n    }\n  }\n\n  function waitToAppear(app, selector) {\n    var interval = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      checkVisibility(selector, interval, resolve, true);\n    });\n  }\n\n  function waitToDisappear(app, selector) {\n    var interval = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      checkVisibility(selector, interval, resolve, false);\n    });\n  }\n  _ember['default'].Test.registerAsyncHelper('waitToAppear', waitToAppear);\n  _ember['default'].Test.registerAsyncHelper('waitToDisappear', waitToDisappear);\n});","define('hospitalrun/tests/helpers/wait-to-appear.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/wait-to-appear.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/wait-to-appear.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/address/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/address/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/address/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/custom-forms/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/custom-forms/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/custom-forms/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/custom-forms/field-edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/custom-forms/field-edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/custom-forms/field-edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/custom-forms/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/custom-forms/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/custom-forms/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/loaddb/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/loaddb/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/loaddb/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/lookup/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/lookup/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/lookup/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/lookup/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/lookup/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/lookup/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/print-header/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/print-header/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/print-header/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/query/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/query/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/query/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/roles/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/roles/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/roles/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/textreplace/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/textreplace/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/textreplace/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/visit-forms/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/visit-forms/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/visit-forms/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/workflow/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/workflow/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/workflow/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/allergy/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/allergy/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/allergy/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/calendar/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/calendar/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/calendar/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/theater/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/theater/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/theater/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/today/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/today/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/today/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/custom-form-add/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/custom-form-add/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/custom-form-add/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/diagnosis/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/diagnosis/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/diagnosis/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/dialog/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/dialog/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/dialog/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/charge/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/charge/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/charge/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/completed/completed-list-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/completed/completed-list-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/completed/completed-list-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/completed/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/completed/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/completed/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/index/imaging-edit-button/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/index/imaging-edit-button/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/index/imaging-edit-button/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/index/requested-list-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/index/requested-list-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/index/requested-list-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inc-category/add-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inc-category/add-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inc-category/add-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inc-category/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inc-category/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inc-category/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inc-category/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inc-category/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inc-category/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inc-category/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inc-category/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inc-category/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/incident/attachment/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/incident/attachment/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/incident/attachment/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/incident/completed/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/incident/completed/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/incident/completed/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/incident/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/incident/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/incident/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/incident/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/incident/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/incident/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/incident/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/incident/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/incident/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/incident/note/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/incident/note/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/incident/note/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/incident/note/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/incident/note/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/incident/note/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/incident/reports/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/incident/reports/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/incident/reports/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/adjust/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/adjust/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/adjust/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/barcode/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/barcode/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/barcode/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/batch/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/batch/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/batch/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/listing/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/listing/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/listing/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/purchase/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/purchase/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/purchase/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/purchase/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/purchase/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/purchase/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/quick-add/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/quick-add/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/quick-add/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/rank-select/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/rank-select/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/rank-select/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/reports/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/reports/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/reports/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/request/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/request/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/request/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/transfer/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/transfer/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/transfer/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/add-line-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/add-line-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/add-line-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/payment/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/payment/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/payment/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/review/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/review/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/review/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/charge/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/charge/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/charge/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/completed/labs-completed-list-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/completed/labs-completed-list-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/completed/labs-completed-list-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/completed/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/completed/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/completed/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/index/labs-edit-button/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/index/labs-edit-button/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/index/labs-edit-button/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/index/labs-list-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/index/labs-list-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/index/labs-list-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/completed/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/completed/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/completed/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/return/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/return/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/return/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/add-contact/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/add-contact/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/add-contact/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/admitted/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/admitted/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/admitted/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/imaging/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/imaging/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/imaging/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/labs/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/labs/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/labs/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/medication/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/medication/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/medication/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/notes/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/notes/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/notes/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/operation-report/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/operation-report/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/operation-report/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/operative-plan/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/operative-plan/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/operative-plan/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/outpatient/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/outpatient/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/outpatient/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/photo/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/photo/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/photo/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/quick-add/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/quick-add/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/quick-add/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/reports/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/reports/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/reports/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/socialwork/expense/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/socialwork/expense/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/socialwork/expense/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/socialwork/family-info/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/socialwork/family-info/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/socialwork/family-info/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/imaging/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/imaging/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/imaging/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/lab/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/lab/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/lab/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/override/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/override/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/override/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/procedure/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/procedure/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/procedure/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/profiles/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/profiles/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/profiles/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/profiles/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/profiles/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/profiles/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/ward/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/ward/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/ward/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/print/invoice/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/print/invoice/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/print/invoice/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/procedures/charge/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/procedures/charge/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/procedures/charge/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/procedures/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/procedures/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/procedures/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/procedures/medication/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/procedures/medication/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/procedures/medication/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/application.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/application.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/application.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/charges-by-type.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/charges-by-type.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/charges-by-type.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/array-display.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/array-display.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/array-display.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/calendar-control.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/calendar-control.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/calendar-control.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/charge-quantity.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/charge-quantity.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/charge-quantity.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/charges-by-type-tab.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/charges-by-type-tab.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/charges-by-type-tab.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/checkbox-or-typeahead.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/checkbox-or-typeahead.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/checkbox-or-typeahead.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/cross-icon-svg.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/cross-icon-svg.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/cross-icon-svg.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/custom-form-manager.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/custom-form-manager.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/custom-form-manager.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/custom-form.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/custom-form.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/custom-form.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/date-filter.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/date-filter.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/date-filter.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/date-time-picker.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/date-time-picker.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/date-time-picker.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/edit-panel.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/edit-panel.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/edit-panel.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/expand-text.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/expand-text.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/expand-text.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/ext-radio.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/ext-radio.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/ext-radio.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/inventory-location-picker.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/inventory-location-picker.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/inventory-location-picker.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/item-listing.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/item-listing.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/item-listing.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/language-select.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/language-select.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/language-select.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/location-select.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/location-select.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/location-select.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/logo-dark-svg.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/logo-dark-svg.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/logo-dark-svg.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/logo-hr-main.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/logo-hr-main.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/logo-hr-main.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/logo-hr.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/logo-hr.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/logo-hr.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/logo-svg.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/logo-svg.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/logo-svg.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/medication-allergy.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/medication-allergy.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/medication-allergy.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/menu-svg.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/menu-svg.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/menu-svg.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/modal-dialog.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/modal-dialog.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/modal-dialog.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/nav-menu.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/nav-menu.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/nav-menu.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/nav-paging.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/nav-paging.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/nav-paging.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/operative-procedures.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/operative-procedures.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/operative-procedures.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/patient-diagnosis.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/patient-diagnosis.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/patient-diagnosis.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/patient-orders.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/patient-orders.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/patient-orders.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/patient-summary.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/patient-summary.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/patient-summary.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/photo-display.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/photo-display.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/photo-display.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/price-list.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/price-list.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/price-list.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/quantity-calc.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/quantity-calc.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/quantity-calc.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/quantity-conv.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/quantity-conv.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/quantity-conv.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/render-typeahead.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/render-typeahead.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/render-typeahead.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/role-select.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/role-select.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/role-select.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/search-listing.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/search-listing.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/search-listing.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/select-or-typeahead.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/select-or-typeahead.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/select-or-typeahead.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/sortable-column.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/sortable-column.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/sortable-column.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/static-text.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/static-text.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/static-text.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/take-photo.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/take-photo.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/take-photo.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/typeahead-filter.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/typeahead-filter.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/typeahead-filter.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/upcoming-appointments.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/upcoming-appointments.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/upcoming-appointments.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/empty.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/empty.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/empty.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/error.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/error.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/error.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/index.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/index.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/index.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/inv-purchase.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/inv-purchase.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/inv-purchase.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/inventory-basic.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/inventory-basic.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/inventory-basic.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/item-charges.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/item-charges.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/item-charges.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/loading.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/loading.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/loading.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/login.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/login.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/login.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/navigation.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/navigation.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/navigation.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/report-rows.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/report-rows.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/report-rows.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/section.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/section.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/section.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/sidebar_nav/header.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/sidebar_nav/header.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/sidebar_nav/header.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/sidebar_nav/message.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/sidebar_nav/message.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/sidebar_nav/message.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/sidebar_nav/primary_nav.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/sidebar_nav/primary_nav.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/sidebar_nav/primary_nav.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/sidebar_nav/search.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/sidebar_nav/search.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/sidebar_nav/search.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/users/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/users/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/users/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/users/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/users/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/users/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/users/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/users/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/users/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/charge/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/charge/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/charge/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/procedures/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/procedures/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/procedures/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/reports/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/reports/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/reports/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/vitals/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/vitals/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/vitals/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/vitals/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/vitals/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/vitals/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({\n    cancelAction: 'closeModal',\n    newPricingItem: false,\n    requestingController: _ember['default'].inject.controllers('imaging/edit'),\n    pricingList: _ember['default'].computed.alias('requestingController.chargesPricingList')\n  });\n});","define('hospitalrun/tests/imaging/charge/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/charge/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/charge/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/completed/completed-list-item/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'tr'\n  });\n});","define('hospitalrun/tests/imaging/completed/completed-list-item/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/completed/completed-list-item/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/completed/completed-list-item/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    startKey: [],\n    showActions: false\n  });\n});","define('hospitalrun/tests/imaging/completed/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/completed/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/completed/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/completed/route', ['exports', 'ember-i18n', 'hospitalrun/imaging/index/route'], function (exports, _emberI18n, _hospitalrunImagingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunImagingIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('imaging.titles.completedImaging'),\n    searchStatus: 'Completed'\n  });\n});","define('hospitalrun/tests/imaging/completed/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/completed/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/completed/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {\n    title: 'Delete Request',\n\n    actions: {\n      'delete': function _delete() {\n        this.deleteChildFromVisit('imaging');\n      }\n    }\n  });\n});","define('hospitalrun/tests/imaging/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    imagingController: _ember['default'].inject.controller('imaging'),\n\n    chargePricingCategory: 'Imaging',\n    chargeRoute: 'imaging.charge',\n    selectedImagingType: null,\n\n    canComplete: (function () {\n      var isNew = this.get('model.isNew');\n      var imagingTypeName = this.get('model.imagingTypeName');\n      var selectedImagingType = this.get('selectedImagingType');\n      if (isNew && (_ember['default'].isEmpty(imagingTypeName) || _ember['default'].isArray(selectedImagingType) && selectedImagingType.length > 1)) {\n        return false;\n      } else {\n        return this.currentUserCan('complete_imaging');\n      }\n    }).property('selectedImagingType.[]', 'model.imagingTypeName'),\n\n    actions: {\n      completeImaging: function completeImaging() {\n        this.set('model.status', 'Completed');\n        this.set('model.completedBy', this.get('model').getUserName());\n        this.get('model').validate().then((function () {\n          if (this.get('model.isValid')) {\n            this.set('model.imagingDate', new Date());\n            this.send('update');\n          }\n        }).bind(this))['catch'](_ember['default'].K);\n      },\n\n      /**\n       * Save the imaging request(s), creating multiples when user selects multiple imaging tests.\n       */\n      update: function update() {\n        var _this = this;\n\n        if (this.get('model.isNew')) {\n          (function () {\n            var newImaging = _this.get('model');\n            var selectedImagingType = _this.get('selectedImagingType');\n            if (_ember['default'].isEmpty(_this.get('model.status'))) {\n              _this.set('model.status', 'Requested');\n            }\n            _this.set('model.requestedBy', newImaging.getUserName());\n            _this.set('model.requestedDate', new Date());\n            if (_ember['default'].isEmpty(selectedImagingType)) {\n              _this.saveNewPricing(_this.get('model.imagingTypeName'), 'Imaging', 'model.imagingType').then((function () {\n                this.addChildToVisit(newImaging, 'imaging', 'Imaging').then((function () {\n                  this.saveModel();\n                }).bind(this));\n              }).bind(_this));\n            } else {\n              _this.getSelectedPricing('selectedImagingType').then((function (pricingRecords) {\n                if (_ember['default'].isArray(pricingRecords)) {\n                  this.createMultipleRequests(pricingRecords, 'imagingType', 'imaging', 'Imaging');\n                } else {\n                  this.set('model.imagingType', pricingRecords);\n                  this.addChildToVisit(newImaging, 'imaging', 'Imaging').then((function () {\n                    this.saveModel();\n                  }).bind(this));\n                }\n              }).bind(_this));\n            }\n          })();\n        } else {\n          this.saveModel();\n        }\n      }\n    },\n\n    additionalButtons: (function () {\n      var i18n = this.get('i18n');\n      var canComplete = this.get('canComplete');\n      var isValid = this.get('model.isValid');\n      if (isValid && canComplete) {\n        return [{\n          buttonAction: 'completeImaging',\n          buttonIcon: 'glyphicon glyphicon-ok',\n          'class': 'btn btn-primary on-white',\n          buttonText: i18n.t('buttons.complete')\n        }];\n      }\n    }).property('canComplete', 'model.isValid'),\n\n    lookupListsToUpdate: [{\n      name: 'radiologistList',\n      property: 'model.radiologist',\n      id: 'radiologists'\n    }],\n\n    pricingTypeForObjectType: 'Imaging Procedure',\n    pricingTypes: _ember['default'].computed.alias('imagingController.imagingPricingTypes'),\n\n    pricingList: null, // This gets filled in by the route\n\n    radiologistList: _ember['default'].computed.alias('imagingController.radiologistList'),\n\n    updateCapability: 'add_imaging',\n\n    afterUpdate: function afterUpdate(saveResponse, multipleRecords) {\n      var i18n = this.get('i18n');\n      this.updateLookupLists();\n      var afterDialogAction = undefined,\n          alertTitle = undefined,\n          alertMessage = undefined;\n      if (this.get('model.status') === 'Completed') {\n        alertTitle = i18n.t('imaging.alerts.completedTitle');\n        alertMessage = i18n.t('imaging.alerts.completedMessage');\n      } else {\n        alertTitle = i18n.t('imaging.alerts.savedTitle');\n        alertMessage = i18n.t('imaging.alerts.savedMessage');\n      }\n      if (multipleRecords) {\n        afterDialogAction = this.get('cancelAction');\n      }\n      this.saveVisitIfNeeded(alertTitle, alertMessage, afterDialogAction);\n      this.set('model.selectPatient', false);\n    }\n\n  });\n});","define('hospitalrun/tests/imaging/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/edit/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/add-to-patient-route', 'hospitalrun/mixins/charge-route', 'ember', 'moment', 'hospitalrun/mixins/patient-list-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsAddToPatientRoute, _hospitalrunMixinsChargeRoute, _ember, _moment, _hospitalrunMixinsPatientListRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsAddToPatientRoute['default'], _hospitalrunMixinsChargeRoute['default'], _hospitalrunMixinsPatientListRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('imaging.titles.editTitle'),\n    modelName: 'imaging',\n    newTitle: (0, _emberI18n.translationMacro)('imaging.titles.editTitle'),\n    pricingCategory: 'Imaging',\n\n    actions: {\n      returnToAllItems: function returnToAllItems() {\n        this.controller.send('returnToAllItems');\n      }\n    },\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        selectPatient: true,\n        requestDate: (0, _moment['default'])().startOf('day').toDate()\n      });\n    }\n  });\n});","define('hospitalrun/tests/imaging/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    addPermission: 'add_imaging'\n  });\n});","define('hospitalrun/tests/imaging/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/index/imaging-edit-button/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'button',\n    classNames: ['btn', 'btn-default', 'neutral']\n  });\n});","define('hospitalrun/tests/imaging/index/imaging-edit-button/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/index/imaging-edit-button/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/index/imaging-edit-button/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/index/requested-list-item/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'tr',\n    classNames: ['clickable'],\n\n    click: function click() {\n      this.sendAction('action', this.imaging);\n    }\n  });\n});","define('hospitalrun/tests/imaging/index/requested-list-item/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/index/requested-list-item/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/index/requested-list-item/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/index/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, _emberI18n, _hospitalrunRoutesAbstractIndexRoute, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'imaging',\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('imaging.pageTitle');\n    }),\n    searchStatus: 'Requested',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var imagingDateAsTime = item.get('imagingDateAsTime');\n      var id = this._getPouchIdFromItem(item);\n      var requestedDateAsTime = item.get('requestedDateAsTime');\n      var searchStatus = this.get('searchStatus');\n      return [searchStatus, requestedDateAsTime, imagingDateAsTime, id];\n    },\n    _modelQueryParams: function _modelQueryParams() {\n      var maxId = this._getMaxPouchId();\n      var maxValue = this.get('maxValue');\n      var minId = this._getMinPouchId();\n      var searchStatus = this.get('searchStatus');\n      return {\n        options: {\n          startkey: [searchStatus, null, null, minId],\n          endkey: [searchStatus, maxValue, maxValue, maxId]\n        },\n        mapReduce: 'imaging_by_status'\n      };\n    }\n  });\n});","define('hospitalrun/tests/imaging/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-module-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractModuleRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_imaging',\n    additionalModels: [{\n      name: 'imagingPricingTypes',\n      findArgs: ['lookup', 'imaging_pricing_types']\n    }, {\n      name: 'radiologistList',\n      findArgs: ['lookup', 'radiologists']\n    }],\n    allowSearch: false,\n    moduleName: 'imaging',\n    newButtonText: (0, _emberI18n.translationMacro)('imaging.buttons.newButton'),\n    sectionTitle: (0, _emberI18n.translationMacro)('imaging.sectionTitle')\n  });\n});","define('hospitalrun/tests/imaging/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inc-category/add-item/controller', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {\n  'use strict';\n\n  var Controller = _ember['default'].Controller;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  exports['default'] = Controller.extend({\n    showUpdateButton: true,\n    title: (0, _emberI18n.translationMacro)('incident.titles.addCategoryItem'),\n    updateButtonAction: 'add',\n    updateButtonText: 'Add',\n\n    incidentCategoryEdit: inject.controller('inc-category/edit'),\n    editController: alias('incidentCategoryEdit'),\n\n    actions: {\n      add: function add() {\n        var newItem = get(this, 'model');\n        get(this, 'editController').send('addItem', newItem);\n      },\n\n      cancel: function cancel() {\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/inc-category/add-item/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inc-category/add-item/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inc-category/add-item/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inc-category/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: (0, _emberI18n.translationMacro)('incident.titles.deleteIncidentCategory')\n  });\n});","define('hospitalrun/tests/inc-category/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inc-category/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inc-category/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inc-category/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    updateCapability: 'add_incident_category',\n\n    afterUpdate: function afterUpdate(record) {\n      var i18n = get(this, 'i18n');\n      var message = i18n.t('incident.messages.incidentCategorySaved', { name: get(record, 'incidentCategoryName') });\n      var title = i18n.t('incident.titles.incidentCategorySaved');\n      this.displayAlert(title, message);\n    },\n\n    actions: {\n      addItem: function addItem(newItem) {\n        var categoryItems = this.getWithDefault('model.incidentCategoryItems', []);\n        var model = get(this, 'model');\n        categoryItems.addObject(newItem);\n        model.set('incidentCategoryItems', categoryItems);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      deleteItem: function deleteItem(model) {\n        var item = model.get('itemToDelete');\n        var categoryItems = get(this, 'model.incidentCategoryItems');\n        categoryItems.removeObject(item);\n        this.send('update', true);\n      },\n\n      showAddItem: function showAddItem() {\n        this.send('openModal', 'inc-category.add-item', _ember['default'].Object.create());\n      },\n\n      showDeleteItem: function showDeleteItem(item) {\n        var i18n = get(this, 'i18n');\n        var modelName = i18n.t('models.item.names.singular');\n        var message = i18n.t('messages.delete_singular', { name: modelName });\n        var title = i18n.t('incident.titles.deleteItem');\n        this.displayConfirm(title, message, 'deleteItem', _ember['default'].Object.create({\n          itemToDelete: item\n        }));\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/inc-category/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inc-category/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inc-category/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inc-category/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('incident.titles.editIncidentCategory'),\n    modelName: 'inc-category',\n    newTitle: (0, _emberI18n.translationMacro)('incident.titles.newIncidentCategory'),\n\n    actions: {\n      deleteItem: function deleteItem(model) {\n        this.controller.send('deleteItem', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inc-category/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inc-category/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inc-category/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inc-category/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'ember'], function (exports, _hospitalrunControllersAbstractPagedController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    startKey: [],\n\n    canDeleteIncidentCategory: _ember['default'].computed(function () {\n      return this.currentUserCan('delete_incident_category');\n    }),\n\n    actions: {\n      showDeleteIncidentCategory: function showDeleteIncidentCategory(category) {\n        this.send('openModal', 'inc-category.delete', category);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inc-category/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inc-category/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inc-category/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inc-category/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'inc-category',\n    newButtonAction: 'newItem',\n    newButtonText: (0, _emberI18n.translationMacro)('incident.buttons.newCategory'),\n    pageTitle: (0, _emberI18n.translationMacro)('incident.titles.incidentCategories'),\n\n    actions: {\n      editItem: function editItem(category) {\n        this.transitionTo('inc-category.edit', category);\n      },\n\n      newItem: function newItem() {\n        this.transitionTo('inc-category.edit', 'new');\n      }\n    }\n  });\n});","define('hospitalrun/tests/inc-category/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inc-category/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inc-category/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inc-category/route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    actions: {\n      allItems: function allItems() {\n        this.transitionTo('inc-category.index');\n      }\n    }\n  });\n});","define('hospitalrun/tests/inc-category/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inc-category/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inc-category/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/attachment/controller', ['exports', 'hospitalrun/patients/photo/controller', 'ember', 'ember-i18n'], function (exports, _hospitalrunPatientsPhotoController, _ember, _emberI18n) {\n  'use strict';\n\n  var inject = _ember['default'].inject;\n  exports['default'] = _hospitalrunPatientsPhotoController['default'].extend({\n    addAction: 'addAttachment',\n    editTitle: (0, _emberI18n.translationMacro)('incident.titles.editAttachment'),\n    modelName: 'attachment',\n    newTitle: (0, _emberI18n.translationMacro)('incident.titles.addAttachment'),\n    fileRequiredMessage: (0, _emberI18n.translationMacro)('incident.messages.attachmentFileRequired'),\n\n    editController: inject.controller('incident/edit')\n\n  });\n});","define('hospitalrun/tests/incident/attachment/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/attachment/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/attachment/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/completed/controller', ['exports', 'hospitalrun/incident/index/controller'], function (exports, _hospitalrunIncidentIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunIncidentIndexController['default'].extend({\n    canDelete: false,\n    startKey: []\n  });\n});","define('hospitalrun/tests/incident/completed/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/completed/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/completed/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/completed/route', ['exports', 'hospitalrun/incident/index/route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunIncidentIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunIncidentIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    editReturn: 'incident.completed',\n    modelName: 'incident',\n    pageTitle: (0, _emberI18n.translationMacro)('incident.titles.closed'),\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var id = this._getPouchIdFromItem(item);\n      return [item.get('reportedBy'), id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var maxId = this._getMaxPouchId();\n      var currentUser = this.getUserName(true);\n      var queryParams = {\n        mapReduce: 'closed_incidents_by_user'\n      };\n      if (!this.currentUserCan('manage_incidents')) {\n        queryParams.options = {\n          startkey: [currentUser, null],\n          endkey: [currentUser, maxId]\n        };\n      }\n      return queryParams;\n    }\n  });\n});","define('hospitalrun/tests/incident/completed/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/completed/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/completed/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _ember, _emberI18n) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var RSVP = _ember['default'].RSVP;\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: (0, _emberI18n.translationMacro)('incident.titles.deleteIncident'),\n\n    _deleteChildObject: function _deleteChildObject(incident, childObject, destroyPromises) {\n      incident.get(childObject).then(function (childObject) {\n        childObject.forEach(function (child) {\n          destroyPromises.push(child.destroyRecord()); // Add the destroy promise to the list\n        });\n      });\n    },\n\n    actions: {\n      'delete': function _delete() {\n        var destroyPromises = [];\n        var incident = get(this, 'model');\n        this._deleteChildObject(incident, 'notes', destroyPromises);\n        RSVP.all(destroyPromises).then((function () {\n          // fires when all the destroys have been completed.\n          get(this, 'model').destroyRecord().then((function () {\n            // delete incident\n            this.send('closeModal');\n          }).bind(this));\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/incident/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember-data', 'ember', 'hospitalrun/mixins/friendly-id', 'hospitalrun/mixins/incident-statuses', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _emberData, _ember, _hospitalrunMixinsFriendlyId, _hospitalrunMixinsIncidentStatuses, _hospitalrunMixinsPatientSubmodule, _hospitalrunUtilsSelectValues, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var PromiseArray = _emberData['default'].PromiseArray;\n  var PromiseObject = _emberData['default'].PromiseObject;\n  var computed = _ember['default'].computed;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsIncidentStatuses['default'], _hospitalrunMixinsFriendlyId['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunUtilsSelectValues['default'], _hospitalrunMixinsUserSession['default'], {\n    lookupListsToUpdate: [{\n      name: 'incidentDepartmentList',\n      property: 'model.department',\n      id: 'incident_departments'\n    }],\n    sequenceName: 'incident',\n    sequenceView: 'incident_by_friendly_id',\n    updateCapability: 'add_incident',\n\n    customForms: inject.service(),\n    database: inject.service(),\n    filesystem: inject.service(),\n    lookupLists: inject.service(),\n\n    customFormsToAdd: alias('customForms.formsForSelect'),\n    customFormsToDisplay: alias('customForms.formsToDisplay'),\n    showAddFormButton: alias('customForms.showAddButton'),\n    incidentController: inject.controller('incident'),\n\n    canManageIncident: computed('model.{isNew,status}', function () {\n      var canManageIncident = this.currentUserCan('manage_incidents');\n      var status = get(this, 'model.status');\n      var isNew = get(this, 'model.isNew');\n      if (isNew || status === _hospitalrunMixinsIncidentStatuses.CLOSED) {\n        canManageIncident = false;\n      }\n      return canManageIncident;\n    }),\n\n    canUpdateStatus: computed('model.isNew', function () {\n      var canManageIncident = this.currentUserCan('manage_incidents');\n      var isNew = get(this, 'model.isNew');\n      return canManageIncident && !isNew;\n    }),\n\n    categoryNameList: computed('incidentCategoryList.@each.archived', function () {\n      return PromiseArray.create({\n        promise: get(this, 'incidentCategoryList').then(function (categoryList) {\n          return categoryList.map(function (value) {\n            return {\n              id: get(value, 'incidentCategoryName'),\n              value: get(value, 'incidentCategoryName')\n            };\n          });\n        })\n      });\n    }),\n\n    incidentCategoryList: computed(function () {\n      var lookupLists = get(this, 'lookupLists');\n      return lookupLists.getLookupList('incidentCategories');\n    }).volatile(),\n\n    incidentDepartmentList: computed('lookupListsLastUpdate', function () {\n      var lookupLists = get(this, 'lookupLists');\n      return PromiseObject.create({\n        promise: lookupLists.getLookupList('incident_departments')\n      });\n    }).volatile(),\n\n    incidentStatuses: computed(function () {\n      var _this = this;\n\n      return get(this, 'statusList').map(function (status) {\n        return {\n          id: status,\n          value: _this.getLocalizedStatus(status)\n        };\n      });\n    }),\n\n    itemList: computed('model.categoryName', function () {\n      var categoryNameSelected = get(this, 'model.categoryName');\n      if (!_ember['default'].isEmpty(categoryNameSelected)) {\n        return PromiseArray.create({\n          promise: get(this, 'incidentCategoryList').then(function (categoryList) {\n            var incidentCategory = categoryList.findBy('incidentCategoryName', categoryNameSelected);\n            return get(incidentCategory, 'incidentCategoryItems');\n          })\n        });\n      }\n    }),\n\n    afterUpdate: function afterUpdate() {\n      var i18n = get(this, 'i18n');\n      this.displayAlert(i18n.t('incident.titles.incidentSaved'), i18n.t('incident.messages.saved'));\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var model = get(this, 'model');\n      set(model, 'modifiedByDisplayName', this.getUserName(false));\n      if (get(model, 'isNew')) {\n        return this.generateFriendlyId('incident').then(function (friendlyId) {\n          set(model, 'friendlyId', friendlyId);\n        });\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    setupCustomForms: function setupCustomForms() {\n      var customForms = get(this, 'customForms');\n      var model = get(this, 'model');\n      customForms.setupForms('incident', model);\n    },\n\n    /**\n     * Adds or removes the specified object from the specified list.\n     * @param {String} listName The name of the list to operate on.\n     * @param {Object} listObject The object to add or removed from the\n     * specified list.\n     * @param {boolean} removeObject If true remove the object from the list;\n     * otherwise add the specified object to the list.\n     */\n    _updateList: function _updateList(listName, listObject, removeObject) {\n      var model = get(this, 'model');\n      get(model, listName).then((function (list) {\n        if (removeObject) {\n          list.removeObject(listObject);\n        } else {\n          list.addObject(listObject);\n        }\n        this.send('update', true);\n        this.send('closeModal');\n      }).bind(this));\n    },\n\n    actions: {\n      addNote: function addNote(newNote) {\n        this._updateList('notes', newNote);\n      },\n\n      addAttachment: function addAttachment(newAttachment) {\n        this._updateList('incidentAttachments', newAttachment);\n      },\n\n      addCustomForm: function addCustomForm() {\n        var model = get(this, 'model');\n        var customFormsToAdd = get(this, 'customFormsToAdd');\n        this.send('openModal', 'custom-form-add', _ember['default'].Object.create({\n          modelToAddTo: model,\n          customForms: customFormsToAdd\n        }));\n      },\n\n      showAddAttachment: function showAddAttachment() {\n        var newNote = get(this, 'store').createRecord('attachment', {\n          dateAdded: new Date(),\n          addedBy: this.getUserName(true),\n          addedByDisplayName: this.getUserName(false),\n          saveToDir: '/incidents/' + get(this, 'model.id') + '/'\n        });\n        this.send('openModal', 'incident.attachment', newNote);\n      },\n\n      showAddNote: function showAddNote() {\n        var newNote = get(this, 'store').createRecord('incident-note', {\n          dateRecorded: new Date(),\n          givenBy: this.getUserName(true),\n          givenByDisplayName: this.getUserName(false)\n        });\n        this.send('openModal', 'incident.note.edit', newNote);\n      },\n\n      deleteAttachment: function deleteAttachment(model) {\n        var _this2 = this;\n\n        var attachment = get(model, 'itemToDelete');\n        this._updateList('incidentAttachments', attachment, true);\n        attachment.destroyRecord().then(function () {\n          var attachmentId = get(attachment, 'id');\n          var database = get(_this2, 'database');\n          var filePath = get(attachment, 'fileName');\n          var fileSystem = get(_this2, 'filesystem');\n          var isFileSystemEnabled = get(fileSystem, 'isFileSystemEnabled');\n          if (isFileSystemEnabled) {\n            var pouchDbId = database.getPouchId(attachmentId, 'attachment');\n            fileSystem.deleteFile(filePath, pouchDbId)['catch'](function () /* ignored */{});\n          }\n        });\n      },\n\n      deleteNote: function deleteNote(note) {\n        this._updateList('notes', note, true);\n      },\n\n      showDeleteAttachment: function showDeleteAttachment(attachment) {\n        var i18n = get(this, 'i18n');\n        var modelName = i18n.t('models.attachment.names.singular');\n        var message = i18n.t('messages.delete_singular', { name: modelName });\n        var model = _ember['default'].Object.create({\n          itemToDelete: attachment\n        });\n        var title = i18n.t('incident.titles.deleteAttachment');\n        this.displayConfirm(title, message, 'deleteAttachment', model);\n      },\n\n      showDeleteNote: function showDeleteNote(note) {\n        this.send('openModal', 'incident.note.delete', note);\n      },\n\n      showEditAttachment: function showEditAttachment(attachment) {\n        this.send('openModal', 'incident.attachment', attachment);\n      },\n\n      showEditNote: function showEditNote(note) {\n        this.send('openModal', 'incident.note.edit', note);\n      }\n\n    }\n\n  });\n});","define('hospitalrun/tests/incident/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/patient-list-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _hospitalrunMixinsPatientListRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsPatientListRoute['default'], _hospitalrunMixinsUserSession['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('incident.titles.editIncident'),\n    modelName: 'incident',\n    newTitle: (0, _emberI18n.translationMacro)('incident.titles.newIncident'),\n\n    customForms: _ember['default'].inject.service(),\n\n    getNewData: function getNewData() {\n      var customForms = get(this, 'customForms');\n      var now = new Date();\n      var newData = {\n        customForms: _ember['default'].Object.create(),\n        dateOfIncident: now,\n        reportedDate: now,\n        reportedBy: this.getUserName(true),\n        reportedByDisplayName: this.getUserName(false)\n      };\n      return customForms.setDefaultCustomForms(['incident'], newData);\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      controller.setupCustomForms();\n    },\n\n    actions: {\n      deleteAttachment: function deleteAttachment(model) {\n        this.controller.send('deleteAttachment', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/incident/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'ember', 'hospitalrun/mixins/filter-list', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _ember, _hospitalrunMixinsFilterList, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsFilterList['default'], _hospitalrunMixinsUserSession['default'], {\n    addPermission: 'add_incident',\n    deletePermission: 'delete_incident',\n    startKey: [],\n\n    incidentController: inject.controller('incident'),\n    departmentNames: alias('incidentController.incidentDepartmentList.value'),\n\n    categoryItems: computed('model.@each.categoryItem', function () {\n      return this._getUniqueValues('categoryItem');\n    }),\n\n    categoryNames: computed('model.@each.categoryName', function () {\n      return this._getUniqueValues('categoryName');\n    }),\n\n    statusList: computed('model.@each.localizedStatus', function () {\n      return this._getUniqueValues('localizedStatus');\n    }),\n\n    filteredIncidents: computed('model.[]', 'filterBy', 'filterValue', function () {\n      var filterBy = get(this, 'filterBy');\n      var filterValue = get(this, 'filterValue');\n      var incidents = get(this, 'model');\n      return this.filterList(incidents, filterBy, filterValue);\n    }),\n\n    sortedIncidents: computed('filteredIncidents', 'sortByKey', 'sortByDesc', function () {\n      var filteredList = get(this, 'filteredIncidents');\n      return this.sortFilteredList(filteredList);\n    }),\n\n    _getUniqueValues: function _getUniqueValues(attribute) {\n      var uniqueValues = get(this, 'model').map(function (incident) {\n        return get(incident, attribute);\n      }).uniq();\n      return uniqueValues.filter(function (value) {\n        return !isEmpty(value);\n      });\n    },\n\n    actions: {\n      showDeleteIncident: function showDeleteIncident(incident) {\n        this.send('openModal', 'incident.delete', incident);\n      }\n    }\n  });\n});","define('hospitalrun/tests/incident/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    editReturn: 'incident.index',\n    itemsPerPage: null, // Fetch all incidents as one page\n    modelName: 'incident',\n    pageTitle: (0, _emberI18n.translationMacro)('incident.titles.incidents'),\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var id = this._getPouchIdFromItem(item);\n      return [item.get('reportedBy'), id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var maxId = this._getMaxPouchId();\n      var currentUser = this.getUserName(true);\n      var queryParams = {\n        mapReduce: 'open_incidents_by_user'\n      };\n      if (!this.currentUserCan('manage_incidents')) {\n        queryParams.options = {\n          startkey: [currentUser, null],\n          endkey: [currentUser, maxId]\n        };\n      }\n      return queryParams;\n    }\n\n  });\n});","define('hospitalrun/tests/incident/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/note/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _ember, _emberI18n) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    afterDeleteAction: 'notifyNoteDelete',\n    editController: inject.controller('incident/edit'),\n\n    title: (0, _emberI18n.translationMacro)('incident.titles.deleteNote'),\n\n    actions: {\n      notifyNoteDelete: function notifyNoteDelete() {\n        get(this, 'editController').send('deleteNote', get(this, 'model'));\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/incident/note/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/note/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/note/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/note/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var RSVP = _ember['default'].RSVP;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    cancelAction: 'closeModal',\n    newNote: false,\n    updateCapability: 'manage_incidents',\n\n    editController: inject.controller('incident/edit'),\n\n    title: computed('model.isNew', function () {\n      var i18n = get(this, 'i18n');\n      var isNew = get(this, 'model.isNew');\n      if (isNew) {\n        return i18n.t('incident.titles.addNote');\n      }\n      return i18n.t('incident.titles.editNote');\n    }),\n\n    afterUpdate: function afterUpdate(note) {\n      if (get(this, 'newNote')) {\n        get(this, 'editController').send('addNote', note);\n      } else {\n        this.send('closeModal');\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      set(this, 'newNote', get(this, 'model.isNew'));\n      return RSVP.resolve();\n    }\n\n  });\n});","define('hospitalrun/tests/incident/note/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/note/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/note/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/reports/controller', ['exports', 'hospitalrun/controllers/abstract-report-controller', 'ember', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/user-session', 'moment'], function (exports, _hospitalrunControllersAbstractReportController, _ember, _hospitalrunMixinsNumberFormat, _hospitalrunMixinsUserSession, _moment) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  var RSVP = _ember['default'].RSVP;\n  exports['default'] = _hospitalrunControllersAbstractReportController['default'].extend(_hospitalrunMixinsUserSession['default'], _hospitalrunMixinsNumberFormat['default'], {\n    reportType: 'department',\n\n    canGenerateReport: computed(function () {\n      return this.currentUserCan('generate_incident_report');\n    }),\n\n    departmentReportColumns: computed(function () {\n      var i18n = get(this, 'i18n');\n      return {\n        department: {\n          label: i18n.t('incident.labels.department'),\n          include: true,\n          property: 'type' // property type because in _addReportRow function looks for column name with value as type\n        },\n        total: {\n          label: i18n.t('incident.labels.total'),\n          include: true,\n          property: 'total',\n          format: '_numberFormat'\n        }\n      };\n    }),\n    incidentCategoryReportColumns: computed(function () {\n      var i18n = get(this, 'i18n');\n      return {\n        incidentCategory: {\n          label: i18n.t('incident.labels.category'),\n          include: true,\n          property: 'type'\n        },\n        total: {\n          label: i18n.t('incident.labels.total'),\n          include: true,\n          property: 'total',\n          format: '_numberFormat'\n        }\n      };\n    }),\n\n    reportTypes: computed(function () {\n      var i18n = get(this, 'i18n');\n      return [{\n        name: i18n.t('incident.titles.incidentsByDepartment'),\n        value: 'department'\n      }, {\n        name: i18n.t('incident.titles.incidentsByCategory'),\n        value: 'incidentCategory'\n      }];\n    }),\n\n    /**\n     * Find Incidents by the specified dates and the incidents's date.\n     */\n    _findIncidentsByDate: function _findIncidentsByDate() {\n      var filterEndDate = get(this, 'endDate');\n      var filterStartDate = get(this, 'startDate');\n      var findParams = {\n        options: {},\n        mapReduce: 'incident_by_date'\n      };\n      var maxValue = get(this, 'maxValue');\n      return new RSVP.Promise((function (resolve, reject) {\n        if (isEmpty(filterStartDate)) {\n          reject();\n        }\n        findParams.options.startkey = [filterStartDate.getTime(), null];\n\n        if (!isEmpty(filterEndDate)) {\n          filterEndDate = (0, _moment['default'])(filterEndDate).endOf('day').toDate();\n          findParams.options.endkey = [filterEndDate.getTime(), maxValue];\n        }\n        return this.store.query('incident', findParams).then(resolve, reject);\n      }).bind(this));\n    },\n\n    _generateByDepartmentOrByIncidentCategoryReport: function _generateByDepartmentOrByIncidentCategoryReport(incidents, reportType) {\n      var reportColumns = undefined,\n          reportProperty = undefined;\n      if (reportType === 'department') {\n        reportColumns = get(this, 'departmentReportColumns');\n        reportProperty = 'department';\n      } else {\n        reportColumns = get(this, 'incidentCategoryReportColumns');\n        reportProperty = 'categoryName';\n      }\n      this._addRowsByType(incidents, reportProperty, 'Total incidents: ', reportColumns);\n      this._finishReport(reportColumns);\n    },\n\n    /**\n     * Given a list of records, organize and total by them by type and then add them to the report.\n     * @param records {Array} list of records to total.\n     * @param typeField {String} the field in the records containing the type.\n     * @param totalLabel {String} the label for the grand total.\n     * @param reportColumns\n     */\n    _addRowsByType: function _addRowsByType(records, typeField, totalLabel, reportColumns) {\n      var types = this._totalByType(records, typeField, totalLabel);\n      types.forEach((function (type) {\n        this._addReportRow(type, true, reportColumns);\n      }).bind(this));\n    },\n\n    /**\n     * Given a list of records, total them by type and also add a grand total.\n     * @param records {Array} list of records to total.\n     * @param typeField {String} the field in the records containing the type.\n     * @param totalLabel {String} the label for the grand total.\n     * @param reportColumns\n     */\n    _totalByType: function _totalByType(records, typeField, totalLabel) {\n      var total = 0;\n      var types = [];\n      records.forEach(function (record) {\n        var type = record.get(typeField);\n        var typeObject = undefined;\n        if (!isEmpty(type)) {\n          typeObject = types.findBy('type', type);\n          if (isEmpty(typeObject)) {\n            typeObject = {\n              type: type,\n              total: 0,\n              records: []\n            };\n            types.push(typeObject);\n          }\n          typeObject.total++;\n          typeObject.records.push(record);\n          total++;\n        }\n      });\n      types = types.sortBy('type');\n      types.push({ type: totalLabel, total: total });\n      return types;\n    },\n\n    actions: {\n      generateReport: function generateReport() {\n        var _this = this;\n\n        var reportRows = get(this, 'reportRows');\n        var reportType = get(this, 'reportType');\n        reportRows.clear();\n        this.showProgressModal();\n        switch (reportType) {\n          case 'department':\n          case 'incidentCategory':\n            {\n              this._findIncidentsByDate().then(function (incidents) {\n                _this._generateByDepartmentOrByIncidentCategoryReport(incidents, reportType);\n              })['catch'](function (ex) {\n                console.log('Error:', ex);\n                _this.closeProgressModal();\n              });\n              break;\n            }\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/incident/reports/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/reports/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/reports/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    pageTitle: 'Incident Report',\n\n    // No model for reports; data gets retrieved when report is run.\n    model: function model() {\n      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));\n    }\n\n  });\n});","define('hospitalrun/tests/incident/reports/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/reports/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/reports/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/incident/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_incident',\n    additionalModels: [{\n      name: 'incidentDepartmentList',\n      findArgs: ['lookup', 'incident_departments']\n    }, {\n      name: 'incidentCategoryList',\n      findArgs: ['inc-category']\n    }],\n    moduleName: 'incident',\n    newButtonText: (0, _emberI18n.translationMacro)('incident.buttons.newIncident'),\n    sectionTitle: (0, _emberI18n.translationMacro)('incident.titles.incidents')\n  });\n});","define('hospitalrun/tests/incident/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - incident/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'incident/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/initializers/i18n', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    name: 'i18n',\n\n    after: 'ember-i18n',\n\n    initialize: function initialize(app) {\n      app.inject('route', 'i18n', 'service:i18n');\n      app.inject('controller', 'i18n', 'service:i18n');\n      app.inject('mixin', 'i18n', 'service:i18n');\n      app.inject('model', 'i18n', 'service:i18n');\n    }\n  };\n});","define('hospitalrun/tests/initializers/i18n.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - initializers/i18n.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/i18n.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/integration/components/calendar-control-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('calendar-control', 'Integration | Component | calendar control', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      'id': '+BxiQ5WN',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"calendar-control\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$('.ember-view.full-calendar').length, 1);\n  });\n});","define('hospitalrun/tests/integration/components/calendar-control-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/calendar-control-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/calendar-control-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/integration/components/inventory/rank-select-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('inventory/rank-select', 'Integration | Component | inventory/rank select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders correctly', function (assert) {\n    this.set('value', null);\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'vWKziaVT',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"inventory/rank-select\"],null,[[\"property\",\"prompt\"],[\"value\",\"n/a\"]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    // options\n    var $options = this.$('option');\n    assert.equal($options.length, 4, 'Should render 4 options');\n    assert.equal($options[0].value, '', 'First option value is empty (prompt)');\n    assert.equal($options[0].innerHTML.trim(), 'n/a', 'First option label is prompt');\n    assert.equal($options[1].value, 'A', 'Second option is \"A\"');\n    assert.equal($options[2].value, $options[2].innerHTML.trim(), 'Values are similar as labels');\n  });\n});","define('hospitalrun/tests/integration/components/inventory/rank-select-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/inventory/rank-select-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/inventory/rank-select-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/integration/components/language-select-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('language-select', 'Integration | Component | language select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'iaJtg5lp',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"language-select\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim().includes('Select Language'), true);\n  });\n});","define('hospitalrun/tests/integration/components/language-select-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/language-select-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/language-select-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/integration/components/medication-allergy-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n  'use strict';\n\n  var Patient = _ember['default'].Object.extend({ allergies: [] });\n  var patient = Patient.create();\n  var Allergy = _ember['default'].Object.extend();\n  var allergy = Allergy.create({ name: 'test allergy' });\n\n  (0, _emberQunit.moduleForComponent)('medication-allergy', 'Integration | Component | medication allergy', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.inject.service('i18n');\n    }\n  });\n\n  (0, _emberQunit.test)('allergy component renders with appropriate data', function (assert) {\n    patient.get('allergies').pushObject(allergy);\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('patient', patient);\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'fJBUU3mI',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"medication-allergy\"],null,[[\"patient\"],[[\"get\",[\"patient\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    var allergyName = allergy.get('name');\n    var allergies = patient.get('allergies');\n    assert.equal(this.$('.allergy-list span').length, allergies.length, 'renders allergy list with correct list of elements');\n    assert.equal(this.$('.allergy-list span').first().text().trim(), allergyName, 'renders allergy name');\n  });\n});","define('hospitalrun/tests/integration/components/medication-allergy-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/medication-allergy-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/medication-allergy-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/integration/components/number-input-test', ['exports', 'ember-qunit', 'ember-test-helpers/wait', 'ember'], function (exports, _emberQunit, _emberTestHelpersWait, _ember) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('number-input', 'Integration | Component | number input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('the number-input renders', function (assert) {\n    assert.expect(2);\n\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'RiD4k2NT',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"em-form\"],null,[[\"model\"],[[\"get\",[\"model\"]]]],0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      \"],[\"append\",[\"helper\",[\"number-input\"],null,[[\"property\",\"label\",\"class\"],[\"petType\",\"Pet Type\",\"test-number-input\"]]],false],[\"text\",\"\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$('label').text().trim(), 'Pet Type', 'it renders the label');\n    assert.ok(_ember['default'].isPresent(this.$('.test-number-input')), 'it renders the input field');\n  });\n\n  (0, _emberQunit.test)('the number input sanitizes the data', function (assert) {\n    assert.expect(1);\n\n    this.set('model', _ember['default'].Object.create({ petType: 'cats' }));\n\n    this.set('sanitizeFunction', function (value) {\n      assert.equal(value, 'dragons', 'it passes the value to the sanitize function');\n    });\n\n    this.render(_ember['default'].HTMLBars.template({\n      'id': '+K6+/A5x',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"em-form\"],null,[[\"model\"],[[\"get\",[\"model\"]]]],0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      \"],[\"append\",[\"helper\",[\"number-input\"],null,[[\"property\",\"sanitizeFunction\",\"label\",\"class\"],[\"petType\",[\"get\",[\"sanitizeFunction\"]],\"Pet Type\",\"test-number-input\"]]],false],[\"text\",\"\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    this.$('input').eq(0).val('dragons');\n    this.$('input').eq(0).trigger('input');\n    this.$('input').eq(0).blur();\n    return (0, _emberTestHelpersWait['default'])();\n  });\n});","define('hospitalrun/tests/integration/components/number-input-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/number-input-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/number-input-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/adjust/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-adjustment-types', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsInventoryAdjustmentTypes, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventoryAdjustmentTypes['default'], {\n    inventoryController: _ember['default'].inject.controller('inventory'),\n\n    expenseAccountList: _ember['default'].computed.alias('inventoryController.expenseAccountList'),\n\n    title: (0, _emberI18n.translationMacro)('inventory.titles.adjustment'),\n\n    transactionTypeChanged: (function () {\n      _ember['default'].run.once(this, function () {\n        this.get('model').validate()['catch'](_ember['default'].K);\n      });\n    }).observes('transactionType'),\n\n    updateButtonText: (function () {\n      var transactionType = this.get('model.transactionType');\n      var adjustmentType = this.get('adjustmentTypes').findBy('type', transactionType);\n      return adjustmentType.name;\n    }).property('model.transactionType'),\n\n    updateButtonAction: 'adjust',\n\n    updateCapability: 'adjust_inventory_location',\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      adjust: function adjust() {\n        this.send('adjustItems', this.get('model'), true);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/adjust/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/adjust/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/adjust/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/barcode/controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    selectedPrinter: null,\n\n    barcodeUri: (function () {\n      var id = this.get('model.id');\n      var name = this.get('model.name');\n\n      /* eslint new-cap: ['error', { 'capIsNew': false }]  */\n      return _ember['default'].$(document).JsBarcode(id, {\n        width: 1,\n        height: 20,\n        fontSize: 10,\n        displayValue: name,\n        returnUri: true\n      });\n    }).property('model.id', 'model.name'),\n\n    printers: (function () {\n      return dymo.label.framework.getTapePrinters();\n    }).property(),\n\n    havePrinters: (function () {\n      var printers = this.get('printers');\n      if (printers.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }).property('printers'),\n\n    singlePrinter: (function () {\n      var printers = this.get('printers');\n      if (printers.length === 1) {\n        return true;\n      } else {\n        return false;\n      }\n    }).property('printers'),\n\n    actions: {\n      print: function print() {\n        var barcodeUri = this.get('barcodeUri');\n        var selectedPrinter = this.get('selectedPrinter');\n        if (!selectedPrinter) {\n          selectedPrinter = this.get('printers')[0].name;\n        }\n        _ember['default'].$.get('/dymo/BarcodeAsImage.label', function (labelXml) {\n          var barcodeAsImageLabel = dymo.label.framework.openLabelXml(labelXml);\n          var pngBase64 = barcodeUri.substr('data:image/png;base64,'.length);\n          barcodeAsImageLabel.setObjectText('Image', pngBase64);\n          barcodeAsImageLabel.print(selectedPrinter);\n        }, 'text');\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/inventory/barcode/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/barcode/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/barcode/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/barcode/route', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend({\n    model: function model(params) {\n      return this.store.find('inventory', params.inventory_id);\n    }\n\n  });\n});","define('hospitalrun/tests/inventory/barcode/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/barcode/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/barcode/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/batch/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-id', 'hospitalrun/mixins/inventory-locations', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsInventoryId, _hospitalrunMixinsInventoryLocations, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventoryId['default'], _hospitalrunMixinsInventoryLocations['default'], {\n    doingUpdate: false,\n    inventoryController: _ember['default'].inject.controller('inventory'),\n    inventoryItems: null,\n    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),\n    vendorList: _ember['default'].computed.alias('inventoryController.vendorList'),\n    purchaseAttributes: ['expirationDate', 'inventoryItem', 'lotNumber', 'purchaseCost', 'quantity', 'vendorItemNo'],\n\n    inventoryList: (function () {\n      var inventoryItems = this.get('inventoryItems');\n      if (!_ember['default'].isEmpty(inventoryItems)) {\n        var mappedItems = inventoryItems.map(function (item) {\n          return item.doc;\n        });\n        return mappedItems;\n      }\n    }).property('inventoryItems.[]'),\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'vendorList', // Name of property containing lookup list\n      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'vendor_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    showDistributionUnit: (function () {\n      return this._haveValidInventoryItem();\n    }).property('model.inventoryItemTypeAhead', 'model.inventoryItem'),\n\n    showInvoiceItems: (function () {\n      var invoiceItems = this.get('model.invoiceItems');\n      return !_ember['default'].isEmpty(invoiceItems);\n    }).property('model.invoiceItems.[]'),\n\n    totalReceived: (function () {\n      var invoiceItems = this.get('model.invoiceItems');\n      var total = 0;\n      if (!_ember['default'].isEmpty('invoiceItems')) {\n        total = invoiceItems.reduce(function (previousValue, item) {\n          return previousValue + Number(item.get('purchaseCost'));\n        }, total);\n      }\n      var purchaseCost = this.get('model.purchaseCost');\n      if (this.get('model.isValid') && !_ember['default'].isEmpty(purchaseCost)) {\n        total += Number(purchaseCost);\n      }\n      return total;\n    }).property('model.invoiceItems.[].purchaseCost', 'model.isValid', 'model.purchaseCost'),\n\n    updateButtonText: (0, _emberI18n.translationMacro)('inventory.labels.save'),\n\n    updateCapability: 'add_inventory_item',\n\n    _addNewInventoryItem: function _addNewInventoryItem() {\n      this.generateId().then((function (inventoryId) {\n        var inventoryItem = this.store.createRecord('inventory', {\n          id: inventoryId,\n          name: this.get('model.inventoryItemTypeAhead'),\n          quantity: 0, // Needed for validation purposes\n          skipSavePurchase: true\n        });\n        this.send('openModal', 'inventory.quick-add', inventoryItem);\n      }).bind(this));\n    },\n\n    _addInventoryItem: function _addInventoryItem() {\n      var model = this.get('model');\n      var inventoryItemTypeAhead = this.get('model.inventoryItemTypeAhead');\n      var purchaseCost = this.get('model.purchaseCost');\n      var quantity = this.get('model.quantity');\n      return model.validate().then((function () {\n        if (this.get('model.isValid') && !_ember['default'].isEmpty(inventoryItemTypeAhead) && !_ember['default'].isEmpty(quantity) && !_ember['default'].isEmpty(purchaseCost)) {\n          if (this._haveValidInventoryItem()) {\n            this._addInvoiceItem();\n          } else {\n            this._addNewInventoryItem();\n            return true;\n          }\n        } else {\n          throw Error('invalid');\n        }\n      }).bind(this))['catch']((function () {\n        this.displayAlert(this.get('i18n').t('inventory.titles.warning'), this.get('i18n').t('inventory.messages.warning'));\n      }).bind(this));\n    },\n\n    _addInvoiceItem: function _addInvoiceItem() {\n      var model = this.get('model');\n      var invoiceItems = model.get('invoiceItems');\n      var itemProperties = model.getProperties(this.get('purchaseAttributes'));\n      var invoiceItem = _ember['default'].Object.create(itemProperties);\n      invoiceItems.addObject(invoiceItem);\n      model.set('expirationDate');\n      model.set('inventoryItem');\n      model.set('inventoryItemTypeAhead');\n      model.set('lotNumber');\n      model.set('purchaseCost');\n      model.set('quantity');\n      model.set('selectedInventoryItem');\n      model.set('vendorItemNo');\n    },\n\n    _findInventoryItem: function _findInventoryItem(purchase) {\n      var invoiceItems = this.get('model.invoiceItems');\n      var inventoryId = purchase.get('inventoryItem');\n      if (!_ember['default'].isEmpty(inventoryId)) {\n        var invoiceItem = invoiceItems.find(function (item) {\n          return item.get('inventoryItem.id') === inventoryId;\n        }, this);\n        if (!_ember['default'].isEmpty(invoiceItem)) {\n          return invoiceItem.get('inventoryItem');\n        }\n      }\n    },\n\n    _haveValidInventoryItem: function _haveValidInventoryItem() {\n      var inventoryItemTypeAhead = this.get('model.inventoryItemTypeAhead');\n      var inventoryItem = this.get('model.inventoryItem');\n      if (_ember['default'].isEmpty(inventoryItemTypeAhead) || _ember['default'].isEmpty(inventoryItem)) {\n        return false;\n      } else {\n        var inventoryItemName = inventoryItem.get('name');\n        var typeAheadName = inventoryItemTypeAhead.substr(0, inventoryItemName.length);\n        if (typeAheadName !== inventoryItemName) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n    },\n\n    _savePurchases: function _savePurchases() {\n      var model = this.get('model');\n      var purchaseDefaults = model.getProperties(['dateReceived', 'vendor', 'invoiceNo', 'location', 'aisleLocation', 'giftInKind']);\n      var invoiceItems = model.get('invoiceItems');\n      var inventoryPurchase = undefined;\n      var savePromises = [];\n      invoiceItems.forEach((function (invoiceItem) {\n        var inventoryItem = invoiceItem.get('inventoryItem');\n        var quantity = invoiceItem.get('quantity');\n        inventoryPurchase = this.store.createRecord('inv-purchase', purchaseDefaults);\n        inventoryPurchase.setProperties(invoiceItem.getProperties(this.get('purchaseAttributes')));\n        inventoryPurchase.setProperties({\n          distributionUnit: inventoryItem.get('distributionUnit'),\n          currentQuantity: quantity,\n          originalQuantity: quantity,\n          inventoryItem: inventoryItem.get('id')\n        });\n        savePromises.push(inventoryPurchase.save());\n      }).bind(this));\n      _ember['default'].RSVP.all(savePromises).then((function (results) {\n        var inventorySaves = [];\n        var purchasesAdded = [];\n        results.forEach((function (newPurchase) {\n          var inventoryItem = this._findInventoryItem(newPurchase);\n          var purchases = inventoryItem.get('purchases');\n          purchases.addObject(newPurchase);\n          purchasesAdded.push(this.newPurchaseAdded(inventoryItem, newPurchase));\n        }).bind(this));\n\n        _ember['default'].RSVP.all(inventorySaves).then((function () {\n          results.forEach((function (newPurchase) {\n            var inventoryItem = this._findInventoryItem(newPurchase);\n            inventoryItem.updateQuantity();\n            inventorySaves.push(inventoryItem.save());\n          }).bind(this));\n          _ember['default'].RSVP.all(inventorySaves).then((function () {\n            this.updateLookupLists();\n            this.displayAlert(this.get('i18n').t('inventory.titles.purchaseSaved'), this.get('i18n').t('inventory.messages.purchaseSaved'), 'allItems');\n          }).bind(this));\n        }).bind(this));\n      }).bind(this));\n    },\n\n    actions: {\n      addInventoryItem: function addInventoryItem() {\n        this._addInventoryItem();\n      },\n\n      addedNewInventoryItem: function addedNewInventoryItem(inventoryItem) {\n        this.set('model.inventoryItem', inventoryItem);\n        this._addInvoiceItem();\n        this.send('closeModal');\n        if (this.get('doingUpdate')) {\n          this._savePurchases();\n        }\n      },\n\n      removeItem: function removeItem(removeInfo) {\n        var invoiceItems = this.get('model.invoiceItems');\n        var item = removeInfo.itemToRemove;\n        invoiceItems.removeObject(item);\n        this.send('closeModal');\n      },\n\n      showRemoveItem: function showRemoveItem(item) {\n        var message = this.get('i18n').t('inventory.messages.removeItem');\n        var model = _ember['default'].Object.create({\n          itemToRemove: item\n        });\n        var title = this.get('i18n').t('inventory.titles.removeItem');\n        this.displayConfirm(title, message, 'removeItem', model);\n      },\n\n      /**\n       * Update the model\n       */\n      update: function update() {\n        this.set('doingUpdate', true);\n        this._addInventoryItem().then((function (addingNewInventory) {\n          if (!addingNewInventory) {\n            this._savePurchases();\n          }\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/batch/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/batch/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/batch/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/batch/route', ['exports', 'hospitalrun/inventory/request/route', 'ember', 'ember-i18n'], function (exports, _hospitalrunInventoryRequestRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunInventoryRequestRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('navigation.subnav.inventoryReceived'),\n    modelName: 'inventory-batch',\n    newTitle: (0, _emberI18n.translationMacro)('navigation.subnav.inventoryReceived'),\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        invoiceItems: [],\n        dateReceived: new Date()\n      });\n    },\n\n    actions: {\n      addedNewInventoryItem: function addedNewInventoryItem(model) {\n        this.controller.send('addedNewInventoryItem', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/batch/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/batch/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/batch/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/delete/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _emberI18n, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: (0, _emberI18n.translationMacro)('inventory.labels.deleteItem')\n  });\n});","define('hospitalrun/tests/inventory/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/friendly-id', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-type-list', 'hospitalrun/mixins/return-to', 'hospitalrun/mixins/unit-types', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsFriendlyId, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventoryTypeList, _hospitalrunMixinsReturnTo, _hospitalrunMixinsUnitTypes, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsFriendlyId['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventoryTypeList['default'], _hospitalrunMixinsReturnTo['default'], _hospitalrunMixinsUnitTypes['default'], _hospitalrunMixinsUserSession['default'], {\n    inventory: _ember['default'].inject.controller(),\n    savingNewItem: false,\n    sequenceView: 'inventory_by_friendly_id',\n\n    canAddPurchase: (function () {\n      return this.currentUserCan('add_inventory_purchase');\n    }).property(),\n\n    canAdjustLocation: function canAdjustLocation() {\n      return this.currentUserCan('adjust_inventory_location');\n    },\n\n    warehouseList: _ember['default'].computed.alias('inventory.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventory.aisleLocationList'),\n    inventoryTypeList: _ember['default'].computed.alias('inventory.inventoryTypeList.value'),\n    inventoryUnitList: _ember['default'].computed.alias('inventory.inventoryUnitList.value'),\n    vendorList: _ember['default'].computed.alias('inventory.vendorList'),\n    database: _ember['default'].inject.service(),\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'vendorList', // Name of property containing lookup list\n      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'vendor_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    canEditQuantity: (function () {\n      return this.get('model.isNew');\n    }).property('model.isNew'),\n\n    haveTransactions: (function () {\n      var transactions = this.get('transactions');\n      return transactions !== null;\n    }).property('transactions.[]'),\n\n    locationQuantityTotal: (function () {\n      var locations = this.get('model.locations');\n      var total = locations.reduce(function (previousValue, location) {\n        return previousValue + parseInt(location.get('quantity'));\n      }, 0);\n      return total;\n    }).property('model.locations'),\n\n    /**\n     * Check to see if the total quantity by location matches the quantity calculated on the item\n     * @return {boolean} true if there is a discrepency;otherwise false.\n     */\n    quantityDiscrepency: (function () {\n      var locationQuantityTotal = this.get('locationQuantityTotal');\n      var quantity = this.get('model.quantity');\n      return !_ember['default'].isEmpty(locationQuantityTotal) && !_ember['default'].isEmpty(quantity) && locationQuantityTotal !== quantity;\n    }).property('locationQuantityTotal', 'model.quantity'),\n\n    /**\n     * Get the difference in quantity between the total quantity by location and the quantity on the item.\n     * @return {int} the difference.\n     */\n    quantityDifferential: (function () {\n      var locationQuantityTotal = this.get('locationQuantityTotal');\n      var quantity = this.get('model.quantity');\n      return Math.abs(locationQuantityTotal - quantity);\n    }).property('locationQuantityTotal', 'model.quantity'),\n\n    originalQuantityUpdated: (function () {\n      var isNew = this.get('model.isNew');\n      var quantity = this.get('model.originalQuantity');\n      if (isNew && !_ember['default'].isEmpty(quantity)) {\n        this.set('model.quantity', quantity);\n      }\n    }).observes('model.isNew', 'model.originalQuantity'),\n\n    sequenceName: computed('model.inventoryType', function () {\n      var inventoryType = get(this, 'model.inventoryType');\n      return 'inventory_' + inventoryType;\n    }),\n\n    showTransactions: (function () {\n      var transactions = this.get('transactions');\n      return !_ember['default'].isEmpty(transactions);\n    }).property('transactions.[]'),\n\n    transactions: null,\n\n    updateCapability: 'add_inventory_item',\n\n    actions: {\n      adjustItems: function adjustItems(inventoryLocation) {\n        var adjustmentQuantity = parseInt(inventoryLocation.get('adjustmentQuantity'));\n        var inventoryItem = this.get('model');\n        var transactionType = inventoryLocation.get('transactionType');\n        var request = this.get('store').createRecord('inv-request', {\n          adjustPurchases: true,\n          dateCompleted: inventoryLocation.get('dateCompleted'),\n          expenseAccount: inventoryLocation.get('expenseAccount'),\n          inventoryItem: inventoryItem,\n          quantity: adjustmentQuantity,\n          transactionType: transactionType,\n          reason: inventoryLocation.get('reason'),\n          deliveryAisle: inventoryLocation.get('aisleLocation'),\n          deliveryLocation: inventoryLocation.get('location')\n        });\n        request.set('inventoryLocations', [inventoryLocation]);\n        var increment = false;\n        if (transactionType === 'Adjustment (Add)' || transactionType === 'Return') {\n          increment = true;\n        }\n        request.set('markAsConsumed', true);\n        // Make sure inventory item is resolved first.\n        request.get('inventoryItem').then((function () {\n          this.send('fulfillRequest', request, true, increment, true);\n        }).bind(this));\n      },\n\n      editNewItem: function editNewItem() {\n        this.send('editItem', this.get('model.id'));\n      },\n\n      showAdjustment: function showAdjustment(inventoryLocation) {\n        inventoryLocation.setProperties({\n          dateCompleted: new Date(),\n          adjustmentItem: this.get('model'),\n          adjustmentQuantity: '',\n          reason: '',\n          transferItem: null,\n          transactionType: 'Adjustment (Add)'\n        });\n        this.send('openModal', 'inventory.adjust', inventoryLocation);\n      },\n\n      showTransfer: function showTransfer(inventoryLocation) {\n        inventoryLocation.set('adjustmentQuantity');\n        inventoryLocation.set('transferItem', this.get('model'));\n        inventoryLocation.set('dateCompleted', new Date());\n        this.send('openModal', 'inventory.transfer', inventoryLocation);\n      },\n\n      transferItems: function transferItems(inventoryLocation) {\n        var inventoryItem = this.get('model');\n        var request = this.get('store').createRecord('inv-request', {\n          adjustPurchases: false,\n          dateCompleted: inventoryLocation.get('dateCompleted'),\n          inventoryItem: inventoryItem,\n          quantity: inventoryLocation.get('adjustmentQuantity'),\n          deliveryAisle: inventoryLocation.get('transferAisleLocation'),\n          deliveryLocation: inventoryLocation.get('transferLocation'),\n          transactionType: 'Transfer'\n        });\n        this.transferToLocation(inventoryItem, inventoryLocation).then((function () {\n          inventoryLocation.setProperties({\n            transferItem: null,\n            transferLocation: null,\n            transferAisleLocation: null,\n            adjustmentQuantity: null\n          });\n          request.set('locationsAffected', [{\n            name: inventoryLocation.get('locationName'),\n            quantity: request.get('quantity')\n          }]);\n          request.get('inventoryItem').then((function () {\n            // Make sure relationships are resolved before saving\n            this._saveRequest(request);\n          }).bind(this));\n        }).bind(this));\n      },\n\n      updatePurchase: function updatePurchase(purchase, updateQuantity) {\n        if (updateQuantity) {\n          this.get('model').updateQuantity();\n          this.send('update', true);\n        }\n        this.send('closeModal');\n      }\n    },\n\n    _completeBeforeUpdate: function _completeBeforeUpdate(friendlyId) {\n      var promises = [];\n      var model = this.get('model');\n      var newPurchase = model.getProperties('aisleLocation', 'dateReceived', 'purchaseCost', 'lotNumber', 'expirationDate', 'giftInKind', 'invoiceNo', 'location', 'originalQuantity', 'quantityGroups', 'vendor', 'vendorItemNo');\n      var quantity = this.get('model.originalQuantity');\n      if (!_ember['default'].isEmpty(quantity)) {\n        newPurchase.currentQuantity = quantity;\n        newPurchase.inventoryItem = this.get('model.id');\n        var purchase = this.get('store').createRecord('inv-purchase', newPurchase);\n        promises.push(purchase.save());\n        this.get('model.purchases').addObject(purchase);\n        promises.push(this.newPurchaseAdded(this.get('model'), purchase));\n      }\n      model.set('friendlyId', friendlyId);\n      return _ember['default'].RSVP.all(promises, 'All before update done for inventory item');\n    },\n\n    /**\n     * Saves the specified request, then updates the inventory item and closes the modal.\n     */\n    _saveRequest: function _saveRequest(request) {\n      request.set('status', 'Completed');\n      request.set('completedBy', request.getUserName());\n      request.save().then((function () {\n        this.send('update', true);\n        this.send('closeModal');\n        this.getTransactions();\n      }).bind(this));\n    },\n\n    getTransactions: function getTransactions() {\n      var inventoryId = this.get('model.id');\n      this.set('transactions', null);\n      this.store.query('inv-request', {\n        options: {\n          endkey: [inventoryId, 'Completed', 0],\n          startkey: [inventoryId, 'Completed', 9999999999999],\n          descending: true\n        },\n        mapReduce: 'inventory_request_by_item'\n      }).then((function (transactions) {\n        this.set('transactions', transactions);\n      }).bind(this));\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var _this = this;\n\n      if (this.get('model.isNew')) {\n        var _ret = (function () {\n          var model = _this.get('model');\n          return {\n            v: model.validate().then(function () {\n              if (model.get('isValid')) {\n                _this.set('savingNewItem', true);\n                return _this.generateFriendlyId('inventory').then(function (friendlyId) {\n                  return _this._completeBeforeUpdate(friendlyId);\n                });\n              } else {\n                throw Error('invalid model');\n              }\n            })['catch'](function () {\n              _this.send('showDisabledDialog');\n            })\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      } else {\n        return _ember['default'].RSVP.Promise.resolve();\n      }\n    },\n\n    afterUpdate: function afterUpdate() {\n      var afterUpdateAction = null;\n      if (this.get('savingNewItem')) {\n        afterUpdateAction = 'editNewItem';\n        this.set('savingNewItem', false);\n      }\n      this.displayAlert('Inventory Item Saved', 'The inventory item has been saved.', afterUpdateAction);\n    }\n  });\n});","define('hospitalrun/tests/inventory/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n', 'hospitalrun/mixins/inventory-id'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n, _hospitalrunMixinsInventoryId) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsInventoryId['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('inventory.labels.editItem'),\n    modelName: 'inventory',\n    newTitle: (0, _emberI18n.translationMacro)('inventory.labels.newItem'),\n\n    actions: {\n      adjustItems: function adjustItems(inventoryLocation) {\n        this.controller.send('adjustItems', inventoryLocation);\n      },\n\n      doneFulfillRequest: function doneFulfillRequest() {\n        this.controller.getTransactions();\n      },\n\n      editNewItem: function editNewItem() {\n        this.controller.send('editNewItem');\n      },\n\n      transferItems: function transferItems(inventoryLocation) {\n        this.controller.send('transferItems', inventoryLocation);\n      },\n\n      updatePurchase: function updatePurchase(purchase, updateQuantity) {\n        this.controller.send('updatePurchase', purchase, updateQuantity);\n      }\n    },\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        dateReceived: new Date(),\n        quantityGroups: []\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      controller.getTransactions();\n    }\n  });\n});","define('hospitalrun/tests/inventory/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/index/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    canAdd: (function () {\n      return this.currentUserCan('add_inventory_request');\n    }).property(),\n\n    canFulfill: (function () {\n      return this.currentUserCan('fulfill_inventory');\n    }).property(),\n\n    currentUserName: computed('', function () {\n      return this.getUserName();\n    })\n  });\n});","define('hospitalrun/tests/inventory/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    modelName: 'inv-request',\n    newButtonAction: (function () {\n      if (this.currentUserCan('add_inventory_request')) {\n        return 'newRequest';\n      } else {\n        return null;\n      }\n    }).property(),\n    newButtonText: (0, _emberI18n.translationMacro)('buttons.newRequestPlus'),\n    pageTitle: (0, _emberI18n.translationMacro)('navigation.subnav.requests'),\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var itemId = this._getPouchIdFromItem(item);\n      return ['Requested', null, itemId];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var maxValue = this.get('maxValue');\n      return {\n        options: {\n          startkey: ['Requested', null, null],\n          endkey: ['Requested', maxValue, maxValue]\n        },\n        mapReduce: 'inventory_request_by_status'\n      };\n    },\n\n    actions: {\n      fulfill: function fulfill(item) {\n        item.set('dateCompleted', new Date());\n        this.transitionTo('inventory.request', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/listing/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    canAddItem: (function () {\n      return this.currentUserCan('add_inventory_item');\n    }).property(),\n\n    canAddPurchase: (function () {\n      return this.currentUserCan('add_inventory_purchase');\n    }).property(),\n\n    canDeleteItem: (function () {\n      return this.currentUserCan('delete_inventory_item');\n    }).property(),\n\n    startKey: []\n  });\n});","define('hospitalrun/tests/inventory/listing/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/listing/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/listing/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/listing/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    modelName: 'inventory',\n    newButtonAction: (function () {\n      if (this.currentUserCan('add_inventory_item')) {\n        return 'newItem';\n      } else {\n        return null;\n      }\n    }).property(),\n    newButtonText: (0, _emberI18n.translationMacro)('buttons.newItem'),\n    pageTitle: (0, _emberI18n.translationMacro)('inventory.labels.items'),\n\n    _modelQueryParams: function _modelQueryParams() {\n      return {\n        mapReduce: 'inventory_by_name'\n      };\n    },\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var inventoryId = this._getPouchIdFromItem(item);\n      return [item.get('name'), inventoryId];\n    }\n\n  });\n});","define('hospitalrun/tests/inventory/listing/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/listing/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/listing/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/purchase/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/unit-types'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUnitTypes) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUnitTypes['default'], {\n    inventoryController: _ember['default'].inject.controller('inventory'),\n    cancelAction: 'closeModal',\n\n    canEditQuantity: (function () {\n      var originalQuantity = this.get('model.originalQuantity');\n      var currentQuantity = this.get('model.currentQuantity');\n      if (currentQuantity < originalQuantity) {\n        return false;\n      }\n      return true;\n    }).property('model.currentQuantity', 'model.originalQuantity'),\n\n    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),\n    inventoryUnitList: _ember['default'].computed.alias('inventoryController.inventoryUnitList.value'),\n    vendorList: _ember['default'].computed.alias('inventoryController.vendorList'),\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'vendorList', // Name of property containing lookup list\n      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'vendor_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    newPurchase: false,\n\n    updateQuantity: false,\n\n    updateCapability: 'add_inventory_purchase',\n\n    title: (function () {\n      var i18n = this.get('i18n');\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return i18n.t('inventory.titles.addPurchase');\n      }\n      return i18n.t('inventory.titles.editPurchase');\n    }).property('model.isNew'),\n\n    beforeUpdate: function beforeUpdate() {\n      var isNew = this.get('model.isNew');\n      var changedAttributes = this.get('model').changedAttributes();\n      if (changedAttributes.originalQuantity) {\n        this.set('model.currentQuantity', this.get('model.originalQuantity'));\n        if (!isNew) {\n          this.set('updateQuantity', true);\n        }\n      }\n      if (isNew) {\n        this.set('newPurchase', true);\n      }\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      if (this.get('newPurchase')) {\n        this.send('addPurchase', record);\n      } else {\n        this.send('updatePurchase', record, true);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/purchase/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/purchase/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/purchase/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/quick-add/controller', ['exports', 'hospitalrun/inventory/edit/controller', 'ember-i18n'], function (exports, _hospitalrunInventoryEditController, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunInventoryEditController['default'].extend({\n    title: (0, _emberI18n.translationMacro)('inventory.titles.inventoryItem'),\n\n    updateCapability: 'add_inventory_item',\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('model.skipSavePurchase')) {\n        this.set('model.quantity', null);\n      }\n      return this._super();\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      this.send('addedNewInventoryItem', record);\n    }\n  });\n});","define('hospitalrun/tests/inventory/quick-add/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/quick-add/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/quick-add/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/rank-select/component', ['exports', 'ember', 'hospitalrun/utils/select-values', 'ember-computed'], function (exports, _ember, _hospitalrunUtilsSelectValues, _emberComputed) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    rankOptions: [],\n    prompt: ' ',\n    'class': 'col-sm-2 test-inv-rank',\n\n    options: (0, _emberComputed['default'])('rankOptions', function () {\n      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('rankOptions'));\n    }),\n\n    init: function init() {\n      this._super.apply(this, arguments);\n\n      // set available options\n      this.set('rankOptions', _ember['default'].A(['A', 'B', 'C']));\n    }\n  });\n});","define('hospitalrun/tests/inventory/rank-select/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/rank-select/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/rank-select/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/reports/controller', ['exports', 'hospitalrun/controllers/abstract-report-controller', 'ember', 'hospitalrun/mixins/inventory-adjustment-types', 'hospitalrun/mixins/location-name', 'hospitalrun/mixins/modal-helper', 'moment', 'hospitalrun/mixins/number-format', 'hospitalrun/utils/select-values'], function (exports, _hospitalrunControllersAbstractReportController, _ember, _hospitalrunMixinsInventoryAdjustmentTypes, _hospitalrunMixinsLocationName, _hospitalrunMixinsModalHelper, _moment, _hospitalrunMixinsNumberFormat, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractReportController['default'].extend(_hospitalrunMixinsLocationName['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsInventoryAdjustmentTypes['default'], {\n    inventoryController: _ember['default'].inject.controller('inventory'),\n    effectiveDate: null,\n    endDate: null,\n    expenseCategories: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return [i18n.t('inventory.labels.inventoryConsumed'), i18n.t('inventory.labels.giftUsage'), i18n.t('inventory.labels.inventoryObsolence')];\n    }),\n    expenseMap: null,\n    filterLocation: null,\n    grandCost: 0,\n    grandQuantity: 0,\n    locationSummary: null,\n    reportType: 'daysLeft',\n    startDate: null,\n\n    database: _ember['default'].inject.service(),\n    warehouseList: _ember['default'].computed.map('inventoryController.warehouseList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    reportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        date: {\n          label: i18n.t('labels.date'),\n          include: true,\n          property: 'date'\n        },\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'inventoryItem.friendlyId'\n        },\n        name: {\n          label: i18n.t('inventory.labels.name'),\n          include: true,\n          property: 'inventoryItem.name'\n        },\n        transactionType: {\n          label: i18n.t('inventory.labels.adjustmentType'),\n          include: false,\n          property: 'transactionType'\n        },\n        expenseAccount: {\n          label: i18n.t('inventory.labels.expense'),\n          include: false,\n          property: 'expenseAccount'\n        },\n        description: {\n          label: i18n.t('labels.description'),\n          include: false,\n          property: 'inventoryItem.description'\n        },\n        type: {\n          label: i18n.t('labels.type'),\n          include: true,\n          property: 'inventoryItem.inventoryType'\n        },\n        xref: {\n          label: i18n.t('inventory.labels.crossReference'),\n          include: false,\n          property: 'inventoryItem.crossReference'\n        },\n        reorder: {\n          label: i18n.t('inventory.labels.reorderPoint'),\n          include: false,\n          property: 'inventoryItem.reorderPoint',\n          format: '_numberFormat'\n        },\n        price: {\n          label: i18n.t('inventory.labels.salePricePerUnit'),\n          include: false,\n          property: 'inventoryItem.price',\n          format: '_numberFormat'\n        },\n        quantity: {\n          label: i18n.t('labels.quantity'),\n          include: true,\n          property: 'quantity',\n          format: '_numberFormat'\n        },\n        consumedPerDay: {\n          label: i18n.t('inventory.labels.consumptionRate'),\n          include: false,\n          property: 'consumedPerDay'\n        },\n        daysLeft: {\n          label: i18n.t('inventory.labels.daysLeft'),\n          include: false,\n          property: 'daysLeft'\n        },\n        unit: {\n          label: i18n.t('inventory.labels.distributionUnit'),\n          include: true,\n          property: 'inventoryItem.distributionUnit'\n        },\n        unitcost: {\n          label: i18n.t('inventory.labels.unitCost'),\n          include: true,\n          property: 'unitCost',\n          format: '_numberFormat'\n        },\n        total: {\n          label: i18n.t('inventory.labels.totalCost'),\n          include: true,\n          property: 'totalCost',\n          format: '_numberFormat'\n        },\n        gift: {\n          label: i18n.t('inventory.labels.gift'),\n          include: true,\n          property: 'giftInKind'\n        },\n        locations: {\n          label: i18n.t('inventory.labels.locations'),\n          include: true,\n          property: 'locations',\n          format: '_addLocationColumn'\n        },\n        aisle: {\n          label: i18n.t('inventory.labels.aisle'),\n          include: false,\n          property: 'locations',\n          format: '_addAisleColumn'\n        },\n        vendor: {\n          label: i18n.t('inventory.labels.vendor'),\n          include: false,\n          property: 'vendors'\n        }\n      };\n    }),\n    reportTypes: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return [{\n        name: i18n.t('inventory.reports.daysSupply'),\n        value: 'daysLeft'\n      }, {\n        name: i18n.t('inventory.reports.adjustment'),\n        value: 'detailedAdjustment'\n      }, {\n        name: i18n.t('inventory.reports.purchaseDetail'),\n        value: 'detailedPurchase'\n      }, {\n        name: i18n.t('inventory.reports.stockUsageDetail'),\n        value: 'detailedUsage'\n      }, {\n        name: i18n.t('inventory.reports.stockTransferDetail'),\n        value: 'detailedTransfer'\n      }, {\n        name: i18n.t('inventory.reports.expenseDetail'),\n        value: 'detailedExpense'\n      }, {\n        name: i18n.t('inventory.reports.expiration'),\n        value: 'expiration'\n      }, {\n        name: i18n.t('inventory.reports.invLocation'),\n        value: 'byLocation'\n      }, {\n        name: i18n.t('inventory.reports.invValuation'),\n        value: 'valuation'\n      }, {\n        name: i18n.t('inventory.reports.expenseSum'),\n        value: 'summaryExpense'\n      }, {\n        name: i18n.t('inventory.reports.purchaseSum'),\n        value: 'summaryPurchase'\n      }, {\n        name: i18n.t('inventory.reports.stockUsageSum'),\n        value: 'summaryUsage'\n      }, {\n        name: i18n.t('inventory.reports.stockTransferSum'),\n        value: 'summaryTransfer'\n      }, {\n        name: i18n.t('inventory.reports.finance'),\n        value: 'summaryFinance'\n      }];\n    }),\n\n    hideLocationFilter: (function () {\n      var reportType = this.get('reportType');\n      return reportType === 'summaryFinance';\n    }).property('reportType'),\n\n    includeDate: (function () {\n      var reportType = this.get('reportType');\n      if (!_ember['default'].isEmpty(reportType) && reportType.indexOf('detailed') === 0) {\n        this.set('reportColumns.date.include', true);\n        return true;\n      } else {\n        this.set('reportColumns.date.include', false);\n        return false;\n      }\n    }).property('reportType'),\n\n    includeDaysLeft: (function () {\n      var reportType = this.get('reportType');\n      if (reportType === 'daysLeft') {\n        this.set('reportColumns.consumedPerDay.include', true);\n        this.set('reportColumns.daysLeft.include', true);\n        return true;\n      } else {\n        this.set('reportColumns.consumedPerDay.include', false);\n        this.set('reportColumns.daysLeft.include', false);\n        return false;\n      }\n    }).property('reportType'),\n\n    includeCostFields: (function () {\n      var reportType = this.get('reportType');\n      if (reportType === 'detailedTransfer' || reportType === 'summaryTransfer' || reportType === 'daysLeft') {\n        this.set('reportColumns.total.include', false);\n        this.set('reportColumns.unitcost.include', false);\n        return false;\n      } else {\n        this.set('reportColumns.total.include', true);\n        this.set('reportColumns.unitcost.include', true);\n        return true;\n      }\n    }).property('reportType'),\n\n    includeExpenseAccount: (function () {\n      var reportType = this.get('reportType');\n      switch (reportType) {\n        case 'detailedAdjustment':\n        case 'detailedTransfer':\n        case 'detailedUsage':\n          {\n            return true;\n          }\n        case 'detailedExpense':\n          {\n            this.set('reportColumns.expenseAccount.include', true);\n            return true;\n          }\n        default:\n          {\n            this.set('reportColumns.expenseAccount.include', false);\n            return false;\n          }\n      }\n    }).property('reportType'),\n\n    includeTransactionType: (function () {\n      var reportType = this.get('reportType');\n      if (reportType === 'detailedAdjustment') {\n        this.set('reportColumns.transactionType.include', true);\n        return true;\n      } else {\n        this.set('reportColumns.transactionType.include', false);\n        return false;\n      }\n    }).property('reportType'),\n\n    showEffectiveDate: (function () {\n      var reportType = this.get('reportType');\n      if (reportType === 'valuation' || reportType === 'byLocation') {\n        this.set('startDate', null);\n        if (_ember['default'].isEmpty(this.get('endDate'))) {\n          this.set('endDate', new Date());\n        }\n        return true;\n      } else {\n        if (_ember['default'].isEmpty(this.get('startDate'))) {\n          this.set('startDate', new Date());\n        }\n        return false;\n      }\n    }).property('reportType'),\n\n    useFieldPicker: (function () {\n      var reportType = this.get('reportType');\n      return reportType !== 'expiration' && reportType !== 'summaryFinance';\n    }).property('reportType'),\n\n    _addAisleColumn: function _addAisleColumn(locations) {\n      if (!_ember['default'].isEmpty(locations)) {\n        return locations.map(function (location) {\n          if (location.name.indexOf(':') > -1) {\n            return location.name.split(':')[1];\n          }\n        });\n      }\n    },\n\n    _addLocationColumn: function _addLocationColumn(locations) {\n      var _this = this;\n\n      if (!_ember['default'].isEmpty(locations)) {\n        var _ret = (function () {\n          var returnLocations = [];\n          locations.forEach((function (location) {\n            var formattedName = undefined;\n            if (location.name.indexOf('From:') === 0) {\n              formattedName = location.name;\n            } else {\n              formattedName = this._getWarehouseLocationName(location.name);\n            }\n            if (!returnLocations.includes(formattedName)) {\n              returnLocations.push(formattedName);\n            }\n          }).bind(_this));\n          return {\n            v: returnLocations\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n    },\n\n    _addReportRow: function _addReportRow(row, skipNumberFormatting, reportColumns, rowAction) {\n      if (_ember['default'].isEmpty(rowAction) && !_ember['default'].isEmpty(row.inventoryItem) && !_ember['default'].isEmpty(row.inventoryItem.id)) {\n        rowAction = {\n          action: 'viewInventory',\n          model: row.inventoryItem.id\n        };\n      }\n      this._super(row, skipNumberFormatting, reportColumns, rowAction);\n    },\n\n    _addTotalsRow: function _addTotalsRow(label, summaryCost, summaryQuantity) {\n      if (summaryQuantity > 0) {\n        this._addReportRow({\n          totalCost: label + this._numberFormat(summaryCost),\n          quantity: label + this._numberFormat(summaryQuantity),\n          unitCost: label + this._numberFormat(summaryCost / summaryQuantity)\n        }, true);\n      }\n    },\n\n    /**\n     * Adjust the specified location by the specified quantity\n     * @param {array} locations the list of locations to adjust from\n     * @param {string} locationName the name of the location to adjust\n     * @param {integer} quantity the quantity to adjust.\n     * @param {boolean} increment boolean indicating if the adjustment is an increment; or false if decrement.\n     */\n    _adjustLocation: function _adjustLocation(locations, locationName, quantity, increment) {\n      var locationToUpdate = locations.findBy('name', locationName);\n      if (_ember['default'].isEmpty(locationToUpdate)) {\n        locationToUpdate = {\n          name: locationName,\n          quantity: 0\n        };\n        locations.push(locationToUpdate);\n      }\n      if (increment) {\n        locationToUpdate.quantity += quantity;\n      } else {\n        locationToUpdate.quantity -= quantity;\n      }\n    },\n\n    /**\n     * Adjust the specified purchase by the specified quantity.\n     * @param {array} purchases the list of purchases to adjust from.\n     * @param {string} purchaseId the id of the purchase to adjust.\n     * @param {integer} quantity the quantity to adjust.\n     * @param {boolean} increment boolean indicating if the adjustment is an increment; or false if decrement.\n     */\n    _adjustPurchase: function _adjustPurchase(purchases, purchaseId, quantity, increment) {\n      var purchaseToAdjust = purchases.findBy('id', purchaseId);\n      if (!_ember['default'].isEmpty(purchaseToAdjust)) {\n        var calculatedQuantity = purchaseToAdjust.calculatedQuantity;\n\n        if (increment) {\n          calculatedQuantity += quantity;\n        } else {\n          calculatedQuantity -= quantity;\n        }\n        purchaseToAdjust.calculatedQuantity = calculatedQuantity;\n      }\n    },\n\n    _calculateCosts: function _calculateCosts(inventoryPurchases, row) {\n      // Calculate quantity and cost per unit for the row\n      if (!_ember['default'].isEmpty(inventoryPurchases)) {\n        inventoryPurchases.forEach((function (purchase) {\n          var costPerUnit = this._calculateCostPerUnit(purchase);\n          var quantity = purchase.calculatedQuantity;\n          row.quantity += purchase.calculatedQuantity;\n          row.totalCost += quantity * costPerUnit;\n        }).bind(this));\n      }\n      if (row.totalCost === 0 || row.quantity === 0) {\n        row.unitCost = 0;\n      } else {\n        row.unitCost = row.totalCost / row.quantity;\n      }\n      return row;\n    },\n\n    _calculateUsage: function _calculateUsage(inventoryPurchases, row) {\n      // Calculate quantity and cost per unit for the row\n      if (!_ember['default'].isEmpty(inventoryPurchases)) {\n        inventoryPurchases.forEach((function (purchase) {\n          var costPerUnit = this._calculateCostPerUnit(purchase);\n          var quantity = purchase.calculatedQuantity;\n          row.quantity -= purchase.calculatedQuantity;\n          row.totalCost -= quantity * costPerUnit;\n        }).bind(this));\n      }\n      if (row.totalCost === 0 || row.quantity === 0) {\n        row.unitCost = 0;\n      } else {\n        row.unitCost = row.totalCost / row.quantity;\n      }\n      return row;\n    },\n\n    _calculateCostPerUnit: function _calculateCostPerUnit(purchase) {\n      var purchaseCost = purchase.purchaseCost;\n\n      var quantity = parseInt(purchase.originalQuantity);\n      if (_ember['default'].isEmpty(purchaseCost) || _ember['default'].isEmpty(quantity)) {\n        return 0;\n      }\n      return Number((purchaseCost / quantity).toFixed(2));\n    },\n\n    _findInventoryItems: function _findInventoryItems(queryParams, view, inventoryList, childName) {\n      if (_ember['default'].isEmpty(inventoryList)) {\n        inventoryList = {};\n      }\n      var database = this.get('database');\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        database.queryMainDB(queryParams, view).then((function (inventoryChildren) {\n          var inventoryKeys = Object.keys(inventoryList);\n          var inventoryIds = [];\n          if (!_ember['default'].isEmpty(inventoryChildren.rows)) {\n            inventoryChildren.rows.forEach(function (child) {\n              if (child.doc.inventoryItem && !inventoryKeys.includes(child.doc.inventoryItem)) {\n                inventoryIds.push(database.getPouchId(child.doc.inventoryItem, 'inventory'));\n                inventoryKeys.push(child.doc.inventoryItem);\n              }\n            });\n          }\n          this._getInventoryItems(inventoryIds, inventoryList).then(function (inventoryMap) {\n            // Link inventory children to inventory items\n            inventoryChildren.rows.forEach(function (child) {\n              var childItem = inventoryMap[child.doc.inventoryItem];\n              if (!_ember['default'].isEmpty(childItem)) {\n                if (childName !== 'purchaseObjects' || childItem.purchases.includes(child.doc.id)) {\n                  var itemChildren = childItem[childName];\n                  if (_ember['default'].isEmpty(itemChildren)) {\n                    itemChildren = [];\n                  }\n                  itemChildren.push(child.doc);\n                  childItem[childName] = itemChildren;\n                }\n              }\n            });\n            resolve(inventoryMap);\n          }, reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    _findInventoryItemsByPurchase: function _findInventoryItemsByPurchase(reportTimes, inventoryMap) {\n      return this._findInventoryItems({\n        startkey: [reportTimes.startTime, 'invPurchase_'],\n        endkey: [reportTimes.endTime, 'invPurchase_￿'],\n        include_docs: true\n      }, 'inventory_purchase_by_date_received', inventoryMap, 'purchaseObjects');\n    },\n\n    _findInventoryItemsByRequest: function _findInventoryItemsByRequest(reportTimes, inventoryMap) {\n      return this._findInventoryItems({\n        startkey: ['Completed', reportTimes.startTime, 'invRequest_'],\n        endkey: ['Completed', reportTimes.endTime, 'invRequest_￿'],\n        include_docs: true\n      }, 'inventory_request_by_status', inventoryMap, 'requestObjects');\n    },\n\n    _finishExpenseReport: function _finishExpenseReport(reportType) {\n      var expenseCategories = this.get('expenseCategories');\n      var expenseMap = this.get('expenseMap');\n      var i18n = this.get('i18n');\n      expenseCategories.forEach((function (category) {\n        var categoryTotal = 0;\n        var expenseAccountName = undefined,\n            totalLabel = undefined;\n        this._addReportRow({\n          inventoryItem: {\n            name: i18n.t('inventory.reports.rows.expensesFor') + category\n          }\n        });\n        expenseMap[category].expenseAccounts.forEach((function (expenseAccount) {\n          if (reportType === 'detailedExpense') {\n            expenseAccount.reportRows.forEach((function (row) {\n              this._addReportRow(row);\n            }).bind(this));\n          }\n          if (_ember['default'].isEmpty(expenseAccount.name)) {\n            expenseAccountName = i18n.t('inventory.reports.rows.noAccount');\n          } else {\n            expenseAccountName = expenseAccount.name;\n          }\n          totalLabel = i18n.t('inventory.reports.rows.subtotalFor', { category: category, account: expenseAccountName });\n          this._addReportRow({\n            totalCost: totalLabel + this._numberFormat(expenseAccount.total)\n          }, true);\n          categoryTotal += expenseAccount.total;\n        }).bind(this));\n        totalLabel = i18n.t('inventory.reports.rows.totalFor', { 'var': category });\n        this._addReportRow({\n          totalCost: totalLabel + this._numberFormat(categoryTotal)\n        }, true);\n        this.incrementProperty('grandCost', categoryTotal);\n      }).bind(this));\n      this._addReportRow({\n        totalCost: i18n.t('inventory.reports.rows.total') + this._numberFormat(this.get('grandCost'))\n      }, true);\n    },\n\n    _finishLocationReport: function _finishLocationReport() {\n      var currentLocation = '';\n      var locationCost = 0;\n      var locationSummary = this.get('locationSummary');\n      var parentLocation = '';\n      var parentCount = 0;\n      var i18n = this.get('i18n');\n      locationSummary = locationSummary.sortBy('name');\n      locationSummary.forEach((function (location) {\n        parentLocation = this._getWarehouseLocationName(location.name);\n        var label = i18n.t('inventory.reports.rows.totalFor', { 'var': currentLocation });\n        if (currentLocation !== parentLocation) {\n          this._addTotalsRow(label, locationCost, parentCount);\n          parentCount = 0;\n          locationCost = 0;\n          currentLocation = parentLocation;\n        }\n        if (this._includeLocation(parentLocation)) {\n          for (var id in location.items) {\n            if (location.items[id].quantity > 0) {\n              this._addReportRow({\n                giftInKind: location.items[id].giftInKind,\n                inventoryItem: location.items[id].item,\n                quantity: location.items[id].quantity,\n                locations: [{\n                  name: location.name\n                }],\n                totalCost: location.items[id].totalCost,\n                unitCost: location.items[id].unitCost\n              });\n              parentCount += this._getValidNumber(location.items[id].quantity);\n              locationCost += this._getValidNumber(location.items[id].totalCost);\n              this.incrementProperty('grandCost', this._getValidNumber(location.items[id].totalCost));\n              this.incrementProperty('grandQuantity', this._getValidNumber(location.items[id].quantity));\n            }\n          }\n        }\n      }).bind(this));\n      if (parentCount > 0) {\n        this._addTotalsRow(i18n.t('inventory.reports.rows.totalFor', { 'var': parentLocation }), locationCost, parentCount);\n      }\n    },\n\n    _generateExpirationReport: function _generateExpirationReport() {\n      var grandQuantity = 0;\n      var database = this.get('database');\n      var reportRows = this.get('reportRows');\n      var reportTimes = this._getDateQueryParams();\n      database.queryMainDB({\n        startkey: [reportTimes.startTime, 'invPurchase_'],\n        endkey: [reportTimes.endTime, 'invPurchase_￿'],\n        include_docs: true\n      }, 'inventory_purchase_by_expiration_date').then((function (inventoryPurchases) {\n        var purchaseDocs = [];\n        var inventoryIds = [];\n\n        inventoryPurchases.rows.forEach((function (purchase) {\n          if (purchase.doc.currentQuantity > 0 && !_ember['default'].isEmpty(purchase.doc.expirationDate)) {\n            purchaseDocs.push(purchase.doc);\n            inventoryIds.push(database.getPouchId(purchase.doc.inventoryItem, 'inventory'));\n          }\n        }).bind(this));\n        this._getInventoryItems(inventoryIds).then((function (inventoryMap) {\n          var i18n = this.get('i18n');\n          purchaseDocs.forEach((function (purchase) {\n            var currentQuantity = purchase.currentQuantity;\n\n            var expirationDate = new Date(purchase.expirationDate);\n            var inventoryItem = inventoryMap[purchase.inventoryItem];\n            if (inventoryItem && this._includeLocation(purchase.location)) {\n              reportRows.addObject([inventoryItem.friendlyId, inventoryItem.name, currentQuantity, inventoryItem.distributionUnit, (0, _moment['default'])(expirationDate).format('l'), this.formatLocationName(purchase.location, purchase.aisleLocation)]);\n              grandQuantity += currentQuantity;\n            }\n          }).bind(this));\n          reportRows.addObject(['', '', i18n.t('inventory.reports.rows.total') + grandQuantity, '', '']);\n          this.set('showReportResults', true);\n          this.set('reportHeaders', [i18n.t('labels.id'), i18n.t('labels.name'), i18n.t('inventory.labels.currentQuantity'), i18n.t('inventory.labels.distributionUnit'), i18n.t('inventory.labels.expirationDate'), i18n.t('inventory.labels.location')]);\n          this._generateExport();\n          this._setReportTitle();\n          this.closeProgressModal();\n        }).bind(this));\n      }).bind(this));\n    },\n\n    _generateFinancialSummaryReport: function _generateFinancialSummaryReport() {\n      var reportTimes = this._getDateQueryParams();\n      /*\n      step 1: find the valuation as of start date,\n      meaning that we need to exchange the end date to be the start date and then tabulate the value\n      */\n      this._calculateBeginningBalance(reportTimes).then((function (beginningBalance) {\n        this._generateSummaries(reportTimes).then((function (inventoryAdjustment) {\n          var i = this._numberFormat(beginningBalance + inventoryAdjustment);\n          var i18n = this.get('i18n');\n          if (beginningBalance + inventoryAdjustment < 0) {\n            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balanceEnd'), '', '(' + i + ')']);\n          } else {\n            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balanceEnd'), '', i]);\n          }\n          this.set('showReportResults', true);\n          this.set('reportHeaders', [i18n.t('inventory.reports.rows.category'), i18n.t('labels.type'), i18n.t('inventory.labels.total')]);\n          this._generateExport();\n          this._setReportTitle();\n          this.closeProgressModal();\n        }).bind(this), (function (err) {\n          this._notifyReportError(this.get('i18n').t('inventory.reports.rows.errInFinSum') + err);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    _generateSummaries: function _generateSummaries(reportTimes) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var adjustedValue = 0;\n        var i18n = this.get('i18n');\n        /*\n        cycle through each purchase and request from the beginning of time until startTime\n        to determine the total value of inventory as of that date/time.\n        */\n        this._findInventoryItemsByRequest(reportTimes, {}).then((function (inventoryMap) {\n          this._findInventoryItemsByPurchase(reportTimes, inventoryMap).then((function (inventoryMap) {\n            var purchaseSummary = {};\n            var consumed = {};\n            var gikConsumed = {};\n            var adjustments = {};\n            this.get('adjustmentTypes').forEach(function (adjustmentType) {\n              adjustments[adjustmentType.type] = [];\n            });\n            Object.keys(inventoryMap).forEach((function (key) {\n              if (_ember['default'].isEmpty(key) || _ember['default'].isEmpty(inventoryMap[key])) {\n                // If the inventory item has been deleted, ignore it.\n                return;\n              }\n              var item = inventoryMap[key];\n\n              if (!_ember['default'].isEmpty(item.purchaseObjects)) {\n                item.purchaseObjects.forEach((function (purchase) {\n                  purchaseSummary[item.inventoryType] = this._getValidNumber(purchaseSummary[item.inventoryType]) + this._getValidNumber(purchase.purchaseCost);\n                }).bind(this));\n              }\n              if (!_ember['default'].isEmpty(item.requestObjects)) {\n                item.requestObjects.forEach((function (request) {\n                  // we have three categories here: consumed, gik consumed, and adjustments\n                  if (request.adjustPurchases) {\n                    if (request.transactionType === 'Fulfillment') {\n                      if (request.giftInKind) {\n                        gikConsumed[item.inventoryType] = this._getValidNumber(gikConsumed[item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);\n                      } else {\n                        consumed[item.inventoryType] = this._getValidNumber(consumed[item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);\n                      }\n                    } else {\n                      adjustments[request.transactionType][item.inventoryType] = this._getValidNumber(adjustments[request.transactionType][item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);\n                    }\n                  }\n                }).bind(this));\n              }\n            }).bind(this));\n            // write the purchase rows\n            if (Object.keys(purchaseSummary).length > 0) {\n              var purchaseTotal = 0;\n              this.get('reportRows').addObject([i18n.t('inventory.labels.purchases'), '', '']);\n              Object.keys(purchaseSummary).forEach((function (key) {\n                var i = this._getValidNumber(purchaseSummary[key]);\n                purchaseTotal += i;\n                this.get('reportRows').addObject(['', key, this._numberFormat(i)]);\n              }).bind(this));\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.totalPurchases'), '', this._numberFormat(purchaseTotal)]);\n              adjustedValue += purchaseTotal;\n            }\n            // write the consumed rows\n            if (Object.keys(consumed).length > 0 || Object.keys(gikConsumed).length > 0) {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumed'), '', '']);\n              var overallValue = 0;\n              if (Object.keys(consumed).length > 0) {\n                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedPuchases'), '', '']);\n                var consumedTotal = 0;\n                Object.keys(consumed).forEach((function (key) {\n                  var i = this._getValidNumber(consumed[key]);\n                  consumedTotal += i;\n                  this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);\n                }).bind(this));\n                overallValue += consumedTotal;\n                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedPurchasesTotal'), '', '(' + this._numberFormat(consumedTotal) + ')']);\n              }\n              if (Object.keys(gikConsumed).length > 0) {\n                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedGik'), '', '']);\n                var gikTotal = 0;\n                Object.keys(gikConsumed).forEach((function (key) {\n                  var i = this._getValidNumber(gikConsumed[key]);\n                  gikTotal += i;\n                  this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);\n                }).bind(this));\n                overallValue += gikTotal;\n                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedGikTotal'), '', '(' + this._numberFormat(gikTotal) + ')']);\n              }\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedTotal'), '', '(' + this._numberFormat(overallValue) + ')']);\n              adjustedValue -= overallValue;\n            }\n            // write the adjustment rows\n            var adjustmentTotal = 0;\n            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustments'), '', '']);\n            Object.keys(adjustments).forEach((function (adjustmentT) {\n              if (Object.keys(adjustments[adjustmentT]).length > 0) {\n                this.get('reportRows').addObject([adjustmentT, '', '']);\n                Object.keys(adjustments[adjustmentT]).forEach((function (key) {\n                  var i = this._getValidNumber(adjustments[adjustmentT][key]);\n                  if (adjustmentT === 'Adjustment (Add)' || adjustmentT === 'Return') {\n                    adjustmentTotal += i;\n                    this.get('reportRows').addObject(['', key, this._numberFormat(i)]);\n                  } else {\n                    adjustmentTotal -= i;\n                    this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);\n                  }\n                }).bind(this));\n              }\n            }).bind(this));\n            if (adjustmentTotal < 0) {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustmentsTotal'), '', '(' + this._numberFormat(adjustmentTotal) + ')']);\n            } else {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustmentsTotal'), '', this._numberFormat(adjustmentTotal)]);\n            }\n\n            adjustedValue += adjustmentTotal;\n            resolve(adjustedValue);\n          }).bind(this), reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    _calculateBeginningBalance: function _calculateBeginningBalance(reportTimes) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var startingValueReportTimes = {\n          startTime: null,\n          endTime: reportTimes.startTime\n        };\n        var beginningBalance = 0;\n        var i18n = this.get('i18n');\n        /*\n        cycle through each purchase and request from the beginning of time until startTime\n        to determine the total value of inventory as of that date/time.\n        */\n        this._findInventoryItemsByRequest(startingValueReportTimes, {}).then((function (inventoryMap) {\n          this._findInventoryItemsByPurchase(startingValueReportTimes, inventoryMap).then((function (inventoryMap) {\n            Object.keys(inventoryMap).forEach((function (key) {\n              if (_ember['default'].isEmpty(key) || _ember['default'].isEmpty(inventoryMap[key])) {\n                // If the inventory item has been deleted, ignore it.\n                return;\n              }\n              var item = inventoryMap[key];\n              var inventoryPurchases = item.purchaseObjects;\n              var inventoryRequests = item.requestObjects;\n              var row = {\n                inventoryItem: item,\n                quantity: 0,\n                unitCost: 0,\n                totalCost: 0\n              };\n              if (!_ember['default'].isEmpty(inventoryPurchases)) {\n                // Setup intial locations for an inventory item\n                inventoryPurchases.forEach(function (purchase) {\n                  var purchaseQuantity = purchase.originalQuantity;\n                  purchase.calculatedQuantity = purchaseQuantity;\n                });\n              }\n              if (!_ember['default'].isEmpty(inventoryRequests)) {\n                inventoryRequests.forEach((function (request) {\n                  var adjustPurchases = request.adjustPurchases;\n\n                  var increment = false;\n                  var purchases = request.purchasesAffected;\n                  var transactionType = request.transactionType;\n\n                  increment = transactionType === 'Adjustment (Add)' || transactionType === 'Return';\n                  if (adjustPurchases) {\n                    if (!_ember['default'].isEmpty(purchases) && !_ember['default'].isEmpty(inventoryPurchases)) {\n                      // Loop through purchase(s) on request and adjust corresponding inventory purchases\n                      purchases.forEach((function (purchaseInfo) {\n                        this._adjustPurchase(inventoryPurchases, purchaseInfo.id, purchaseInfo.quantity, increment);\n                      }).bind(this));\n                    }\n                  }\n                }).bind(this));\n              }\n              if (!_ember['default'].isEmpty(inventoryPurchases)) {\n                row = this._calculateCosts(inventoryPurchases, row);\n                beginningBalance += this._getValidNumber(row.totalCost);\n              }\n            }).bind(this));\n            if (beginningBalance < 0) {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balanceBegin'), '', '(' + this._numberFormat(beginningBalance) + ')']);\n            } else {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balanceBegin'), '', this._numberFormat(beginningBalance)]);\n            }\n            resolve(beginningBalance);\n          }).bind(this), reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    _generateInventoryReport: function _generateInventoryReport() {\n      this.set('grandCost', 0);\n      this.set('grandQuantity', 0);\n      this.set('locationSummary', []);\n      var dateDiff = undefined;\n      var locationSummary = this.get('locationSummary');\n      var reportType = this.get('reportType');\n      var reportTimes = this._getDateQueryParams();\n      var i18n = this.get('i18n');\n      if (reportType === 'daysLeft') {\n        var endDate = this.get('endDate');\n        var startDate = this.get('startDate');\n        if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {\n          this.closeProgressModal();\n          return;\n        } else {\n          dateDiff = (0, _moment['default'])(endDate).diff(startDate, 'days');\n        }\n      }\n      this._findInventoryItemsByRequest(reportTimes, {}).then((function (inventoryMap) {\n        this._findInventoryItemsByPurchase(reportTimes, inventoryMap).then((function (inventoryMap) {\n          // Loop through each inventory item, looking at the requests and purchases to determine\n          // state of inventory at effective date\n          Object.keys(inventoryMap).forEach((function (key) {\n            if (_ember['default'].isEmpty(inventoryMap[key])) {\n              // If the inventory item has been deleted, ignore it.\n              return;\n            }\n            var item = inventoryMap[key];\n            var inventoryPurchases = item.purchaseObjects;\n            var inventoryRequests = item.requestObjects;\n            var row = {\n              giftInKind: 'N',\n              inventoryItem: item,\n              quantity: 0,\n              unitCost: 0,\n              totalCost: 0,\n              locations: [],\n              vendors: []\n            };\n            if (!_ember['default'].isEmpty(inventoryPurchases)) {\n              // Setup intial locations for an inventory item\n              inventoryPurchases.forEach((function (purchase) {\n                var locationName = this.getDisplayLocationName(purchase.location, purchase.aisleLocation);\n                var purchaseQuantity = purchase.originalQuantity;\n                purchase.calculatedQuantity = purchaseQuantity;\n                if (purchase.giftInKind === true) {\n                  row.giftInKind = 'Y';\n                }\n                if (!_ember['default'].isEmpty(purchase.vendor)) {\n                  if (!row.vendors.includes(purchase.vendor)) {\n                    row.vendors.push(purchase.vendor);\n                  }\n                }\n                this._adjustLocation(row.locations, locationName, purchaseQuantity, true);\n              }).bind(this));\n            }\n\n            if (!_ember['default'].isEmpty(inventoryRequests)) {\n              inventoryRequests.forEach((function (request) {\n                var adjustPurchases = request.adjustPurchases;\n                var transactionType = request.transactionType;\n\n                var increment = false;\n                var locations = request.locationsAffected;\n                var purchases = request.purchasesAffected;\n\n                increment = transactionType === 'Adjustment (Add)' || transactionType === 'Return';\n                if (adjustPurchases) {\n                  if (!_ember['default'].isEmpty(purchases) && !_ember['default'].isEmpty(inventoryPurchases)) {\n                    // Loop through purchase(s) on request and adjust corresponding inventory purchases\n                    purchases.forEach((function (purchaseInfo) {\n                      this._adjustPurchase(inventoryPurchases, purchaseInfo.id, purchaseInfo.quantity, increment);\n                    }).bind(this));\n                  }\n                } else if (transactionType === 'Transfer') {\n                  // Increment the delivery location\n                  var locationName = this.getDisplayLocationName(request.deliveryLocation, request.deliveryAisle);\n                  this._adjustLocation(row.locations, locationName, request.quantity, true);\n                }\n                // Loop through locations to adjust location quantity\n                locations.forEach((function (locationInfo) {\n                  this._adjustLocation(row.locations, locationInfo.name, locationInfo.quantity, increment);\n                }).bind(this));\n              }).bind(this));\n            }\n\n            var summaryCost = 0;\n            var summaryQuantity = 0;\n\n            switch (reportType) {\n              case 'byLocation':\n                {\n                  row.locations.forEach((function (location) {\n                    var locationToUpdate = locationSummary.findBy('name', this._getWarehouseLocationName(location.name));\n                    if (_ember['default'].isEmpty(locationToUpdate)) {\n                      locationToUpdate = _ember['default'].copy(location);\n                      locationToUpdate.items = {};\n                      locationSummary.push(locationToUpdate);\n                    } else {\n                      locationToUpdate.quantity += this._getValidNumber(location.quantity);\n                    }\n                    var costData = this._calculateCosts(inventoryPurchases, {\n                      quantity: 0,\n                      totalCost: 0\n                    });\n                    locationToUpdate.items[item.id] = {\n                      item: item,\n                      quantity: this._getValidNumber(location.quantity),\n                      giftInKind: row.giftInKind,\n                      totalCost: this._getValidNumber(costData.unitCost) * this._getValidNumber(location.quantity),\n                      unitCost: this._getValidNumber(costData.unitCost)\n                    };\n                  }).bind(this));\n                  break;\n                }\n              case 'daysLeft':\n                {\n                  if (!_ember['default'].isEmpty(inventoryRequests) && this._hasIncludedLocation(row.locations)) {\n                    var consumedQuantity = inventoryRequests.reduce((function (previousValue, request) {\n                      if (request.transactionType === 'Fulfillment') {\n                        return previousValue += this._getValidNumber(request.quantity);\n                      } else {\n                        return previousValue;\n                      }\n                    }).bind(this), 0);\n                    row.quantity = this._getValidNumber(item.quantity);\n                    if (consumedQuantity > 0) {\n                      row.consumedPerDay = this._numberFormat(consumedQuantity / dateDiff, true);\n                      row.daysLeft = this._numberFormat(row.quantity / row.consumedPerDay);\n                    } else {\n                      if (consumedQuantity === 0) {\n                        row.consumedPerDay = '0';\n                      } else {\n                        row.consumedPerDay = '?' + consumedQuantity;\n                      }\n                      row.daysLeft = '?';\n                    }\n                    this._addReportRow(row);\n                  }\n                  break;\n                }\n              case 'detailedAdjustment':\n              case 'detailedTransfer':\n              case 'detailedUsage':\n              case 'detailedExpense':\n              case 'summaryExpense':\n                {\n                  if (!_ember['default'].isEmpty(inventoryRequests)) {\n                    inventoryRequests.forEach((function (request) {\n                      var _this2 = this;\n\n                      if (this._includeTransaction(reportType, request.transactionType) && this._hasIncludedLocation(request.locationsAffected)) {\n                        (function () {\n                          var deliveryLocation = _this2.getDisplayLocationName(request.deliveryLocation, request.deliveryAisle);\n                          var locations = [];\n                          var num = _this2._getValidNumber(request.quantity);\n                          var totalCost = _this2._getValidNumber(request.quantity) * _this2._getValidNumber(request.costPerUnit);\n                          locations = request.locationsAffected.map((function (location) {\n                            if (reportType === 'detailedTransfer') {\n                              return {\n                                name: i18n.t('inventory.reports.rows.transfer2', { source: location.name, target: deliveryLocation }).toString()\n                              };\n                            } else {\n                              return {\n                                name: i18n.t('inventory.reports.rows.transfer1', { quantity: num, location: location.name }).toString()\n                              };\n                            }\n                          }).bind(_this2));\n                          var reportRow = {\n                            date: (0, _moment['default'])(new Date(request.dateCompleted)).format('l'),\n                            expenseAccount: request.expenseAccount,\n                            giftInKind: row.giftInKind,\n                            inventoryItem: row.inventoryItem,\n                            quantity: request.quantity,\n                            transactionType: request.transactionType,\n                            locations: locations,\n                            unitCost: request.costPerUnit,\n                            totalCost: totalCost\n                          };\n                          if (reportType === 'detailedExpense' || reportType === 'summaryExpense') {\n                            _this2._updateExpenseMap(request, reportRow);\n                          } else {\n                            _this2._addReportRow(reportRow);\n                            summaryQuantity += _this2._getValidNumber(request.quantity);\n                            summaryCost += _this2._getValidNumber(totalCost);\n                          }\n                        })();\n                      }\n                    }).bind(this));\n                    if (reportType !== 'detailedExpense' && reportType !== 'summaryExpense') {\n                      this._addTotalsRow(i18n.t('inventory.reports.rows.subtotal'), summaryCost, summaryQuantity);\n                      this.incrementProperty('grandCost', summaryCost);\n                      this.incrementProperty('grandQuantity', summaryQuantity);\n                    }\n                  }\n                  break;\n                }\n              case 'summaryTransfer':\n              case 'summaryUsage':\n                {\n                  if (!_ember['default'].isEmpty(inventoryRequests) && this._hasIncludedLocation(row.locations)) {\n                    row.quantity = inventoryRequests.reduce((function (previousValue, request) {\n                      if (this._includeTransaction(reportType, request.transactionType)) {\n                        var totalCost = this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit);\n                        summaryCost += totalCost;\n                        return previousValue += this._getValidNumber(request.quantity);\n                      } else {\n                        return previousValue;\n                      }\n                    }).bind(this), 0);\n                    if (row.quantity > 0) {\n                      row.totalCost = summaryCost;\n                      row.unitCost = summaryCost / row.quantity;\n                      this._addReportRow(row);\n                      this.incrementProperty('grandCost', summaryCost);\n                      this.incrementProperty('grandQuantity', row.quantity);\n                    }\n                  }\n                  break;\n                }\n              case 'detailedPurchase':\n                {\n                  if (!_ember['default'].isEmpty(inventoryPurchases)) {\n                    inventoryPurchases.forEach((function (purchase) {\n                      if (this._includeLocation(purchase.location)) {\n                        var giftInKind = 'N';\n                        if (purchase.giftInKind === true) {\n                          giftInKind = 'Y';\n                        }\n                        this._addReportRow({\n                          date: (0, _moment['default'])(new Date(purchase.dateReceived)).format('l'),\n                          giftInKind: giftInKind,\n                          inventoryItem: row.inventoryItem,\n                          quantity: purchase.originalQuantity,\n                          unitCost: purchase.costPerUnit,\n                          totalCost: purchase.purchaseCost,\n                          locations: [{\n                            name: this.getDisplayLocationName(purchase.location, purchase.aisleLocation)\n                          }]\n                        });\n                        summaryCost += this._getValidNumber(purchase.purchaseCost);\n                        summaryQuantity += this._getValidNumber(purchase.originalQuantity);\n                      }\n                    }).bind(this));\n                    this._addTotalsRow(i18n.t('inventory.reports.rows.subtotal'), summaryCost, summaryQuantity);\n                    this.incrementProperty('grandCost', summaryCost);\n                    this.incrementProperty('grandQuantity', summaryQuantity);\n                  }\n                  break;\n                }\n              case 'summaryPurchase':\n                {\n                  if (!_ember['default'].isEmpty(inventoryPurchases)) {\n                    row.locations = [];\n                    row.quantity = inventoryPurchases.reduce((function (previousValue, purchase) {\n                      summaryCost += this._getValidNumber(purchase.purchaseCost);\n                      var locationName = this.getDisplayLocationName(purchase.location, purchase.aisleLocation);\n                      if (!row.locations.findBy('name', locationName)) {\n                        row.locations.push({\n                          name: this.getDisplayLocationName(purchase.location, purchase.aisleLocation)\n                        });\n                      }\n                      return previousValue += this._getValidNumber(purchase.originalQuantity);\n                    }).bind(this), 0);\n                    if (this._hasIncludedLocation(row.locations)) {\n                      row.unitCost = summaryCost / row.quantity;\n                      row.totalCost = summaryCost;\n                      this._addReportRow(row);\n                      this.incrementProperty('grandCost', summaryCost);\n                      this.incrementProperty('grandQuantity', row.quantity);\n                    }\n                  }\n                  break;\n                }\n              case 'valuation':\n                {\n                  if (!_ember['default'].isEmpty(inventoryPurchases) && this._hasIncludedLocation(row.locations)) {\n                    this._calculateCosts(inventoryPurchases, row);\n                    this.incrementProperty('grandCost', this._getValidNumber(row.totalCost));\n                    this.incrementProperty('grandQuantity', this._getValidNumber(row.quantity));\n                    this._addReportRow(row);\n                  }\n                  break;\n                }\n            }\n          }).bind(this));\n          switch (reportType) {\n            case 'detailedExpense':\n            case 'summaryExpense':\n              {\n                this._finishExpenseReport(reportType);\n                break;\n              }\n            case 'byLocation':\n              {\n                this._finishLocationReport();\n                this._addTotalsRow(i18n.t('inventory.reports.rows.total'), this.get('grandCost'), this.get('grandQuantity'));\n                break;\n              }\n            default:\n              {\n                this._addTotalsRow(i18n.t('inventory.reports.rows.total'), this.get('grandCost'), this.get('grandQuantity'));\n              }\n          }\n          this._finishReport();\n        }).bind(this), (function (err) {\n          this._notifyReportError(i18n.t('inventory.reports.rows.errInFindPur') + err);\n        }).bind(this));\n      }).bind(this), (function (err) {\n        this._notifyReportError(i18n.t('inventory.reports.rows.errInFindPur') + err);\n      }).bind(this));\n    },\n\n    _getDateQueryParams: function _getDateQueryParams() {\n      var endDate = this.get('endDate');\n      var endTime = this.get('maxValue');\n      var startDate = this.get('startDate');\n      var startTime = undefined;\n      if (!_ember['default'].isEmpty(endDate)) {\n        endTime = (0, _moment['default'])(endDate).endOf('day').toDate().getTime();\n      }\n      if (!_ember['default'].isEmpty(startDate)) {\n        startTime = (0, _moment['default'])(startDate).startOf('day').toDate().getTime();\n      }\n      return {\n        endTime: endTime,\n        startTime: startTime\n      };\n    },\n\n    _getInventoryItems: function _getInventoryItems(inventoryIds, inventoryMap) {\n      var database = this.get('database');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        if (_ember['default'].isEmpty(inventoryMap)) {\n          inventoryMap = {};\n        }\n        database.queryMainDB({\n          keys: inventoryIds,\n          include_docs: true\n        }).then(function (inventoryItems) {\n          inventoryItems.rows.forEach(function (inventoryItem) {\n            if (inventoryItem.doc && inventoryItem.doc.archived !== true) {\n              inventoryMap[inventoryItem.doc.id] = inventoryItem.doc;\n            }\n          });\n          resolve(inventoryMap);\n        }, reject);\n      });\n    },\n\n    /**\n     * Pull the warehouse name out of a formatted location name that (may) include the aisle location\n     * @param {string} locationName the formatted location name.\n     * @return {string} the warehouse name.\n     */\n    _getWarehouseLocationName: function _getWarehouseLocationName(locationName) {\n      var returnLocation = '';\n      if (locationName.indexOf(':') > -1) {\n        returnLocation = locationName.split(':')[0].trim();\n      } else {\n        returnLocation = locationName;\n      }\n      return returnLocation;\n    },\n\n    /**\n     * Determines if any of the passed in location objects match the currently filtered location\n     * @param {array} locations list of location objects to check.\n     * @return {boolean} true if any of the locations match the filter; otherwise false.\n     */\n    _hasIncludedLocation: function _hasIncludedLocation(locations) {\n      var hasIncludedLocation = false;\n      locations.forEach((function (location) {\n        var locationName = this._getWarehouseLocationName(location.name);\n        if (this._includeLocation(locationName)) {\n          hasIncludedLocation = true;\n        }\n      }).bind(this));\n      return hasIncludedLocation;\n    },\n\n    /**\n     * Determine if the specified location should be included in the report\n     * @param {string} location the location to check for inclusion\n     * @return {boolean} true if the location should be included.\n     */\n    _includeLocation: function _includeLocation(location) {\n      var filterLocation = this.get('filterLocation');\n      return _ember['default'].isEmpty(filterLocation) || location === filterLocation;\n    },\n\n    /**\n     * Given a report type and a transaction type determine if the transaction should\n     * be included in the report.\n     * @param {string} reportType the report type\n     * @param {string} transactionType the transaction type\n     * @return {boolean} true if the transaction should be included.\n     */\n    _includeTransaction: function _includeTransaction(reportType, transactionType) {\n      var detailed = reportType.indexOf('detailed') === 0;\n      var includeForReportType = undefined;\n      if (reportType === 'detailedExpense' || reportType === 'summaryExpense') {\n        return true;\n      }\n      switch (transactionType) {\n        case 'Fulfillment':\n          {\n            if (detailed) {\n              includeForReportType = 'detailedUsage';\n            } else {\n              includeForReportType = 'summaryUsage';\n            }\n            break;\n          }\n        case 'Transfer':\n          {\n            if (detailed) {\n              includeForReportType = 'detailedTransfer';\n            } else {\n              includeForReportType = 'summaryTransfer';\n            }\n            break;\n          }\n        default:\n          {\n            if (detailed) {\n              includeForReportType = 'detailedAdjustment';\n            } else {\n              includeForReportType = 'summaryAdjustment';\n            }\n          }\n      }\n      return reportType === includeForReportType;\n    },\n\n    _updateExpenseMap: function _updateExpenseMap(request, reportRow) {\n      var categoryToUpdate = undefined;\n      var expenseMap = this.get('expenseMap');\n      var isGiftInKind = reportRow.giftInKind === 'Y';\n      var increment = true;\n\n      switch (request.transactionType) {\n        case 'Fulfillment':\n        case 'Return':\n          {\n            if (isGiftInKind) {\n              categoryToUpdate = expenseMap['Gift In Kind Usage'];\n            } else {\n              categoryToUpdate = expenseMap['Inventory Consumed'];\n            }\n            if (request.transactionType === 'Return') {\n              increment = false;\n            }\n            break;\n          }\n        case 'Adjustment (Add)':\n        case 'Adjustment (Remove)':\n        case 'Return To Vendor':\n        case 'Write Off':\n          {\n            categoryToUpdate = expenseMap['Inventory Obsolence'];\n            if (request.transactionType === 'Adjustment (Add)') {\n              increment = false;\n            }\n            break;\n          }\n      }\n      if (!_ember['default'].isEmpty(categoryToUpdate)) {\n        var expenseAccountToUpdate = categoryToUpdate.expenseAccounts.findBy('name', request.expenseAccount);\n        if (_ember['default'].isEmpty(expenseAccountToUpdate)) {\n          expenseAccountToUpdate = {\n            name: request.expenseAccount,\n            total: 0,\n            reportRows: []\n          };\n          categoryToUpdate.expenseAccounts.push(expenseAccountToUpdate);\n        }\n        expenseAccountToUpdate.reportRows.push(reportRow);\n        var transactionValue = this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit);\n        if (increment) {\n          categoryToUpdate.total += transactionValue;\n          expenseAccountToUpdate.total += transactionValue;\n        } else {\n          categoryToUpdate.total = categoryToUpdate.total - transactionValue;\n          expenseAccountToUpdate.total = expenseAccountToUpdate.total - transactionValue;\n          reportRow.totalCost = reportRow.totalCost * -1;\n        }\n      }\n    },\n\n    actions: {\n      generateReport: function generateReport() {\n        var _this3 = this;\n\n        var endDate = this.get('endDate');\n        var reportRows = this.get('reportRows');\n        var reportType = this.get('reportType');\n        var startDate = this.get('startDate');\n        if (_ember['default'].isEmpty(startDate) && _ember['default'].isEmpty(endDate)) {\n          return;\n        }\n        reportRows.clear();\n        this.showProgressModal();\n        switch (reportType) {\n          case 'expiration':\n            {\n              this._generateExpirationReport();\n              break;\n            }\n          case 'summaryFinance':\n            {\n              this._generateFinancialSummaryReport();\n              break;\n            }\n          case 'detailedExpense':\n          case 'summaryExpense':\n            {\n              var _ret3 = (function () {\n                var expenseCategories = _this3.get('expenseCategories');\n                var expenseMap = {};\n                expenseCategories.forEach(function (category) {\n                  expenseMap[category] = {\n                    total: 0,\n                    expenseAccounts: []\n                  };\n                });\n                _this3.set('expenseMap', expenseMap);\n                _this3._generateInventoryReport();\n                return 'break';\n              })();\n\n              if (_ret3 === 'break') break;\n            }\n          default:\n            {\n              this._generateInventoryReport();\n              break;\n            }\n        }\n      },\n\n      viewInventory: function viewInventory(id) {\n        this.store.find('inventory', id).then((function (item) {\n          item.set('returnTo', 'inventory.reports');\n          this.transitionToRoute('inventory.edit', item);\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/reports/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/reports/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/reports/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('inventory.titles.inventoryReport'),\n\n    // No model for reports; data gets retrieved when report is run.\n    model: function model() {\n      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));\n    }\n\n  });\n});","define('hospitalrun/tests/inventory/reports/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/reports/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/reports/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/request/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], {\n    inventoryController: _ember['default'].inject.controller('inventory'),\n    inventoryItems: null,\n    cancelAction: 'allRequests',\n\n    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),\n    expenseAccountList: _ember['default'].computed.alias('inventoryController.expenseAccountList'),\n\n    inventoryList: (function () {\n      var inventoryItems = this.get('inventoryItems');\n      if (!_ember['default'].isEmpty(inventoryItems)) {\n        var mappedItems = inventoryItems.map(function (item) {\n          return item.doc;\n        });\n        return mappedItems;\n      }\n    }).property('inventoryItems.[]'),\n\n    lookupListsToUpdate: [{\n      name: 'expenseAccountList', // Name of property containing lookup list\n      property: 'model.expenseAccount', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'expense_account_list' // Id of the lookup list to update\n    }, {\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.deliveryAisle', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.deliveryLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    canFulfill: (function () {\n      var requestedItems = this.get('model.requestedItems');\n      return _ember['default'].isEmpty(requestedItems) && this.currentUserCan('fulfill_inventory');\n    }).property('model.requestedItems.[]'),\n\n    isFulfilling: (function () {\n      var canFulfill = this.get('canFulfill');\n      var isRequested = this.get('isRequested');\n      var fulfillRequest = this.get('model.shouldFulfillRequest');\n      var isFulfilling = canFulfill && (isRequested || fulfillRequest);\n      if (isFulfilling) {\n        if (_ember['default'].isEmpty(this.get('model.dateCompleted'))) {\n          this.set('model.dateCompleted', new Date());\n        }\n      } else {\n        this.set('model.dateCompleted');\n      }\n      return isFulfilling;\n    }).property('isRequested', 'model.shouldFulfillRequest'),\n\n    isRequested: (function () {\n      var status = this.get('model.status');\n      return status === 'Requested';\n    }).property('model.status'),\n\n    quantityLabel: (function () {\n      var selectedInventoryItem = this.get('selectedInventoryItem');\n      if (_ember['default'].isEmpty(selectedInventoryItem)) {\n        return this.get('i18n').t('labels.quantity').toString();\n      } else {\n        return this.get('i18n').t('inventory.labels.quantity', { unit: selectedInventoryItem.distributionUnit }).toString();\n      }\n    }).property('selectedInventoryItem'),\n\n    showRequestedItems: (function () {\n      var requestedItems = this.get('model.requestedItems');\n      return !_ember['default'].isEmpty(requestedItems);\n    }).property('model.requestedItems.[]'),\n\n    updateViaFulfillRequest: false,\n\n    updateButtonText: (function () {\n      if (this.get('isFulfilling')) {\n        return this.get('i18n').t('buttons.fulfill');\n      }\n      return this._super();\n    }).property('model.isNew', 'isFulfilling'),\n\n    updateCapability: 'add_inventory_request',\n\n    actions: {\n      addInventoryItem: function addInventoryItem() {\n        var model = this.get('model');\n        var inventoryItem = model.get('inventoryItem');\n        var requestedItems = model.get('requestedItems');\n        var quantity = model.get('quantity');\n        model.validate().then((function () {\n          if (model.get('isValid') && !_ember['default'].isEmpty(inventoryItem) && !_ember['default'].isEmpty(quantity)) {\n            var requestedItem = _ember['default'].Object.create({\n              item: inventoryItem.get('content'),\n              quantity: quantity\n            });\n            requestedItems.addObject(requestedItem);\n            model.set('inventoryItem');\n            model.set('inventoryItemTypeAhead');\n            model.set('quantity');\n            this.set('selectedInventoryItem');\n          }\n        }).bind(this))['catch'](_ember['default'].K);\n      },\n\n      allRequests: function allRequests() {\n        this.transitionToRoute('inventory.index');\n      },\n\n      removeItem: function removeItem(removeInfo) {\n        var requestedItems = this.get('model.requestedItems');\n        var item = removeInfo.itemToRemove;\n        requestedItems.removeObject(item);\n        this.send('closeModal');\n      },\n\n      showRemoveItem: function showRemoveItem(item) {\n        var message = this.get('i18n').t('inventory.messages.removeItemRequest');\n        var model = _ember['default'].Object.create({\n          itemToRemove: item\n        });\n        var title = this.get('i18n').t('inventory.titles.removeItem');\n        this.displayConfirm(title, message, 'removeItem', model);\n      },\n\n      /**\n       * Update the model and perform the before update and after update\n       * @param skipAfterUpdate boolean (optional) indicating whether or not\n       * to skip the afterUpdate call.\n       */\n      update: function update(skipAfterUpdate) {\n        this.beforeUpdate().then((function () {\n          var _this = this;\n\n          var updateViaFulfillRequest = this.get('updateViaFulfillRequest');\n          if (updateViaFulfillRequest) {\n            this.updateLookupLists();\n            this.performFulfillRequest(this.get('model'), false, false, true).then(this.afterUpdate.bind(this));\n          } else {\n            var isNew = this.get('model.isNew');\n            var requestedItems = this.get('model.requestedItems');\n            if (isNew && !_ember['default'].isEmpty(requestedItems)) {\n              (function () {\n                var baseModel = _this.get('model');\n                var propertiesToCopy = baseModel.getProperties(['dateRequested', 'deliveryAisle', 'deliveryLocation', 'expenseAccount', 'requestedBy', 'status']);\n                var inventoryPromises = [];\n                var newModels = [];\n                var savePromises = [];\n                if (!_ember['default'].isEmpty(_this.get('model.inventoryItem')) && !_ember['default'].isEmpty(_this.get('model.quantity'))) {\n                  savePromises.push(baseModel.save());\n                }\n                requestedItems.forEach((function (requestedItem) {\n                  propertiesToCopy.inventoryItem = requestedItem.get('item');\n                  propertiesToCopy.quantity = requestedItem.get('quantity');\n                  var modelToSave = this.get('store').createRecord('inv-request', propertiesToCopy);\n                  inventoryPromises.push(modelToSave.get('inventoryItem'));\n                  newModels.push(modelToSave);\n                }).bind(_this));\n                _ember['default'].RSVP.all(inventoryPromises, 'Get inventory items for inventory requests').then((function () {\n                  newModels.forEach(function (newModel) {\n                    savePromises.push(newModel.save());\n                  });\n                  _ember['default'].RSVP.all(savePromises, 'Save batch inventory requests').then((function () {\n                    this.updateLookupLists();\n                    this.afterUpdate();\n                  }).bind(this));\n                }).bind(_this));\n              })();\n            } else {\n              this.get('model').save().then((function (record) {\n                this.updateLookupLists();\n                if (!skipAfterUpdate) {\n                  this.afterUpdate(record);\n                }\n              }).bind(this));\n            }\n          }\n        }).bind(this));\n      }\n    },\n\n    afterUpdate: function afterUpdate() {\n      var updateViaFulfillRequest = this.get('updateViaFulfillRequest');\n      if (updateViaFulfillRequest) {\n        this.displayAlert(this.get('i18n').t('inventory.titles.requestFulfilled'), this.get('i18n').t('inventory.messages.requestFulfilled'), 'allRequests');\n      } else {\n        this.displayAlert(this.get('i18n').t('inventory.titles.requestUpdated'), this.get('i18n').t('inventory.messages.requestUpdated'));\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('isFulfilling')) {\n        this.set('updateViaFulfillRequest', true);\n      } else {\n        this.set('updateViaFulfillRequest', false);\n      }\n      if (this.get('model.isNew')) {\n        this.set('model.dateRequested', new Date());\n        this.set('model.requestedBy', this.get('model').getUserName());\n        if (!this.get('isFulfilling')) {\n          this.set('model.status', 'Requested');\n        }\n      }\n      return _ember['default'].RSVP.resolve();\n    }\n  });\n});\n// inventory-locations mixin is needed for fulfill-request mixin!","define('hospitalrun/tests/inventory/request/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/request/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/request/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/request/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('inventory.titles.editRequest'),\n    modelName: 'inv-request',\n    newTitle: (0, _emberI18n.translationMacro)('inventory.titles.addRequest'),\n    database: _ember['default'].inject.service(),\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        transactionType: 'Request',\n        requestedItems: []\n      });\n    },\n\n    actions: {\n      allRequests: function allRequests(model) {\n        this.controller.send('allRequests', model);\n      },\n\n      removeItem: function removeItem(model) {\n        this.controller.send('removeItem', model);\n      }\n    },\n\n    /**\n     * Lazily load inventory items so that it doesn't impact performance.\n     */\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      var inventoryQuery = {\n        startkey: 'inventory_',\n        endkey: 'inventory_￿',\n        include_docs: true\n      };\n      this.get('database').queryMainDB(inventoryQuery).then(function (result) {\n        controller.set('inventoryItems', result.rows);\n      });\n    }\n  });\n});","define('hospitalrun/tests/inventory/request/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/request/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/request/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-id', 'hospitalrun/mixins/inventory-locations'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryId, _hospitalrunMixinsInventoryLocations) {\n  'use strict';\n\n  // inventory-locations mixin is needed for fulfill-request mixin!\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryId['default'], _hospitalrunMixinsInventoryLocations['default'], {\n    addCapability: 'add_inventory_item',\n    additionalButtons: (function () {\n      if (this.currentUserCan(this.get('addCapability'))) {\n        return [{\n          buttonAction: 'newInventoryBatch',\n          buttonText: '+ inventory received',\n          'class': 'btn btn-primary'\n        }];\n      }\n    }).property(),\n\n    additionalModels: [{\n      name: 'aisleLocationList',\n      findArgs: ['lookup', 'aisle_location_list']\n    }, {\n      name: 'expenseAccountList',\n      findArgs: ['lookup', 'expense_account_list']\n    }, {\n      name: 'inventoryTypeList',\n      findArgs: ['lookup', 'inventory_types']\n    }, {\n      name: 'inventoryUnitList',\n      findArgs: ['lookup', 'unit_types']\n    }, {\n      name: 'warehouseList',\n      findArgs: ['lookup', 'warehouse_list']\n    }, {\n      name: 'vendorList',\n      findArgs: ['lookup', 'vendor_list']\n    }],\n\n    currentItem: null,\n    moduleName: 'inventory',\n\n    newButtonText: '+ new request',\n    sectionTitle: 'Inventory',\n\n    actions: {\n      addPurchase: function addPurchase(newPurchase) {\n        var currentItem = this.get('currentItem');\n        var purchases = currentItem.get('purchases');\n        purchases.addObject(newPurchase);\n        this.newPurchaseAdded(currentItem, newPurchase).then((function () {\n          currentItem.updateQuantity();\n          currentItem.save().then((function () {\n            this.send('closeModal');\n          }).bind(this));\n        }).bind(this));\n      },\n\n      newInventoryBatch: function newInventoryBatch() {\n        if (this.currentUserCan(this.get('addCapability'))) {\n          this.transitionTo('inventory.batch', 'new');\n        }\n      },\n\n      newRequest: function newRequest() {\n        this.transitionTo('inventory.request', 'new');\n      },\n\n      allItems: function allItems() {\n        this.transitionTo('inventory.listing');\n      },\n\n      showAddPurchase: function showAddPurchase(inventoryItem) {\n        var newPurchase = this.get('store').createRecord('inv-purchase', {\n          dateReceived: new Date(),\n          distributionUnit: inventoryItem.get('distributionUnit'),\n          inventoryItem: inventoryItem.get('id')\n        });\n        this.set('currentItem', inventoryItem);\n        this.send('openModal', 'inventory.purchase.edit', newPurchase);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/search/controller', ['exports', 'hospitalrun/inventory/listing/controller'], function (exports, _hospitalrunInventoryListingController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunInventoryListingController['default'].extend();\n});","define('hospitalrun/tests/inventory/search/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/search/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/search/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'inventory',\n    searchKeys: [{\n      name: 'crossReference',\n      type: 'contains'\n    }, {\n      name: 'description',\n      type: 'fuzzy'\n    }, {\n      name: 'friendlyId',\n      type: 'contains'\n    }, {\n      name: 'name',\n      type: 'fuzzy'\n    }],\n    searchModel: 'inventory'\n  });\n});","define('hospitalrun/tests/inventory/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/transfer/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    inventoryController: _ember['default'].inject.controller('inventory'),\n\n    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.transferAisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.transferLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    title: (0, _emberI18n.translationMacro)('inventory.titles.transfer'),\n    updateButtonText: (0, _emberI18n.translationMacro)('inventory.labels.transfer'),\n    updateButtonAction: 'transfer',\n    updateCapability: 'adjust_inventory_location',\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      transfer: function transfer() {\n        this.updateLookupLists();\n        this.send('transferItems', this.get('model'), true);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/transfer/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/transfer/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/transfer/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/add-line-item/controller', ['exports', 'hospitalrun/mixins/billing-categories', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, _hospitalrunMixinsBillingCategories, _ember, _hospitalrunMixinsIsUpdateDisabled) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsBillingCategories['default'], _hospitalrunMixinsIsUpdateDisabled['default'], {\n    invoiceController: _ember['default'].inject.controller('invoices'),\n\n    billingCategoryList: _ember['default'].computed.alias('invoiceController.billingCategoryList'),\n    editController: _ember['default'].inject.controller('invoices/edit'),\n    title: 'Add Line Item',\n    updateButtonText: 'Add',\n    updateButtonAction: 'add',\n    showUpdateButton: true,\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      add: function add() {\n        this.get('model').save().then((function (record) {\n          this.get('editController').send('addLineItem', record);\n        }).bind(this));\n      }\n    },\n\n    billingCategories: (function () {\n      var defaultBillingCategories = this.get('defaultBillingCategories');\n      var billingCategoryList = this.get('billingCategoryList');\n      if (_ember['default'].isEmpty(billingCategoryList)) {\n        return _ember['default'].Object.create({ value: defaultBillingCategories });\n      } else {\n        return billingCategoryList;\n      }\n    }).property('billingCategoryList', 'defaultBillingCategories')\n\n  });\n});","define('hospitalrun/tests/invoices/add-line-item/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/add-line-item/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/add-line-item/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: 'Delete Invoice'\n  });\n});","define('hospitalrun/tests/invoices/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'moment', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/publish-statuses', 'hospitalrun/utils/select-values', 'npm:uuid'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _moment, _hospitalrunMixinsNumberFormat, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsPublishStatuses, _hospitalrunUtilsSelectValues, _npmUuid) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPublishStatuses['default'], {\n    invoiceController: _ember['default'].inject.controller('invoices'),\n    expenseAccountList: _ember['default'].computed.alias('invoiceController.expenseAccountList.value'),\n    patientList: _ember['default'].computed.alias('invoiceController.patientList'),\n    pharmacyCharges: [],\n    pricingProfiles: _ember['default'].computed.map('invoiceController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),\n    supplyCharges: [],\n    updateCapability: 'add_invoice',\n    wardCharges: [],\n\n    additionalButtons: (function () {\n      var buttons = [];\n      var isValid = this.get('model.isValid');\n      var status = this.get('model.status');\n      if (isValid && status === 'Draft') {\n        buttons.push({\n          'class': 'btn btn-default default',\n          buttonAction: 'finalizeInvoice',\n          buttonIcon: 'glyphicon glyphicon-ok',\n          buttonText: 'Invoice Ready'\n        });\n      }\n      buttons.push({\n        'class': 'btn btn-default neutral',\n        buttonAction: 'printInvoice',\n        buttonIcon: 'glyphicon glyphicon-print',\n        buttonText: 'Print'\n      });\n      return buttons;\n    }).property('model.isValid', 'model.status'),\n\n    canAddCharge: (function () {\n      return this.currentUserCan('add_charge');\n    }).property(),\n\n    canAddPayment: (function () {\n      return this.currentUserCan('add_payment');\n    }).property(),\n\n    pharmacyExpenseAccount: (function () {\n      var expenseAccountList = this.get('expenseAccountList');\n      if (!_ember['default'].isEmpty(expenseAccountList)) {\n        var account = expenseAccountList.find(function (value) {\n          if (value.toLowerCase().indexOf('pharmacy') > -1) {\n            return true;\n          }\n        });\n        return account;\n      }\n    }).property('expenseAccountList.value'),\n\n    actions: {\n      addItemCharge: function addItemCharge(lineItem) {\n        var details = lineItem.get('details');\n        var detail = this.store.createRecord('line-item-detail', {\n          id: _npmUuid['default'].v4()\n        });\n        details.addObject(detail);\n      },\n\n      addLineItem: function addLineItem(lineItem) {\n        var lineItems = this.get('model.lineItems');\n        lineItems.addObject(lineItem);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      deleteCharge: function deleteCharge(deleteInfo) {\n        this._deleteObject(deleteInfo.itemToDelete, deleteInfo.deleteFrom);\n      },\n\n      deleteLineItem: function deleteLineItem(deleteInfo) {\n        this._deleteObject(deleteInfo.itemToDelete, this.get('model.lineItems'));\n      },\n\n      finalizeInvoice: function finalizeInvoice() {\n        var currentInvoice = this.get('model');\n        var invoicePayments = currentInvoice.get('payments');\n        var paymentsToSave = [];\n        currentInvoice.get('patient.payments').then((function (patientPayments) {\n          patientPayments.forEach((function (payment) {\n            var invoice = payment.get('invoice');\n            if (_ember['default'].isEmpty(invoice)) {\n              payment.set('invoice', currentInvoice);\n              paymentsToSave.push(payment.save());\n              invoicePayments.addObject(payment);\n            }\n          }).bind(this));\n          _ember['default'].RSVP.all(paymentsToSave).then((function () {\n            this.set('model.status', 'Billed');\n            this.send('update');\n          }).bind(this));\n        }).bind(this));\n      },\n\n      printInvoice: function printInvoice() {\n        this.transitionToRoute('print.invoice', this.get('model'));\n      },\n\n      removePayment: function removePayment(removeInfo) {\n        var payments = this.get('model.payments');\n        var payment = removeInfo.itemToRemove;\n        payment.set('invoice');\n        payments.removeObject(removeInfo.itemToRemove);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      showAddLineItem: function showAddLineItem() {\n        var newLineItem = this.store.createRecord('billing-line-item', {\n          id: _npmUuid['default'].v4()\n        });\n        this.send('openModal', 'invoices.add-line-item', newLineItem);\n      },\n\n      showDeleteItem: function showDeleteItem(itemToDelete, deleteFrom) {\n        this.showDeleteModal(itemToDelete, _ember['default'].Object.create({\n          confirmAction: 'deleteCharge',\n          deleteFrom: deleteFrom,\n          title: 'Delete Charge'\n        }));\n      },\n\n      showDeleteLineItem: function showDeleteLineItem(item) {\n        this.showDeleteModal(item, _ember['default'].Object.create({\n          confirmAction: 'deleteLineItem',\n          title: 'Delete Line Item'\n        }));\n      },\n\n      showDeleteModal: function showDeleteModal(item, options) {\n        options = _ember['default'].merge(options, _ember['default'].Object.create({\n          message: 'Are you sure you want to delete ' + item.get('name') + '?',\n          itemToDelete: item,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n        this.send('openModal', 'dialog', options);\n      },\n\n      showRemovePayment: function showRemovePayment(payment) {\n        var message = 'Are you sure you want to remove this payment from this invoice?';\n        var model = _ember['default'].Object.create({\n          itemToRemove: payment\n        });\n        var title = 'Remove Payment';\n        this.displayConfirm(title, message, 'removePayment', model);\n      },\n\n      toggleDetails: function toggleDetails(item) {\n        item.toggleProperty('showDetails');\n      }\n    },\n\n    changePaymentProfile: (function () {\n      var patient = this.get('model.patient');\n      var paymentProfile = this.get('model.paymentProfile');\n      if (!_ember['default'].isEmpty(patient) && _ember['default'].isEmpty(paymentProfile)) {\n        this.set('model.paymentProfile', patient.get('paymentProfile'));\n      }\n    }).observes('model.patient'),\n\n    paymentProfileChanged: (function () {\n      var discountPercentage = this._getValidNumber(this.get('model.paymentProfile.discountPercentage'));\n      var originalPaymentProfileId = this.get('model.originalPaymentProfileId');\n      var profileId = this.get('model.paymentProfile.id');\n      if (profileId !== originalPaymentProfileId) {\n        var lineItems = this.get('model.lineItems');\n        lineItems.forEach((function (lineItem) {\n          var details = lineItem.get('details');\n          var lineDiscount = 0;\n          details.forEach((function (detail) {\n            var pricingOverrides = detail.get('pricingItem.pricingOverrides');\n            if (!_ember['default'].isEmpty(pricingOverrides)) {\n              var pricingOverride = pricingOverrides.findBy('profile.id', profileId);\n              if (!_ember['default'].isEmpty(pricingOverride)) {\n                _ember['default'].set(detail, 'price', pricingOverride.get('price'));\n              }\n            }\n          }).bind(this));\n          if (discountPercentage > 0) {\n            var lineTotal = lineItem.get('total');\n            lineDiscount = this._numberFormat(discountPercentage / 100 * lineTotal, true);\n            lineItem.set('discount', lineDiscount);\n          }\n        }).bind(this));\n        this.set('model.originalPaymentProfileId', profileId);\n      }\n    }).observes('model.paymentProfile'),\n\n    visitChanged: (function () {\n      var visit = this.get('model.visit');\n      var lineItems = this.get('model.lineItems');\n      if (!_ember['default'].isEmpty(visit) && _ember['default'].isEmpty(lineItems)) {\n        this.set('model.originalPaymentProfileId');\n        var promises = this.resolveVisitChildren();\n        _ember['default'].RSVP.allSettled(promises, 'Resolved visit children before generating invoice').then((function (results) {\n          var _this = this;\n\n          var chargePromises = this._resolveVisitDescendents(results, 'charges');\n          if (!_ember['default'].isEmpty(chargePromises)) {\n            (function () {\n              var promiseLabel = 'Reloaded charges before generating invoice';\n              _ember['default'].RSVP.allSettled(chargePromises, promiseLabel).then((function (chargeResults) {\n                var pricingPromises = [];\n                chargeResults.forEach(function (result) {\n                  if (!_ember['default'].isEmpty(result.value)) {\n                    var pricingItem = result.value.get('pricingItem');\n                    if (!_ember['default'].isEmpty(pricingItem)) {\n                      pricingPromises.push(pricingItem.reload());\n                    }\n                  }\n                });\n                promiseLabel = 'Reloaded pricing items before generating invoice';\n                _ember['default'].RSVP.allSettled(pricingPromises, promiseLabel).then((function () {\n                  this._generateLineItems(visit, results);\n                  this.paymentProfileChanged();\n                }).bind(this));\n              }).bind(_this));\n            })();\n          } else {\n            this._generateLineItems(visit, results);\n            this.paymentProfileChanged();\n          }\n        }).bind(this), function (err) {\n          console.log('Error resolving visit children', err);\n        });\n      }\n    }).observes('model.visit'),\n\n    _addPharmacyCharge: function _addPharmacyCharge(charge, medicationItemName) {\n      var _this2 = this;\n\n      return charge.getMedicationDetails(medicationItemName).then(function (medicationDetails) {\n        var quantity = charge.get('quantity');\n        var pharmacyCharges = _this2.get('pharmacyCharges');\n        var pharmacyExpenseAccount = _this2.get('pharmacyExpenseAccount');\n        var pharmacyCharge = _this2.store.createRecord('line-item-detail', {\n          id: _npmUuid['default'].v4(),\n          name: medicationDetails.name,\n          quantity: quantity,\n          price: medicationDetails.price,\n          department: 'Pharmacy',\n          expenseAccount: pharmacyExpenseAccount\n        });\n        pharmacyCharges.addObject(pharmacyCharge);\n      });\n    },\n\n    _addSupplyCharge: function _addSupplyCharge(charge, department) {\n      var supplyCharges = this.get('supplyCharges');\n      var supplyCharge = this._createChargeItem(charge, department);\n      supplyCharges.addObject(supplyCharge);\n    },\n\n    _createChargeItem: function _createChargeItem(charge, department) {\n      var chargeItem = this.store.createRecord('line-item-detail', {\n        id: _npmUuid['default'].v4(),\n        name: charge.get('pricingItem.name'),\n        expenseAccount: charge.get('pricingItem.expenseAccount'),\n        quantity: charge.get('quantity'),\n        price: charge.get('pricingItem.price'),\n        department: department,\n        pricingItem: charge.get('pricingItem')\n      });\n      return chargeItem;\n    },\n\n    /**\n     * Remove the specified object from the specified list, update the model and close the modal.\n     * @param objectToDelete {object} - the object to remove\n     * @param deleteFrom {Array} - the array to remove the object from.\n     */\n    _deleteObject: function _deleteObject(objectToDelete, deleteFrom) {\n      deleteFrom.removeObject(objectToDelete);\n      if (!objectToDelete.get('isNew')) {\n        objectToDelete.destroyRecord();\n      }\n      this.send('update', true);\n      this.send('closeModal');\n    },\n\n    _mapWardCharge: function _mapWardCharge(charge) {\n      return this._createChargeItem(charge, 'Ward');\n    },\n\n    _completeBeforeUpdate: function _completeBeforeUpdate(sequence, resolve, reject) {\n      var invoiceId = 'inv';\n      var sequenceValue = undefined;\n      sequence.incrementProperty('value', 1);\n      sequenceValue = sequence.get('value');\n      if (sequenceValue < 100000) {\n        invoiceId += String('00000' + sequenceValue).slice(-5);\n      } else {\n        invoiceId += sequenceValue;\n      }\n      this.set('model.id', invoiceId);\n      sequence.save().then(resolve, reject);\n    },\n\n    _generateLineItems: function _generateLineItems(visit, visitChildren) {\n      var _this3 = this;\n\n      var endDate = visit.get('endDate');\n      var imaging = visitChildren[0].value;\n      var labs = visitChildren[1].value;\n      var lineDetail = undefined,\n          lineItem = undefined;\n      var lineItems = this.get('model.lineItems');\n      var medication = visitChildren[2].value;\n      var procedures = visitChildren[3].value;\n      var startDate = visit.get('startDate');\n      var visitCharges = visit.get('charges');\n      this.setProperties({\n        pharmacyCharges: [],\n        supplyCharges: [],\n        wardCharges: []\n      });\n      if (!_ember['default'].isEmpty(endDate) && !_ember['default'].isEmpty(startDate)) {\n        endDate = (0, _moment['default'])(endDate);\n        startDate = (0, _moment['default'])(startDate);\n        var stayDays = endDate.diff(startDate, 'days');\n        if (stayDays > 1) {\n          lineDetail = this.store.createRecord('line-item-detail', {\n            id: _npmUuid['default'].v4(),\n            name: 'Days',\n            quantity: stayDays\n          });\n          lineItem = this.store.createRecord('billing-line-item', {\n            id: _npmUuid['default'].v4(),\n            category: 'Hospital Charges',\n            name: 'Room/Accomodation'\n          });\n          lineItem.get('details').addObject(lineDetail);\n          lineItems.addObject(lineItem);\n        }\n      }\n\n      var pharmacyChargePromises = [];\n      medication.forEach((function (medicationItem) {\n        pharmacyChargePromises.push(this._addPharmacyCharge(medicationItem, 'inventoryItem'));\n      }).bind(this));\n\n      this.set('wardCharges', visitCharges.map(this._mapWardCharge.bind(this)));\n\n      procedures.forEach((function (procedure) {\n        var charges = procedure.get('charges');\n        charges.forEach((function (charge) {\n          if (charge.get('medicationCharge')) {\n            pharmacyChargePromises.push(this._addPharmacyCharge(charge, 'medication'));\n          } else {\n            this._addSupplyCharge(charge, 'O.R.');\n          }\n        }).bind(this));\n      }).bind(this));\n\n      labs.forEach((function (lab) {\n        if (!_ember['default'].isEmpty(lab.get('labType'))) {\n          this._addSupplyCharge(_ember['default'].Object.create({\n            pricingItem: lab.get('labType'),\n            quantity: 1\n          }), 'Lab');\n        }\n        lab.get('charges').forEach((function (charge) {\n          this._addSupplyCharge(charge, 'Lab');\n        }).bind(this));\n      }).bind(this));\n\n      imaging.forEach((function (imaging) {\n        if (!_ember['default'].isEmpty(imaging.get('imagingType'))) {\n          this._addSupplyCharge(_ember['default'].Object.create({\n            pricingItem: imaging.get('imagingType'),\n            quantity: 1\n          }), 'Imaging');\n        }\n        imaging.get('charges').forEach((function (charge) {\n          this._addSupplyCharge(charge, 'Imaging');\n        }).bind(this));\n      }).bind(this));\n\n      _ember['default'].RSVP.all(pharmacyChargePromises).then(function () {\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: _npmUuid['default'].v4(),\n          name: 'Pharmacy',\n          category: 'Hospital Charges'\n        });\n        lineItem.get('details').addObjects(_this3.get('pharmacyCharges'));\n        lineItems.addObject(lineItem);\n\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: _npmUuid['default'].v4(),\n          name: 'X-ray/Lab/Supplies',\n          category: 'Hospital Charges'\n        });\n        lineItem.get('details').addObjects(_this3.get('supplyCharges'));\n        lineItems.addObject(lineItem);\n\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: _npmUuid['default'].v4(),\n          name: 'Ward Items',\n          category: 'Hospital Charges'\n        });\n        lineItem.get('details').addObjects(_this3.get('wardCharges'));\n        lineItems.addObject(lineItem);\n\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: _npmUuid['default'].v4(),\n          name: 'Physical Therapy',\n          category: 'Hospital Charges'\n        });\n        lineItems.addObject(lineItem);\n\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: _npmUuid['default'].v4(),\n          name: 'Others/Misc',\n          category: 'Hospital Charges'\n        });\n        lineItems.addObject(lineItem);\n\n        _this3.send('update', true);\n      });\n    },\n\n    _resolveVisitDescendents: function _resolveVisitDescendents(results, childNameToResolve) {\n      var promises = [];\n      results.forEach(function (result) {\n        if (!_ember['default'].isEmpty(result.value)) {\n          result.value.forEach(function (record) {\n            var children = record.get(childNameToResolve);\n            if (!_ember['default'].isEmpty(children)) {\n              children.forEach(function (child) {\n                // Make sure children are fully resolved\n                promises.push(child.reload());\n              });\n            }\n          });\n        }\n      });\n      return promises;\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var lineItems = this.get('model.lineItems');\n        var savePromises = [];\n        lineItems.forEach((function (lineItem) {\n          lineItem.get('details').forEach((function (detail) {\n            savePromises.push(detail.save());\n          }).bind(this));\n          savePromises.push(lineItem.save());\n        }).bind(this));\n        _ember['default'].RSVP.all(savePromises, 'Saved invoice children before saving invoice').then((function () {\n          if (this.get('model.isNew')) {\n            this.store.find('sequence', 'invoice').then((function (sequence) {\n              this._completeBeforeUpdate(sequence, resolve, reject);\n            }).bind(this), (function () {\n              var store = this.get('store');\n              var newSequence = store.push(store.normalize('sequence', {\n                id: 'invoice',\n                value: 0\n              }));\n              this._completeBeforeUpdate(newSequence, resolve, reject);\n            }).bind(this));\n          } else {\n            resolve();\n          }\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    afterUpdate: function afterUpdate() {\n      var message = 'The invoice record has been saved.';\n      this.displayAlert('Invoice Saved', message);\n    }\n  });\n});","define('hospitalrun/tests/invoices/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: 'Edit Invoice',\n    modelName: 'invoice',\n    newTitle: 'New Invoice',\n\n    actions: {\n      deleteCharge: function deleteCharge(model) {\n        this.controller.send('deleteCharge', model);\n      },\n\n      deleteLineItem: function deleteLineItem(model) {\n        this.controller.send('deleteLineItem', model);\n      },\n\n      removePayment: function removePayment(model) {\n        this.controller.send('removePayment', model);\n      }\n    },\n\n    afterModel: function afterModel(model) {\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var lineItems = model.get('lineItems');\n        var promises = [];\n        lineItems.forEach(function (lineItem) {\n          promises.push(lineItem.reload());\n        });\n        _ember['default'].RSVP.all(promises, 'Reload billing line items for invoice').then(function (results) {\n          var detailPromises = [];\n          results.forEach(function (result) {\n            result.get('details').forEach(function (detail) {\n              detailPromises.push(detail.reload());\n            });\n          });\n          _ember['default'].RSVP.all(detailPromises, 'Reload billing line item details for invoice').then(resolve, reject);\n        }, reject);\n      });\n    },\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        billDate: new Date(),\n        status: 'Draft'\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      model.set('originalPaymentProfileId', model.get('paymentProfile.id'));\n      this._super(controller, model);\n      var lineItems = model.get('lineItems');\n      var promises = [];\n      lineItems.forEach(function (lineItem) {\n        lineItem.get('details').forEach(function (detail) {\n          var pricingItem = detail.get('pricingItem');\n          if (!_ember['default'].isEmpty(pricingItem)) {\n            promises.push(pricingItem.reload());\n          }\n        });\n      });\n    }\n  });\n});","define('hospitalrun/tests/invoices/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    addPermission: 'add_invoice',\n    deletePermission: 'delete_invoice',\n    isCashier: (function () {\n      return this.currentUserRole() === 'Cashier';\n    }).property(),\n    canAddPayment: (function () {\n      return this.currentUserCan('add_payment');\n    }).property(),\n    startKey: [],\n    queryParams: ['startKey', 'status'],\n    actions: {\n      printInvoice: function printInvoice(invoice) {\n        this.transitionToRoute('print.invoice', invoice);\n      },\n      reviewInvoice: function reviewInvoice(invoice) {\n        this.transitionToRoute('invoices.review', invoice);\n      }\n    }\n  });\n});","define('hospitalrun/tests/invoices/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'invoice',\n    pageTitle: 'Invoice Listing',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var billDateAsTime = item.get('billDateAsTime');\n      var id = this._getPouchIdFromItem(item);\n      var searchStatus = item.get('status');\n      return [searchStatus, billDateAsTime, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams(params) {\n      var queryParams = undefined;\n      var maxId = this._getMaxPouchId();\n      var maxValue = this.get('maxValue');\n      var minId = this._getMinPouchId();\n      var searchStatus = params.status;\n      if (_ember['default'].isEmpty(searchStatus)) {\n        searchStatus = 'Billed';\n      }\n\n      this.set('pageTitle', searchStatus + ' Invoices');\n      queryParams = {\n        options: {\n          startkey: [searchStatus, null, minId],\n          endkey: [searchStatus, maxValue, maxId]\n        },\n        mapReduce: 'invoice_by_status'\n      };\n\n      if (searchStatus === 'All') {\n        delete queryParams.options.startkey;\n        delete queryParams.options.endkey;\n      }\n      return queryParams;\n    },\n\n    queryParams: {\n      startKey: { refreshModel: true },\n      status: { refreshModel: true }\n    }\n  });\n});","define('hospitalrun/tests/invoices/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/payment/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {\n    cancelAction: 'closeModal',\n    findPatientVisits: false,\n    invoiceController: _ember['default'].inject.controller('invoices'),\n    newPayment: false,\n\n    expenseAccountList: _ember['default'].computed.alias('invoiceController.expenseAccountList'),\n    patientList: _ember['default'].computed.alias('invoiceController.patientList'),\n\n    _finishUpdate: function _finishUpdate(message, title) {\n      this.send('closeModal');\n      this.displayAlert(title, message);\n    },\n\n    currentPatient: (function () {\n      var type = this.get('model.paymentType');\n      if (type === 'Deposit') {\n        return this.get('model.patient');\n      } else {\n        return this.get('model.invoice.patient');\n      }\n    }).property('model.patient', 'model.paymentType', 'model.invoice.patient'),\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      var type = this.get('model.paymentType');\n      if (isNew) {\n        return 'Add ' + type;\n      } else {\n        return 'Edit ' + type;\n      }\n    }).property('model.isNew', 'model.paymentType'),\n\n    selectPatient: (function () {\n      var isNew = this.get('model.isNew');\n      var type = this.get('model.paymentType');\n      return isNew && type === 'Deposit';\n    }).property('model.isNew', 'model.paymentType'),\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('model.isNew')) {\n        this.set('newPayment', true);\n      } else {\n        this.set('newPayment', false);\n      }\n      var patient = this.get('currentPatient');\n      this.set('model.charityPatient', patient.get('patientType') === 'Charity');\n      return _ember['default'].RSVP.resolve();\n    },\n\n    afterUpdate: function afterUpdate() {\n      this.get('model').save().then((function (record) {\n        var _this = this;\n\n        if (this.get('newPayment') === true) {\n          (function () {\n            var patient = _this.get('currentPatient');\n            patient.get('payments').then((function (payments) {\n              payments.addObject(record);\n              patient.save().then((function () {\n                var _this2 = this;\n\n                if (record.get('paymentType') === 'Deposit') {\n                  var message = 'A deposit of ' + record.get('amount') + ' was added for patient ' + patient.get('displayName');\n                  this._finishUpdate(message, 'Deposit Added');\n                } else {\n                  (function () {\n                    var invoice = _this2.get('model.invoice');\n                    invoice.addPayment(record);\n                    invoice.save().then((function () {\n                      var message = 'A payment of ' + record.get('amount') + ' was added to invoice ' + invoice.get('id');\n                      this._finishUpdate(message, 'Payment Added');\n                    }).bind(_this2));\n                  })();\n                }\n              }).bind(this));\n            }).bind(_this));\n          })();\n        } else {\n          this.send('closeModal');\n        }\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/invoices/payment/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/payment/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/payment/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/patient-list-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsModalHelper, _hospitalrunMixinsPatientListRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsPatientListRoute['default'], {\n    addCapability: 'add_invoice',\n    currentScreenTitle: 'Invoices',\n    editTitle: 'Edit Invoice',\n    newTitle: 'New Invoice',\n    moduleName: 'invoices',\n    newButtonText: '+ new invoice',\n    sectionTitle: 'Invoices',\n\n    additionalButtons: (function () {\n      if (this.currentUserCan('add_payment')) {\n        return [{\n          'class': 'btn btn-default',\n          buttonText: '+ add deposit',\n          buttonAction: 'showAddDeposit'\n        }];\n      }\n    }).property(),\n\n    additionalModels: [{\n      name: 'billingCategoryList',\n      findArgs: ['lookup', 'billing_categories']\n    }, {\n      name: 'expenseAccountList',\n      findArgs: ['lookup', 'expense_account_list']\n    }, {\n      name: 'pricingProfiles',\n      findArgs: ['price-profile']\n    }, {\n      name: 'printHeader',\n      findArgs: ['option', 'print_header']\n    }],\n\n    actions: {\n      showAddDeposit: function showAddDeposit() {\n        var payment = this.store.createRecord('payment', {\n          paymentType: 'Deposit',\n          datePaid: new Date()\n        });\n        this.send('openModal', 'invoices.payment', payment);\n      },\n\n      showAddPayment: function showAddPayment(invoice) {\n        var payment = this.store.createRecord('payment', {\n          invoice: invoice,\n          paymentType: 'Payment',\n          datePaid: new Date()\n        });\n        this.send('openModal', 'invoices.payment', payment);\n      },\n\n      showEditPayment: function showEditPayment(payment) {\n        if (this.currentUserCan('add_payment')) {\n          this.send('openModal', 'invoices.payment', payment);\n        }\n      }\n    },\n\n    subActions: (function () {\n      var actions = [{\n        text: 'Billed',\n        linkTo: 'invoices.index',\n        statusQuery: 'Billed'\n      }];\n      if (this.currentUserCan('add_invoice')) {\n        actions.push({\n          text: 'Drafts',\n          linkTo: 'invoices.index',\n          statusQuery: 'Draft'\n        });\n        actions.push({\n          text: 'All Invoices',\n          linkTo: 'invoices.index',\n          statusQuery: 'All'\n        });\n      }\n      if (this.currentUserCan('list_paid_invoices')) {\n        actions.push({\n          text: 'Paid',\n          linkTo: 'invoices.index',\n          statusQuery: 'Paid'\n        });\n      }\n      return actions;\n    }).property()\n\n  });\n});","define('hospitalrun/tests/invoices/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'invoices',\n    searchKeys: [{\n      name: 'externalInvoiceNumber',\n      type: 'contains'\n    }, {\n      name: 'patientInfo',\n      type: 'contains'\n    }],\n    searchModel: 'invoice'\n  });\n});","define('hospitalrun/tests/invoices/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({\n    labsEdit: _ember['default'].inject.controller('labs/edit'),\n    cancelAction: 'closeModal',\n    newPricingItem: false,\n    requestingController: _ember['default'].computed.alias('controllers.labs/edit'),\n    pricingList: _ember['default'].computed.alias('controllers.labs/edit.chargesPricingList')\n  });\n});","define('hospitalrun/tests/labs/charge/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/charge/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/charge/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    startKey: []\n  });\n});","define('hospitalrun/tests/labs/completed/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/completed/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/completed/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/completed/labs-completed-list-item/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'tr'\n  });\n});","define('hospitalrun/tests/labs/completed/labs-completed-list-item/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/completed/labs-completed-list-item/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/completed/labs-completed-list-item/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/completed/route', ['exports', 'hospitalrun/labs/index/route', 'ember-i18n'], function (exports, _hospitalrunLabsIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunLabsIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('labs.completedTitle'),\n    searchStatus: 'Completed'\n  });\n});","define('hospitalrun/tests/labs/completed/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/completed/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/completed/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {\n    title: (0, _emberI18n.translationMacro)('labs.deleteTitle'),\n\n    actions: {\n      'delete': function _delete() {\n        this.deleteChildFromVisit('labs');\n      }\n    }\n  });\n});","define('hospitalrun/tests/labs/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    labsController: _ember['default'].inject.controller('labs'),\n    chargePricingCategory: 'Lab',\n    chargeRoute: 'labs.charge',\n    selectedLabType: null,\n\n    canComplete: (function () {\n      var isNew = this.get('model.isNew');\n      var labTypeName = this.get('model.labTypeName');\n      var selectedLabType = this.get('selectedLabType');\n      if (isNew && (_ember['default'].isEmpty(labTypeName) || _ember['default'].isArray(selectedLabType) && selectedLabType.length > 1)) {\n        return false;\n      } else {\n        return this.currentUserCan('complete_lab');\n      }\n    }).property('selectedLabType.[]', 'model.labTypeName'),\n\n    actions: {\n      completeLab: function completeLab() {\n        this.set('model.status', 'Completed');\n        this.get('model').validate().then((function () {\n          if (this.get('model.isValid')) {\n            this.set('model.labDate', new Date());\n            this.send('update');\n          }\n        }).bind(this))['catch'](_ember['default'].K);\n      },\n\n      /**\n       * Update the model and perform the before update and after update\n       */\n      update: function update() {\n        var _this = this;\n\n        if (this.get('model.isNew')) {\n          (function () {\n            var newLab = _this.get('model');\n            var selectedLabType = _this.get('selectedLabType');\n            if (_ember['default'].isEmpty(_this.get('model.status'))) {\n              _this.set('model.status', 'Requested');\n            }\n            _this.set('model.requestedBy', newLab.getUserName());\n            _this.set('model.requestedDate', new Date());\n            if (_ember['default'].isEmpty(selectedLabType)) {\n              _this.saveNewPricing(_this.get('model.labTypeName'), 'Lab', 'model.labType').then((function () {\n                this.addChildToVisit(newLab, 'labs', 'Lab').then((function () {\n                  this.saveModel();\n                }).bind(this));\n              }).bind(_this));\n            } else {\n              _this.getSelectedPricing('selectedLabType').then((function (pricingRecords) {\n                if (_ember['default'].isArray(pricingRecords)) {\n                  this.createMultipleRequests(pricingRecords, 'labType', 'labs', 'Lab');\n                } else {\n                  this.set('model.labType', pricingRecords);\n                  this.addChildToVisit(newLab, 'labs', 'Lab').then((function () {\n                    this.saveModel();\n                  }).bind(this));\n                }\n              }).bind(_this));\n            }\n          })();\n        } else {\n          this.saveModel();\n        }\n      }\n    },\n\n    additionalButtons: (function () {\n      var canComplete = this.get('canComplete');\n      var isValid = this.get('model.isValid');\n      var i18n = this.get('i18n');\n      if (isValid && canComplete) {\n        return [{\n          buttonAction: 'completeLab',\n          buttonIcon: 'glyphicon glyphicon-ok',\n          'class': 'btn btn-primary on-white',\n          buttonText: i18n.t('buttons.complete')\n        }];\n      }\n    }).property('canComplete', 'model.isValid'),\n\n    pricingTypeForObjectType: 'Lab Procedure',\n    pricingTypes: _ember['default'].computed.alias('labsController.labPricingTypes'),\n\n    pricingList: null, // This gets filled in by the route\n\n    updateCapability: 'add_lab',\n\n    afterUpdate: function afterUpdate(saveResponse, multipleRecords) {\n      var i18n = this.get('i18n');\n      var afterDialogAction = undefined,\n          alertMessage = undefined,\n          alertTitle = undefined;\n      if (this.get('model.status') === 'Completed') {\n        alertTitle = i18n.t('labs.alerts.requestCompletedTitle');\n        alertMessage = i18n.t('labs.alerts.requestCompletedMessage');\n      } else {\n        alertTitle = i18n.t('labs.alerts.requestSavedTitle');\n        alertMessage = i18n.t('labs.alerts.requestSavedMessage');\n      }\n      if (multipleRecords) {\n        afterDialogAction = this.get('cancelAction');\n      }\n      this.saveVisitIfNeeded(alertTitle, alertMessage, afterDialogAction);\n      this.set('model.selectPatient', false);\n    }\n\n  });\n});","define('hospitalrun/tests/labs/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/add-to-patient-route', 'hospitalrun/mixins/charge-route', 'ember', 'moment', 'hospitalrun/mixins/patient-list-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsAddToPatientRoute, _hospitalrunMixinsChargeRoute, _ember, _moment, _hospitalrunMixinsPatientListRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsAddToPatientRoute['default'], _hospitalrunMixinsChargeRoute['default'], _hospitalrunMixinsPatientListRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('labs.editTitle'),\n    modelName: 'lab',\n    newTitle: (0, _emberI18n.translationMacro)('labs.newTitle'),\n    pricingCategory: 'Lab',\n    customForms: _ember['default'].inject.service(),\n\n    actions: {\n      returnToAllItems: function returnToAllItems() {\n        this.controller.send('returnToAllItems');\n      }\n    },\n\n    getNewData: function getNewData() {\n      var newLabData = {\n        selectPatient: true,\n        requestDate: (0, _moment['default'])().startOf('day').toDate(),\n        customForms: _ember['default'].Object.create()\n      };\n      var customForms = this.get('customForms');\n      return customForms.setDefaultCustomForms(['lab'], newLabData);\n    }\n  });\n});","define('hospitalrun/tests/labs/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    addPermission: 'add_lab'\n  });\n});","define('hospitalrun/tests/labs/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/index/labs-edit-button/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'button',\n    classNames: ['btn', 'btn-default', 'neutral']\n  });\n});","define('hospitalrun/tests/labs/index/labs-edit-button/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/index/labs-edit-button/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/index/labs-edit-button/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/index/labs-list-item/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'tr',\n    classNames: ['clickable'],\n\n    click: function click() {\n      this.sendAction('action', this.lab);\n    }\n  });\n});","define('hospitalrun/tests/labs/index/labs-list-item/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/index/labs-list-item/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/index/labs-list-item/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'lab',\n    pageTitle: (0, _emberI18n.translationMacro)('labs.requestsTitle'),\n    searchStatus: 'Requested',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var labDateAsTime = item.get('labDateAsTime');\n      var id = this._getPouchIdFromItem(item);\n      var requestedDateAsTime = item.get('requestedDateAsTime');\n      var searchStatus = this.get('searchStatus');\n      return [searchStatus, requestedDateAsTime, labDateAsTime, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var maxId = this._getMaxPouchId();\n      var maxValue = this.get('maxValue');\n      var minId = this._getMinPouchId();\n      var searchStatus = this.get('searchStatus');\n      return {\n        options: {\n          startkey: [searchStatus, null, null, minId],\n          endkey: [searchStatus, maxValue, maxValue, maxId]\n        },\n        mapReduce: 'lab_by_status'\n      };\n    }\n  });\n});","define('hospitalrun/tests/labs/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_lab',\n    additionalModels: [{\n      name: 'labPricingTypes',\n      findArgs: ['lookup', 'lab_pricing_types']\n    }],\n    allowSearch: false,\n    moduleName: 'labs',\n    newButtonText: (0, _emberI18n.translationMacro)('labs.buttons.newButton'),\n    sectionTitle: (0, _emberI18n.translationMacro)('labs.sectionTitle')\n  });\n});","define('hospitalrun/tests/labs/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/de/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    admin: {\n      address: {\n        address1Label: 'Adresse 1 Kennzeichen',\n        address2Label: 'Adresse 2 Kennzeichen',\n        address3Label: 'Adresse 3 Kennzeichen',\n        address4Label: 'Adresse 4 Kennzeichen',\n        addressLabel: '',\n        editTitle: '',\n        include1Label: 'Einbezug 1 Kennzeichen',\n        include2Label: 'Einbezug 2 Kennzeichen',\n        include3Label: 'Einbezug 3 Kennzeichen',\n        include4Label: 'Einbezug 4 Kennzeichen',\n        messages: { addressSaved: 'Die Adressoptionen wurden gespeichert' },\n        newTitle: '',\n        titles: { optionsSaved: 'Optionen gespeichert' }\n      },\n      addressOptions: 'Adressoptionen',\n      customForms: {\n        buttons: {\n          addField: '',\n          moveDown: '',\n          moveUp: '',\n          newForm: '',\n          preview: ''\n        },\n        labels: {\n          alwaysInclude: '',\n          checkbox: '',\n          colSpan: '',\n          columns: '',\n          customForm: '',\n          dischargeReportFormType: '',\n          formName: '',\n          formType: '',\n          incidentFormType: '',\n          includeOtherOption: '',\n          labFormType: '',\n          label: '',\n          newForm: '',\n          opdReportFormType: '',\n          operativePlanFormType: '',\n          otherOptionLabel: '',\n          patientFormType: '',\n          property: '',\n          radio: '',\n          select: '',\n          socialworkFormType: '',\n          text: '',\n          textarea: '',\n          visitFormType: ''\n        },\n        messages: { formSaved: '' },\n        titles: {\n          checkboxValues: '',\n          customForms: '',\n          deleteForm: '',\n          dropDownValues: '',\n          editCustomForm: '',\n          fields: '',\n          formSaved: '',\n          newCustomForm: '',\n          radioValues: ''\n        }\n      },\n      header: {\n        editTitle: '',\n        facilityName: '',\n        headerLabel: '',\n        headerLine1: '',\n        headerLine2: '',\n        headerLine3: '',\n        logoURL: '',\n        messages: { headerSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      loadDb: 'Datenbank laden',\n      loaddb: {\n        displayAlertMessage: '',\n        displayAlertTitle: '',\n        editTitle: '',\n        errorDisplayAlertMessage: '',\n        errorDisplayAlertTitle: '',\n        progressMessage: '',\n        progressTitle: ''\n      },\n      lookup: {\n        aisleLocationList: 'Gänge-Verzeichnis',\n        alertImportListMessage: '',\n        alertImportListSaveMessage: '',\n        alertImportListSaveTitle: '',\n        alertImportListTitle: '',\n        alertImportListUpdateMessage: '',\n        alertImportListUpdateTitle: '',\n        anesthesiaTypes: 'Anästhesiearten',\n        anesthesiologists: 'Anästhesiologe',\n        billingCategories: 'Abrechnungskategorien',\n        clinicList: 'Kliniken',\n        countryList: 'Länder',\n        cptCodeList: 'CPT Codes',\n        diagnosisList: 'Diagnosen',\n        edit: { template: {\n            addTitle: '',\n            editTitle: '',\n            labelTitle: '',\n            updateButtonTextAdd: '',\n            updateButtonTextUpdate: ''\n          } },\n        expenseAccountList: 'Ausgabekonten',\n        imagingPricingTypes: 'Bildgebungs-Preiskategorien',\n        incidentDepartments: '',\n        inventoryTypes: 'Inventartypen',\n        labPricingTypes: 'Labor-Preiskategorien',\n        pageTitle: '',\n        patientStatusList: 'Patientenstatus',\n        physicianList: 'Ärzte',\n        procedureList: 'Abläufe',\n        procedureLocations: 'Ablaufs-Orte',\n        procedurePricingTypes: 'Ablaufs-Preiskategorien',\n        radiologists: 'Radiologen',\n        titles: { deleteLookupValue: '' },\n        unitTypes: 'Einheiten',\n        vendorList: 'Anbieter',\n        visitLocationList: 'Einsatzorte',\n        visitTypes: 'Besuchsarten',\n        wardPricingTypes: 'Krankenstations-Preistypen',\n        warehouseList: 'Warenhaus'\n      },\n      lookupLists: 'Nachschlagelisten',\n      roles: {\n        capability: {\n          addAllergy: '',\n          addAppointment: '',\n          addBillingDiagnosis: '',\n          addCharge: '',\n          addDiagnosis: '',\n          addImaging: '',\n          addIncident: '',\n          addIncidentCategory: '',\n          addInventoryItem: '',\n          addInventoryPurchase: '',\n          addInventoryRequest: '',\n          addInvoice: '',\n          addLab: '',\n          addMedication: '',\n          addNote: '',\n          addOperationReport: '',\n          addOperativePlan: '',\n          addPatient: '',\n          addPayment: '',\n          addPhoto: '',\n          addPricing: '',\n          addPricingProfile: '',\n          addProcedure: '',\n          addSocialwork: '',\n          addVisit: '',\n          addVitals: '',\n          adjustInventoryLocation: '',\n          admin: '',\n          admitPatient: '',\n          appointments: '',\n          billing: '',\n          completeImaging: '',\n          completeLab: '',\n          defineUserRoles: '',\n          deleteAppointment: '',\n          deleteDiagnosis: '',\n          deleteImaging: '',\n          deleteIncident: '',\n          deleteIncidentCategory: '',\n          deleteInventoryItem: '',\n          deleteInvoice: '',\n          deleteLab: '',\n          deleteMedication: '',\n          deleteNote: '',\n          deletePatient: '',\n          deletePhoto: '',\n          deletePricing: '',\n          deletePricingProfile: '',\n          deleteProcedure: '',\n          deleteSocialwork: '',\n          deleteVisit: '',\n          deleteVitals: '',\n          dischargePatient: '',\n          editInvoice: '',\n          fulfillInventory: '',\n          fulfillMedication: '',\n          generateIncidentReport: '',\n          imaging: '',\n          incident: '',\n          inventory: '',\n          invoices: '',\n          labs: '',\n          loadDb: '',\n          manageIncidents: '',\n          medication: '',\n          overrideInvoice: '',\n          patientReports: '',\n          patients: '',\n          pricing: '',\n          updateConfig: '',\n          visits: ''\n        },\n        messages: { roleSaved: '' },\n        titles: { roleSaved: '' }\n      },\n      userRoles: '',\n      users: 'Benutzer',\n      visitForms: {\n        labels: {\n          followup: '',\n          form: '',\n          initial: '',\n          visitType: ''\n        },\n        titles: { visitForms: '' }\n      },\n      workflow: {\n        admissionDepositLabel: '',\n        clinicPrepaymentLabel: '',\n        editTitle: '',\n        followupPrepaymentLabel: '',\n        messages: { optionsSaved: '' },\n        newTitle: '',\n        outpatientImagingLabel: '',\n        outpatientLabLabel: '',\n        outpatientMedicationLabel: '',\n        titles: { optionsSaved: '' },\n        workflowLabel: ''\n      }\n    },\n    alerts: {\n      errorExclamation: '',\n      pleaseWait: '',\n      reportError: '',\n      warningExclamation: ''\n    },\n    allergies: {\n      buttons: { addAllergy: '' },\n      labels: {\n        allergyName: '',\n        patientAllergy: ''\n      },\n      titles: {\n        addAllergy: '',\n        editAllergy: ''\n      }\n    },\n    application: {\n      messages: { sessionExpired: '' },\n      titles: { sessionExpired: '' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '',\n        scheduleSurgery: ''\n      },\n      calendarTitle: '',\n      currentScreenTitle: '',\n      editTitle: '',\n      labels: {\n        noLocation: '',\n        selectedStartingDate: ''\n      },\n      messages: {\n        appointmentSaved: '',\n        endTimeLaterThanStart: ''\n      },\n      missed: '',\n      newTitle: '',\n      searchTitle: '',\n      sectionTitle: '',\n      thisWeek: '',\n      titles: {\n        appointmentSaved: '',\n        editSurgicalAppointment: '',\n        newSurgicalAppointment: '',\n        theaterSchedule: ''\n      },\n      todayTitle: ''\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: '',\n        noPricingItems: '',\n        noPricingProfiles: ''\n      },\n      buttons: {\n        addOverride: '',\n        createInvoice: ''\n      },\n      labels: {\n        actualCharges: '',\n        discountAmount: '',\n        discountPercentage: '',\n        externalInvoiceNumber: '',\n        hmoCom: '',\n        insurance: '',\n        paymentProfile: '',\n        paymentsDeposits: '',\n        pricingPanelOverrides: '',\n        pricingProfile: ''\n      }\n    },\n    buttons: {\n      add: 'Hinzufügen',\n      addItem: '',\n      addLineItem: '',\n      addValue: 'Wert hinzufügen',\n      addVisit: '',\n      allRequests: '',\n      barcode: '',\n      cancel: 'Abbrechen',\n      clear: '',\n      close: '',\n      complete: 'Abschließen',\n      'delete': 'Entfernen',\n      dispense: '',\n      edit: '',\n      filter: '',\n      fulfill: '',\n      'import': 'Importieren',\n      loadFile: 'Datei laden',\n      newItem: '',\n      newNote: '',\n      newRequest: '',\n      newRequestPlus: '',\n      newUser: 'Neuer Benutzer',\n      ok: 'Okay',\n      remove: '',\n      returnButton: 'Zurück',\n      search: '',\n      showAll: '',\n      showFewer: '',\n      update: 'Aktualisieren'\n    },\n    components: {\n      chargesByTypeTab: { charges: '' },\n      customFormManager: { buttons: { addForm: '' } },\n      dateTimePicker: {\n        amHour: '',\n        midnight: '',\n        noon: '',\n        pmHour: ''\n      },\n      imageUpload: { messages: { selectValidImageFile: '' } },\n      operativeProcedures: {\n        buttons: { addProcedure: '' },\n        labels: { procedure: '' },\n        titles: { procedures: '' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: '',\n          newLab: '',\n          newMedication: ''\n        },\n        labels: {\n          imagingOrderType: '',\n          labOrderType: '',\n          medicationOrderType: '',\n          orderType: ''\n        }\n      },\n      priceList: { charges: '' },\n      quantityCalc: { result: '' },\n      quantityConv: {\n        conversion: '',\n        unit: ''\n      },\n      sortableColumn: { labels: { selectAll: '' } },\n      takePhoto: {\n        camera: '',\n        how: '',\n        labels: {\n          takeAPicture: '',\n          uploadAFile: ''\n        },\n        photo: '',\n        preview: '',\n        takePhoto: '',\n        uploadFile: ''\n      },\n      upcomingAppointments: {\n        labels: {\n          date: '',\n          location: '',\n          type: '',\n          'with': ''\n        },\n        titles: { upcomingAppointments: '' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: '' },\n      labels: { formToAdd: '' },\n      titles: { addCustomForm: '' }\n    },\n    dashboard: {\n      setup: '',\n      title: 'Was möchten Sie tun?'\n    },\n    dates: {\n      'long': '',\n      longOmitDays: '',\n      longOmitDaysPlural: '',\n      longOmitDaysYears: '',\n      longOmitYears: '',\n      longPlural: '',\n      'short': '',\n      shortOmitYears: ''\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: '',\n        date: '',\n        diagnosis: '',\n        secondaryDiagnosis: ''\n      },\n      titles: {\n        addDiagnosis: '',\n        editDiagnosis: ''\n      }\n    },\n    errors: {\n      accepted: '',\n      blank: '',\n      confirmation: '',\n      empty: '',\n      equalTo: '',\n      even: '',\n      exclusion: '',\n      greaterThan: '',\n      greaterThanOrEqualTo: '',\n      inclusion: '',\n      invalid: '',\n      invalidNumber: '',\n      lessThan: '',\n      lessThanOrEqualTo: '',\n      notANumber: '',\n      notAnInteger: '',\n      odd: '',\n      otherThan: '',\n      present: '',\n      result: '',\n      tooLong: '',\n      tooShort: '',\n      wrongLength: ''\n    },\n    headings: { chargedItems: '' },\n    imaging: {\n      alerts: {\n        completedMessage: 'Die Anfrage zur Bildgebung wurde abgeschlossen.',\n        completedTitle: 'Bildgebungs-Anfrage gestellt',\n        savedMessage: 'Die Anfrage zur Bildgebung wurde gespeichert.',\n        savedTitle: 'Bildgebungs-Anfrage gespeichert'\n      },\n      buttons: { newButton: '+ Neue Bildgebung' },\n      labels: {\n        addNewVisit: '--Neuen Besuch hinzufügen--',\n        radiologist: 'Radiologe'\n      },\n      messages: { noCompleted: 'Keine erledigten Einträge gefunden.' },\n      pageTitle: 'Anfrage zur Bildgebung',\n      sectionTitle: 'Bildgebung',\n      titles: {\n        completedImaging: 'Erledigte Bildgebung',\n        editTitle: 'Bildgebungs-Anfrage bearbeiten',\n        newTitle: 'Neue Bildgebungs-Anfrage'\n      }\n    },\n    incident: {\n      buttons: {\n        add: '',\n        addForm: '',\n        addItem: '',\n        cancel: '',\n        'delete': '',\n        download: '',\n        edit: '',\n        'export': '',\n        generateRep: '',\n        newAttachment: '',\n        newCategory: '',\n        newIncident: '',\n        newNote: ''\n      },\n      labels: {\n        actions: '',\n        addedBy: '',\n        category: '',\n        categoryItem: '',\n        date: '',\n        dateRecorded: '',\n        department: '',\n        description: '',\n        endDate: '',\n        givenBy: '',\n        howToAddAttachment: '',\n        incidentDate: '',\n        incidentId: '',\n        item: '',\n        lastUpdated: '',\n        note: '',\n        patientId: '',\n        patientImpacted: '',\n        reportType: '',\n        reportedBy: '',\n        reportedDate: '',\n        reportedTo: '',\n        sentinelEvent: '',\n        startDate: '',\n        status: '',\n        statusActive: '',\n        statusClosed: '',\n        statusFollowup: '',\n        statusReported: '',\n        title: '',\n        total: '',\n        updatedBy: ''\n      },\n      messages: {\n        attachmentFileRequired: '',\n        createNew: '',\n        createNewIncidentCategory: '',\n        fillIn: '',\n        incidentCategorySaved: '',\n        noClosedIncidents: '',\n        noIncidentCategoriesFound: '',\n        noIncidents: '',\n        saved: '',\n        selectExistingPatient: ''\n      },\n      titles: {\n        addAttachment: '',\n        addCategoryItem: '',\n        addNote: '',\n        attachments: '',\n        closed: '',\n        current: '',\n        deleteAttachment: '',\n        deleteIncident: '',\n        deleteIncidentCategory: '',\n        deleteItem: '',\n        deleteNote: '',\n        editAttachment: '',\n        editIncident: '',\n        editIncidentCategory: '',\n        editNote: '',\n        general: '',\n        history: '',\n        incidentCategories: '',\n        incidentCategoryItem: '',\n        incidentCategoryName: '',\n        incidentCategorySaved: '',\n        incidentSaved: '',\n        incidents: '',\n        incidentsByCategory: '',\n        incidentsByDepartment: '',\n        newIncident: '',\n        newIncidentCategory: '',\n        notes: '',\n        reports: ''\n      }\n    },\n    inventory: {\n      edit: {\n        cost: '',\n        delivered: '',\n        location: '',\n        prescription: '',\n        pulled: '',\n        quantity: '',\n        reason: '',\n        returned: '',\n        transferredFrom: '',\n        transferredTo: ''\n      },\n      labels: {\n        action: '',\n        add: '',\n        addAdjustmentType: '',\n        adjust: '',\n        adjustmentDate: '',\n        adjustmentFor: '',\n        adjustmentType: '',\n        aisle: '',\n        aisleLocation: '',\n        allInventory: '',\n        allItems: '',\n        availableQuantity: '',\n        billTo: '',\n        consumePurchases: '',\n        consumptionRate: '',\n        cost: '',\n        costPerUnit: '',\n        crossReference: '',\n        currentQuantity: '',\n        dateCompleted: '',\n        dateEffective: '',\n        dateEnd: '',\n        dateReceived: '',\n        dateStart: '',\n        dateTransferred: '',\n        daysLeft: '',\n        deleteItem: '',\n        deliveryAisle: '',\n        deliveryLocation: '',\n        details: '',\n        distributionUnit: '',\n        editItem: '',\n        expense: '',\n        expirationDate: '',\n        fulfillRequest: '',\n        fulfillRequestNow: '',\n        gift: '',\n        giftInKindNo: '',\n        giftInKindYes: '',\n        giftUsage: '',\n        inventoryConsumed: '',\n        inventoryItem: '',\n        inventoryObsolence: '',\n        invoiceItems: '',\n        invoiceLineItem: '',\n        invoiceNumber: '',\n        item: '',\n        itemNumber: '',\n        items: '',\n        location: '',\n        locations: '',\n        markAsConsumed: '',\n        name: '',\n        newItem: '',\n        originalQuantity: '',\n        print: '',\n        printBarcode: '',\n        printer: '',\n        pullFrom: '',\n        purchaseCost: '',\n        purchaseInfo: '',\n        purchases: '',\n        quantity: '',\n        quantityAvailable: '',\n        quantityOnHand: '',\n        quantityRequested: '',\n        rank: '',\n        reason: '',\n        remove: '',\n        removeAdjustmentType: '',\n        reorderPoint: '',\n        requestedItems: '',\n        returnAdjustmentType: '',\n        returnToVendorAdjustmentType: '',\n        salePricePerUnit: '',\n        save: '',\n        serialNumber: '',\n        total: '',\n        totalCost: '',\n        totalReceived: '',\n        transaction: '',\n        transactions: '',\n        transfer: '',\n        transferFrom: '',\n        transferTo: '',\n        transferToAisle: '',\n        unit: '',\n        unitCost: '',\n        vendor: '',\n        vendorItemNumber: '',\n        writeOffAdjustmentType: '',\n        xref: ''\n      },\n      messages: {\n        adjust: '',\n        createRequest: 'Neue Anfrage erstellen?',\n        itemNotFound: '',\n        loading: '',\n        noItems: '',\n        noRequests: 'Keine Anfragen gefunden.',\n        purchaseSaved: '',\n        quantity: '',\n        removeItem: '',\n        removeItemRequest: '',\n        requestFulfilled: '',\n        requestUpdated: '',\n        warning: ''\n      },\n      reports: {\n        adjustment: '',\n        daysSupply: '',\n        expenseDetail: '',\n        expenseSum: '',\n        expiration: '',\n        'export': '',\n        fields: '',\n        finance: '',\n        generate: '',\n        invLocation: '',\n        invValuation: '',\n        purchaseDetail: '',\n        purchaseSum: '',\n        reportType: '',\n        rows: {\n          adjustments: '',\n          adjustmentsTotal: '',\n          balanceBegin: '',\n          balanceEnd: '',\n          category: '',\n          consumed: '',\n          consumedGik: '',\n          consumedGikTotal: '',\n          consumedPuchases: '',\n          consumedPurchasesTotal: '',\n          consumedTotal: '',\n          errInFinSum: '',\n          errInFindPur: '',\n          errInFindReq: '',\n          expensesFor: '',\n          noAccount: '',\n          subtotal: '',\n          subtotalFor: '',\n          total: '',\n          totalFor: '',\n          totalPurchases: '',\n          transfer1: '',\n          trasnfer2: ''\n        },\n        stockTransferDetail: '',\n        stockTransferSum: '',\n        stockUsageDetail: '',\n        stockUsageSum: '',\n        titleDateRange: '',\n        titleSingleDate: ''\n      },\n      titles: {\n        addPurchase: '',\n        addRequest: '',\n        adjustment: '',\n        editPurchase: '',\n        editRequest: '',\n        inventoryItem: '',\n        inventoryReport: '',\n        purchaseSaved: '',\n        quickAddTitle: '',\n        removeItem: '',\n        requestFulfilled: '',\n        requestUpdated: '',\n        transfer: '',\n        warning: ''\n      }\n    },\n    labels: {\n      action: 'Aktion',\n      actions: 'Aktionen',\n      addNewOutpatientVisit: '',\n      address: '',\n      age: 'Alter',\n      allDay: '',\n      amount: '',\n      anesthesia: '',\n      assisting: '',\n      balanceDue: '',\n      billDate: '',\n      billTo: '',\n      category: '',\n      completed: 'Erledigt',\n      country: '',\n      cptcode: '',\n      creditTo: '',\n      date: '',\n      dateCompleted: 'Abschlussdatum',\n      dateOfBirth: '',\n      dateOfBirthShort: '',\n      datePaid: '',\n      dateRequested: 'Anfragedatum',\n      'delete': 'Entfernen',\n      deleteRequest: '',\n      deleteUser: 'Benutzer löschen',\n      department: '',\n      description: '',\n      discount: '',\n      displayName: 'Angezeigter Name',\n      docRead: 'Dokument gelesen',\n      docWritten: 'Dokument geschrieben',\n      edit: 'Bearbeiten',\n      editUser: 'Benutzer bearbeiten',\n      email: 'E-Mail',\n      endDate: '',\n      endTime: 'Endzeit',\n      excess: '',\n      expenseTo: '',\n      fileLoadSuccessful: 'Datei erfolgreich geladen',\n      fileName: '',\n      fileToLoad: 'Datei laden',\n      fulfill: 'Ausführen',\n      fulfillRequest: '',\n      fulfillRequestNow: '',\n      fulfilled: '',\n      grandTotal: '',\n      id: 'Id-Nr',\n      imageOrders: '',\n      imagingType: 'Bildgebungsart',\n      importFile: 'Datei importieren',\n      invoiceId: '',\n      labOrders: '',\n      lineItems: '',\n      loading: '',\n      location: '',\n      lookupType: 'Nachschlagebereich',\n      medication: '',\n      name: 'Name',\n      newUser: 'Neuer Benutzer',\n      note: '',\n      notes: 'Notizen',\n      number: '',\n      on: '',\n      password: 'Passwort',\n      patient: 'Patient',\n      payments: '',\n      physician: '',\n      prescriber: '',\n      prescription: '',\n      prescriptionDate: '',\n      price: '',\n      print: '',\n      procedures: '',\n      provider: '',\n      pullFrom: '',\n      quantity: 'Anzahl',\n      remarks: '',\n      requestedBy: 'Angefragt von',\n      requestedOn: 'Angefragt am',\n      requests: 'Anfragen',\n      result: 'Ergebnis',\n      results: 'Ergebnisse',\n      role: 'Rolle',\n      search: '',\n      sex: 'Geschlecht',\n      startDate: '',\n      startTime: 'Startzeit',\n      status: '',\n      takenBy: '',\n      total: '',\n      type: '',\n      userCanAddNewValue: 'Benutzer kann neue Werte hinzufügen',\n      username: 'Username',\n      value: 'Wert',\n      view: '',\n      visit: 'Besuch',\n      'with': ''\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: '',\n        requestCompletedTitle: '',\n        requestSavedMessage: '',\n        requestSavedTitle: ''\n      },\n      buttons: { newButton: '' },\n      completedTitle: '',\n      deleteTitle: '',\n      editTitle: '',\n      labels: {\n        addNewVisit: '',\n        labType: ''\n      },\n      messages: {\n        createNewRecord: '',\n        noCompleted: '',\n        noItemsFound: ''\n      },\n      newTitle: '',\n      requestsTitle: '',\n      sectionTitle: ''\n    },\n    languages: {\n      en: 'Englisch',\n      fr: 'Französisch',\n      es: 'Spanisch',\n      de: 'Deutsche',\n      ru: 'Russisch',\n      'es-co': 'Spanisch (Kolumbianisch)',\n      'pt-br': 'Portugiesisch (Brasilianer)',\n      tr: 'Türkisch',\n      ur: 'Urdu'\n    },\n    loading: {\n      messages: {\n        '0': '',\n        '1': '',\n        '2': '',\n        '3': '',\n        '4': '',\n        '5': '',\n        '6': '',\n        '7': '',\n        '8': '',\n        '9': '',\n        '10': '',\n        '11': ''\n      },\n      progressBar: { progress: '' }\n    },\n    login: {\n      labels: {\n        password: 'Passwort',\n        signIn: 'Anmelden',\n        username: 'Benutzername'\n      },\n      messages: {\n        error: 'Benutzername oder Passwort falsch.',\n        signIn: 'Bitte anmelden'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: '',\n        returnedMessage: '',\n        returnedTitle: '',\n        savedMessage: '',\n        savedTitle: ''\n      },\n      buttons: {\n        dispenseMedication: '',\n        newButton: '',\n        returnMedication: ''\n      },\n      labels: {\n        adjustmentDate: '',\n        creditToAccount: '',\n        quantityDispensed: '',\n        quantityDistributed: '',\n        quantityRequested: '',\n        quantityToReturn: '',\n        refills: '',\n        returnAisle: '',\n        returnLocation: '',\n        returnReason: ''\n      },\n      messages: { createNew: '' },\n      pageTitle: '',\n      returnMedication: '',\n      sectionTitle: '',\n      titles: {\n        completedMedication: '',\n        editMedicationRequest: '',\n        newMedicationRequest: ''\n      }\n    },\n    messages: {\n      createNewRecord: 'Neuen Eintrag erstellen?',\n      createNewUser: 'Neuen Benutzer hinzufügen?',\n      'delete': '',\n      delete_plural: '',\n      delete_singular: '',\n      forAuthorizedPersons: 'Dieser Bericht ist nur für autorisierte Personen.',\n      newPatientHasToBeCreated: '',\n      noHistoryAvailable: '',\n      noItemsFound: 'Keine Einträge gefunden.',\n      noNotesAvailable: '',\n      noUsersFound: 'Keine Benutzer gefunden.',\n      onBehalfOf: '',\n      reportError: '',\n      requiredFieldsCorrectErrors: '',\n      saveActionException: '',\n      sorry: '',\n      userHasBeenSaved: 'Der Benutzer wurde gespeichert.',\n      userSaved: 'Benutzer gespeichert'\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: '',\n          appointmentDate: '',\n          appointmentType: '',\n          endDate: '',\n          location: '',\n          notes: '',\n          patient: '',\n          provider: '',\n          startDate: '',\n          status: '',\n          type: ''\n        },\n        names: {\n          plural: '',\n          singular: ''\n        }\n      },\n      attachment: { names: {\n          plural: '',\n          singular: ''\n        } },\n      form: { names: {\n          plural: '',\n          singular: ''\n        } },\n      imaging: {\n        names: '',\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      incident: { names: {\n          plural: '',\n          singular: ''\n        } },\n      item: { names: {\n          plural: '',\n          singular: ''\n        } },\n      lab: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      medication: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      note: { names: {\n          plural: '',\n          singular: ''\n        } },\n      patient: {\n        labels: { name: '' },\n        names: { singular: '' }\n      },\n      procedure: { names: {\n          plural: '',\n          singular: ''\n        } },\n      user: { names: {\n          plural: '',\n          singular: ''\n        } },\n      visit: { names: {\n          plural: '',\n          singular: ''\n        } },\n      vital: { names: {\n          plural: '',\n          singular: ''\n        } }\n    },\n    navigation: {\n      about: 'Über HospitalRun',\n      actions: {\n        login: 'Anmelden',\n        logout: 'Abmelden',\n        selectLanguage: 'Sprache auswählen'\n      },\n      administration: 'Administration',\n      billing: 'Abrechnung',\n      imaging: 'Bildgebung',\n      incident: '',\n      inventory: 'Inventar',\n      labs: 'Labore',\n      medication: 'Medikation',\n      patients: 'Patienten',\n      scheduling: '',\n      subnav: {\n        actions: '',\n        addAppointment: 'Termin eintragen',\n        addressFields: 'Adressfelder',\n        admittedPatients: '',\n        appointmentSearch: '',\n        appointmentsCalendar: '',\n        appointmentsThisWeek: '',\n        completed: 'Erledigt',\n        currentIncidents: '',\n        customForms: '',\n        dispense: 'Verabreichen',\n        history: '',\n        incidentCategories: '',\n        inventoryReceived: 'Eingeganges Inventar',\n        invoices: 'Rechnungen',\n        items: 'Einheiten',\n        loadDB: '',\n        lookupLists: 'Nachschlagelisten',\n        missedAppointments: '',\n        newIncident: '',\n        newInvoice: 'Neue Rechnung',\n        newPatient: 'Neuer Patient',\n        newRequest: 'Neue Anfrage',\n        newUser: 'Neuer Benutzer',\n        outpatient: '',\n        patientListing: 'Patietenliste',\n        priceProfiles: 'Preisprofile',\n        prices: 'Kosten',\n        printHeader: '',\n        reports: 'Berichte',\n        requests: 'Anfragen',\n        returnMedication: 'Medikamente zurückgeben',\n        scheduleSurgery: '',\n        theaterSchedule: '',\n        \"today'sAppointments\": '',\n        userRoles: '',\n        users: 'Benutzer',\n        workflow: ''\n      }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: '',\n        assistant: '',\n        caseComplexity: '',\n        operationDescription: '',\n        preOpPrimaryDiagnosis: '',\n        preOpSecondaryDiagnosis: '',\n        surgeon: '',\n        surgeryDate: ''\n      },\n      messages: { reportSaved: '' },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        reportSaved: ''\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: '' },\n      labels: {\n        additionalNotes: '',\n        admissionInstructions: '',\n        caseComplexity: '',\n        completedStatus: '',\n        droppedStatus: '',\n        operationDescription: '',\n        plannedStatus: '',\n        status: '',\n        surgeon: ''\n      },\n      messages: {\n        planCompleted: '',\n        planSaved: ''\n      },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        planCompleted: '',\n        planSaved: ''\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: '',\n        addExpense: '',\n        addFamilyMember: '',\n        addOperativePlan: '',\n        backToPatients: '',\n        download: '',\n        editOperativePlan: '',\n        newAppointment: '',\n        newImaging: '',\n        newLab: '',\n        newMedication: '',\n        newPatient: '',\n        newPhoto: '',\n        newVisit: '',\n        patientCheckIn: '',\n        scheduleSurgery: ''\n      },\n      labels: {\n        admissionDate: '',\n        admit: '',\n        bloodType: '',\n        caption: '',\n        civilStatus: '',\n        clinic: '',\n        contacts: '',\n        cost: '',\n        dateOfBirth: '',\n        dateProcessed: '',\n        dischargeDate: '',\n        dob: '',\n        education: '',\n        email: '',\n        externalPatientId: '',\n        firstName: '',\n        income: '',\n        insurance: '',\n        lastName: '',\n        middleName: '',\n        monthlyCost: '',\n        occupation: '',\n        operativePlan: '',\n        parent: '',\n        patientDays: '',\n        patientType: '',\n        patientTypeCharity: '',\n        patientTypePrivate: '',\n        phone: '',\n        placeOfBirth: '',\n        primaryDiagnosis: '',\n        referredBy: '',\n        referredDate: '',\n        relationship: '',\n        relationships: '',\n        religion: '',\n        secondaryDiagnosis: '',\n        sex: '',\n        sexNotEntered: '',\n        sources: '',\n        status: '',\n        totalMontlyExpense: ''\n      },\n      messages: {\n        areYouSureDelete: '',\n        createNewPatient: '',\n        deletingPatient: '',\n        noPatientsFound: '',\n        notFoundQuickAdd: '',\n        photoFileRequired: '',\n        savedPatient: ''\n      },\n      navigation: {\n        appointments: '',\n        general: '',\n        history: '',\n        imaging: '',\n        labs: '',\n        medication: '',\n        photos: '',\n        socialWork: '',\n        visits: ''\n      },\n      notes: {\n        newNote: '',\n        onBehalfOfCopy: '',\n        onBehalfOfLabel: '',\n        pleaseSelectAVisit: '',\n        updateNote: ''\n      },\n      titles: {\n        addContact: '',\n        addPhoto: '',\n        additionalContacts: '',\n        admissionsDetail: '',\n        admissionsSummary: '',\n        admittedPatients: '',\n        'delete': '',\n        deleteContact: '',\n        deleteExpense: '',\n        deleteFamilyMember: '',\n        deletePatientRecord: '',\n        deletePhoto: '',\n        diagnosticTesting: '',\n        dischargesDetail: '',\n        dischargesSummary: '',\n        edit: '',\n        editPhoto: '',\n        expenses: '',\n        familyInfo: '',\n        familyInformation: '',\n        'new': '',\n        outpatientsForDate: '',\n        patient: '',\n        patientListing: '',\n        patientReport: '',\n        patientStatus: '',\n        proceduresDetail: '',\n        proceduresSummary: '',\n        savedPatient: '',\n        socialWork: '',\n        todaysOutpatients: '',\n        totalPatientDays: '',\n        totalPatientDaysDetailed: '',\n        visit: ''\n      }\n    },\n    print: { invoice: {\n        labels: {\n          billedBy: '',\n          billedDate: '',\n          dateAdmitted: '',\n          dateDischarged: '',\n          dischargeNotes: '',\n          patientAddress: '',\n          patientAge: '',\n          patientId: '',\n          patientName: '',\n          remarks: '',\n          spacer: ''\n        },\n        messages: { whereConducted: '' },\n        titles: {\n          billingStatement: '',\n          patientMember: '',\n          patients: '',\n          relContact: ''\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: '' },\n      labels: { medicationUsed: '' },\n      messages: { saved: '' },\n      titles: {\n        addChargeItem: '',\n        addMedicationUsed: '',\n        deleteChargeItem: '',\n        deleteMedicationUsed: '',\n        edit: '',\n        editChargeItem: '',\n        editMedicationUsed: '',\n        medicationUsed: '',\n        'new': '',\n        saved: ''\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: '',\n        allProcedures: '',\n        completedBy: '',\n        dischargeDate: '',\n        examiner: '',\n        images: '',\n        labs: '',\n        location: '',\n        medications: '',\n        nextAppointment: '',\n        nextAppointments: '',\n        notes: {\n          author: '',\n          date: '',\n          title: ''\n        },\n        operativePlan: {\n          description: '',\n          instructions: '',\n          procedures: '',\n          title: ''\n        },\n        primaryDiagnosis: '',\n        procedures: '',\n        secondaryDiagnosis: '',\n        visitDate: '',\n        visitType: ''\n      },\n      messages: {\n        'delete': '',\n        saved: ''\n      },\n      titles: {\n        dischargeReport: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        opdReport: '',\n        saved: ''\n      }\n    },\n    user: {\n      plusNewUser: '+ Neuer Benutzer',\n      usersPageTile: 'Benutzerliste'\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: '',\n        checkIn: '',\n        checkOut: '',\n        discharge: '',\n        newAppointment: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        newProcedure: '',\n        newVitals: ''\n      },\n      labels: {\n        appointment: '',\n        authoredBy: '',\n        checkInTime: '',\n        checkOutTime: '',\n        createNewPatient: '',\n        diagnosis: '',\n        examiner: '',\n        finalDiagnosis: '',\n        haveAppointment: '',\n        haveDoneOrders: '',\n        noAppointment: '',\n        ordersDone: '',\n        ordersNotDone: '',\n        patientToCheckIn: '',\n        procedure: '',\n        procedureDate: '',\n        reasonForVisit: '',\n        reportType: '',\n        status: '',\n        statusAdmitted: '',\n        statusCheckedIn: '',\n        statusCheckedOut: '',\n        statusDischarged: '',\n        visitDate: '',\n        visitInformation: '',\n        visitType: ''\n      },\n      messages: {\n        checkOut: '',\n        checkedOut: '',\n        discharged: '',\n        patientCheckedIn: '',\n        patientCreatedAndCheckedIn: '',\n        visitAndPatientSaved: '',\n        visitSaved: ''\n      },\n      navigation: {\n        charges: '',\n        notes: '',\n        orders: '',\n        procedures: '',\n        reports: '',\n        vitals: ''\n      },\n      titles: {\n        additionalDiagnoses: '',\n        checkOut: '',\n        checkedIn: '',\n        checkedOut: '',\n        discharged: '',\n        editVisit: '',\n        newVisit: '',\n        patientCheckIn: '',\n        visitSaved: ''\n      }\n    },\n    vitals: { labels: {\n        dateRecorded: '',\n        dbp: '',\n        heartRate: '',\n        height: '',\n        respiratoryRate: '',\n        sbp: '',\n        temperature: '',\n        weight: ''\n      } }\n  };\n});","define('hospitalrun/tests/locales/de/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/de/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/de/translations.js should pass ESLint.\\n');\n  });\n});","define(\"hospitalrun/tests/locales/en/config\", [\"exports\"], function (exports) {\n  // Ember-I18n includes configuration for common locales. Most users\n  // can safely delete this file. Use it if you need to override behavior\n  // for a locale or define behavior for a locale that Ember-I18n\n  // doesn't know about.\n  \"use strict\";\n\n  exports[\"default\"] = {\n    // rtl: [true|FALSE],\n    //\n    // pluralForm: function(count) {\n    //   if (count === 0) { return 'zero'; }\n    //   if (count === 1) { return 'one'; }\n    //   if (count === 2) { return 'two'; }\n    //   if (count < 5) { return 'few'; }\n    //   if (count >= 5) { return 'many'; }\n    //   return 'other';\n    // }\n  };\n});","define('hospitalrun/tests/locales/en/config.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/en/config.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/config.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/en/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    admin: {\n      address: {\n        address1Label: 'Address 1 Label',\n        address2Label: 'Address 2 Label',\n        address3Label: 'Address 3 Label',\n        address4Label: 'Address 4 Label',\n        addressLabel: 'Address',\n        editTitle: 'Address Options',\n        include1Label: 'Include 1 Label',\n        include2Label: 'Include 2 Label',\n        include3Label: 'Include 3 Label',\n        include4Label: 'Include 4 Label',\n        messages: { addressSaved: 'The address options have been saved' },\n        newTitle: 'Address Options',\n        titles: { optionsSaved: 'Options Saved' }\n      },\n      addressOptions: 'Address Options',\n      customForms: {\n        buttons: {\n          addField: 'Add Field',\n          moveDown: 'Move Down',\n          moveUp: 'Move Up',\n          newForm: '+ new form',\n          preview: 'Preview'\n        },\n        labels: {\n          alwaysInclude: 'Always Include',\n          checkbox: 'Checkbox',\n          colSpan: 'Number of Columns To Span',\n          columns: 'Columns',\n          customForm: 'Custom Form',\n          dischargeReportFormType: 'Discharge Report',\n          expenseTo: 'Expense To',\n          formName: 'Form Name',\n          formType: 'Form Type',\n          incidentFormType: 'Incident',\n          includeOtherOption: 'Include Other Option',\n          labFormType: 'Lab',\n          label: 'Label',\n          newForm: 'New Form',\n          opdReportFormType: 'Outpatient Report',\n          operativePlanFormType: 'Operative Plan and Report',\n          otherOptionLabel: 'Other Option Label',\n          patientFormType: 'Patient',\n          property: 'Property',\n          radio: 'Radio',\n          select: 'Dropdown',\n          socialworkFormType: 'Social Work',\n          text: 'Text',\n          textarea: 'Large Text',\n          visitFormType: 'Visit'\n        },\n        messages: { formSaved: 'The {{name}} form has been saved.' },\n        titles: {\n          checkboxValues: 'Checkbox Values',\n          customForms: 'Custom Forms',\n          deleteForm: 'Delete Custom Form',\n          dropDownValues: 'Dropdown Values',\n          editCustomForm: 'Edit Custom Form',\n          fields: 'Fields',\n          formSaved: 'Form Saved',\n          newCustomForm: 'New Custom Form',\n          radioValues: 'Radio Values'\n        }\n      },\n      header: {\n        editTitle: 'Header Options',\n        facilityName: 'Facility Name',\n        headerLabel: 'Header',\n        headerLine1: 'Header Line 1',\n        headerLine2: 'Header Line 2',\n        headerLine3: 'Header Line 3',\n        logoURL: 'Logo URL',\n        messages: { headerSaved: 'The header options have been saved' },\n        newTitle: 'Header Options',\n        titles: { optionsSaved: 'Options Saved' }\n      },\n      loadDb: 'Load DB',\n      loaddb: {\n        displayAlertMessage: 'Please select file to load.',\n        displayAlertTitle: 'Select File To Load',\n        editTitle: 'Load DB',\n        errorDisplayAlertMessage: 'The database could not be imported. The error was: {{error}}',\n        errorDisplayAlertTitle: 'Error Loading',\n        progressMessage: 'Please wait while your database is loaded.',\n        progressTitle: 'Loading Database'\n      },\n      lookup: {\n        aisleLocationList: 'Inventory Aisle Locations',\n        alertImportListMessage: 'Please select file to import.',\n        alertImportListSaveMessage: 'The lookup list has been imported.',\n        alertImportListSaveTitle: 'List Imported',\n        alertImportListTitle: 'Select File To Import',\n        alertImportListUpdateMessage: 'The lookup list has been saved.',\n        alertImportListUpdateTitle: 'List Saved',\n        anesthesiaTypes: 'Anesthesia Types',\n        anesthesiologists: 'Anesthesiologists',\n        billingCategories: 'Billing Categories',\n        clinicList: 'Clinic Locations',\n        countryList: 'Countries',\n        cptCodeList: 'CPT Codes',\n        diagnosisList: 'Diagnoses',\n        edit: { template: {\n            addTitle: 'Add Value',\n            editTitle: 'Edit Value',\n            labelTitle: 'Value',\n            updateButtonTextAdd: 'Add',\n            updateButtonTextUpdate: 'Update'\n          } },\n        expenseAccountList: 'Expense Accounts',\n        imagingPricingTypes: 'Imaging Pricing Types',\n        incidentDepartments: 'Incident Departments',\n        inventoryTypes: 'Inventory Types',\n        labPricingTypes: 'Lab Pricing Types',\n        pageTitle: 'Lookup Lists',\n        patientStatusList: 'Patient Status List',\n        physicianList: 'Physicians',\n        procedureList: 'Procedures',\n        procedureLocations: 'Procedures Locations',\n        procedurePricingTypes: 'Procedure Pricing Types',\n        radiologists: 'Radiologists',\n        titles: { deleteLookupValue: 'Delete Value' },\n        unitTypes: 'Unit Types',\n        vendorList: 'Vendor',\n        visitLocationList: 'Visit Locations',\n        visitTypes: 'Visit Types',\n        wardPricingTypes: 'Ward Pricing Types',\n        warehouseList: 'Inventory Locations'\n      },\n      lookupLists: 'Lookup Lists',\n      roles: {\n        capability: {\n          addAllergy: 'Add Allergy',\n          addAppointment: 'Add Appointment',\n          addBillingDiagnosis: 'Add Billing Diagnosis',\n          addCharge: 'Add Charge',\n          addDiagnosis: 'Add Diagnosis',\n          addImaging: 'Add Imaging',\n          addIncident: 'Add Incident',\n          addIncidentCategory: 'Add Incident Category',\n          addInventoryItem: 'Add Inventory Item',\n          addInventoryPurchase: 'Add Inventory Purchase',\n          addInventoryRequest: 'Add Inventory Request',\n          addInvoice: 'Add Invoice',\n          addLab: 'Add Lab',\n          addMedication: 'Add Medication',\n          addNote: 'Add Note',\n          addOperationReport: 'Add Operation Report',\n          addOperativePlan: 'Add Operative Plan',\n          addPatient: 'Add Patient',\n          addPayment: 'Add Payment',\n          addPhoto: 'Add Photo',\n          addPricing: 'Add Pricing',\n          addPricingProfile: 'Add Pricing Profile',\n          addProcedure: 'Add Procedure',\n          addSocialwork: 'Add Social Work',\n          addVisit: 'Add Visit',\n          addVitals: 'Add Vitals',\n          adjustInventoryLocation: 'Adjust Inventory Location',\n          admin: 'Administration',\n          admitPatient: 'Admit Patient',\n          appointments: 'Appointments',\n          billing: 'Billing',\n          cashier: 'Cashier',\n          completeImaging: 'Complete Imaging',\n          completeLab: 'Complete Lab',\n          defineUserRoles: 'Define User Roles',\n          deleteAppointment: 'Delete Appointment',\n          deleteDiagnosis: 'Delete Diagnosis',\n          deleteImaging: 'Delete Imaging',\n          deleteIncident: 'Delete Incident',\n          deleteIncidentCategory: 'Delete Incident Category',\n          deleteInventoryItem: 'Delete Inventory Item',\n          deleteInvoice: 'Delete Invoice',\n          deleteLab: 'Delete Lab',\n          deleteMedication: 'Delete Medication',\n          deleteNote: 'Delete Note',\n          deletePatient: 'Delete Patient',\n          deletePhoto: 'Delete Photo',\n          deletePricing: 'Delete Pricing',\n          deletePricingProfile: 'Delete Pricing Profile',\n          deleteProcedure: 'Delete Procedure',\n          deleteSocialwork: 'Delete Social Work',\n          deleteVisit: 'Delete Visit',\n          deleteVitals: 'Delete Vitals',\n          dischargePatient: 'Discharge Patient',\n          editInvoice: 'Edit Invoice',\n          fulfillInventory: 'Fulfill Inventory',\n          fulfillMedication: 'Fulfill Medication',\n          generateIncidentReport: 'Generate Incident Report',\n          imaging: 'Imaging',\n          incident: 'Incident',\n          inventory: 'Inventory',\n          invoices: 'Invoices',\n          labs: 'Labs',\n          listPaidInvoices: 'List Paid Invoices',\n          loadDb: 'Load Database',\n          manageIncidents: 'Manage Incidents',\n          medication: 'Medication',\n          overrideInvoice: 'Override Invoice',\n          patientReports: 'Patient Reports',\n          patients: 'Patients',\n          pricing: 'Pricing',\n          updateConfig: 'Update Configurations',\n          visits: 'Visits'\n        },\n        messages: { roleSaved: 'The {{roleName}} role has been saved.' },\n        titles: { roleSaved: 'Role Saved' }\n      },\n      textReplacements: {\n        createNew: 'Create a new shortcode',\n        existingRepl: 'Existing Shortcodes',\n        replDesc: 'When entering text, these shortcuts allow you to replace a short sequence of characters with a longer phrase.',\n        pageTitle: 'Shortcodes',\n        toReplace: 'Text to replace',\n        replaceWith: 'Replace with',\n        performExpand: \"Press Enter to replace #{{from}} with '{{to}}'\",\n        possibleExpansions: 'Possible replacements: {{possible}}',\n        noMatches: \"No replacements match '{{term}}'\"\n      },\n      userRoles: 'User Roles',\n      users: 'Users',\n      visitForms: {\n        labels: {\n          followup: 'Followup',\n          form: 'Form',\n          initial: 'Initial',\n          visitType: 'Visit Type'\n        },\n        titles: { visitForms: 'Visit Forms' }\n      },\n      workflow: {\n        admissionDepositLabel: 'Admission deposit required',\n        clinicPrepaymentLabel: 'Clinic prepayment required',\n        editTitle: 'Workflow Options',\n        followupPrepaymentLabel: 'Followup prepayment required',\n        messages: { optionsSaved: 'The workflow options have been saved' },\n        newTitle: 'Workflow Options',\n        outpatientImagingLabel: 'Outpatient Imaging prepayment required',\n        outpatientLabLabel: 'Outpatient Lab prepayment required',\n        outpatientMedicationLabel: 'Outpatient Medication prepayment required',\n        titles: { optionsSaved: 'Options Saved' },\n        workflowLabel: 'Workflow'\n      }\n    },\n    alerts: {\n      errorExclamation: 'Error!!!!',\n      pleaseWait: 'Please Wait',\n      reportError: 'Error Generating Report',\n      warningExclamation: 'Warning!!!!'\n    },\n    allergies: {\n      buttons: { addAllergy: 'Add Allergy' },\n      labels: {\n        allergyName: 'Name',\n        patientAllergy: 'Patient Allergies'\n      },\n      titles: {\n        addAllergy: 'Add Allergy',\n        editAllergy: 'Edit Allergy'\n      }\n    },\n    application: {\n      messages: { sessionExpired: 'Your session has expired.  Please login to continue.' },\n      titles: { sessionExpired: 'Session Expired' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '+ new appointment',\n        scheduleSurgery: '+ schedule surgery'\n      },\n      calendarTitle: 'Appointments Calendar',\n      currentScreenTitle: 'Appointment List',\n      editTitle: 'Edit Appointment',\n      labels: {\n        noLocation: 'No Location',\n        selectedStartingDate: 'Show Appointments On Or After'\n      },\n      messages: {\n        appointmentSaved: 'The appointment for {{patient}} has been saved.',\n        endTimeLaterThanStart: 'Please select an end time later than the start time.'\n      },\n      missed: 'Missed Appointments',\n      newTitle: 'New Appointment',\n      searchTitle: 'Search Appointments',\n      sectionTitle: 'Appointments',\n      thisWeek: 'Appointments This Week',\n      titles: {\n        appointmentSaved: 'Appointment Saved',\n        editSurgicalAppointment: 'Edit Surgical Appointment',\n        newSurgicalAppointment: 'New Surgical Appointment',\n        theaterSchedule: 'Theater Schedule'\n      },\n      todayTitle: \"Today's Appointments\"\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: 'No invoices found',\n        noPricingItems: 'No pricing items found.',\n        noPricingProfiles: 'No pricing profiles found.'\n      },\n      buttons: {\n        addOverride: 'Add Override',\n        createInvoice: 'Create an invoice?'\n      },\n      labels: {\n        actualCharges: 'Charges',\n        discountAmount: 'Discount Amount',\n        discountPercentage: 'Discount Percentage',\n        externalInvoiceNumber: 'External Invoice #',\n        hmoCom: 'Insurance',\n        insurance: 'NHIF',\n        paymentProfile: 'Payment Profile',\n        paymentsDeposits: 'Payments made',\n        pricingPanelOverrides: 'Pricing profile overrides',\n        pricingProfile: 'Pricing Profile',\n        setFee: 'Set Fee',\n        readCard: 'Read Card',\n        sendClaim: 'Send Claim'\n      },\n      messages: {\n        flatFeeMsg: 'There is a flat fee for patient financial responsibility of {{currency}} {{setFee}}.',\n        flatDiscountMsg: 'There is a flat discount amount applied to the patient financial responsibility of {{currency}} {{discountAmount}}.'\n      }\n    },\n    buttons: {\n      add: 'Add',\n      addItem: 'Add Item',\n      addLineItem: 'Add Line Item',\n      addValue: 'Add Value',\n      addVisit: 'Add Visit',\n      allRequests: 'All Requests',\n      barcode: 'Barcode',\n      cancel: 'Cancel',\n      clear: 'Clear',\n      close: 'Close',\n      complete: 'Complete',\n      'delete': 'Delete',\n      dispense: 'Dispense',\n      edit: 'Edit',\n      filter: 'Filter',\n      fulfill: 'Fulfill',\n      'import': 'Import',\n      loadFile: 'Load File',\n      newItem: '+ new item',\n      newNote: 'New Note',\n      newRequest: 'New Request',\n      newRequestPlus: '+ new request',\n      newUser: 'New User',\n      ok: 'Ok',\n      print: 'Print',\n      remove: 'Remove',\n      returnButton: 'Return',\n      review: 'Review',\n      search: 'Search',\n      showAll: 'Show All',\n      showFewer: 'Show Fewer',\n      update: 'Update'\n    },\n    components: {\n      chargesByTypeTab: { charges: 'charges' },\n      customFormManager: { buttons: { addForm: 'Add Form' } },\n      dateTimePicker: {\n        amHour: '{{hour}} AM',\n        midnight: 'Midnight',\n        noon: 'Noon',\n        pmHour: '{{hour}} PM'\n      },\n      imageUpload: { messages: { selectValidImageFile: 'Please select a valid image file.' } },\n      operativeProcedures: {\n        buttons: { addProcedure: 'Add Procedure' },\n        labels: { procedure: 'Procedure' },\n        titles: { procedures: 'Procedures' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: 'New Imaging',\n          newLab: 'New Lab',\n          newMedication: 'New Medication'\n        },\n        labels: {\n          imagingOrderType: 'Imaging',\n          labOrderType: 'Lab',\n          medicationOrderType: 'Medication',\n          orderType: 'Order Type'\n        }\n      },\n      priceList: { charges: '{{pricingType}} charges' },\n      quantityCalc: { result: '{{targetUnit}} total: {{calculated}}' },\n      quantityConv: {\n        conversion: 'What does 1 {{name}} contain?',\n        unit: 'Unit'\n      },\n      sortableColumn: { labels: { selectAll: '(Select All)' } },\n      takePhoto: {\n        camera: 'Camera',\n        how: 'How Do You Want To Add A Photo?',\n        labels: {\n          takeAPicture: 'Take a Picture',\n          uploadAFile: 'Upload a File'\n        },\n        photo: 'photo',\n        preview: 'preview',\n        takePhoto: 'Take photo',\n        uploadFile: 'Upload File'\n      },\n      upcomingAppointments: {\n        labels: {\n          date: 'Date',\n          location: 'Location',\n          type: 'Type',\n          'with': 'With'\n        },\n        titles: { upcomingAppointments: 'Upcoming Appointments' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: 'Add Form' },\n      labels: { formToAdd: 'Form To Add' },\n      titles: { addCustomForm: 'Add Custom Form' }\n    },\n    dashboard: {\n      needs_user_setup: 'We recommend that you setup a User account.',\n      standalone_welcome: '<p>Hospitali Plus is a new Hospital Information Management System that greatly simplifies the management of your facility. It is build with Kenyan hospitals in mind and is:</p>  <ul>    <li>Built to provide the most modern hospital information system tools possible to the least resourced environments</li>    <li>Optimized for the one resource we can&apos;t make more of: Your time!</li>    <li>Focused on great user experiences for clinicians, admins, and support staff</li>    <li>Build with the latest and fastest technology</li> </ul> <p>For more information or support please write us an email at support@magnumdigitalke.com or visit our to <a href=\"http://magnumdigitalke.com/our-digital-services/hospitaliplus/\">website</a> or call us on 0721 733354</p>',\n      title: 'Welcome to Hospitali Plus!'\n    },\n    dates: {\n      'long': '{{years}} year {{months}} months {{days}} days',\n      longOmitDays: '{{years}} year {{months}} months',\n      longOmitDaysPlural: '{{years}} years {{months}} months',\n      longOmitDaysYears: '{{months}} months',\n      longOmitYears: '{{months}} months {{days}} days',\n      longPlural: '{{years}} years {{months}} months {{days}} days',\n      'short': '{{years}}y {{months}}m {{days}}d',\n      shortOmitYears: '{{months}}m {{days}}d'\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: 'Active Diagnosis',\n        date: 'Date',\n        diagnosis: 'Diagnosis',\n        secondaryDiagnosis: 'Secondary Diagnosis'\n      },\n      titles: {\n        addDiagnosis: 'Add Diagnosis',\n        editDiagnosis: 'Edit Diagnosis'\n      }\n    },\n    errors: {\n      accepted: 'must be accepted',\n      blank: \"can't be blank\",\n      confirmation: \"doesn't match {{attribute}}\",\n      empty: \"can't be empty\",\n      equalTo: 'must be equal to {{count}}',\n      even: 'must be even',\n      exclusion: 'is reserved',\n      greaterThan: 'must be greater than {{count}}',\n      greaterThanOrEqualTo: 'must be greater than or equal to {{count}}',\n      inclusion: 'is not included in the list',\n      invalid: 'is invalid',\n      invalidNumber: 'not a valid number',\n      lessThan: 'must be less than {{count}}',\n      lessThanOrEqualTo: 'must be less than or equal to {{count}}',\n      notANumber: 'is not a number',\n      notAnInteger: 'must be an integer',\n      odd: 'must be odd',\n      otherThan: 'must be other than {{count}}',\n      present: 'must be blank',\n      result: 'Please enter a result before completing',\n      tooLong: 'is too long (maximum is {{count}} characters)',\n      tooShort: 'is too short (minimum is {{count}} characters)',\n      wrongLength: 'is the wrong length (should be {{count}} characters)'\n    },\n    headings: { chargedItems: 'Charged Items' },\n    imaging: {\n      alerts: {\n        completedMessage: 'The imaging request has been completed.',\n        completedTitle: 'Imaging Request Completed',\n        savedMessage: 'The imaging request has been saved.',\n        savedTitle: 'Imaging Request Saved'\n      },\n      buttons: { newButton: '+ new imaging' },\n      labels: {\n        addNewVisit: '--Add New Visit--',\n        radiologist: 'Radiologist',\n        resultNotes: 'Result Notes',\n        requestedNotes: 'Requested Notes',\n        completedBy: 'Completed By'\n      },\n      messages: { noCompleted: 'No completed items found.' },\n      pageTitle: 'Imaging Requests',\n      sectionTitle: 'Imaging',\n      titles: {\n        completedImaging: 'Completed Imaging',\n        editTitle: 'Edit Imaging Request',\n        newTitle: 'New Imaging Request'\n      }\n    },\n    incident: {\n      buttons: {\n        add: 'Add',\n        addForm: '+ Add Form',\n        addItem: 'Add Item',\n        cancel: 'Cancel',\n        'delete': 'Delete',\n        download: 'Download',\n        edit: 'Edit',\n        'export': 'Export Report',\n        generateRep: 'Generate Report',\n        newAttachment: '+ New Attachment',\n        newCategory: '+ new category',\n        newIncident: '+ new incident',\n        newNote: '+ New Note'\n      },\n      labels: {\n        actions: 'Actions',\n        addedBy: 'Added By',\n        category: 'Category',\n        categoryItem: 'Category Item',\n        date: 'Date',\n        dateRecorded: 'Date Recorded',\n        department: 'Department',\n        description: 'Incident Description',\n        endDate: 'End Date',\n        givenBy: 'Given By',\n        howToAddAttachment: 'How Do You Want To Add An Attachment?',\n        incidentDate: 'Date of Incident',\n        incidentId: 'Incident ID',\n        item: 'Item',\n        lastUpdated: 'Last Updated',\n        note: 'Note',\n        patientId: 'Patient Id',\n        patientImpacted: 'Patient Impacted',\n        reportType: 'Report Type',\n        reportedBy: 'Reported By',\n        reportedDate: 'Reported Date',\n        reportedTo: 'Incident Reported to (Full Name)',\n        sentinelEvent: 'Sentinel Event',\n        startDate: 'Start Date',\n        status: 'Status',\n        statusActive: 'Active',\n        statusClosed: 'Closed',\n        statusFollowup: 'Follow-up',\n        statusReported: 'Reported',\n        title: 'Title',\n        total: 'Total',\n        updatedBy: 'Updated By'\n      },\n      messages: {\n        attachmentFileRequired: 'Please upload a file or take a picture or before saving this attachment.',\n        createNew: 'Create a new incident?',\n        createNewIncidentCategory: 'Create a new Incident Category?',\n        fillIn: 'Fill in the above options to calculate score',\n        incidentCategorySaved: 'The {{name}} category has been saved.',\n        noClosedIncidents: 'No closed incidents found.',\n        noIncidentCategoriesFound: 'No Incident Categories found.',\n        noIncidents: 'No incidents found.',\n        saved: 'The incident report has been saved.',\n        selectExistingPatient: 'Please select an existing patient or leave this field blank.'\n      },\n      titles: {\n        addAttachment: 'Add Attachment',\n        addCategoryItem: 'Add Category Item',\n        addNote: 'Add Note',\n        attachments: 'Attachments',\n        closed: 'Closed Incidents',\n        current: 'Current',\n        deleteAttachment: 'Delete Attachment',\n        deleteIncident: 'Delete Incident',\n        deleteIncidentCategory: 'Delete Incident Category',\n        deleteItem: 'Delete Item',\n        deleteNote: 'Delete Note',\n        editAttachment: 'Edit Attachment',\n        editIncident: 'Edit Incident',\n        editIncidentCategory: 'Edit Incident Category',\n        editNote: 'Edit Note',\n        general: 'General Information',\n        history: 'History',\n        incidentCategories: 'Incident Categories',\n        incidentCategoryItem: 'Incident Category Item',\n        incidentCategoryName: 'Incident Category Name',\n        incidentCategorySaved: 'Incident Category Saved',\n        incidentSaved: 'Incident Saved',\n        incidents: 'Incidents',\n        incidentsByCategory: 'Incidents By Category',\n        incidentsByDepartment: 'Incidents By Department',\n        newIncident: 'New Incident',\n        newIncidentCategory: 'New Incident Category',\n        notes: 'Notes',\n        reports: 'Reports'\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Cost Per Unit:',\n        delivered: 'Delievered To:',\n        location: 'Location Adjusted:',\n        prescription: 'Prescription For:',\n        pulled: 'Pulled From:',\n        quantity: 'Quantity at Completion:',\n        reason: 'Reason:',\n        returned: 'Returned from Patient:',\n        transferredFrom: 'Transferred From:',\n        transferredTo: 'Transferred To:'\n      },\n      labels: {\n        action: 'Action',\n        add: 'Add',\n        addAdjustmentType: 'Add',\n        adjust: 'Adjust',\n        adjustmentDate: 'Adjustment Date',\n        adjustmentFor: 'Adjustment For',\n        adjustmentType: 'Adjustment Type',\n        aisle: 'Aisle',\n        aisleLocation: 'Aisle Location',\n        allInventory: 'All Inventory',\n        allItems: 'All Items',\n        availableQuantity: '{{quantity}} available',\n        billTo: 'Bill To',\n        consumePurchases: 'Consume Purchases',\n        consumptionRate: 'Consumption Rate',\n        cost: 'Cost',\n        costPerUnit: 'Cost per Unit',\n        crossReference: 'Cross Reference',\n        currentQuantity: 'Current Quantity',\n        dateCompleted: 'Date Completed',\n        dateEffective: 'Effective Date',\n        dateEnd: 'End Date',\n        dateReceived: 'Date Received',\n        dateStart: 'Start Date',\n        dateTransferred: 'Date Transferred',\n        daysLeft: 'Days Left',\n        deleteItem: 'Delete Item',\n        deliveryAisle: 'Delivery Aisle',\n        deliveryLocation: 'Delivery Location',\n        details: 'Details',\n        distributionUnit: 'Distribution Unit',\n        editItem: 'Edit Item',\n        expense: 'Expense To',\n        expirationDate: 'Expiration Date',\n        fulfillRequest: 'Fulfill Request',\n        fulfillRequestNow: 'Fulfill Request Now',\n        gift: 'Gift in Kind',\n        giftInKindNo: 'N',\n        giftInKindYes: 'Y',\n        giftUsage: 'Gift in Kind Usage',\n        inventoryConsumed: 'Inventory Consumed',\n        inventoryItem: 'Inventory Item',\n        inventoryObsolence: 'Inventory Obsolence',\n        invoiceItems: 'Invoice Items',\n        invoiceLineItem: 'Invoice Line Item',\n        invoiceNumber: 'Invoice Number',\n        item: 'Item',\n        itemNumber: 'Item Number',\n        items: 'Items',\n        location: 'Location',\n        locations: 'Locations',\n        markAsConsumed: 'Mark as Consumed',\n        name: 'Name',\n        newItem: 'New Item',\n        originalQuantity: 'Original Quantity',\n        print: 'Print',\n        printBarcode: 'Print Barcode',\n        printer: 'Printer',\n        pullFrom: 'Pull From',\n        purchaseCost: 'Purchase Cost',\n        purchaseInfo: 'Purchase Information',\n        purchases: 'Purchases',\n        quantity: 'Quantity ({{unit}})',\n        quantityAvailable: 'Quantity Available',\n        quantityOnHand: 'Quantity on Hand',\n        quantityRequested: 'Quantity Requested',\n        rank: 'Rank',\n        reason: 'Reason',\n        remove: 'Remove',\n        removeAdjustmentType: 'Remove',\n        reorderPoint: 'Reorder Point',\n        requestedItems: 'Requested Items',\n        returnAdjustmentType: 'Return',\n        returnToVendorAdjustmentType: 'Return To Vendor',\n        salePricePerUnit: 'Sale Price per Unit',\n        save: 'Save',\n        serialNumber: 'Serial/Lot Number',\n        total: 'Total',\n        totalCost: 'Total Cost',\n        totalReceived: 'Total Received: {{total}}',\n        transaction: 'Transaction',\n        transactions: 'Transactions',\n        transfer: 'Transfer',\n        transferFrom: 'Transfer From',\n        transferTo: 'Transfer To Location',\n        transferToAisle: 'Transfer to Aisle Location',\n        unit: 'Unit',\n        unitCost: 'Unit Cost',\n        vendor: 'Vendor',\n        vendorItemNumber: 'Vendor Item Number',\n        writeOffAdjustmentType: 'Write Off',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: 'Please adjust the quantities on the appropriate location(s) to account for the difference of {{difference}}.',\n        createRequest: 'Create a new request?',\n        itemNotFound: 'The inventory item <strong>{{item}}</strong> could not be found.<br>If you would like to create a new inventory item, fill in the information below.<br>Otherwise, press the Cancel button to return.',\n        loading: 'Loading transactions ...',\n        noItems: 'No items found.',\n        noRequests: 'No requests found.',\n        purchaseSaved: 'The inventory purchases have been successfully saved.',\n        quantity: 'The total quantity of <strong>({{quantity}})</strong> does not match the total quantity in the locations <strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Are you sure you want to remove this item from this invoice?',\n        removeItemRequest: 'Are you sure you want to remove this item from this request?',\n        requestFulfilled: 'The inventory request has been fulfilled.',\n        requestUpdated: 'The inventory request has been updated.',\n        warning: 'Please fill in required fields (marked with *) and correct the errors before adding.'\n      },\n      reports: {\n        adjustment: 'Detailed Adjustment',\n        daysSupply: 'Days Supply Left In Stock',\n        expenseDetail: 'Detailed Expenses',\n        expenseSum: 'Summary Expenses',\n        expiration: 'Expiration Date',\n        'export': 'Export Report',\n        fields: 'Fields to Include',\n        finance: 'Finance Summary',\n        generate: 'Generate Report',\n        invLocation: 'Inventory By Location',\n        invValuation: 'Inventory Valuation',\n        purchaseDetail: 'Detailed Purchase',\n        purchaseSum: 'Summary Purchase',\n        reportType: 'Report Type',\n        rows: {\n          adjustments: 'Adjustments',\n          adjustmentsTotal: 'Total Adjustments',\n          balanceBegin: 'Beginning Balance',\n          balanceEnd: 'Ending Balance',\n          category: 'Category',\n          consumed: 'Consumed',\n          consumedGik: 'GiK Consumed',\n          consumedGikTotal: 'Total GiK Consumed',\n          consumedPuchases: 'Purchases Consumed',\n          consumedPurchasesTotal: 'Total Purchases Consumed',\n          consumedTotal: 'Total Consumed',\n          errInFinSum: 'Error in _generateFinancialSummaryReport: ',\n          errInFindPur: 'Error in _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Error in _findInventoryItemsByRequest: ',\n          expensesFor: 'Expenses For: ',\n          noAccount: '(No Account)',\n          subtotal: 'Subtotal: ',\n          subtotalFor: 'Subtotal for {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total for {{var}}: ',\n          totalPurchases: 'Total Purchases',\n          transfer1: '{{quantity}} from {{location}}',\n          trasnfer2: 'From: {{source}} To: {{target}}'\n        },\n        stockTransferDetail: 'Detailed Stock Transfer',\n        stockTransferSum: 'Summary Stock Transfer',\n        stockUsageDetail: 'Detailed Stock Usage',\n        stockUsageSum: 'Summary Stock Usage',\n        titleDateRange: '{{name}} Report {{startDate}} - {{endDate}}',\n        titleSingleDate: '{{name}} Report {{date}}'\n      },\n      titles: {\n        addPurchase: 'Add Purchase',\n        addRequest: 'New Request',\n        adjustment: 'Adjustment',\n        editPurchase: 'Edit Purchase',\n        editRequest: 'Edit Request',\n        inventoryItem: 'New Inventory Item',\n        inventoryReport: 'Inventory Report',\n        purchaseSaved: 'Inventory Purchases Saved',\n        quickAddTitle: 'New Inventory Item',\n        removeItem: 'Remove Item',\n        requestFulfilled: 'Request Fulfilled',\n        requestUpdated: 'Request Updated',\n        transfer: 'Transfer Items',\n        warning: 'Warning!!!!!'\n      }\n    },\n    labels: {\n      action: 'Action',\n      actions: 'Actions',\n      addNewOutpatientVisit: '--Add New Outpatient Visit--',\n      address: 'Address',\n      age: 'Age',\n      allDay: 'All Day',\n      amount: 'Amount',\n      anesthesia: 'Anesthesia',\n      assisting: 'Assisting',\n      balanceDue: 'Balance Due',\n      billDate: 'Bill Date',\n      billTo: 'Bill To',\n      category: 'Category',\n      completed: 'Completed',\n      country: 'Country',\n      cptcode: 'CPT Code',\n      creditTo: 'Credit To',\n      currencySymbol: 'Ksh',\n      date: 'Date',\n      dateCompleted: 'Date Completed',\n      dateOfBirth: 'Date of Birth',\n      dateOfBirthShort: 'DoB',\n      datePaid: 'Date Paid',\n      dateRequested: 'Date Requested',\n      'delete': 'Delete',\n      deleteRequest: 'Delete Request',\n      deleteUser: 'Delete User',\n      department: 'Department',\n      description: 'Description',\n      discount: 'Discount',\n      displayName: 'Display Name',\n      docRead: 'Docs Read',\n      docWritten: 'Docs Written',\n      edit: 'Edit',\n      editUser: 'Edit User',\n      email: 'Email',\n      endDate: 'End Date',\n      endTime: 'End Time',\n      excess: 'Excess',\n      expenseTo: 'Expense To',\n      fileLoadSuccessful: 'File To Load Successful',\n      fileName: 'File Name',\n      fileToLoad: 'File Load',\n      from: 'From',\n      fulfill: 'Fulfill',\n      fulfillRequest: 'Fulfill Request',\n      fulfillRequestNow: 'Fulfill Request Now',\n      fulfilled: 'Fulfilled',\n      grandTotal: 'Grand Total',\n      id: 'Id',\n      imageOrders: 'Image Orders',\n      imagingType: 'Imaging Type',\n      importFile: 'Import File',\n      invoiceId: 'Invoice ID',\n      labOrders: 'Lab Orders',\n      lineItems: 'Line Items',\n      loading: 'Loading',\n      location: 'Location',\n      lookupType: 'Lookup Type',\n      medication: 'Medication',\n      name: 'Name',\n      newUser: 'New User',\n      note: 'Note',\n      notes: 'Notes',\n      number: 'Number',\n      on: 'on',\n      password: 'Password',\n      patient: 'Patient',\n      payments: 'Payments',\n      physician: 'Physician',\n      prescriber: 'Prescriber',\n      prescription: 'Prescription',\n      prescriptionDate: 'Prescription Date',\n      price: 'Price',\n      print: 'Print',\n      procedures: 'Procedures',\n      provider: 'Provider',\n      pullFrom: 'Pull From',\n      quantity: 'Quantity',\n      remarks: 'Remarks',\n      requestedBy: 'Requested By',\n      requestedOn: 'Requested On',\n      requests: 'Requests',\n      result: 'Result',\n      results: 'Results',\n      role: 'Role',\n      search: 'Search',\n      sex: 'Sex',\n      startDate: 'Start Date',\n      startTime: 'Start Time',\n      status: 'Status',\n      takenBy: 'Taken By',\n      to: 'To',\n      total: 'Total',\n      type: 'Type',\n      userCanAddNewValue: 'User Can Add New Values',\n      username: 'Username',\n      value: 'Value',\n      view: 'View',\n      visit: 'Visit',\n      'with': 'With'\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: 'The lab request has been completed.',\n        requestCompletedTitle: 'Lab Request Completed',\n        requestSavedMessage: 'The lab request has been saved.',\n        requestSavedTitle: 'Lab Request Saved'\n      },\n      buttons: { newButton: '+ new lab' },\n      completedTitle: 'Completed Labs',\n      deleteTitle: 'Delete Request',\n      editTitle: 'Edit Lab Request',\n      labels: {\n        addNewVisit: '--Add New Visit--',\n        labType: 'Lab Type'\n      },\n      messages: {\n        createNewRecord: 'Create a new record?',\n        noCompleted: 'No completed items found.',\n        noItemsFound: 'No labs found.'\n      },\n      newTitle: 'New Lab Request',\n      requestsTitle: 'Lab Requests',\n      sectionTitle: 'Labs'\n    },\n    languages: {\n      en: 'English',\n      fr: 'French',\n      es: 'Spanish',\n      de: 'German',\n      ru: 'Russian',\n      'es-co': 'Spanish (Colombian)',\n      'pt-br': 'Portuguese (Brazilian)',\n      tr: 'Turkish',\n      ur: 'Urdu'\n    },\n    loading: {\n      messages: {\n        '0': 'The top butterfly flight speed is 12 miles per hour. Some moths can fly 25 miles per hour!',\n        '1': 'Owls are the only birds that can see the color blue.',\n        '2': 'Cats have over 100 vocal sounds; dogs only have 10.',\n        '3': 'Humans use a total of 72 different muscles in speech.',\n        '4': 'More than 1,000 different languages are spoken on the continent of Africa.',\n        '5': 'An erythrophobe is someone who blushes easily.',\n        '6': 'The most common phobia in the world is odynophobia which is the fear of pain.',\n        '7': 'Your body uses 300 muscles to balance itself when you are standing still.',\n        '8': 'Certain frogs can be frozen solid then thawed, and continue living.',\n        '9': 'Our eyes are always the same size from birth, but our nose and ears never stop growing.',\n        '10': 'Your tongue is the only muscle in your body that is attached at only one end.',\n        '11': 'Camels have three eyelids to protect themselves from blowing sand.'\n      },\n      progressBar: { progress: '{{progressBarValue}}% Complete' }\n    },\n    login: {\n      labels: {\n        password: 'Password',\n        signIn: 'Sign in',\n        username: 'Username'\n      },\n      messages: {\n        error: 'Username or password is incorrect.',\n        offlineError: 'Cannot login while offline.  Please establish a network connection and retry login.',\n        signIn: 'please sign in'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: 'Medication Request Fulfilled',\n        returnedMessage: 'The medication has been marked as returned.',\n        returnedTitle: 'Medication Returned',\n        savedMessage: 'The medication record has been saved.',\n        savedTitle: 'Medication Request Saved'\n      },\n      buttons: {\n        dispenseMedication: 'dispense medication',\n        newButton: '+ new request',\n        returnMedication: 'return medication'\n      },\n      labels: {\n        adjustmentDate: 'Adjustment Date',\n        creditToAccount: 'Credit To Account',\n        quantityDispensed: 'Quantity Dispensed',\n        quantityDistributed: 'Quantity Distributed',\n        quantityRequested: 'Quantity Requested',\n        quantityToReturn: 'Quantity To Return',\n        refills: 'Refills',\n        returnAisle: 'Return Aisle',\n        returnLocation: 'Return Location',\n        returnReason: 'Return Reason/Notes'\n      },\n      messages: { createNew: 'Create a new medication request?' },\n      pageTitle: 'Medication Requests',\n      returnMedication: 'Return Medication',\n      sectionTitle: 'Medication',\n      titles: {\n        completedMedication: 'Completed Medication',\n        editMedicationRequest: 'Edit Medication Request',\n        newMedicationRequest: 'New Medication Request'\n      }\n    },\n    messages: {\n      createNewRecord: 'Create a new record?',\n      createNewUser: 'Create a new user?',\n      'delete': 'Are you sure you wish to delete {{name}}?',\n      delete_plural: 'Are you sure you wish to delete these {{name}}?',\n      delete_singular: 'Are you sure you wish to delete this {{name}}?',\n      forAuthorizedPersons: 'This report is for authorized persons only.',\n      newPatientHasToBeCreated: 'A new patient needs to be created...Please wait..',\n      noHistoryAvailable: 'No history available.',\n      noItemsFound: 'No items found.',\n      noNotesAvailable: 'No additional clinical notes are available for this visit.',\n      noUsersFound: 'No users found.',\n      onBehalfOf: 'on behalf of',\n      reportError: 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.',\n      requiredFieldsCorrectErrors: 'Please fill in required fields (marked with *) and correct the errors before saving.',\n      saveActionException: 'An error occurred while attempting to save: {{message}}',\n      sorry: 'Sorry, something went wrong...',\n      userHasBeenSaved: 'The user has been saved.',\n      userSaved: 'User Saved'\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: 'All Day',\n          appointmentDate: 'Date',\n          appointmentType: 'Type',\n          endDate: 'End Date',\n          location: 'Location',\n          notes: 'Notes',\n          patient: 'Patient',\n          provider: 'With',\n          startDate: 'Start Date',\n          status: 'Status',\n          type: 'Type'\n        },\n        names: {\n          plural: 'appointments',\n          singular: 'appointment'\n        }\n      },\n      attachment: { names: {\n          plural: 'attachments',\n          singular: 'attachment'\n        } },\n      form: { names: {\n          plural: 'forms',\n          singular: 'form'\n        } },\n      imaging: {\n        names: 'imaging',\n        request: {\n          plural: 'imaging requests',\n          singular: 'imaging request'\n        }\n      },\n      incident: { names: {\n          plural: 'incidents',\n          singular: 'incident'\n        } },\n      item: { names: {\n          plural: 'items',\n          singular: 'item'\n        } },\n      lab: {\n        names: {\n          plural: 'labs',\n          singular: 'lab'\n        },\n        request: {\n          plural: 'lab requests',\n          singular: 'lab request'\n        }\n      },\n      medication: {\n        names: {\n          plural: 'medications',\n          singular: 'medication'\n        },\n        request: {\n          plural: 'medication requests',\n          singular: 'medication request'\n        }\n      },\n      note: { names: {\n          plural: 'notes',\n          singular: 'note'\n        } },\n      patient: {\n        labels: { name: 'Name' },\n        names: { singular: 'Patient' }\n      },\n      procedure: { names: {\n          plural: 'procedures',\n          singular: 'procedure'\n        } },\n      user: { names: {\n          plural: 'users',\n          singular: 'user'\n        } },\n      visit: { names: {\n          plural: 'visits',\n          singular: 'visit'\n        } },\n      vital: { names: {\n          plural: 'vitals',\n          singular: 'vital'\n        } }\n    },\n    navigation: {\n      about: 'About Hospitali Plus',\n      actions: {\n        login: 'Login',\n        logout: 'Logout',\n        selectLanguage: 'Select Language'\n      },\n      administration: 'Administration',\n      billing: 'Billing',\n      imaging: 'Imaging',\n      incident: 'Incident',\n      inventory: 'Inventory',\n      labs: 'Labs',\n      medication: 'Medication',\n      messages: {\n        logoutFailed: 'Could not logout at this time.  Logout is not available while offline.',\n        userRole: 'Signed in as'\n      },\n      patients: 'Patients',\n      scheduling: 'Scheduling',\n      subnav: {\n        actions: 'Actions',\n        addAppointment: 'Add Appointment',\n        addressFields: 'Address Fields',\n        admittedPatients: 'Admitted Patients',\n        appointmentSearch: 'Appointment Search',\n        appointmentsCalendar: 'Appointments Calendar',\n        appointmentsThisWeek: 'Appointments This Week',\n        cashier: 'Cashier',\n        completed: 'Completed',\n        currentIncidents: 'Current Incidents',\n        customForms: 'Custom Forms',\n        dispense: 'Dispense',\n        history: 'History',\n        incidentCategories: 'Incident Categories',\n        inventoryReceived: 'Inventory Received',\n        invoices: 'Invoices',\n        items: 'Items',\n        loadDB: 'Load DB',\n        lookupLists: 'Lookup Lists',\n        newIncident: 'New Incident',\n        newInvoice: 'New Invoice',\n        newPatient: 'New Patient',\n        newRequest: 'New Request',\n        newUser: 'New User',\n        outpatient: 'Outpatient',\n        patientListing: 'Patient Listing',\n        priceProfiles: 'Price Profiles',\n        prices: 'Prices',\n        printHeader: 'Print Header',\n        reports: 'Reports',\n        requests: 'Requests',\n        returnMedication: 'Return Medication',\n        scheduleSurgery: 'Schedule Surgery',\n        textReplacements: 'Shortcodes',\n        theaterSchedule: 'Theater Schedule',\n        \"today'sAppointments\": \"Today's Appointments\",\n        userRoles: 'User Roles',\n        users: 'Users',\n        workflow: 'Workflow'\n      },\n      titles: {\n        logoutFailed: 'Logout Failed'\n      }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: 'Additional Notes',\n        assistant: 'Assistant',\n        caseComplexity: 'Case Complexity',\n        operationDescription: 'Operation Description',\n        preOpPrimaryDiagnosis: 'Pre-op Primary Diagnosis',\n        preOpSecondaryDiagnosis: 'Pre-op Secondary Diagnosis',\n        surgeon: 'Surgeon',\n        surgeryDate: 'Surgery Date'\n      },\n      messages: { reportSaved: 'The operation report has been saved.' },\n      titles: {\n        editTitle: 'Edit Operation Report',\n        newTitle: 'New Operation Report',\n        reportSaved: 'Report Saved'\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: 'Complete Plan' },\n      labels: {\n        additionalNotes: 'Additional Notes',\n        admissionInstructions: 'Instructions Upon Admission',\n        caseComplexity: 'Case Complexity',\n        completedStatus: 'Completed',\n        droppedStatus: 'Dropped',\n        operationDescription: 'Operation Description',\n        plannedStatus: 'Planned',\n        status: 'Status',\n        surgeon: 'Surgeon'\n      },\n      messages: {\n        planCompleted: 'The operative plan has been completed.  You will now be directed to the operation report.',\n        planSaved: 'The operative plan has been saved.'\n      },\n      titles: {\n        editTitle: 'Edit Operative Plan',\n        newTitle: 'New Operative Plan',\n        planCompleted: 'Plan Completed',\n        planSaved: 'Plan Saved'\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: 'Add Contact',\n        addExpense: 'Add Expense',\n        addFamilyMember: 'Add Family Member',\n        addOperativePlan: 'Add Operative Plan',\n        backToPatients: 'Back to Patient List',\n        download: 'Download',\n        editOperativePlan: 'Current Operative Plan',\n        newAppointment: 'New Appointment',\n        newImaging: 'New Imaging',\n        newLab: 'New Lab',\n        newMedication: 'New Medication',\n        newPatient: '+ new patient',\n        newPhoto: 'New Photo',\n        newVisit: 'New Visit',\n        patientCheckIn: 'Patient Check In',\n        scheduleSurgery: 'Schedule Surgery'\n      },\n      labels: {\n        admissionDate: 'Admission Date',\n        admit: 'Admit',\n        bloodType: 'Blood Type',\n        caption: 'Caption',\n        civilStatus: 'Civil Status',\n        clinic: 'Clinic Site',\n        contacts: 'Contacts',\n        cost: 'Cost',\n        dateOfBirth: 'Date Of Birth',\n        dateProcessed: 'Date Processed',\n        dischargeDate: 'Discharge Date',\n        dob: 'DOB',\n        education: 'Education',\n        email: 'Email',\n        externalPatientId: 'External Patient Id',\n        firstName: 'First Name',\n        income: 'Income',\n        insurance: 'Insurance',\n        lastName: 'Last Name',\n        middleName: 'Middle Name',\n        monthlyCost: 'Monthly Cost',\n        occupation: 'Occupation',\n        operativePlan: 'Operative Plan',\n        parent: 'Parent/Guardian',\n        patientDays: 'Patient Days',\n        patientType: 'Patient Type',\n        patientTypeCharity: 'Charity',\n        patientTypePrivate: 'Private',\n        phone: 'Phone',\n        placeOfBirth: 'Place Of Birth',\n        primaryDiagnosis: 'Primary Diagnoses',\n        referredBy: 'Referred By',\n        referredDate: 'Referred Date',\n        relationship: 'Relationship To Patient',\n        relationships: 'Relationships',\n        religion: 'Religion',\n        secondaryDiagnosis: 'Secondary Diagnoses',\n        sex: 'Sex',\n        sexNotEntered: 'Sex Not Entered',\n        sources: 'Sources',\n        status: 'Patient Status',\n        totalMontlyExpense: 'Total Monthly Expenses'\n      },\n      messages: {\n        areYouSureDelete: 'Are you sure you want to delete this {{object}}?',\n        createNewPatient: 'Create a new patient record?',\n        deletingPatient: 'Deleting patient and all associated records',\n        noPatientsFound: 'No patients found.',\n        notFoundQuickAdd: 'The patient <strong>{{patientFullName}}</strong> could not be found.  If you would like to create a new patient, fill in the information below.  Otherwise press the Cancel button to return.',\n        photoFileRequired: 'Please take a picture or upload a file before saving this photo.',\n        savedPatient: 'The patient record for {{displayName}} has been saved.'\n      },\n      navigation: {\n        appointments: 'Appointments',\n        general: 'General',\n        history: 'History',\n        imaging: 'Imaging',\n        labs: 'Labs',\n        medication: 'Medication',\n        photos: 'Photos',\n        socialWork: 'Social Work',\n        visits: 'Visits'\n      },\n      notes: {\n        newNote: 'New Note for',\n        onBehalfOfCopy: 'on behalf of',\n        onBehalfOfLabel: 'On Behalf Of',\n        pleaseSelectAVisit: 'Please select a visit',\n        updateNote: 'Updating Note from'\n      },\n      titles: {\n        addContact: 'Add Contact',\n        addPhoto: 'Add Photo',\n        additionalContacts: 'Additional Contacts',\n        admissionsDetail: 'Admissions Detail',\n        admissionsSummary: 'Admissions Summary',\n        admittedPatients: 'Admitted Patients',\n        'delete': 'Delete Patient',\n        deleteContact: 'Delete Contact',\n        deleteExpense: 'Delete Expense',\n        deleteFamilyMember: 'Delete Family Member',\n        deletePatientRecord: 'Delete Patient Record',\n        deletePhoto: 'Delete Photo',\n        diagnosticTesting: 'Diagnostic Testing',\n        dischargesDetail: 'Discharges Detail',\n        dischargesSummary: 'Discharges Summary',\n        edit: 'Edit Patient',\n        editPhoto: 'Edit Photo',\n        expenses: 'Expenses',\n        familyInfo: 'Family Info',\n        familyInformation: 'Family Information',\n        'new': 'New Patient',\n        outpatientsForDate: 'Outpatients for {{visitDate}}',\n        patient: 'Patient Report',\n        patientListing: 'Patient Listing',\n        patientReport: 'Patient Report',\n        patientStatus: 'Patient Status',\n        proceduresDetail: 'Procedures Detail',\n        proceduresSummary: 'Procedures Summary',\n        savedPatient: 'Patient Saved',\n        socialWork: 'Expense',\n        todaysOutpatients: \"Today's Outpatients\",\n        totalPatientDays: 'Total Patient Days',\n        totalPatientDaysDetailed: 'Total Patient Days (Detailed)',\n        visit: 'Visit'\n      }\n    },\n    pricing: {\n      labels: {\n        discountAmount: 'Discount Amount',\n        discountPercentage: 'Discount Percentage',\n        setFee: 'Set Fee'\n      }\n    },\n    print: { invoice: {\n        labels: {\n          billedBy: 'Billed by:',\n          billedDate: 'Bill Date:',\n          dateAdmitted: 'ADMITTED:',\n          dateDischarged: 'DISCHARGE:',\n          dischargeNotes: 'Discharge Notes:',\n          patientAddress: 'ADDRESS:',\n          patientAge: 'AGE:',\n          patientId: 'PATIENT #:',\n          patientName: 'NAME:',\n          remarks: 'Remarks:',\n          spacer: '__________________________________________',\n          empty: '--',\n          signhere: '<br>Sign:________________________<br>',\n          indent: '&nbsp;&nbsp;&#9642;&nbsp;&nbsp;',\n          balance: 'Balance:'\n        },\n        messages: { whereConducted: 'were deducted during my confinement' },\n        titles: {\n          billingStatement: 'BILLING STATEMENT',\n          patientMember: 'Patient-Member',\n          patients: \"Patient's Invoice\",\n          relContact: 'Relationship/Contact no.'\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: 'Add Medication' },\n      labels: { medicationUsed: 'Medication Used' },\n      messages: { saved: 'The procedure record has been saved.' },\n      titles: {\n        addChargeItem: 'Add Charge Item',\n        addMedicationUsed: 'Add Medication Used',\n        deleteChargeItem: 'Delete Charge Item',\n        deleteMedicationUsed: 'Delete Medication Used',\n        edit: 'Edit Procedure',\n        editChargeItem: 'Edit Charge Item',\n        editMedicationUsed: 'Edit Medication Used',\n        medicationUsed: 'Medication Used',\n        'new': 'New Procedure',\n        saved: 'Procedure Saved'\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: 'Admission Date',\n        allProcedures: 'All Procedures Performed',\n        completedBy: 'Completed By',\n        dischargeDate: 'Discharge Date',\n        examiner: 'Examiner',\n        images: 'Images',\n        labs: 'Labs',\n        location: 'Visit Location',\n        medications: 'Medications',\n        nextAppointment: 'Next Appointment',\n        nextAppointments: 'Next Appointments',\n        notes: {\n          author: 'Author',\n          date: 'Date',\n          title: 'Notes'\n        },\n        operativePlan: {\n          description: 'Operation Description',\n          instructions: 'Instructions upon Admission',\n          procedures: 'Planned Procedures',\n          title: 'Operative Plan'\n        },\n        primaryDiagnosis: 'Primary Diagnosis',\n        procedures: 'Procedures',\n        secondaryDiagnosis: 'Secondary Diagnosis',\n        visitDate: 'Date of Visit',\n        visitType: 'Visit Type'\n      },\n      messages: {\n        'delete': 'Are you sure you wish to delete this report?',\n        saved: 'The report has been saved.'\n      },\n      titles: {\n        dischargeReport: 'Discharge Report',\n        newDischargeReport: 'New Discharge Report',\n        newOPDReport: 'New OPD Report',\n        opdReport: 'OPD Report',\n        saved: 'Report saved'\n      }\n    },\n    user: {\n      plusNewUser: '+ new user',\n      usersPageTile: 'User Listing'\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: 'Add Diagnosis',\n        checkIn: 'Check In',\n        checkOut: 'Check Out',\n        discharge: 'Discharge',\n        newAppointment: 'New Appointment',\n        newDischargeReport: 'New Discharge Report',\n        newOPDReport: 'New OPD Report',\n        newProcedure: 'New Procedure',\n        newVitals: 'New Vitals'\n      },\n      labels: {\n        appointment: 'Appointment',\n        authoredBy: 'Authored By',\n        checkInTime: 'Check In',\n        checkOutTime: 'Check Out',\n        createNewPatient: 'Create New Patient',\n        diagnosis: 'Diagnosis',\n        examiner: 'Examiner',\n        finalDiagnosis: 'Final/Billing Diagnosis',\n        haveAppointment: 'Y',\n        haveDoneOrders: 'Y',\n        noAppointment: 'N',\n        ordersDone: 'Orders Done',\n        ordersNotDone: 'N',\n        patientToCheckIn: 'Patient To Check In',\n        procedure: 'Procedure',\n        procedureDate: 'Procedure Date',\n        reasonForVisit: 'Reason For Visit',\n        reportType: 'Report type',\n        status: 'Visit Status',\n        statusAdmitted: 'Admitted',\n        statusCheckedIn: 'Checked In',\n        statusCheckedOut: 'Checked Out',\n        statusDischarged: 'Discharged',\n        visitDate: 'Visit Date',\n        visitInformation: 'Visit Information',\n        visitType: 'Visit Type'\n      },\n      messages: {\n        checkOut: 'Are you sure you wish to check out {{patientName}}?',\n        checkedOut: '{{patientName}} has been checked out.',\n        discharged: '{{patientName}} has been discharged.',\n        patientCheckedIn: '{{patientName}} has been checked in.',\n        patientCreatedAndCheckedIn: '{{patientName}} has been created and checked in.',\n        visitAndPatientSaved: 'The visit and patient records have been saved.',\n        visitSaved: 'The visit record has been saved.'\n      },\n      navigation: {\n        charges: 'Charges',\n        notes: 'Notes',\n        orders: 'Orders',\n        procedures: 'Procedures',\n        reports: 'Reports',\n        vitals: 'Vitals'\n      },\n      titles: {\n        additionalDiagnoses: 'Additional Diagnoses',\n        checkOut: 'Patient Check Out',\n        checkedIn: 'Patient Checked In',\n        checkedOut: 'Patient Checked Out',\n        discharged: 'Patient Discharged',\n        editVisit: 'Edit Visit',\n        newVisit: 'New Visit',\n        patientCheckIn: 'Patient Check In',\n        visitSaved: 'Visit Saved'\n      }\n    },\n    vitals: {\n      labels: {\n        dateRecorded: 'Date Recorded',\n        dbp: 'DBP',\n        heartRate: 'Heart Rate',\n        height: 'Height',\n        respiratoryRate: 'Respiratory Rate',\n        sbp: 'SBP',\n        temperature: 'Temperature',\n        weight: 'Weight'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/en/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/en/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/es-co/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    admin: {\n      address: {\n        address1Label: 'Texto direccion 1',\n        address2Label: 'Texto direccion 2',\n        address3Label: 'Texto direccion 3',\n        address4Label: 'Texto direccion 4',\n        addressLabel: 'Direcciones',\n        editTitle: 'Opciones de dirección',\n        include1Label: 'Incluir 1',\n        include2Label: 'Incluir 2',\n        include3Label: 'Incluir 3',\n        include4Label: 'Incluir 4',\n        messages: { addressSaved: 'las opciones de dirección han sido guardadas' },\n        newTitle: 'Opciones de dirección',\n        titles: { optionsSaved: 'Opciones guardadas' }\n      },\n      addressOptions: 'Opciones de direcciones',\n      customForms: {\n        buttons: {\n          addField: '',\n          moveDown: '',\n          moveUp: '',\n          newForm: '',\n          preview: ''\n        },\n        labels: {\n          alwaysInclude: '',\n          checkbox: '',\n          colSpan: '',\n          columns: '',\n          customForm: '',\n          dischargeReportFormType: '',\n          formName: '',\n          formType: '',\n          incidentFormType: '',\n          includeOtherOption: '',\n          labFormType: '',\n          label: '',\n          newForm: '',\n          opdReportFormType: '',\n          operativePlanFormType: '',\n          otherOptionLabel: '',\n          patientFormType: '',\n          property: '',\n          radio: '',\n          select: '',\n          socialworkFormType: '',\n          text: '',\n          textarea: '',\n          visitFormType: ''\n        },\n        messages: { formSaved: '' },\n        titles: {\n          checkboxValues: '',\n          customForms: '',\n          deleteForm: '',\n          dropDownValues: '',\n          editCustomForm: '',\n          fields: '',\n          formSaved: '',\n          newCustomForm: '',\n          radioValues: ''\n        }\n      },\n      header: {\n        editTitle: '',\n        facilityName: '',\n        headerLabel: '',\n        headerLine1: '',\n        headerLine2: '',\n        headerLine3: '',\n        logoURL: '',\n        messages: { headerSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      loadDb: 'Cargar Base de datos',\n      loaddb: {\n        displayAlertMessage: 'Por favor seleccione un archivo para ser cargado.',\n        displayAlertTitle: 'Seleccione un archivo para cargar',\n        editTitle: 'Cargar bd',\n        errorDisplayAlertMessage: 'La base de datos no fue cargada el error fue: {{error}}',\n        errorDisplayAlertTitle: 'Error cargando',\n        progressMessage: 'Por favor espere mientras la base de datos es cargada.',\n        progressTitle: 'Cargando ase de datos'\n      },\n      lookup: {\n        aisleLocationList: 'Ubicacion de inventario de pasillo',\n        alertImportListMessage: 'Por favor seleccione un archivo para importar.',\n        alertImportListSaveMessage: 'Lista de busqueda importada.',\n        alertImportListSaveTitle: 'Lista importada',\n        alertImportListTitle: 'Seleccione un archivo para importar',\n        alertImportListUpdateMessage: 'La lista de busqueda ha sido salvada.',\n        alertImportListUpdateTitle: 'Lista salvada',\n        anesthesiaTypes: 'Tipos de anestesia',\n        anesthesiologists: 'Anestesiologo',\n        billingCategories: 'Categorias de facturacion',\n        clinicList: 'Ubicacion de las clinicas',\n        countryList: 'Paises',\n        cptCodeList: 'Codigos CPT',\n        diagnosisList: 'Diagnosticos',\n        edit: { template: {\n            addTitle: 'Adicionar valor',\n            editTitle: 'Editar valor',\n            labelTitle: 'Valor',\n            updateButtonTextAdd: 'Adicionar',\n            updateButtonTextUpdate: 'Actualizar'\n          } },\n        expenseAccountList: 'Cuentas de gastos',\n        imagingPricingTypes: 'Tipos de precios de radiografias',\n        incidentDepartments: '',\n        inventoryTypes: 'Tipos de inventarios',\n        labPricingTypes: 'Precios de laboratorio',\n        pageTitle: 'Listas de busqueda',\n        patientStatusList: 'Lista de estado de pacientes',\n        physicianList: 'Medicos',\n        procedureList: 'Procedimientos',\n        procedureLocations: 'Ubicacion de los procedimientos',\n        procedurePricingTypes: 'Tipos de procedimientos y precios',\n        radiologists: 'Radiologo',\n        titles: { deleteLookupValue: '' },\n        unitTypes: 'Tipos de unidad',\n        vendorList: 'Proveedor',\n        visitLocationList: 'Lugares de visista',\n        visitTypes: 'Tipos de visita',\n        wardPricingTypes: 'Tipos de las tarifas',\n        warehouseList: 'Ubicacciones de inventarios'\n      },\n      lookupLists: 'Lista de busqueda',\n      roles: {\n        capability: {\n          addAllergy: '',\n          addAppointment: 'Adicionar cita',\n          addBillingDiagnosis: '',\n          addCharge: 'Adicionar cargo (valor)',\n          addDiagnosis: 'Adicionar diagnostico',\n          addImaging: 'Adicionar radiografia',\n          addIncident: '',\n          addIncidentCategory: '',\n          addInventoryItem: 'Adicionar elemento al inventario',\n          addInventoryPurchase: 'Adicionar compra',\n          addInventoryRequest: 'Pedido de inventario',\n          addInvoice: 'Adicionar factura',\n          addLab: 'Adicionar laboratorio',\n          addMedication: 'Adicionar medicación',\n          addNote: '',\n          addOperationReport: '',\n          addOperativePlan: '',\n          addPatient: 'Adicionar paciente',\n          addPayment: 'Adicionar pago',\n          addPhoto: 'Adicionar foto',\n          addPricing: 'Adicionar precio',\n          addPricingProfile: 'Adicionar perfil de precios',\n          addProcedure: '',\n          addSocialwork: '',\n          addVisit: 'Adicionar visita',\n          addVitals: 'Adicionar partes vitales',\n          adjustInventoryLocation: 'Ajustar lugar elemento en el inventario',\n          admin: 'Administracion',\n          admitPatient: 'Admitir paciente',\n          appointments: 'Citas',\n          billing: 'Facturacion',\n          completeImaging: 'Completar radiografia',\n          completeLab: 'Completar laboratorio',\n          defineUserRoles: 'Roles de usuario',\n          deleteAppointment: 'Eliminar cita',\n          deleteDiagnosis: 'Eliminar diagnostico',\n          deleteImaging: 'Eliminar radiografia',\n          deleteIncident: '',\n          deleteIncidentCategory: '',\n          deleteInventoryItem: 'Eliminar elemento del inventario',\n          deleteInvoice: 'Eliminar factura',\n          deleteLab: 'Eliminar laboratorio',\n          deleteMedication: 'Eliminar medicación',\n          deleteNote: '',\n          deletePatient: 'Eliminar paciente',\n          deletePhoto: 'Eliminar foto',\n          deletePricing: 'Eliminar precio',\n          deletePricingProfile: 'Eliminar perfil de precio',\n          deleteProcedure: 'Eliminar procedimiento',\n          deleteSocialwork: 'Eliminar trabajo social',\n          deleteVisit: 'Eliminar visita',\n          deleteVitals: 'Eliminar organo vital',\n          dischargePatient: 'Descartar paciente',\n          editInvoice: 'Editar factura',\n          fulfillInventory: 'Cumplimiento de inventario',\n          fulfillMedication: 'Cumplir la medicación',\n          generateIncidentReport: '',\n          imaging: 'Radiografia',\n          incident: '',\n          inventory: 'Inventario',\n          invoices: 'Facturas',\n          labs: 'Laboratorios',\n          loadDb: 'Cargar base de datos',\n          manageIncidents: '',\n          medication: 'Medicación',\n          overrideInvoice: 'Sobreescribir factura',\n          patientReports: 'Reportes por paciente',\n          patients: 'Pacientes',\n          pricing: 'Precio',\n          updateConfig: 'Actualizar configuracion',\n          visits: 'Visitas'\n        },\n        messages: { roleSaved: 'El {{roleName}} rol ha sido salvado.' },\n        titles: { roleSaved: 'Role salvado' }\n      },\n      userRoles: 'Roles',\n      users: 'Usuarios',\n      visitForms: {\n        labels: {\n          followup: '',\n          form: '',\n          initial: '',\n          visitType: ''\n        },\n        titles: { visitForms: '' }\n      },\n      workflow: {\n        admissionDepositLabel: '',\n        clinicPrepaymentLabel: '',\n        editTitle: '',\n        followupPrepaymentLabel: '',\n        messages: { optionsSaved: '' },\n        newTitle: '',\n        outpatientImagingLabel: '',\n        outpatientLabLabel: '',\n        outpatientMedicationLabel: '',\n        titles: { optionsSaved: '' },\n        workflowLabel: ''\n      }\n    },\n    alerts: {\n      errorExclamation: '',\n      pleaseWait: 'Por favor espere',\n      reportError: '',\n      warningExclamation: ''\n    },\n    allergies: {\n      buttons: { addAllergy: '' },\n      labels: {\n        allergyName: '',\n        patientAllergy: ''\n      },\n      titles: {\n        addAllergy: '',\n        editAllergy: ''\n      }\n    },\n    application: {\n      messages: { sessionExpired: '' },\n      titles: { sessionExpired: '' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '+ nueva cita',\n        scheduleSurgery: ''\n      },\n      calendarTitle: '',\n      currentScreenTitle: 'Listado de citas',\n      editTitle: 'Editar cita',\n      labels: {\n        noLocation: '',\n        selectedStartingDate: ''\n      },\n      messages: {\n        appointmentSaved: '',\n        endTimeLaterThanStart: 'Seleccione una hora de finalizacion despues de la de inicio.'\n      },\n      missed: 'Citas perdidas',\n      newTitle: 'Nueva cita',\n      searchTitle: 'Buscar citas',\n      sectionTitle: 'Citas',\n      thisWeek: 'Citas esta semana',\n      titles: {\n        appointmentSaved: '',\n        editSurgicalAppointment: '',\n        newSurgicalAppointment: '',\n        theaterSchedule: ''\n      },\n      todayTitle: 'Citas para hoy'\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: '',\n        noPricingItems: '',\n        noPricingProfiles: ''\n      },\n      buttons: {\n        addOverride: '',\n        createInvoice: ''\n      },\n      labels: {\n        actualCharges: '',\n        discountAmount: '',\n        discountPercentage: '',\n        externalInvoiceNumber: '',\n        hmoCom: '',\n        insurance: '',\n        paymentProfile: '',\n        paymentsDeposits: '',\n        pricingPanelOverrides: '',\n        pricingProfile: ''\n      }\n    },\n    buttons: {\n      add: 'Adicionar',\n      addItem: '',\n      addLineItem: '',\n      addValue: 'Adicionar valor',\n      addVisit: 'Adicionar visita',\n      allRequests: 'Todas las solicitudes',\n      barcode: 'Codigo de barras',\n      cancel: 'Cancelar',\n      clear: '',\n      close: 'Cerrar',\n      complete: 'Completado',\n      'delete': 'Eliminar',\n      dispense: 'Repartir',\n      edit: '',\n      filter: '',\n      fulfill: 'Cumplimiento',\n      'import': 'Importar',\n      loadFile: 'Cargar archivo',\n      newItem: '+ nuevo elemento',\n      newNote: 'Nueva nota',\n      newRequest: 'Nueva solicitud',\n      newRequestPlus: '+ nuevo pedido',\n      newUser: 'Nuevo usuario',\n      ok: 'Ok',\n      remove: 'Remover',\n      returnButton: 'Regresar',\n      search: 'Buscar',\n      showAll: '',\n      showFewer: '',\n      update: 'Actualizar'\n    },\n    components: {\n      chargesByTypeTab: { charges: '' },\n      customFormManager: { buttons: { addForm: '' } },\n      dateTimePicker: {\n        amHour: '',\n        midnight: '',\n        noon: '',\n        pmHour: ''\n      },\n      imageUpload: { messages: { selectValidImageFile: '' } },\n      operativeProcedures: {\n        buttons: { addProcedure: '' },\n        labels: { procedure: '' },\n        titles: { procedures: '' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: '',\n          newLab: '',\n          newMedication: ''\n        },\n        labels: {\n          imagingOrderType: '',\n          labOrderType: '',\n          medicationOrderType: '',\n          orderType: ''\n        }\n      },\n      priceList: { charges: '' },\n      quantityCalc: { result: '' },\n      quantityConv: {\n        conversion: '',\n        unit: ''\n      },\n      sortableColumn: { labels: { selectAll: '' } },\n      takePhoto: {\n        camera: '',\n        how: '',\n        labels: {\n          takeAPicture: '',\n          uploadAFile: ''\n        },\n        photo: '',\n        preview: '',\n        takePhoto: '',\n        uploadFile: ''\n      },\n      upcomingAppointments: {\n        labels: {\n          date: '',\n          location: '',\n          type: '',\n          'with': ''\n        },\n        titles: { upcomingAppointments: '' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: '' },\n      labels: { formToAdd: '' },\n      titles: { addCustomForm: '' }\n    },\n    dashboard: {\n      setup: '',\n      title: 'Que deseas hacer?'\n    },\n    dates: {\n      'long': '',\n      longOmitDays: '',\n      longOmitDaysPlural: '',\n      longOmitDaysYears: '',\n      longOmitYears: '',\n      longPlural: '',\n      'short': '',\n      shortOmitYears: ''\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: '',\n        date: '',\n        diagnosis: '',\n        secondaryDiagnosis: ''\n      },\n      titles: {\n        addDiagnosis: '',\n        editDiagnosis: ''\n      }\n    },\n    errors: {\n      accepted: '',\n      blank: '',\n      confirmation: '',\n      empty: '',\n      equalTo: '',\n      even: '',\n      exclusion: '',\n      greaterThan: '',\n      greaterThanOrEqualTo: '',\n      inclusion: '',\n      invalid: '',\n      invalidNumber: '',\n      lessThan: '',\n      lessThanOrEqualTo: '',\n      notANumber: '',\n      notAnInteger: '',\n      odd: '',\n      otherThan: '',\n      present: '',\n      result: '',\n      tooLong: '',\n      tooShort: '',\n      wrongLength: ''\n    },\n    headings: { chargedItems: '' },\n    imaging: {\n      alerts: {\n        completedMessage: 'El pedido de radiografia ha sido completado.',\n        completedTitle: 'Pedido de radiografia completado',\n        savedMessage: 'El pedido de radiografia ha sido guardado.',\n        savedTitle: 'Pedido de radiografia salvado'\n      },\n      buttons: { newButton: '+ new radiografia' },\n      labels: {\n        addNewVisit: '--Adicionar nueva visita--',\n        radiologist: 'Radiologo'\n      },\n      messages: { noCompleted: 'No de items encontrados.' },\n      pageTitle: 'Pedido de radriografia',\n      sectionTitle: 'Radiografias',\n      titles: {\n        completedImaging: 'Radiografia completada',\n        editTitle: 'Pedido de edicion de radiografia',\n        newTitle: 'Nuevo pedido de radiografia'\n      }\n    },\n    incident: {\n      buttons: {\n        add: '',\n        addForm: '',\n        addItem: '',\n        cancel: '',\n        'delete': '',\n        download: '',\n        edit: '',\n        'export': '',\n        generateRep: '',\n        newAttachment: '',\n        newCategory: '',\n        newIncident: '',\n        newNote: ''\n      },\n      labels: {\n        actions: '',\n        addedBy: '',\n        category: '',\n        categoryItem: '',\n        date: '',\n        dateRecorded: '',\n        department: '',\n        description: '',\n        endDate: '',\n        givenBy: '',\n        howToAddAttachment: '',\n        incidentDate: '',\n        incidentId: '',\n        item: '',\n        lastUpdated: '',\n        note: '',\n        patientId: '',\n        patientImpacted: '',\n        reportType: '',\n        reportedBy: '',\n        reportedDate: '',\n        reportedTo: '',\n        sentinelEvent: '',\n        startDate: '',\n        status: '',\n        statusActive: '',\n        statusClosed: '',\n        statusFollowup: '',\n        statusReported: '',\n        title: '',\n        total: '',\n        updatedBy: ''\n      },\n      messages: {\n        attachmentFileRequired: '',\n        createNew: '',\n        createNewIncidentCategory: '',\n        fillIn: '',\n        incidentCategorySaved: '',\n        noClosedIncidents: '',\n        noIncidentCategoriesFound: '',\n        noIncidents: '',\n        saved: '',\n        selectExistingPatient: ''\n      },\n      titles: {\n        addAttachment: '',\n        addCategoryItem: '',\n        addNote: '',\n        attachments: '',\n        closed: '',\n        current: '',\n        deleteAttachment: '',\n        deleteIncident: '',\n        deleteIncidentCategory: '',\n        deleteItem: '',\n        deleteNote: '',\n        editAttachment: '',\n        editIncident: '',\n        editIncidentCategory: '',\n        editNote: '',\n        general: '',\n        history: '',\n        incidentCategories: '',\n        incidentCategoryItem: '',\n        incidentCategoryName: '',\n        incidentCategorySaved: '',\n        incidentSaved: '',\n        incidents: '',\n        incidentsByCategory: '',\n        incidentsByDepartment: '',\n        newIncident: '',\n        newIncidentCategory: '',\n        notes: '',\n        reports: ''\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Costo por unidad:',\n        delivered: 'Enviado A:',\n        location: 'Cambio de ubicación:',\n        prescription: 'Recetado por:',\n        pulled: 'Pulled From:',\n        quantity: 'Quantity at Completion:',\n        reason: 'Razón:',\n        returned: 'Regresado al paciente:',\n        transferredFrom: 'Transferido a:',\n        transferredTo: 'Transferido a:'\n      },\n      labels: {\n        action: 'Acción',\n        add: 'Adicionar',\n        addAdjustmentType: '',\n        adjust: 'Adjustar',\n        adjustmentDate: 'Fecha de ajuste',\n        adjustmentFor: 'Ajustado para',\n        adjustmentType: 'Tipo de ajuste',\n        aisle: 'Pasillo',\n        aisleLocation: 'Ubicación pasillo',\n        allInventory: 'Todo el inventario',\n        allItems: '',\n        availableQuantity: '',\n        billTo: 'Facturao a',\n        consumePurchases: 'Consume Purchases',\n        consumptionRate: 'Tasa de consumo',\n        cost: 'Costo',\n        costPerUnit: 'Costo por Unidad',\n        crossReference: 'Referencia cruzada',\n        currentQuantity: 'Cantidad actual',\n        dateCompleted: 'Fecha completado',\n        dateEffective: 'Gecha efectiva',\n        dateEnd: 'Fecha final',\n        dateReceived: 'Fecha recibido',\n        dateStart: 'Fecha inicial',\n        dateTransferred: 'Fecha transferencia',\n        daysLeft: 'Dias restantes',\n        deleteItem: 'Eliminar elemento',\n        deliveryAisle: 'Enviado a pasillo',\n        deliveryLocation: 'Ubicación del envio',\n        details: 'Detalles',\n        distributionUnit: 'Unidad de distribución',\n        editItem: 'Editar elemento',\n        expense: 'Gastos a',\n        expirationDate: 'Fecha de vencimiento',\n        fulfillRequest: 'Pedido de cumplimiento',\n        fulfillRequestNow: 'Pedido de incumplimiento para hoy',\n        gift: 'Regalo en especie',\n        giftInKindNo: 'N',\n        giftInKindYes: 'Y',\n        giftUsage: 'Uso del regalo en especie',\n        inventoryConsumed: 'Inventario consumido',\n        inventoryItem: 'Elemento del inventario',\n        inventoryObsolence: 'Obsolescencia de inventario',\n        invoiceItems: 'Articulos de factura',\n        invoiceLineItem: 'Elemento de la factura linea',\n        invoiceNumber: 'Factura numero',\n        item: 'Elemento',\n        itemNumber: 'Numero de elemento',\n        items: 'Elementos',\n        location: 'Ubicación',\n        locations: 'Ubicaciones',\n        markAsConsumed: 'Marcar como consumido',\n        name: 'Nombre',\n        newItem: 'Nuevo elemento',\n        originalQuantity: 'Cantidad original',\n        print: 'Imprimir',\n        printBarcode: 'Imprimir codigo de  barras',\n        printer: 'Impresora',\n        pullFrom: 'Traido de',\n        purchaseCost: 'Costo de compra',\n        purchaseInfo: 'Informacion de la compra',\n        purchases: 'Compras',\n        quantity: 'Cantidad ({{unit}})',\n        quantityAvailable: 'Cantidad disponible',\n        quantityOnHand: 'Cantidad a la mano',\n        quantityRequested: 'Cantidad pedida',\n        rank: 'Ranking',\n        reason: 'Razón',\n        remove: 'Remover',\n        removeAdjustmentType: '',\n        reorderPoint: 'Reordenar punto',\n        requestedItems: 'Elementos solicitados',\n        returnAdjustmentType: '',\n        returnToVendorAdjustmentType: '',\n        salePricePerUnit: 'Costo de venta por unidad',\n        save: 'Guardar',\n        serialNumber: 'Serial/Numero de lote',\n        total: 'Total',\n        totalCost: 'Costo total',\n        totalReceived: 'Total Recivido: {{total}}',\n        transaction: 'Transaccion',\n        transactions: 'Transacciones',\n        transfer: 'Translados',\n        transferFrom: 'Translado desde',\n        transferTo: 'Translado a ubicación',\n        transferToAisle: 'Translado a pasillo',\n        unit: 'Unidad',\n        unitCost: 'Unidad Costo',\n        vendor: 'Proveedor',\n        vendorItemNumber: 'Proveedor numero de elemento',\n        writeOffAdjustmentType: '',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: 'Por favor ajust las cantidades en la ubicación adecuada(s) la diferencia de la cuenta es {{difference}}.',\n        createRequest: 'Crear un nuevo pedido?',\n        itemNotFound: 'El elemento del inventario <strong>{{item}}</strong> no se pudo encontrar.<br>Si desea crear un nuevo elemento, Ingrese la información abajo.<br>De lo contrario opria cancelar para volver.',\n        loading: 'Cargando transacciones ...',\n        noItems: 'No se encontraron elementos.',\n        noRequests: 'No se encontraron pedidos.',\n        purchaseSaved: 'La compra de inventario ha sido salvada.',\n        quantity: 'La cantidad total <strong>({{quantity}})</strong> no encaja con la cantidad total en las ubicaciones <strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Esta seguro de eliminar este elemento de la factura?',\n        removeItemRequest: 'Seguro que quiere eliminar este elemento del pedido?',\n        requestFulfilled: 'El pedido de inventario ha sido procesado.',\n        requestUpdated: 'El pedido de inventario ha sido actualizado.',\n        warning: 'Valide los campos requeridos (marcados con *) corrija los errores antes de adicionar.'\n      },\n      reports: {\n        adjustment: 'Ajuste detallado',\n        daysSupply: 'Dias de inventario restante',\n        expenseDetail: 'Gastos detallados',\n        expenseSum: 'Resumen de gastos',\n        expiration: 'Fecha de expiracion',\n        'export': 'Exportar reporte',\n        fields: 'Campos a incluir',\n        finance: 'Resumen de finanzas',\n        generate: 'Generar reporte',\n        invLocation: 'Inventario por ubicacion',\n        invValuation: 'Inventario por valoracion',\n        purchaseDetail: 'Compras detalladas',\n        purchaseSum: 'Resumen de compras',\n        reportType: 'Tipo de reporte',\n        rows: {\n          adjustments: 'Ajustes',\n          adjustmentsTotal: 'Ajustes totales',\n          balanceBegin: 'Balance inicial',\n          balanceEnd: 'Balance Final',\n          category: 'Categoria',\n          consumed: 'Consumado',\n          consumedGik: 'GiK Consumido',\n          consumedGikTotal: 'Total GiK Consumido',\n          consumedPuchases: 'Total de lo comprado consumido',\n          consumedPurchasesTotal: 'Total de lo comprado consumido',\n          consumedTotal: 'Total consumido',\n          errInFinSum: 'Error en _generateFinancialSummaryReport: ',\n          errInFindPur: 'Error en _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Error en _findInventoryItemsByRequest: ',\n          expensesFor: 'Gatos para: ',\n          noAccount: '(No Cuenta)',\n          subtotal: 'Subtotal: ',\n          subtotalFor: 'Subtotal para {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total para {{var}}: ',\n          totalPurchases: 'Compras Totales',\n          transfer1: '{{quantity}} de {{location}}',\n          trasnfer2: 'De: {{source}} A: {{target}}'\n        },\n        stockTransferDetail: 'Detalle de traslado de stock',\n        stockTransferSum: 'Resumen traslado de stock',\n        stockUsageDetail: 'Detalle de uso de stock',\n        stockUsageSum: 'Resumen uso de stock',\n        titleDateRange: '',\n        titleSingleDate: ''\n      },\n      titles: {\n        addPurchase: 'Adicionar compra',\n        addRequest: 'Nuevo pedido',\n        adjustment: 'Ajuste',\n        editPurchase: 'Editar compra',\n        editRequest: 'Editar pedido',\n        inventoryItem: 'Nuevo elemento de inventario',\n        inventoryReport: 'Reporte de inventario',\n        purchaseSaved: 'Compras de inventario guardadas',\n        quickAddTitle: 'Nuevo elemento de inventario',\n        removeItem: 'Remover elemento',\n        requestFulfilled: 'Pedido cumplido',\n        requestUpdated: 'Pedido actualizado',\n        transfer: 'Trasladar elementos',\n        warning: 'Peligro!!!!!'\n      }\n    },\n    labels: {\n      action: 'Accion',\n      actions: 'Acciones',\n      addNewOutpatientVisit: '--Nueva visita a paciente externo--',\n      address: '',\n      age: 'Edad',\n      allDay: 'Todo el dia',\n      amount: '',\n      anesthesia: 'Anestesia',\n      assisting: 'Asistencia',\n      balanceDue: '',\n      billDate: '',\n      billTo: 'Facturar a',\n      category: '',\n      completed: 'Completado',\n      country: '',\n      cptcode: 'Codigo CPT',\n      creditTo: '',\n      date: 'Fecha',\n      dateCompleted: 'Fecha completada',\n      dateOfBirth: 'Fecha de nacimiento',\n      dateOfBirthShort: 'FDN',\n      datePaid: '',\n      dateRequested: 'Fecha de pedido',\n      'delete': 'Eliminar',\n      deleteRequest: 'Eliminar pedido',\n      deleteUser: 'Eliminar usuario',\n      department: '',\n      description: 'Descripción',\n      discount: '',\n      displayName: 'Nombre para mostrar',\n      docRead: 'Leer documento',\n      docWritten: 'Documento escrito',\n      edit: 'Editar',\n      editUser: 'Editar usuario',\n      email: 'Email',\n      endDate: 'Fecha final',\n      endTime: 'Hora de finalización',\n      excess: '',\n      expenseTo: '',\n      fileLoadSuccessful: 'Archivo cargado exitosamente',\n      fileName: '',\n      fileToLoad: 'Archivo cargado',\n      fulfill: 'Cumplomiento',\n      fulfillRequest: 'Pedido de cumplimiento',\n      fulfillRequestNow: 'Pedido de cumplimiento ahora',\n      fulfilled: 'Cumplido',\n      grandTotal: '',\n      id: 'Id',\n      imageOrders: 'Ordenes de radiografias',\n      imagingType: 'Tipo de radiografia',\n      importFile: 'Importar archivo',\n      invoiceId: '',\n      labOrders: 'Ordenes de laboratorio',\n      lineItems: '',\n      loading: 'Cargando',\n      location: 'Ubicacion',\n      lookupType: 'Tipo de busqueda',\n      medication: 'Medicación',\n      name: 'Nombre',\n      newUser: 'Nuevo usuario',\n      note: '',\n      notes: 'Notas',\n      number: '',\n      on: 'on',\n      password: 'Contraseña',\n      patient: 'Paciente',\n      payments: '',\n      physician: 'Médico',\n      prescriber: '',\n      prescription: 'Receta medica',\n      prescriptionDate: 'Fecha de la receta medica',\n      price: '',\n      print: '',\n      procedures: 'Procedimiento',\n      provider: 'Proveedor',\n      pullFrom: 'Traer de',\n      quantity: 'Cantidada',\n      remarks: '',\n      requestedBy: 'Pedido por|',\n      requestedOn: 'Pedido On',\n      requests: 'Pedido',\n      result: 'Resultado',\n      results: 'Resultados',\n      role: 'Rol',\n      search: '',\n      sex: 'Genero',\n      startDate: 'Fecha de inicio',\n      startTime: 'Hora de inicio',\n      status: 'Estado',\n      takenBy: '',\n      total: '',\n      type: 'Tipo',\n      userCanAddNewValue: 'Los usuarios pueden agregar nuevos valores',\n      username: 'Nombre de usuario',\n      value: 'Valor',\n      view: '',\n      visit: 'Visita',\n      'with': 'con'\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: 'El pedido de laboratorio ha sido completado.',\n        requestCompletedTitle: 'Pedido de laboratorio competado',\n        requestSavedMessage: 'El pedido de laboratorio ha sido guardado.',\n        requestSavedTitle: 'Silicitud de laboratorio guardado'\n      },\n      buttons: { newButton: '+ nuevo laboratorio' },\n      completedTitle: 'Completar laboratorio',\n      deleteTitle: 'Eliminar pedido',\n      editTitle: 'Editar pedido de laboratorio',\n      labels: {\n        addNewVisit: '--Adicionar nueva visita--',\n        labType: 'Tipo de laboratorio'\n      },\n      messages: {\n        createNewRecord: 'Crear un registro?',\n        noCompleted: 'No elementos completados encontrados.',\n        noItemsFound: 'No boratorios encontrados.'\n      },\n      newTitle: 'Nuevo pedido de laboratorio',\n      requestsTitle: 'Pedido de laboratorio',\n      sectionTitle: 'Laboratorios'\n    },\n    languages: {\n      en: 'Inglés',\n      fr: 'Francés',\n      es: 'Español',\n      de: 'Alemán',\n      ru: 'Ruso',\n      'es-co': 'Español (Colombiano)',\n      'pt-br': 'Portugués (Brasileño)',\n      tr: 'Turco',\n      ur: 'Urdu'\n    },\n    loading: {\n      messages: {\n        '0': '',\n        '1': '',\n        '2': '',\n        '3': '',\n        '4': '',\n        '5': '',\n        '6': '',\n        '7': '',\n        '8': '',\n        '9': '',\n        '10': '',\n        '11': ''\n      },\n      progressBar: { progress: '' }\n    },\n    login: {\n      labels: {\n        password: 'Clave',\n        signIn: 'Ingresar',\n        username: 'Nombre de usuario'\n      },\n      messages: {\n        error: 'Nombre de usuario o clave incorrectos.',\n        signIn: 'por favor ingrese'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: 'Pedido de medicación cumplido',\n        returnedMessage: 'La medicacion ha sido marcada para devolver.',\n        returnedTitle: 'Medicacion devuelta',\n        savedMessage: 'La elemento de medicación ha sido guardado.',\n        savedTitle: 'Pedido de medicacion guardado'\n      },\n      buttons: {\n        dispenseMedication: 'dispensar medicación',\n        newButton: '+ nuevo pedido',\n        returnMedication: 'debolver medicacion'\n      },\n      labels: {\n        adjustmentDate: 'Fecha de ajuste',\n        creditToAccount: 'Credito a cuenta',\n        quantityDispensed: 'Cantidad dispensada',\n        quantityDistributed: 'Cantidad distribuida',\n        quantityRequested: 'Cantidad solicitada',\n        quantityToReturn: 'Cantidad a devolver',\n        refills: 'Recargas',\n        returnAisle: 'Devolve a pasillo',\n        returnLocation: 'Retornar a ubicación',\n        returnReason: 'Razon por la que se devuelve/Nota'\n      },\n      messages: { createNew: 'Crear un nuevo pedido de medicacion?' },\n      pageTitle: 'Pedido de medicación',\n      returnMedication: 'Retorno de medicación',\n      sectionTitle: 'Medication',\n      titles: {\n        completedMedication: 'Medicacion completada',\n        editMedicationRequest: 'Editar pedido de medicacion',\n        newMedicationRequest: 'Nuevo pedido de medicacion'\n      }\n    },\n    messages: {\n      createNewRecord: 'Crear un nuevo registro?',\n      createNewUser: 'Crear un nuevo usuario?',\n      'delete': '',\n      delete_plural: '',\n      delete_singular: '',\n      forAuthorizedPersons: 'Este informe es sólo para personas autorizadas.',\n      newPatientHasToBeCreated: 'Un nuevo paciente debe ser creado...Por favor espere..',\n      noHistoryAvailable: 'Historia no disponible.',\n      noItemsFound: 'Elementos no encontrados.',\n      noNotesAvailable: 'No hay notas clínicas adicionales están disponibles para esta visita.',\n      noUsersFound: 'Ningun usuario encontrado.',\n      onBehalfOf: 'a nombre de',\n      reportError: '',\n      requiredFieldsCorrectErrors: '',\n      saveActionException: '',\n      sorry: 'Lo sentimos, un error ha ocurrido...',\n      userHasBeenSaved: 'El usuario ha sido salvado.',\n      userSaved: 'Usuario salvado'\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: '',\n          appointmentDate: '',\n          appointmentType: '',\n          endDate: '',\n          location: '',\n          notes: '',\n          patient: '',\n          provider: '',\n          startDate: '',\n          status: '',\n          type: ''\n        },\n        names: {\n          plural: '',\n          singular: ''\n        }\n      },\n      attachment: { names: {\n          plural: '',\n          singular: ''\n        } },\n      form: { names: {\n          plural: '',\n          singular: ''\n        } },\n      imaging: {\n        names: '',\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      incident: { names: {\n          plural: '',\n          singular: ''\n        } },\n      item: { names: {\n          plural: '',\n          singular: ''\n        } },\n      lab: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      medication: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      note: { names: {\n          plural: '',\n          singular: ''\n        } },\n      patient: {\n        labels: { name: '' },\n        names: { singular: '' }\n      },\n      procedure: { names: {\n          plural: '',\n          singular: ''\n        } },\n      user: { names: {\n          plural: '',\n          singular: ''\n        } },\n      visit: { names: {\n          plural: '',\n          singular: ''\n        } },\n      vital: { names: {\n          plural: '',\n          singular: ''\n        } }\n    },\n    navigation: {\n      about: 'Información de HospitalRun',\n      actions: {\n        login: 'Ingresar',\n        logout: 'Salir'\n      },\n      administration: 'Administracion',\n      billing: 'Facturas',\n      imaging: 'Radiografia',\n      incident: '',\n      inventory: 'Inventario',\n      labs: 'Laboratorio',\n      medication: 'Recetas medicas',\n      patients: 'Pacientes',\n      scheduling: '',\n      subnav: {\n        actions: '',\n        addAppointment: 'Nueva cita',\n        addressFields: 'Campos de dirección',\n        admittedPatients: '',\n        appointmentSearch: '',\n        appointmentsCalendar: '',\n        appointmentsThisWeek: '',\n        completed: 'Completado',\n        currentIncidents: '',\n        customForms: '',\n        dispense: 'Dispense',\n        history: '',\n        incidentCategories: '',\n        inventoryReceived: 'Inventario recibido',\n        invoices: 'Facturas',\n        items: 'Items',\n        loadDB: '',\n        lookupLists: 'Lista de busuedas',\n        missedAppointments: '',\n        newIncident: '',\n        newInvoice: 'Nueva factura',\n        newPatient: 'Nuevo paciente',\n        newRequest: 'New pedido',\n        newUser: 'Nuevo usuario',\n        outpatient: '',\n        patientListing: 'Lista de pacientes',\n        priceProfiles: 'Perfil de precios',\n        prices: 'Precios',\n        printHeader: '',\n        reports: 'Reportes',\n        requests: 'Pedidos',\n        returnMedication: 'Devolver medicamento',\n        scheduleSurgery: '',\n        theaterSchedule: '',\n        \"today'sAppointments\": '',\n        userRoles: 'Roles',\n        users: 'Usuarios',\n        workflow: ''\n      }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: '',\n        assistant: '',\n        caseComplexity: '',\n        operationDescription: '',\n        preOpPrimaryDiagnosis: '',\n        preOpSecondaryDiagnosis: '',\n        surgeon: '',\n        surgeryDate: ''\n      },\n      messages: { reportSaved: '' },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        reportSaved: ''\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: '' },\n      labels: {\n        additionalNotes: '',\n        admissionInstructions: '',\n        caseComplexity: '',\n        completedStatus: '',\n        droppedStatus: '',\n        operationDescription: '',\n        plannedStatus: '',\n        status: '',\n        surgeon: ''\n      },\n      messages: {\n        planCompleted: '',\n        planSaved: ''\n      },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        planCompleted: '',\n        planSaved: ''\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: '',\n        addExpense: '',\n        addFamilyMember: '',\n        addOperativePlan: '',\n        backToPatients: '',\n        download: '',\n        editOperativePlan: '',\n        newAppointment: '',\n        newImaging: '',\n        newLab: '',\n        newMedication: '',\n        newPatient: '',\n        newPhoto: '',\n        newVisit: '',\n        patientCheckIn: '',\n        scheduleSurgery: ''\n      },\n      labels: {\n        admissionDate: '',\n        admit: '',\n        bloodType: '',\n        caption: '',\n        civilStatus: '',\n        clinic: '',\n        contacts: '',\n        cost: '',\n        dateOfBirth: '',\n        dateProcessed: '',\n        dischargeDate: '',\n        dob: '',\n        education: '',\n        email: '',\n        externalPatientId: '',\n        firstName: '',\n        income: '',\n        insurance: '',\n        lastName: '',\n        middleName: '',\n        monthlyCost: '',\n        occupation: '',\n        operativePlan: '',\n        parent: '',\n        patientDays: '',\n        patientType: '',\n        patientTypeCharity: '',\n        patientTypePrivate: '',\n        phone: '',\n        placeOfBirth: '',\n        primaryDiagnosis: '',\n        referredBy: '',\n        referredDate: '',\n        relationship: '',\n        relationships: '',\n        religion: '',\n        secondaryDiagnosis: '',\n        sex: '',\n        sexNotEntered: '',\n        sources: '',\n        status: '',\n        totalMontlyExpense: ''\n      },\n      messages: {\n        areYouSureDelete: '',\n        createNewPatient: '',\n        deletingPatient: '',\n        noPatientsFound: '',\n        notFoundQuickAdd: '',\n        photoFileRequired: '',\n        savedPatient: ''\n      },\n      navigation: {\n        appointments: '',\n        general: '',\n        history: '',\n        imaging: '',\n        labs: '',\n        medication: '',\n        photos: '',\n        socialWork: '',\n        visits: ''\n      },\n      notes: {\n        newNote: '',\n        onBehalfOfCopy: 'a nombre de',\n        onBehalfOfLabel: 'A nombre de',\n        pleaseSelectAVisit: 'Por favor seleccione una visista',\n        updateNote: ''\n      },\n      titles: {\n        addContact: '',\n        addPhoto: '',\n        additionalContacts: '',\n        admissionsDetail: '',\n        admissionsSummary: '',\n        admittedPatients: '',\n        'delete': '',\n        deleteContact: '',\n        deleteExpense: '',\n        deleteFamilyMember: '',\n        deletePatientRecord: '',\n        deletePhoto: '',\n        diagnosticTesting: '',\n        dischargesDetail: '',\n        dischargesSummary: '',\n        edit: '',\n        editPhoto: '',\n        expenses: '',\n        familyInfo: '',\n        familyInformation: '',\n        'new': '',\n        outpatientsForDate: '',\n        patient: '',\n        patientListing: '',\n        patientReport: '',\n        patientStatus: '',\n        proceduresDetail: '',\n        proceduresSummary: '',\n        savedPatient: '',\n        socialWork: '',\n        todaysOutpatients: '',\n        totalPatientDays: '',\n        totalPatientDaysDetailed: '',\n        visit: ''\n      }\n    },\n    print: { invoice: {\n        labels: {\n          billedBy: '',\n          billedDate: '',\n          dateAdmitted: '',\n          dateDischarged: '',\n          dischargeNotes: '',\n          patientAddress: '',\n          patientAge: '',\n          patientId: '',\n          patientName: '',\n          remarks: '',\n          spacer: ''\n        },\n        messages: { whereConducted: '' },\n        titles: {\n          billingStatement: '',\n          patientMember: '',\n          patients: '',\n          relContact: ''\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: '' },\n      labels: { medicationUsed: '' },\n      messages: { saved: '' },\n      titles: {\n        addChargeItem: '',\n        addMedicationUsed: '',\n        deleteChargeItem: '',\n        deleteMedicationUsed: '',\n        edit: '',\n        editChargeItem: '',\n        editMedicationUsed: '',\n        medicationUsed: '',\n        'new': '',\n        saved: ''\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: '',\n        allProcedures: '',\n        completedBy: '',\n        dischargeDate: '',\n        examiner: '',\n        images: '',\n        labs: '',\n        location: '',\n        medications: '',\n        nextAppointment: '',\n        nextAppointments: '',\n        notes: {\n          author: '',\n          date: '',\n          title: ''\n        },\n        operativePlan: {\n          description: '',\n          instructions: '',\n          procedures: '',\n          title: ''\n        },\n        primaryDiagnosis: '',\n        procedures: '',\n        secondaryDiagnosis: '',\n        visitDate: '',\n        visitType: ''\n      },\n      messages: {\n        'delete': '',\n        saved: ''\n      },\n      titles: {\n        dischargeReport: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        opdReport: '',\n        saved: ''\n      }\n    },\n    user: {\n      plusNewUser: '+ nuevo usuario',\n      usersPageTile: 'Listado de usuarios'\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: '',\n        checkIn: '',\n        checkOut: '',\n        discharge: '',\n        newAppointment: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        newProcedure: '',\n        newVitals: ''\n      },\n      labels: {\n        appointment: '',\n        authoredBy: '',\n        checkInTime: '',\n        checkOutTime: '',\n        createNewPatient: '',\n        diagnosis: '',\n        examiner: '',\n        finalDiagnosis: '',\n        haveAppointment: '',\n        haveDoneOrders: '',\n        noAppointment: '',\n        ordersDone: '',\n        ordersNotDone: '',\n        patientToCheckIn: '',\n        procedure: '',\n        procedureDate: '',\n        reasonForVisit: '',\n        reportType: '',\n        status: '',\n        statusAdmitted: '',\n        statusCheckedIn: '',\n        statusCheckedOut: '',\n        statusDischarged: '',\n        visitDate: '',\n        visitInformation: '',\n        visitType: ''\n      },\n      messages: {\n        checkOut: '',\n        checkedOut: '',\n        discharged: '',\n        patientCheckedIn: '',\n        patientCreatedAndCheckedIn: '',\n        visitAndPatientSaved: '',\n        visitSaved: ''\n      },\n      navigation: {\n        charges: '',\n        notes: '',\n        orders: '',\n        procedures: '',\n        reports: '',\n        vitals: ''\n      },\n      titles: {\n        additionalDiagnoses: '',\n        checkOut: '',\n        checkedIn: '',\n        checkedOut: '',\n        discharged: '',\n        editVisit: '',\n        newVisit: '',\n        patientCheckIn: '',\n        visitSaved: ''\n      }\n    },\n    vitals: { labels: {\n        dateRecorded: '',\n        dbp: '',\n        heartRate: '',\n        height: '',\n        respiratoryRate: '',\n        sbp: '',\n        temperature: '',\n        weight: ''\n      } }\n  };\n});","define('hospitalrun/tests/locales/es-co/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/es-co/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es-co/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/es/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    admin: {\n      address: {\n        address1Label: 'Texto direccion 1',\n        address2Label: 'Texto direccion 2',\n        address3Label: 'Texto direccion 3',\n        address4Label: 'Texto direccion 4',\n        addressLabel: 'Direcciones',\n        editTitle: 'Opciones de dirección',\n        include1Label: 'Incluir 1',\n        include2Label: 'Incluir 2',\n        include3Label: 'Incluir 3',\n        include4Label: 'Incluir 4',\n        messages: { addressSaved: 'las opciones de dirección han sido guardadas' },\n        newTitle: 'Opciones de dirección',\n        titles: { optionsSaved: 'Opciones guardadas' }\n      },\n      addressOptions: 'Opciones de direcciones',\n      customForms: {\n        buttons: {\n          addField: '',\n          moveDown: '',\n          moveUp: '',\n          newForm: '',\n          preview: ''\n        },\n        labels: {\n          alwaysInclude: '',\n          checkbox: '',\n          colSpan: '',\n          columns: '',\n          customForm: '',\n          dischargeReportFormType: '',\n          formName: '',\n          formType: '',\n          incidentFormType: '',\n          includeOtherOption: '',\n          labFormType: '',\n          label: '',\n          newForm: '',\n          opdReportFormType: '',\n          operativePlanFormType: '',\n          otherOptionLabel: '',\n          patientFormType: '',\n          property: '',\n          radio: '',\n          select: '',\n          socialworkFormType: '',\n          text: '',\n          textarea: '',\n          visitFormType: ''\n        },\n        messages: { formSaved: '' },\n        titles: {\n          checkboxValues: '',\n          customForms: '',\n          deleteForm: '',\n          dropDownValues: '',\n          editCustomForm: '',\n          fields: '',\n          formSaved: '',\n          newCustomForm: '',\n          radioValues: ''\n        }\n      },\n      header: {\n        editTitle: '',\n        facilityName: '',\n        headerLabel: '',\n        headerLine1: '',\n        headerLine2: '',\n        headerLine3: '',\n        logoURL: '',\n        messages: { headerSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      loadDb: 'Cargar Base de datos',\n      loaddb: {\n        displayAlertMessage: 'Por favor seleccione un archivo para ser cargado.',\n        displayAlertTitle: 'Seleccione un archivo para cargar',\n        editTitle: 'Cargar bd',\n        errorDisplayAlertMessage: 'La base de datos no fue cargada el error fue: {{error}}',\n        errorDisplayAlertTitle: 'Error cargando',\n        progressMessage: 'Por favor espere mientras la base de datos es cargada.',\n        progressTitle: 'Cargando ase de datos'\n      },\n      lookup: {\n        aisleLocationList: 'Ubicacion de inventario de pasillo',\n        alertImportListMessage: 'Por favor seleccione un archivo para importar.',\n        alertImportListSaveMessage: 'Lista de busqueda importada.',\n        alertImportListSaveTitle: 'Lista importada',\n        alertImportListTitle: 'Seleccione un archivo para importar',\n        alertImportListUpdateMessage: 'La lista de busqueda ha sido salvada.',\n        alertImportListUpdateTitle: 'Lista salvada',\n        anesthesiaTypes: 'Tipos de anestesia',\n        anesthesiologists: 'Anestesiologo',\n        billingCategories: 'Categorias de facturacion',\n        clinicList: 'Ubicacion de las clinicas',\n        countryList: 'Paises',\n        cptCodeList: 'Codigos CPT',\n        diagnosisList: 'Diagnosticos',\n        edit: { template: {\n            addTitle: 'Adicionar valor',\n            editTitle: 'Editar valor',\n            labelTitle: 'Valor',\n            updateButtonTextAdd: 'Adicionar',\n            updateButtonTextUpdate: 'Actualizar'\n          } },\n        expenseAccountList: 'Cuentas de gastos',\n        imagingPricingTypes: 'Tipos de precios de radiografias',\n        incidentDepartments: '',\n        inventoryTypes: 'Tipos de inventarios',\n        labPricingTypes: 'Precios de laboratorio',\n        pageTitle: 'Listas de busqueda',\n        patientStatusList: 'Lista de estado de pacientes',\n        physicianList: 'Medicos',\n        procedureList: 'Procedimientos',\n        procedureLocations: 'Ubicacion de los procedimientos',\n        procedurePricingTypes: 'Tipos de procedimientos y precios',\n        radiologists: 'Radiologo',\n        titles: { deleteLookupValue: '' },\n        unitTypes: 'Tipos de unidad',\n        vendorList: 'Proveedor',\n        visitLocationList: 'Lugares de visista',\n        visitTypes: 'Tipos de visita',\n        wardPricingTypes: 'Tipos de las tarifas',\n        warehouseList: 'Ubicacciones de inventarios'\n      },\n      lookupLists: 'Lista de busqueda',\n      roles: {\n        capability: {\n          addAllergy: '',\n          addAppointment: 'Adicionar cita',\n          addBillingDiagnosis: '',\n          addCharge: 'Adicionar cargo (valor)',\n          addDiagnosis: 'Adicionar diagnostico',\n          addImaging: 'Adicionar radiografia',\n          addIncident: '',\n          addIncidentCategory: '',\n          addInventoryItem: 'Adicionar elemento al inventario',\n          addInventoryPurchase: 'Adicionar compra',\n          addInventoryRequest: 'Pedido de inventario',\n          addInvoice: 'Adicionar factura',\n          addLab: 'Adicionar laboratorio',\n          addMedication: 'Adicionar medicación',\n          addNote: '',\n          addOperationReport: '',\n          addOperativePlan: '',\n          addPatient: 'Adicionar paciente',\n          addPayment: 'Adicionar pago',\n          addPhoto: 'Adicionar foto',\n          addPricing: 'Adicionar precio',\n          addPricingProfile: 'Adicionar perfil de precios',\n          addProcedure: '',\n          addSocialwork: '',\n          addVisit: 'Adicionar visita',\n          addVitals: 'Adicionar partes vitales',\n          adjustInventoryLocation: 'Ajustar lugar elemento en el inventario',\n          admin: 'Administracion',\n          admitPatient: 'Admitir paciente',\n          appointments: 'Citas',\n          billing: 'Facturacion',\n          completeImaging: 'Completar radiografia',\n          completeLab: 'Completar laboratorio',\n          defineUserRoles: 'Roles de usuario',\n          deleteAppointment: 'Eliminar cita',\n          deleteDiagnosis: 'Eliminar diagnostico',\n          deleteImaging: 'Eliminar radiografia',\n          deleteIncident: '',\n          deleteIncidentCategory: '',\n          deleteInventoryItem: 'Eliminar elemento del inventario',\n          deleteInvoice: 'Eliminar factura',\n          deleteLab: 'Eliminar laboratorio',\n          deleteMedication: 'Eliminar medicación',\n          deleteNote: '',\n          deletePatient: 'Eliminar paciente',\n          deletePhoto: 'Eliminar foto',\n          deletePricing: 'Eliminar precio',\n          deletePricingProfile: 'Eliminar perfil de precio',\n          deleteProcedure: 'Eliminar procedimiento',\n          deleteSocialwork: 'Eliminar trabajo social',\n          deleteVisit: 'Eliminar visita',\n          deleteVitals: 'Eliminar organo vital',\n          dischargePatient: 'Descartar paciente',\n          editInvoice: 'Editar factura',\n          fulfillInventory: 'Cumplimiento de inventario',\n          fulfillMedication: 'Cumplir la medicación',\n          generateIncidentReport: '',\n          imaging: 'Radiografia',\n          incident: '',\n          inventory: 'Inventario',\n          invoices: 'Facturas',\n          labs: 'Laboratorios',\n          loadDb: 'Cargar base de datos',\n          manageIncidents: '',\n          medication: 'Medicación',\n          overrideInvoice: 'Sobreescribir factura',\n          patientReports: 'Reportes por paciente',\n          patients: 'Pacientes',\n          pricing: 'Precio',\n          updateConfig: 'Actualizar configuracion',\n          visits: 'Visitas'\n        },\n        messages: { roleSaved: 'El {{roleName}} rol ha sido salvado.' },\n        titles: { roleSaved: 'Role salvado' }\n      },\n      userRoles: 'Roles',\n      users: 'Usuarios',\n      visitForms: {\n        labels: {\n          followup: '',\n          form: '',\n          initial: '',\n          visitType: ''\n        },\n        titles: { visitForms: '' }\n      },\n      workflow: {\n        admissionDepositLabel: '',\n        clinicPrepaymentLabel: '',\n        editTitle: '',\n        followupPrepaymentLabel: '',\n        messages: { optionsSaved: '' },\n        newTitle: '',\n        outpatientImagingLabel: '',\n        outpatientLabLabel: '',\n        outpatientMedicationLabel: '',\n        titles: { optionsSaved: '' },\n        workflowLabel: ''\n      }\n    },\n    alerts: {\n      errorExclamation: '',\n      pleaseWait: 'Por favor espere',\n      reportError: '',\n      warningExclamation: ''\n    },\n    allergies: {\n      buttons: { addAllergy: '' },\n      labels: {\n        allergyName: '',\n        patientAllergy: ''\n      },\n      titles: {\n        addAllergy: '',\n        editAllergy: ''\n      }\n    },\n    application: {\n      messages: { sessionExpired: '' },\n      titles: { sessionExpired: '' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '+ nueva cita',\n        scheduleSurgery: ''\n      },\n      calendarTitle: '',\n      currentScreenTitle: 'Listado de citas',\n      editTitle: 'Editar cita',\n      labels: {\n        noLocation: '',\n        selectedStartingDate: ''\n      },\n      messages: {\n        appointmentSaved: '',\n        endTimeLaterThanStart: 'Seleccione una hora de finalizacion despues de la de inicio.'\n      },\n      missed: 'Citas perdidas',\n      newTitle: 'Nueva cita',\n      searchTitle: 'Buscar citas',\n      sectionTitle: 'Citas',\n      thisWeek: 'Citas esta semana',\n      titles: {\n        appointmentSaved: '',\n        editSurgicalAppointment: '',\n        newSurgicalAppointment: '',\n        theaterSchedule: ''\n      },\n      todayTitle: 'Citas para hoy'\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: '',\n        noPricingItems: '',\n        noPricingProfiles: ''\n      },\n      buttons: {\n        addOverride: '',\n        createInvoice: ''\n      },\n      labels: {\n        actualCharges: '',\n        discountAmount: '',\n        discountPercentage: '',\n        externalInvoiceNumber: '',\n        hmoCom: '',\n        insurance: '',\n        paymentProfile: '',\n        paymentsDeposits: '',\n        pricingPanelOverrides: '',\n        pricingProfile: ''\n      }\n    },\n    buttons: {\n      add: 'Adicionar',\n      addItem: '',\n      addLineItem: '',\n      addValue: 'Adicionar valor',\n      addVisit: 'Adicionar visita',\n      allRequests: 'Todas las solicitudes',\n      barcode: 'Codigo de barras',\n      cancel: 'Cancelar',\n      clear: '',\n      close: 'Cerrar',\n      complete: 'Completado',\n      'delete': 'Eliminar',\n      dispense: 'Repartir',\n      edit: '',\n      filter: '',\n      fulfill: 'Cumplimiento',\n      'import': 'Importar',\n      loadFile: 'Cargar archivo',\n      newItem: '+ nuevo elemento',\n      newNote: 'Nueva nota',\n      newRequest: 'Nueva solicitud',\n      newRequestPlus: '+ nuevo pedido',\n      newUser: 'Nuevo usuario',\n      ok: 'Ok',\n      remove: 'Remover',\n      returnButton: 'Regresar',\n      search: 'Buscar',\n      showAll: '',\n      showFewer: '',\n      update: 'Actualizar'\n    },\n    components: {\n      chargesByTypeTab: { charges: '' },\n      customFormManager: { buttons: { addForm: '' } },\n      dateTimePicker: {\n        amHour: '',\n        midnight: '',\n        noon: '',\n        pmHour: ''\n      },\n      imageUpload: { messages: { selectValidImageFile: '' } },\n      operativeProcedures: {\n        buttons: { addProcedure: '' },\n        labels: { procedure: '' },\n        titles: { procedures: '' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: '',\n          newLab: '',\n          newMedication: ''\n        },\n        labels: {\n          imagingOrderType: '',\n          labOrderType: '',\n          medicationOrderType: '',\n          orderType: ''\n        }\n      },\n      priceList: { charges: '' },\n      quantityCalc: { result: '' },\n      quantityConv: {\n        conversion: '',\n        unit: ''\n      },\n      sortableColumn: { labels: { selectAll: '' } },\n      takePhoto: {\n        camera: '',\n        how: '',\n        labels: {\n          takeAPicture: '',\n          uploadAFile: ''\n        },\n        photo: '',\n        preview: '',\n        takePhoto: '',\n        uploadFile: ''\n      },\n      upcomingAppointments: {\n        labels: {\n          date: '',\n          location: '',\n          type: '',\n          'with': ''\n        },\n        titles: { upcomingAppointments: '' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: '' },\n      labels: { formToAdd: '' },\n      titles: { addCustomForm: '' }\n    },\n    dashboard: {\n      setup: '',\n      title: 'Que deseas hacer?'\n    },\n    dates: {\n      'long': '',\n      longOmitDays: '',\n      longOmitDaysPlural: '',\n      longOmitDaysYears: '',\n      longOmitYears: '',\n      longPlural: '',\n      'short': '',\n      shortOmitYears: ''\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: '',\n        date: '',\n        diagnosis: '',\n        secondaryDiagnosis: ''\n      },\n      titles: {\n        addDiagnosis: '',\n        editDiagnosis: ''\n      }\n    },\n    errors: {\n      accepted: '',\n      blank: '',\n      confirmation: '',\n      empty: '',\n      equalTo: '',\n      even: '',\n      exclusion: '',\n      greaterThan: '',\n      greaterThanOrEqualTo: '',\n      inclusion: '',\n      invalid: '',\n      invalidNumber: '',\n      lessThan: '',\n      lessThanOrEqualTo: '',\n      notANumber: '',\n      notAnInteger: '',\n      odd: '',\n      otherThan: '',\n      present: '',\n      result: '',\n      tooLong: '',\n      tooShort: '',\n      wrongLength: ''\n    },\n    headings: { chargedItems: '' },\n    imaging: {\n      alerts: {\n        completedMessage: 'El pedido de radiografia ha sido completado.',\n        completedTitle: 'Pedido de radiografia completado',\n        savedMessage: 'El pedido de radiografia ha sido guardado.',\n        savedTitle: 'Pedido de radiografia salvado'\n      },\n      buttons: { newButton: '+ new radiografia' },\n      labels: {\n        addNewVisit: '--Adicionar nueva visita--',\n        radiologist: 'Radiologo'\n      },\n      messages: { noCompleted: 'No de items encontrados.' },\n      pageTitle: 'Pedido de radriografia',\n      sectionTitle: 'Radiografias',\n      titles: {\n        completedImaging: 'Radiografia completada',\n        editTitle: 'Pedido de edicion de radiografia',\n        newTitle: 'Nuevo pedido de radiografia'\n      }\n    },\n    incident: {\n      buttons: {\n        add: '',\n        addForm: '',\n        addItem: '',\n        cancel: '',\n        'delete': '',\n        download: '',\n        edit: '',\n        'export': '',\n        generateRep: '',\n        newAttachment: '',\n        newCategory: '',\n        newIncident: '',\n        newNote: ''\n      },\n      labels: {\n        actions: '',\n        addedBy: '',\n        category: '',\n        categoryItem: '',\n        date: '',\n        dateRecorded: '',\n        department: '',\n        description: '',\n        endDate: '',\n        givenBy: '',\n        howToAddAttachment: '',\n        incidentDate: '',\n        incidentId: '',\n        item: '',\n        lastUpdated: '',\n        note: '',\n        patientId: '',\n        patientImpacted: '',\n        reportType: '',\n        reportedBy: '',\n        reportedDate: '',\n        reportedTo: '',\n        sentinelEvent: '',\n        startDate: '',\n        status: '',\n        statusActive: '',\n        statusClosed: '',\n        statusFollowup: '',\n        statusReported: '',\n        title: '',\n        total: '',\n        updatedBy: ''\n      },\n      messages: {\n        attachmentFileRequired: '',\n        createNew: '',\n        createNewIncidentCategory: '',\n        fillIn: '',\n        incidentCategorySaved: '',\n        noClosedIncidents: '',\n        noIncidentCategoriesFound: '',\n        noIncidents: '',\n        saved: '',\n        selectExistingPatient: ''\n      },\n      titles: {\n        addAttachment: '',\n        addCategoryItem: '',\n        addNote: '',\n        attachments: '',\n        closed: '',\n        current: '',\n        deleteAttachment: '',\n        deleteIncident: '',\n        deleteIncidentCategory: '',\n        deleteItem: '',\n        deleteNote: '',\n        editAttachment: '',\n        editIncident: '',\n        editIncidentCategory: '',\n        editNote: '',\n        general: '',\n        history: '',\n        incidentCategories: '',\n        incidentCategoryItem: '',\n        incidentCategoryName: '',\n        incidentCategorySaved: '',\n        incidentSaved: '',\n        incidents: '',\n        incidentsByCategory: '',\n        incidentsByDepartment: '',\n        newIncident: '',\n        newIncidentCategory: '',\n        notes: '',\n        reports: ''\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Costo por unidad:',\n        delivered: 'Enviado A:',\n        location: 'Cambio de ubicación:',\n        prescription: 'Recetado por:',\n        pulled: 'Pulled From:',\n        quantity: 'Quantity at Completion:',\n        reason: 'Razón:',\n        returned: 'Regresado al paciente:',\n        transferredFrom: 'Transferido a:',\n        transferredTo: 'Transferido a:'\n      },\n      labels: {\n        action: 'Acción',\n        add: 'Adicionar',\n        addAdjustmentType: '',\n        adjust: 'Adjustar',\n        adjustmentDate: 'Fecha de ajuste',\n        adjustmentFor: 'Ajustado para',\n        adjustmentType: 'Tipo de ajuste',\n        aisle: 'Pasillo',\n        aisleLocation: 'Ubicación pasillo',\n        allInventory: 'Todo el inventario',\n        allItems: '',\n        availableQuantity: '',\n        billTo: 'Facturao a',\n        consumePurchases: 'Consume Purchases',\n        consumptionRate: 'Tasa de consumo',\n        cost: 'Costo',\n        costPerUnit: 'Costo por Unidad',\n        crossReference: 'Referencia cruzada',\n        currentQuantity: 'Cantidad actual',\n        dateCompleted: 'Fecha completado',\n        dateEffective: 'Gecha efectiva',\n        dateEnd: 'Fecha final',\n        dateReceived: 'Fecha recibido',\n        dateStart: 'Fecha inicial',\n        dateTransferred: '',\n        daysLeft: 'Dias restantes',\n        deleteItem: 'Eliminar elemento',\n        deliveryAisle: 'Enviado a pasillo',\n        deliveryLocation: 'Ubicación del envio',\n        details: 'Detalles',\n        distributionUnit: 'Unidad de distribución',\n        editItem: 'Editar elemento',\n        expense: 'Gastos a',\n        expirationDate: 'Fecha de vencimiento',\n        fulfillRequest: 'Pedido de cumplimiento',\n        fulfillRequestNow: 'Pedido de incumplimiento para hoy',\n        gift: 'Regalo en especie',\n        giftInKindNo: 'N',\n        giftInKindYes: 'Y',\n        giftUsage: 'Uso del regalo en especie',\n        inventoryConsumed: 'Inventario consumido',\n        inventoryItem: 'Elemento del inventario',\n        inventoryObsolence: 'Obsolescencia de inventario',\n        invoiceItems: 'Articulos de factura',\n        invoiceLineItem: 'Elemento de la factura linea',\n        invoiceNumber: 'Factura numero',\n        item: 'Elemento',\n        itemNumber: 'Numero de elemento',\n        items: 'Elementos',\n        location: 'Ubicación',\n        locations: 'Ubicaciones',\n        markAsConsumed: 'Marcar como consumido',\n        name: 'Nombre',\n        newItem: 'Nuevo elemento',\n        originalQuantity: 'Cantidad original',\n        print: 'Imprimir',\n        printBarcode: 'Imprimir codigo de  barras',\n        printer: 'Impresora',\n        pullFrom: 'Traido de',\n        purchaseCost: 'Costo de compra',\n        purchaseInfo: 'Informacion de la compra',\n        purchases: 'Compras',\n        quantity: 'Cantidad ({{unit}})',\n        quantityAvailable: 'Cantidad disponible',\n        quantityOnHand: 'Cantidad a la mano',\n        quantityRequested: 'Cantidad pedida',\n        rank: 'Ranking',\n        reason: 'Razón',\n        remove: 'Remover',\n        removeAdjustmentType: '',\n        reorderPoint: 'Reordenar punto',\n        requestedItems: 'Elementos solicitados',\n        returnAdjustmentType: '',\n        returnToVendorAdjustmentType: '',\n        salePricePerUnit: 'Costo de venta por unidad',\n        save: 'Guardar',\n        serialNumber: 'Serial/Numero de lote',\n        total: 'Total',\n        totalCost: 'Costo total',\n        totalReceived: 'Total Recivido: {{total}}',\n        transaction: 'Transaccion',\n        transactions: 'Transacciones',\n        transfer: 'Translados',\n        transferFrom: 'Translado desde',\n        transferTo: 'Translado a ubicación',\n        transferToAisle: 'Translado a pasillo',\n        unit: 'Unidad',\n        unitCost: 'Unidad Costo',\n        vendor: 'Proveedor',\n        vendorItemNumber: 'Proveedor numero de elemento',\n        writeOffAdjustmentType: '',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: 'Por favor ajust las cantidades en la ubicación adecuada(s) la diferencia de la cuenta es {{difference}}.',\n        createRequest: 'Crear un nuevo pedido?',\n        itemNotFound: 'El elemento del inventario <strong>{{item}}</strong> no se pudo encontrar.<br>Si desea crear un nuevo elemento, Ingrese la información abajo.<br>De lo contrario opria cancelar para volver.',\n        loading: 'Cargando transacciones ...',\n        noItems: 'No se encontraron elementos.',\n        noRequests: 'No se encontraron pedidos.',\n        purchaseSaved: 'La compra de inventario ha sido salvada.',\n        quantity: 'La cantidad total <strong>({{quantity}})</strong> no encaja con la cantidad total en las ubicaciones <strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Esta seguro de eliminar este elemento de la factura?',\n        removeItemRequest: 'Seguro que quiere eliminar este elemento del pedido?',\n        requestFulfilled: 'El pedido de inventario ha sido procesado.',\n        requestUpdated: 'El pedido de inventario ha sido actualizado.',\n        warning: 'Valide los campos requeridos (marcados con *) corrija los errores antes de adicionar.'\n      },\n      reports: {\n        adjustment: 'Ajuste detallado',\n        daysSupply: 'Dias de inventario restante',\n        expenseDetail: 'Gastos detallados',\n        expenseSum: 'Resumen de gastos',\n        expiration: 'Fecha de expiracion',\n        'export': 'Exportar reporte',\n        fields: 'Campos a incluir',\n        finance: 'Resumen de finanzas',\n        generate: 'Generar reporte',\n        invLocation: 'Inventario por ubicacion',\n        invValuation: 'Inventario por valoracion',\n        purchaseDetail: 'Compras detalladas',\n        purchaseSum: 'Resumen de compras',\n        reportType: 'Tipo de reporte',\n        rows: {\n          adjustments: 'Ajustes',\n          adjustmentsTotal: 'Ajustes totales',\n          balanceBegin: 'Balance inicial',\n          balanceEnd: 'Balance Final',\n          category: 'Categoria',\n          consumed: 'Consumado',\n          consumedGik: 'GiK Consumido',\n          consumedGikTotal: 'Total GiK Consumido',\n          consumedPuchases: 'Total de lo comprado consumido',\n          consumedPurchasesTotal: 'Total de lo comprado consumido',\n          consumedTotal: 'Total consumido',\n          errInFinSum: 'Error en _generateFinancialSummaryReport: ',\n          errInFindPur: 'Error en _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Error en _findInventoryItemsByRequest: ',\n          expensesFor: 'Gatos para: ',\n          noAccount: '(No Cuenta)',\n          subtotal: 'Subtotal: ',\n          subtotalFor: 'Subtotal para {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total para {{var}}: ',\n          totalPurchases: 'Compras Totales',\n          transfer1: '{{quantity}} de {{location}}',\n          trasnfer2: 'De: {{source}} A: {{target}}'\n        },\n        stockTransferDetail: 'Detalle de traslado de stock',\n        stockTransferSum: 'Resumen traslado de stock',\n        stockUsageDetail: 'Detalle de uso de stock',\n        stockUsageSum: 'Resumen uso de stock',\n        titleDateRange: '',\n        titleSingleDate: ''\n      },\n      titles: {\n        addPurchase: 'Adicionar compra',\n        addRequest: 'Nuevo pedido',\n        adjustment: 'Ajuste',\n        editPurchase: 'Editar compra',\n        editRequest: 'Editar pedido',\n        inventoryItem: 'Nuevo elemento de inventario',\n        inventoryReport: 'Reporte de inventario',\n        purchaseSaved: 'Compras de inventario guardadas',\n        quickAddTitle: 'Nuevo elemento de inventario',\n        removeItem: 'Remover elemento',\n        requestFulfilled: 'Pedido cumplido',\n        requestUpdated: 'Pedido actualizado',\n        transfer: 'Trasladar elementos',\n        warning: 'Peligro!!!!!'\n      }\n    },\n    labels: {\n      action: 'Accion',\n      actions: 'Acciones',\n      addNewOutpatientVisit: '--Nueva visita a paciente externo--',\n      address: '',\n      age: 'Edad',\n      allDay: 'Todo el dia',\n      amount: '',\n      anesthesia: 'Anestesia',\n      assisting: 'Asistencia',\n      balanceDue: '',\n      billDate: '',\n      billTo: 'Facturar a',\n      category: '',\n      completed: 'Completado',\n      country: '',\n      cptcode: 'Codigo CPT',\n      creditTo: '',\n      date: 'Fecha',\n      dateCompleted: 'Fecha completada',\n      dateOfBirth: 'Fecha de nacimiento',\n      dateOfBirthShort: 'FDN',\n      datePaid: '',\n      dateRequested: 'Fecha de pedido',\n      'delete': 'Eliminar',\n      deleteRequest: 'Eliminar pedido',\n      deleteUser: 'Eliminar usuario',\n      department: '',\n      description: 'Descripción',\n      discount: '',\n      displayName: 'Nombre para mostrar',\n      docRead: 'Leer documento',\n      docWritten: 'Documento escrito',\n      edit: 'Editar',\n      editUser: 'Editar usuario',\n      email: 'Email',\n      endDate: 'Fecha final',\n      endTime: 'Hora de finalización',\n      excess: '',\n      expenseTo: '',\n      fileLoadSuccessful: 'Archivo cargado exitosamente',\n      fileName: '',\n      fileToLoad: 'Archivo cargado',\n      fulfill: 'Cumplomiento',\n      fulfillRequest: 'Pedido de cumplimiento',\n      fulfillRequestNow: 'Pedido de cumplimiento ahora',\n      fulfilled: 'Cumplido',\n      grandTotal: '',\n      id: 'Id',\n      imageOrders: 'Ordenes de radiografias',\n      imagingType: 'Tipo de radiografia',\n      importFile: 'Importar archivo',\n      invoiceId: '',\n      labOrders: 'Ordenes de laboratorio',\n      lineItems: '',\n      loading: 'Cargando',\n      location: 'Ubicacion',\n      lookupType: 'Tipo de busqueda',\n      medication: 'Medicación',\n      name: 'Nombre',\n      newUser: 'Nuevo usuario',\n      note: '',\n      notes: 'Notas',\n      number: '',\n      on: 'on',\n      password: 'Contraseña',\n      patient: 'Paciente',\n      payments: '',\n      physician: 'Médico',\n      prescriber: '',\n      prescription: 'Receta medica',\n      prescriptionDate: 'Fecha de la receta medica',\n      price: '',\n      print: '',\n      procedures: 'Procedimiento',\n      provider: 'Proveedor',\n      pullFrom: 'Traer de',\n      quantity: 'Cantidada',\n      remarks: '',\n      requestedBy: 'Pedido por|',\n      requestedOn: 'Pedido On',\n      requests: 'Pedido',\n      result: 'Resultado',\n      results: 'Resultados',\n      role: 'Rol',\n      search: '',\n      sex: 'Genero',\n      startDate: 'Fecha de inicio',\n      startTime: 'Hora de inicio',\n      status: 'Estado',\n      takenBy: '',\n      total: '',\n      type: 'Tipo',\n      userCanAddNewValue: 'Los usuarios pueden agregar nuevos valores',\n      username: 'Nombre de usuario',\n      value: 'Valor',\n      view: '',\n      visit: 'Visita',\n      'with': 'con'\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: 'El pedido de laboratorio ha sido completado.',\n        requestCompletedTitle: 'Pedido de laboratorio competado',\n        requestSavedMessage: 'El pedido de laboratorio ha sido guardado.',\n        requestSavedTitle: 'Silicitud de laboratorio guardado'\n      },\n      buttons: { newButton: '+ nuevo laboratorio' },\n      completedTitle: 'Completar laboratorio',\n      deleteTitle: 'Eliminar pedido',\n      editTitle: 'Editar pedido de laboratorio',\n      labels: {\n        addNewVisit: '--Adicionar nueva visita--',\n        labType: 'Tipo de laboratorio'\n      },\n      messages: {\n        createNewRecord: 'Crear un registro?',\n        noCompleted: 'No elementos completados encontrados.',\n        noItemsFound: 'No boratorios encontrados.'\n      },\n      newTitle: 'Nuevo pedido de laboratorio',\n      requestsTitle: 'Pedido de laboratorio',\n      sectionTitle: 'Laboratorios'\n    },\n    languages: {\n      en: 'Inglés',\n      fr: 'Francés',\n      es: 'Español',\n      de: 'Alemán',\n      ru: 'Ruso',\n      'es-co': 'Español (Colombiano)',\n      'pt-br': 'Portugués (Brasileño)',\n      tr: 'Turco',\n      ur: 'Urdu'\n    },\n    loading: {\n      messages: {\n        '0': '',\n        '1': '',\n        '2': '',\n        '3': '',\n        '4': '',\n        '5': '',\n        '6': '',\n        '7': '',\n        '8': '',\n        '9': '',\n        '10': '',\n        '11': ''\n      },\n      progressBar: { progress: '' }\n    },\n    login: {\n      labels: {\n        password: 'Clave',\n        signIn: 'Ingresar',\n        username: 'Nombre de usuario'\n      },\n      messages: {\n        error: 'Nombre de usuario o clave incorrectos.',\n        signIn: 'por favor ingrese'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: 'Pedido de medicación cumplido',\n        returnedMessage: 'La medicacion ha sido marcada para devolver.',\n        returnedTitle: 'Medicacion devuelta',\n        savedMessage: 'La elemento de medicación ha sido guardado.',\n        savedTitle: 'Pedido de medicacion guardado'\n      },\n      buttons: {\n        dispenseMedication: 'dispensar medicación',\n        newButton: '+ nuevo pedido',\n        returnMedication: 'debolver medicacion'\n      },\n      labels: {\n        adjustmentDate: 'Fecha de ajuste',\n        creditToAccount: 'Credito a cuenta',\n        quantityDispensed: 'Cantidad dispensada',\n        quantityDistributed: 'Cantidad distribuida',\n        quantityRequested: 'Cantidad solicitada',\n        quantityToReturn: 'Cantidad a devolver',\n        refills: 'Recargas',\n        returnAisle: 'Devolve a pasillo',\n        returnLocation: 'Retornar a ubicación',\n        returnReason: 'Razon por la que se devuelve/Nota'\n      },\n      messages: { createNew: 'Crear un nuevo pedido de medicacion?' },\n      pageTitle: 'Pedido de medicación',\n      returnMedication: 'Retorno de medicación',\n      sectionTitle: 'Medication',\n      titles: {\n        completedMedication: 'Medicacion completada',\n        editMedicationRequest: 'Editar pedido de medicacion',\n        newMedicationRequest: 'Nuevo pedido de medicacion'\n      }\n    },\n    messages: {\n      createNewRecord: 'Crear un nuevo registro?',\n      createNewUser: 'Crear un nuevo usuario?',\n      'delete': '',\n      delete_plural: '',\n      delete_singular: '',\n      forAuthorizedPersons: 'Este informe es sólo para personas autorizadas.',\n      newPatientHasToBeCreated: 'Un nuevo paciente debe ser creado...Por favor espere..',\n      noHistoryAvailable: 'Historia no disponible.',\n      noItemsFound: 'Elementos no encontrados.',\n      noNotesAvailable: 'No hay notas clínicas adicionales están disponibles para esta visita.',\n      noUsersFound: 'Ningun usuario encontrado.',\n      onBehalfOf: 'a nombre de',\n      reportError: '',\n      requiredFieldsCorrectErrors: '',\n      saveActionException: '',\n      sorry: 'Lo sentimos, un error ha ocurrido...',\n      userHasBeenSaved: 'El usuario ha sido salvado.',\n      userSaved: 'Usuario salvado'\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: '',\n          appointmentDate: '',\n          appointmentType: '',\n          endDate: '',\n          location: '',\n          notes: '',\n          patient: '',\n          provider: '',\n          startDate: '',\n          status: '',\n          type: ''\n        },\n        names: {\n          plural: '',\n          singular: ''\n        }\n      },\n      attachment: { names: {\n          plural: '',\n          singular: ''\n        } },\n      form: { names: {\n          plural: '',\n          singular: ''\n        } },\n      imaging: {\n        names: '',\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      incident: { names: {\n          plural: '',\n          singular: ''\n        } },\n      item: { names: {\n          plural: '',\n          singular: ''\n        } },\n      lab: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      medication: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      note: { names: {\n          plural: '',\n          singular: ''\n        } },\n      patient: {\n        labels: { name: '' },\n        names: { singular: '' }\n      },\n      procedure: { names: {\n          plural: '',\n          singular: ''\n        } },\n      user: { names: {\n          plural: '',\n          singular: ''\n        } },\n      visit: { names: {\n          plural: '',\n          singular: ''\n        } },\n      vital: { names: {\n          plural: '',\n          singular: ''\n        } }\n    },\n    navigation: {\n      about: 'Información de HospitalRun',\n      actions: {\n        login: 'Ingresar',\n        logout: 'Salir',\n        selectLanguage: 'Seleccione el idioma'\n      },\n      administration: 'Administracion',\n      billing: 'Facturas',\n      imaging: 'Radiografia',\n      incident: '',\n      inventory: 'Inventario',\n      labs: 'Laboratorio',\n      medication: 'Recetas medicas',\n      patients: 'Pacientes',\n      scheduling: '',\n      subnav: {\n        actions: '',\n        addAppointment: 'Nueva cita',\n        addressFields: 'Campos de dirección',\n        admittedPatients: '',\n        appointmentSearch: '',\n        appointmentsCalendar: '',\n        appointmentsThisWeek: '',\n        completed: 'Completado',\n        currentIncidents: '',\n        customForms: '',\n        dispense: 'Dispense',\n        history: '',\n        incidentCategories: '',\n        inventoryReceived: 'Inventario recibido',\n        invoices: 'Facturas',\n        items: 'Items',\n        loadDB: '',\n        lookupLists: 'Lista de busuedas',\n        missedAppointments: '',\n        newIncident: '',\n        newInvoice: 'Nueva factura',\n        newPatient: 'Nuevo paciente',\n        newRequest: 'New pedido',\n        newUser: 'Nuevo usuario',\n        outpatient: '',\n        patientListing: 'Lista de pacientes',\n        priceProfiles: 'Perfil de precios',\n        prices: 'Precios',\n        printHeader: '',\n        reports: 'Reportes',\n        requests: 'Pedidos',\n        returnMedication: 'Devolver medicamento',\n        scheduleSurgery: '',\n        theaterSchedule: '',\n        \"today'sAppointments\": '',\n        userRoles: 'Roles',\n        users: 'Usuarios',\n        workflow: ''\n      }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: '',\n        assistant: '',\n        caseComplexity: '',\n        operationDescription: '',\n        preOpPrimaryDiagnosis: '',\n        preOpSecondaryDiagnosis: '',\n        surgeon: '',\n        surgeryDate: ''\n      },\n      messages: { reportSaved: '' },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        reportSaved: ''\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: '' },\n      labels: {\n        additionalNotes: '',\n        admissionInstructions: '',\n        caseComplexity: '',\n        completedStatus: '',\n        droppedStatus: '',\n        operationDescription: '',\n        plannedStatus: '',\n        status: '',\n        surgeon: ''\n      },\n      messages: {\n        planCompleted: '',\n        planSaved: ''\n      },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        planCompleted: '',\n        planSaved: ''\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: '',\n        addExpense: '',\n        addFamilyMember: '',\n        addOperativePlan: '',\n        backToPatients: '',\n        download: '',\n        editOperativePlan: '',\n        newAppointment: '',\n        newImaging: '',\n        newLab: '',\n        newMedication: '',\n        newPatient: '',\n        newPhoto: '',\n        newVisit: '',\n        patientCheckIn: '',\n        scheduleSurgery: ''\n      },\n      labels: {\n        admissionDate: '',\n        admit: '',\n        bloodType: '',\n        caption: '',\n        civilStatus: '',\n        clinic: '',\n        contacts: '',\n        cost: '',\n        dateOfBirth: '',\n        dateProcessed: '',\n        dischargeDate: '',\n        dob: '',\n        education: '',\n        email: '',\n        externalPatientId: '',\n        firstName: '',\n        income: '',\n        insurance: '',\n        lastName: '',\n        middleName: '',\n        monthlyCost: '',\n        occupation: '',\n        operativePlan: '',\n        parent: '',\n        patientDays: '',\n        patientType: '',\n        patientTypeCharity: '',\n        patientTypePrivate: '',\n        phone: '',\n        placeOfBirth: '',\n        primaryDiagnosis: '',\n        referredBy: '',\n        referredDate: '',\n        relationship: '',\n        relationships: '',\n        religion: '',\n        secondaryDiagnosis: '',\n        sex: '',\n        sexNotEntered: '',\n        sources: '',\n        status: '',\n        totalMontlyExpense: ''\n      },\n      messages: {\n        areYouSureDelete: '',\n        createNewPatient: '',\n        deletingPatient: '',\n        noPatientsFound: '',\n        notFoundQuickAdd: '',\n        photoFileRequired: '',\n        savedPatient: ''\n      },\n      navigation: {\n        appointments: '',\n        general: '',\n        history: '',\n        imaging: '',\n        labs: '',\n        medication: '',\n        photos: '',\n        socialWork: '',\n        visits: ''\n      },\n      notes: {\n        newNote: '',\n        onBehalfOfCopy: 'a nombre de',\n        onBehalfOfLabel: 'A nombre de',\n        pleaseSelectAVisit: 'Por favor seleccione una visista',\n        updateNote: ''\n      },\n      titles: {\n        addContact: '',\n        addPhoto: '',\n        additionalContacts: '',\n        admissionsDetail: '',\n        admissionsSummary: '',\n        admittedPatients: '',\n        'delete': '',\n        deleteContact: '',\n        deleteExpense: '',\n        deleteFamilyMember: '',\n        deletePatientRecord: '',\n        deletePhoto: '',\n        diagnosticTesting: '',\n        dischargesDetail: '',\n        dischargesSummary: '',\n        edit: '',\n        editPhoto: '',\n        expenses: '',\n        familyInfo: '',\n        familyInformation: '',\n        'new': '',\n        outpatientsForDate: '',\n        patient: '',\n        patientListing: '',\n        patientReport: '',\n        patientStatus: '',\n        proceduresDetail: '',\n        proceduresSummary: '',\n        savedPatient: '',\n        socialWork: '',\n        todaysOutpatients: '',\n        totalPatientDays: '',\n        totalPatientDaysDetailed: '',\n        visit: ''\n      }\n    },\n    print: { invoice: {\n        labels: {\n          billedBy: '',\n          billedDate: '',\n          dateAdmitted: '',\n          dateDischarged: '',\n          dischargeNotes: '',\n          patientAddress: '',\n          patientAge: '',\n          patientId: '',\n          patientName: '',\n          remarks: '',\n          spacer: ''\n        },\n        messages: { whereConducted: '' },\n        titles: {\n          billingStatement: '',\n          patientMember: '',\n          patients: '',\n          relContact: ''\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: '' },\n      labels: { medicationUsed: '' },\n      messages: { saved: '' },\n      titles: {\n        addChargeItem: '',\n        addMedicationUsed: '',\n        deleteChargeItem: '',\n        deleteMedicationUsed: '',\n        edit: '',\n        editChargeItem: '',\n        editMedicationUsed: '',\n        medicationUsed: '',\n        'new': '',\n        saved: ''\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: '',\n        allProcedures: '',\n        completedBy: '',\n        dischargeDate: '',\n        examiner: '',\n        images: '',\n        labs: '',\n        location: '',\n        medications: '',\n        nextAppointment: '',\n        nextAppointments: '',\n        notes: {\n          author: '',\n          date: '',\n          title: ''\n        },\n        operativePlan: {\n          description: '',\n          instructions: '',\n          procedures: '',\n          title: ''\n        },\n        primaryDiagnosis: '',\n        procedures: '',\n        secondaryDiagnosis: '',\n        visitDate: '',\n        visitType: ''\n      },\n      messages: {\n        'delete': '',\n        saved: ''\n      },\n      titles: {\n        dischargeReport: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        opdReport: '',\n        saved: ''\n      }\n    },\n    user: {\n      plusNewUser: '+ nuevo usuario',\n      usersPageTile: 'Listado de usuarios'\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: '',\n        checkIn: '',\n        checkOut: '',\n        discharge: '',\n        newAppointment: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        newProcedure: '',\n        newVitals: ''\n      },\n      labels: {\n        appointment: '',\n        authoredBy: '',\n        checkInTime: '',\n        checkOutTime: '',\n        createNewPatient: '',\n        diagnosis: '',\n        examiner: '',\n        finalDiagnosis: '',\n        haveAppointment: '',\n        haveDoneOrders: '',\n        noAppointment: '',\n        ordersDone: '',\n        ordersNotDone: '',\n        patientToCheckIn: '',\n        procedure: '',\n        procedureDate: '',\n        reasonForVisit: '',\n        reportType: '',\n        status: '',\n        statusAdmitted: '',\n        statusCheckedIn: '',\n        statusCheckedOut: '',\n        statusDischarged: '',\n        visitDate: '',\n        visitInformation: '',\n        visitType: ''\n      },\n      messages: {\n        checkOut: '',\n        checkedOut: '',\n        discharged: '',\n        patientCheckedIn: '',\n        patientCreatedAndCheckedIn: '',\n        visitAndPatientSaved: '',\n        visitSaved: ''\n      },\n      navigation: {\n        charges: '',\n        notes: '',\n        orders: '',\n        procedures: '',\n        reports: '',\n        vitals: ''\n      },\n      titles: {\n        additionalDiagnoses: '',\n        checkOut: '',\n        checkedIn: '',\n        checkedOut: '',\n        discharged: '',\n        editVisit: '',\n        newVisit: '',\n        patientCheckIn: '',\n        visitSaved: ''\n      }\n    },\n    vitals: { labels: {\n        dateRecorded: '',\n        dbp: '',\n        heartRate: '',\n        height: '',\n        respiratoryRate: '',\n        sbp: '',\n        temperature: '',\n        weight: ''\n      } }\n  };\n});","define('hospitalrun/tests/locales/es/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/es/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es/translations.js should pass ESLint.\\n');\n  });\n});","define(\"hospitalrun/tests/locales/fr/translations\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports[\"default\"] = {\n    admin: {\n      address: {\n        address1Label: \"Label de l'adresse 1\",\n        address2Label: \"Label de l'adresse 2\",\n        address3Label: \"Label de l'adresse 3\",\n        address4Label: \"Label de l'adresse 4\",\n        addressLabel: 'Adresse',\n        editTitle: \"Options d'adresse\",\n        include1Label: \"Label de l'include 1\",\n        include2Label: \"Label de l'include 2\",\n        include3Label: \"Label de l'include 3\",\n        include4Label: \"Label de l'include 4\",\n        messages: { addressSaved: \"Les options d'adresse ont été enregistrées\" },\n        newTitle: \"Options d'adresse\",\n        titles: { optionsSaved: 'Options enregistrées' }\n      },\n      addressOptions: \"Options d'adresse\",\n      customForms: {\n        buttons: {\n          addField: 'Ajouter un champ',\n          moveDown: 'Déplacer vers le bas',\n          moveUp: 'Déplacer vers le haut',\n          newForm: '+ Nouveau formulaire',\n          preview: 'Aperçu'\n        },\n        labels: {\n          alwaysInclude: 'Toujours inclure',\n          checkbox: 'Case à cocher',\n          colSpan: 'Nombre de colonne à fusionner',\n          columns: 'Colonnes',\n          customForm: 'Formulaire personnalisé',\n          dischargeReportFormType: 'Attestation de sortie',\n          expenseTo: 'Aux frais de',\n          formName: 'Nom du formulaire',\n          formType: 'Type du formulaire',\n          incidentFormType: 'Incident',\n          includeOtherOption: \"Inclure d'autre option\",\n          labFormType: 'Laboratoire',\n          label: 'Label',\n          newForm: 'Nouveau formulaire',\n          opdReportFormType: 'Rapport de Patient en Consultation Externe',\n          operativePlanFormType: 'Plan Opérationnel et Rapport',\n          otherOptionLabel: 'Label d\\'autre option',\n          patientFormType: 'Patient',\n          property: 'Propriété',\n          radio: 'Bouton Radio',\n          select: 'Liste déroulante',\n          socialworkFormType: 'Assistant Social',\n          text: 'Texte',\n          textarea: 'Texte Large',\n          visitFormType: 'Consultation'\n        },\n        messages: { formSaved: 'Le formulaire {{name}} a été enregistré' },\n        titles: {\n          checkboxValues: 'Valeurs des Cases à Cocher',\n          customForms: 'Formulaires Personnalisés',\n          deleteForm: 'Supprimer le Formulaire Personnalisé',\n          dropDownValues: 'Valeurs du Menu Déroulant',\n          editCustomForm: 'Editer le Formulaire Personnalisé',\n          fields: 'Champs',\n          formSaved: 'Formulaire Enregistré',\n          newCustomForm: 'Nouveau Formulaire Personnalisé',\n          radioValues: 'Valeurs des Boutons Radio'\n        }\n      },\n      header: {\n        editTitle: 'Options d\\'Entête',\n        facilityName: 'Nom de l\\'établissement',\n        headerLabel: 'Entête',\n        headerLine1: \"Première Ligne d'Entête\",\n        headerLine2: \"Deuxième Ligne d'Entête\",\n        headerLine3: \"Troisième Ligne d'Entête\",\n        logoURL: 'URL du Logo',\n        messages: { headerSaved: 'Entête enregistrée' },\n        newTitle: 'Options d\\'Entête',\n        titles: { optionsSaved: 'Options enregistrées' }\n      },\n      loadDb: 'Importer une BD',\n      loaddb: {\n        displayAlertMessage: 'Veuillez sélectionner le fichier à télécharger.',\n        displayAlertTitle: 'Sélectionner le fichier à télécharger.',\n        editTitle: 'Importer une BD',\n        errorDisplayAlertMessage: \"La base de données n'a pas pu être importée. L'erreur est: {{error}}\",\n        errorDisplayAlertTitle: 'Erreur de chargement',\n        progressMessage: 'Veuillez patienter durant le chargement de la base de données.',\n        progressTitle: 'Chargement de la base de données en cours'\n      },\n      lookup: {\n        aisleLocationList: \"Emplacement des rayons dans l'inventaire\",\n        alertImportListMessage: 'Veuillez sélectionner le fichier à importer.',\n        alertImportListSaveMessage: 'La liste de référence a été importée.',\n        alertImportListSaveTitle: 'Liste importée',\n        alertImportListTitle: 'Sélectionner le fichier à importer',\n        alertImportListUpdateMessage: 'La liste de référence a été enregistrée.',\n        alertImportListUpdateTitle: 'Liste enregistrée',\n        anesthesiaTypes: \"Types d'Anesthésie\",\n        anesthesiologists: 'Anesthésiologistes',\n        billingCategories: 'Catégories de facturation',\n        clinicList: 'Emplacement des cliniques',\n        countryList: 'Pays',\n        cptCodeList: 'Codes CPT',\n        diagnosisList: 'Diagnostics',\n        edit: { template: {\n            addTitle: 'Ajouter une valeur',\n            editTitle: 'Modifier la valeur',\n            labelTitle: 'Valeur',\n            updateButtonTextAdd: 'Ajouter',\n            updateButtonTextUpdate: 'Mettre à jour'\n          } },\n        expenseAccountList: 'Comptes de dépense',\n        imagingPricingTypes: \"Types de prix d'imagerie\",\n        incidentDepartments: 'Service des Incidents',\n        inventoryTypes: \"Types d'inventaires\",\n        labPricingTypes: 'Types de prix des laboratoires',\n        pageTitle: 'Listes de références',\n        patientStatusList: 'Liste de statut de patient',\n        physicianList: 'Médécins',\n        procedureList: 'Procédures',\n        procedureLocations: 'Emplacements des procédures',\n        procedurePricingTypes: 'Types de prix des procédures',\n        radiologists: 'Radiologistes',\n        titles: { deleteLookupValue: '' },\n        unitTypes: \"Types d'unité\",\n        vendorList: 'Fournisseur',\n        visitLocationList: 'Emplacements de consultations',\n        visitTypes: 'Types de consultations',\n        wardPricingTypes: 'Types de prix des services',\n        warehouseList: \"Emplacements d'inventaires\"\n      },\n      lookupLists: 'Listes de référence',\n      roles: {\n        capability: {\n          addAllergy: 'Ajouter une allergie',\n          addAppointment: 'Ajouter un Rendez-vous',\n          addBillingDiagnosis: 'Ajouter un diagnostic de facturation',\n          addCharge: 'Ajouter une charge',\n          addDiagnosis: 'Ajouter un diagnostic',\n          addImaging: 'Ajouter une imagerie',\n          addIncident: 'Ajouter un incident',\n          addIncidentCategory: \"Ajouter une catégorie d'incidents\",\n          addInventoryItem: \"Ajouter un article d'inventaire\",\n          addInventoryPurchase: \"Ajouter un achat d'inventaire\",\n          addInventoryRequest: \"Ajouter une demande d'inventaire\",\n          addInvoice: 'Ajouter une facture',\n          addLab: 'Ajouter un test labo',\n          addMedication: 'Ajouter un médicament',\n          addNote: 'Ajouter une note',\n          addOperationReport: \"Ajouter un rapport d'opération\",\n          addOperativePlan: 'Ajouter un plan ',\n          addPatient: 'Ajouter un patient',\n          addPayment: 'Ajouter un paiement',\n          addPhoto: 'Ajouter une photo',\n          addPricing: 'Ajouter un prix',\n          addPricingProfile: 'Ajouter le profil de prix',\n          addProcedure: 'Ajouter une procédure',\n          addSocialwork: 'Ajouter un assistant social',\n          addVisit: 'Ajouter une consultation',\n          addVitals: 'Ajouter les signes vitaux',\n          adjustInventoryLocation: \"Ajuster la localisation de l'inventaire\",\n          admin: 'Administration',\n          admitPatient: 'Admettre un patient',\n          appointments: 'Rendez-vous',\n          billing: 'Facturation',\n          cashier: 'Caissière',\n          completeImaging: 'Completer une imagerie',\n          completeLab: 'Completer un test de laboratoire',\n          defineUserRoles: \"Rôles d'utilisateur\",\n          deleteAppointment: 'Supprimer un rendez-vous',\n          deleteDiagnosis: 'Supprimer un diagnostic',\n          deleteImaging: 'Supprimer une Imagerie',\n          deleteIncident: 'Supprimer un incident',\n          deleteIncidentCategory: \"Supprimer une catégorie d'incidents\",\n          deleteInventoryItem: \"Supprimer un article d'inventaire\",\n          deleteInvoice: 'Supprimer une facture',\n          deleteLab: 'Supprimer un test de laboratoire',\n          deleteMedication: 'Supprimer un médicament',\n          deleteNote: 'Supprimer une note',\n          deletePatient: 'Supprimer un patient',\n          deletePhoto: 'Supprimer une photo',\n          deletePricing: 'Supprimer un Prix',\n          deletePricingProfile: 'Supprimer le profil de prix',\n          deleteProcedure: 'Supprimer une procédure',\n          deleteSocialwork: 'Supprimer un assistant social',\n          deleteVisit: 'Supprimer une consultation',\n          deleteVitals: 'Supprimer des signes vitaux',\n          dischargePatient: 'Liberer un patient',\n          editInvoice: 'Modifier la facture',\n          fulfillInventory: \"Traiter l'inventaire\",\n          fulfillMedication: 'Traiter une demande de médicaments',\n          generateIncidentReport: \"Générer un rapport d'incident\",\n          imaging: 'Imagerie',\n          incident: 'Incident',\n          inventory: 'Inventaire',\n          invoices: 'Factures',\n          labs: 'Test Labo',\n          listPaidInvoices: 'Liste des factures réglées',\n          loadDb: 'Charger la Base de données',\n          manageIncidents: 'Gérer les incidents',\n          medication: 'Médicament',\n          overrideInvoice: 'Remplacer la facture',\n          patientReports: 'Rapports des patients',\n          patients: 'Patients',\n          pricing: 'Tarification',\n          updateConfig: 'Mettre à jour les Configurations',\n          visits: 'Consultations'\n        },\n        messages: { roleSaved: 'Le rôle {{roleName}}  a été enregistré.' },\n        titles: { roleSaved: 'Rôle enregistré' }\n      },\n      textReplacements: {\n        createNew: 'Créer un nouveau shortcode',\n        existingRepl: 'Remplacer un shortcode existant',\n        noMatches: \"Aucun remplacement trouvé pour '{{term}}'\",\n        pageTitle: 'Shortcodes',\n        performExpand: \"Appuyer sur Entrée pour remplacement #{{from}} par '{{to}}'\",\n        possibleExpansions: 'Remplacements possibles : {{possible}}',\n        replDesc: \"Lors de la saisie d'un texte, ces raccourcis permettent de remplacer une courte séquence de caractères par une phrase plus longue.\",\n        replaceWith: 'Remplacer par',\n        toReplace: 'Texte à remplacer'\n      },\n      userRoles: 'Rôles utilisateurs',\n      users: 'Utilisateurs',\n      visitForms: {\n        labels: {\n          followup: 'Suivre',\n          form: 'Formulaire',\n          initial: 'Initiale',\n          visitType: 'Type de visite'\n        },\n        titles: { visitForms: 'Formulaire de visite' }\n      },\n      workflow: {\n        admissionDepositLabel: \"Dépôt d'admission requise\",\n        clinicPrepaymentLabel: 'Paiement préalable par la clinique requis',\n        editTitle: 'Options du flux de travail',\n        followupPrepaymentLabel: 'Suivi du paiement préalable requis',\n        messages: { optionsSaved: 'Les options du flux de travail ont été enregistrées' },\n        newTitle: 'Options du flux de travail',\n        outpatientImagingLabel: 'Paiement préalable de l\\'imagerie par le patient en consulation externe requis',\n        outpatientLabLabel: 'Paiement préalable du test de laboratoire par le patient en consultation externe requis',\n        outpatientMedicationLabel: 'Paiement préalable des médicaments par le patient en consultation externe requis',\n        titles: { optionsSaved: 'Options sauvegardées' },\n        workflowLabel: 'Flux de travail'\n      }\n    },\n    alerts: {\n      errorExclamation: 'Erreur !',\n      pleaseWait: 'Merci de patienter',\n      reportError: \"Rapport d'erreur généré\",\n      warningExclamation: 'Attention !'\n    },\n    allergies: {\n      buttons: { addAllergy: 'Ajouter une allergie' },\n      labels: {\n        allergyName: \"Nom de l'allergie\",\n        patientAllergy: 'Allergies du patient'\n      },\n      titles: {\n        addAllergy: 'Ajouter une allergie',\n        editAllergy: 'Modifier une allergie'\n      }\n    },\n    application: {\n      messages: { sessionExpired: 'Votre session a expirée. Merci de vous reconnecter pour continuer' },\n      titles: { sessionExpired: 'Session expirée' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '+ nouveau rendez-vous',\n        scheduleSurgery: '+ planifier chirurgie'\n      },\n      calendarTitle: '',\n      currentScreenTitle: 'Liste des rendez-vous',\n      editTitle: 'Modifier le rendez-vous',\n      labels: {\n        noLocation: 'Aucune localisation',\n        selectedStartingDate: 'Date de début'\n      },\n      messages: {\n        appointmentSaved: 'Le rendez-vous de {{patient}} a été sauvegardé',\n        endTimeLaterThanStart: \"Veuillez sélectionnez une heure de fin plus tard que l'heure de début.\"\n      },\n      missed: 'Rendez-vous manqués',\n      newTitle: 'Nouveau rendez-vous',\n      searchTitle: 'Rechercher les rendez-vous',\n      sectionTitle: 'Rendez-vous',\n      thisWeek: 'Rendez-vous de la semaine',\n      titles: {\n        appointmentSaved: 'Rendez-vous sauvegardé',\n        editSurgicalAppointment: 'Modifier un rendez-vous chirurgical',\n        newSurgicalAppointment: 'Nouveau rendez-vous chirurgical',\n        theaterSchedule: ''\n      },\n      todayTitle: \"Rendez-vous d'aujourd'hui\"\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: 'Aucune facture trouvée',\n        noPricingItems: 'Aucun prix trouvé',\n        noPricingProfiles: 'Aucun profile de prix trouvé'\n      },\n      buttons: {\n        addOverride: 'Ajouter un dépassement',\n        createInvoice: 'Créer une facture ?'\n      },\n      labels: {\n        actualCharges: 'Frais réels',\n        discountAmount: 'Montant de remise',\n        discountPercentage: 'Taux de remise',\n        externalInvoiceNumber: 'Numéro de facture externe #',\n        hmoCom: \"Organisme d'assurance maladie\",\n        insurance: 'Assurance santé',\n        paymentProfile: 'Profil de paiement',\n        paymentsDeposits: 'Paiement / Dépôt',\n        pricingPanelOverrides: 'Remplacer le profil de prix',\n        pricingProfile: 'Profil de prix',\n        setFee: 'Définir les frais'\n      },\n      messages: {\n        flatDiscountMsg: 'Il existe une remise fixe appliquée à la responsabilité financière du patient d\\'un montant de {{currency}}{{discountAmount}}.',\n        flatFeeMsg: \"Il existe des frais forfaitaires pour le patient d'un montant de {{setFee}}{{currency}}.\"\n      }\n    },\n    buttons: {\n      add: 'Ajouter',\n      addItem: 'Ajouter un article',\n      addLineItem: \"Ajouter une ligne d'article\",\n      addValue: 'Ajouter une valeur',\n      addVisit: 'Ajouter une visite',\n      allRequests: 'Toutes les demandes',\n      barcode: 'Code barre',\n      cancel: 'Annuler',\n      clear: 'Remettre à blanc',\n      close: 'Fermer',\n      complete: 'Traiter',\n      'delete': 'Supprimer',\n      dispense: 'Dispenser',\n      edit: 'Modifier',\n      filter: 'Filtrer',\n      fulfill: 'Traiter',\n      'import': 'Importer',\n      loadFile: 'Télécharger le fichier',\n      newItem: '+ nouvel article',\n      newNote: 'Nouvelle note',\n      newRequest: 'Nouvelle demande',\n      newRequestPlus: '+ nouvelle demande',\n      newUser: 'Nouvel utilisateur',\n      ok: 'Ok',\n      remove: 'Retirer',\n      returnButton: 'Retourner',\n      search: 'Rechercher',\n      showAll: 'Tout afficher',\n      showFewer: 'Afficher moins',\n      update: 'Mettre à jour'\n    },\n    components: {\n      chargesByTypeTab: { charges: 'Charges' },\n      customFormManager: { buttons: { addForm: 'Ajouter un formulaire' } },\n      dateTimePicker: {\n        amHour: '{{hour}}',\n        midnight: 'Midi',\n        noon: 'Minuit',\n        pmHour: '{{hour}}'\n      },\n      imageUpload: { messages: { selectValidImageFile: 'Merci de séléctionner une image valide.' } },\n      operativeProcedures: {\n        buttons: { addProcedure: 'Ajouter une procédure' },\n        labels: { procedure: 'Procédure' },\n        titles: { procedures: 'Procédures' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: 'Nouvelle imagerie',\n          newLab: 'Nouveau laboratoire',\n          newMedication: 'Nouvelle médicament'\n        },\n        labels: {\n          imagingOrderType: 'Imagerie',\n          labOrderType: 'Laboratoire',\n          medicationOrderType: 'Médicament',\n          orderType: 'Type de commande'\n        }\n      },\n      priceList: { charges: '{{pricingType}} charges' },\n      quantityCalc: { result: '{{targetUnit}} total: {{calculated}}' },\n      quantityConv: {\n        conversion: 'Que contient un {{name}} ?',\n        unit: 'Unité'\n      },\n      sortableColumn: { labels: { selectAll: '(Tous sélectionner)' } },\n      takePhoto: {\n        camera: 'Appareil Photo',\n        how: 'Comment voulez-vous ajouter une photo ?',\n        labels: {\n          takeAPicture: 'Prendre une photo',\n          uploadAFile: 'Envoyer une fichier'\n        },\n        photo: 'Photo',\n        preview: 'Prévisualiser',\n        takePhoto: 'Prendre la photo',\n        uploadFile: 'Uploader le fichier'\n      },\n      upcomingAppointments: {\n        labels: {\n          date: 'Date',\n          location: 'Localisation',\n          type: 'Type',\n          'with': 'Avec'\n        },\n        titles: { upcomingAppointments: 'Prochains rendez-vous' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: 'Ajouter un formulaire' },\n      labels: { formToAdd: 'Formulaire à ajouter' },\n      titles: { addCustomForm: 'Ajouter un formulaire personnalisé' }\n    },\n    dashboard: {\n      needs_user_setup: \"Nous vous recommendons d'ajouter un compte utilisateur\",\n      standalone_welcome: \"<h4>Thanks for downloading HospitalRun</h4><p>You are running HospitalRun in stand alone mode. This mode allows you to support multiple users on a single, desktop/laptop instance of HospitalRun. This is ideal for:</p><ul><li>Evaluating HospitalRun for an eventual server deployment.</li><li>Using the platform to support a clinic / facility where a single instance is sufficient.</li></ul><p>If you're considering a multi-device deployment of HospitalRun, we're <a href=\\\"https://github.com/HospitalRun/hospitalrun-frontend/issues/1048\\\" target=\\\"_blank\\\">working on features</a> that will allow you to \\\"graduate\\\" from this single instance into a traditional cloud / server-based deployment.</p>\",\n      title: 'Que voulez-vous faire?'\n    },\n    dates: {\n      'long': '{{years}} année {{months}} mois {{days}} jours',\n      longOmitDays: '{{years}} année {{months}} mois',\n      longOmitDaysPlural: '{{years}} années {{months}} mois',\n      longOmitDaysYears: '{{months}} mois',\n      longOmitYears: '{{months}} mois {{days}} jours',\n      longPlural: '{{years}} années {{months}} mois {{days}} jours',\n      'short': '{{years}}a {{months}}m {{days}}j',\n      shortOmitYears: '{{months}}m {{days}}j'\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: 'Diagnostic actif',\n        date: 'Date',\n        diagnosis: 'Diagnostic',\n        secondaryDiagnosis: 'Second diagnostic'\n      },\n      titles: {\n        addDiagnosis: 'Ajouter un diagnostic',\n        editDiagnosis: 'Modifier un diagnostic'\n      }\n    },\n    errors: {\n      accepted: 'doit être accepté',\n      blank: 'ne peut pas être vide',\n      confirmation: 'ne correspond pas à {{attribute}}',\n      empty: 'ne peut pas être vide',\n      equalTo: 'doit être égal à {{count}}',\n      even: 'doit être pair',\n      exclusion: 'est réservé',\n      greaterThan: 'doit être supérieur à {{count}}',\n      greaterThanOrEqualTo: 'doit être supérieur ou égal à {{count}}',\n      inclusion: 'ne fait pas partie de la liste',\n      invalid: 'est invalide',\n      invalidNumber: \"n'est pas un nombre valide\",\n      lessThan: 'doit être inférieur à {{count}}',\n      lessThanOrEqualTo: 'doit être inférieur ou égal à {{count}}',\n      notANumber: \"n'est pas un nombre\",\n      notAnInteger: 'doit être un entier',\n      odd: 'doit être impair',\n      otherThan: 'doit être différent de {{count}}',\n      present: 'doit être vide',\n      result: 'Merci de saisir un résultat avant de compléter',\n      tooLong: 'est trop long ({{count}} caractères maximum)',\n      tooShort: 'est trop court ({{count}} caractères minimum)',\n      wrongLength: \"n'est pas de la bonne longueur (devrait être de {{count}} caractères)\"\n    },\n    headings: { chargedItems: 'Articles facturés' },\n    imaging: {\n      alerts: {\n        completedMessage: \"La demande d'imagerie a été traitée.\",\n        completedTitle: \"Demande d'imagerie traitée\",\n        savedMessage: \"La demande d'imagerie a été enregistrée.\",\n        savedTitle: \"Demande d'imagerie enregistrée\"\n      },\n      buttons: { newButton: '+ nouvelle imagerie' },\n      labels: {\n        addNewVisit: '--Ajouter une nouvelle visite--',\n        radiologist: 'Radiologiste'\n      },\n      messages: { noCompleted: 'Aucun article traité retrouvé.' },\n      pageTitle: \"Demandes d'imagerie\",\n      sectionTitle: 'Imagerie',\n      titles: {\n        completedImaging: 'Imagerie traitée',\n        editTitle: \"Modifier la demande d'imagerie\",\n        newTitle: \"Nouvelle demande d'imagerie\"\n      }\n    },\n    incident: {\n      buttons: {\n        add: 'Ajouter',\n        addForm: '+ Ajouter un formulaire',\n        addItem: 'Ajouter un article',\n        cancel: 'Annuler',\n        'delete': 'Supprimer',\n        download: 'Télécharger',\n        edit: 'Modifier',\n        'export': 'Exporter',\n        generateRep: 'Générer un rapport',\n        newAttachment: '+ Nouvelle pièce jointe',\n        newCategory: '+ Nouvelle catégorie',\n        newIncident: '+ Nouvel incident',\n        newNote: '+ Nouvelle note'\n      },\n      labels: {\n        actions: 'Actions',\n        addedBy: 'Ajouter par',\n        category: 'Catégorie',\n        categoryItem: \"Catégorie d'articles\",\n        date: 'Date',\n        dateRecorded: \"Date d'enregistrement\",\n        department: 'Service',\n        description: 'Description',\n        endDate: 'Date de fin',\n        givenBy: 'Donné par',\n        howToAddAttachment: 'Comment voulez-vous ajouter votre pièce jointe ?',\n        incidentDate: \"'Date de l'incident\",\n        incidentId: \"ID de l'incident\",\n        item: 'Article',\n        lastUpdated: 'Dernière mise à jour',\n        note: 'Note',\n        patientId: 'ID du patient',\n        patientImpacted: 'Patient impacté',\n        reportType: 'Type de rapport',\n        reportedBy: 'Rapporté par',\n        reportedDate: 'Date de rapport',\n        reportedTo: 'Incident rapporté à',\n        sentinelEvent: 'Evénement sentinelle',\n        startDate: 'Date de début',\n        status: 'Statut',\n        statusActive: 'Actif',\n        statusClosed: 'Fermé',\n        statusFollowup: 'Suivi',\n        statusReported: 'Rapporté',\n        title: 'Titre',\n        total: 'Total',\n        updatedBy: 'Mise à jour par'\n      },\n      messages: {\n        attachmentFileRequired: \"Merci d'envoyer un fichier ou de prendre une photo avant de sauvegarder cette pièce jointe\",\n        createNew: 'Créer un nouvel incident ?',\n        createNewIncidentCategory: \"Créer une nouvelle catégorie d'incident ?\",\n        fillIn: 'Remplissez les options ci-dessus pour calculer le score',\n        incidentCategorySaved: 'La catégorie {{name}} a été sauvegardée',\n        noClosedIncidents: 'Aucun incident fermé trouvé',\n        noIncidentCategoriesFound: \"Aucune catégorie d'incident trouvée\",\n        noIncidents: 'Aucun incident trouvé',\n        saved: \"Le rapport d'incident a été sauvegardé\",\n        selectExistingPatient: 'Merci de sélectionner un patient existant ou de laisse ce champ vide'\n      },\n      titles: {\n        addAttachment: 'Ajouter une pièce jointe',\n        addCategoryItem: \"Ajouter une catégorie d'article\",\n        addNote: 'Ajouter une note',\n        attachments: 'Pièces jointes',\n        closed: \"Fermer l'incident\",\n        current: 'Courant',\n        deleteAttachment: 'Supprimer la pièce jointe',\n        deleteIncident: \"Supprimer l'incident\",\n        deleteIncidentCategory: \"Supprimer la catégorie d'incident\",\n        deleteItem: \"Supprimer l'article\",\n        deleteNote: 'Supprimer la note',\n        editAttachment: 'Modifier la pièce jointe',\n        editIncident: \"Modifier l'incident\",\n        editIncidentCategory: \"Modifier la catégorie d'incident\",\n        editNote: 'Modifier la notes',\n        general: 'Informations générales',\n        history: 'Historique',\n        incidentCategories: \"Catégories d'incident\",\n        incidentCategoryItem: \"Membre de la catégorie d'incident\",\n        incidentCategoryName: \"Nom de la catégorie d'incident\",\n        incidentCategorySaved: \"Catégorie d'incident sauvegardée\",\n        incidentSaved: 'Incident sauvegardé',\n        incidents: 'Incidents',\n        incidentsByCategory: 'Incidents par catégorie',\n        incidentsByDepartment: 'Incidents par service',\n        newIncident: 'Nouvel incident',\n        newIncidentCategory: \"Nouvel catégorie d'incident\",\n        notes: 'Notes',\n        reports: 'Rapports'\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Coût par unité:',\n        delivered: 'Livré à:',\n        location: 'Emplacement ajusté:',\n        prescription: 'Ordonnance pour:',\n        pulled: 'Tiré de:',\n        quantity: 'Quantité après traitement:',\n        reason: 'Motif:',\n        returned: 'Retourné par le patient:',\n        transferredFrom: 'Transféré de:',\n        transferredTo: 'Transféré à:'\n      },\n      labels: {\n        action: 'Action',\n        add: 'Ajouter',\n        addAdjustmentType: 'Ajouter',\n        adjust: 'Ajuster',\n        adjustmentDate: \"Date d'ajustement\",\n        adjustmentFor: 'Ajustement pour',\n        adjustmentType: \"Type d'ajustement\",\n        aisle: 'Rayon',\n        aisleLocation: 'Emplacement du rayon',\n        allInventory: \"Toute l'inventaire\",\n        allItems: 'Tous les articles',\n        availableQuantity: 'Quantité disponible',\n        billTo: 'Facturer à',\n        consumePurchases: 'Utiliser les achats',\n        consumptionRate: \"Taux d'utilisation\",\n        cost: 'Coût',\n        costPerUnit: 'Coût par unité',\n        crossReference: 'Reference',\n        currentQuantity: 'Quantité actuelle',\n        dateCompleted: 'Date de traitement',\n        dateEffective: \"Date d'effet\",\n        dateEnd: 'Date de fin',\n        dateReceived: 'Date de réception',\n        dateStart: 'Date de debut',\n        dateTransferred: 'Date  de transfert',\n        daysLeft: 'Nombre de jours restant',\n        deleteItem: \"Supprimer l'article\",\n        deliveryAisle: 'Rayon de livraison',\n        deliveryLocation: 'Emplacement de livraison',\n        details: 'Détails',\n        distributionUnit: 'Unité de distribution',\n        editItem: \"Modifier l'article\",\n        expense: 'Dépenses pour',\n        expirationDate: \"Date d'expiration\",\n        fulfillRequest: 'Traiter la demande',\n        fulfillRequestNow: 'Traiter la demande maintenant',\n        gift: 'Don en nature',\n        giftInKindNo: 'N',\n        giftInKindYes: 'O',\n        giftUsage: 'Utilisation de don en nature',\n        inventoryConsumed: 'Inventaire utilisé',\n        inventoryItem: 'Article à inventorier',\n        inventoryObsolence: 'Inventory Obsolence',\n        invoiceItems: 'Articles de facture',\n        invoiceLineItem: 'Article de facture',\n        invoiceNumber: 'Numero de facture',\n        item: 'Article',\n        itemNumber: \"Numero d'article\",\n        items: 'Articles',\n        location: 'Emplacement',\n        locations: 'Emplacements',\n        markAsConsumed: 'Marqué comme utilisé',\n        name: 'Nom',\n        newItem: 'Nouvel article',\n        originalQuantity: 'Quantité originale',\n        print: 'Imprimer',\n        printBarcode: 'Imprimer le code barre',\n        printer: 'Imprimante',\n        pullFrom: 'Tirer de',\n        purchaseCost: \"Coût d'achat\",\n        purchaseInfo: \"Détails de l'achat\",\n        purchases: 'Achats',\n        quantity: 'Quantité ({{unit}})',\n        quantityAvailable: 'Quantité disponible',\n        quantityOnHand: 'Quantité en main',\n        quantityRequested: 'Quantité demandée',\n        rank: 'Rang',\n        reason: 'Motif',\n        remove: 'Retirer',\n        removeAdjustmentType: \"Supprimer un type d'ajustement\",\n        reorderPoint: 'Point de commande',\n        requestedItems: 'Articles demandés',\n        returnAdjustmentType: 'Renvoyer',\n        returnToVendorAdjustmentType: 'Renvoyer au vendor',\n        salePricePerUnit: 'Prix de vente unitaire',\n        save: 'Enregistrer',\n        serialNumber: 'Numéro de série / lot',\n        total: 'Total',\n        totalCost: 'Coût total',\n        totalReceived: 'Total reçu: {{total}}',\n        transaction: 'Transaction',\n        transactions: 'Transactions',\n        transfer: 'Transférer',\n        transferFrom: 'Transféré de',\n        transferTo: \"Transférer à l'emplacement\",\n        transferToAisle: \"Transférer à l'emplacement du rayon\",\n        unit: 'Unité',\n        unitCost: 'Coût unitaire',\n        vendor: 'Fournisseur',\n        vendorItemNumber: \"Numéro d'article fournisseur\",\n        writeOffAdjustmentType: 'Considérer comme perdu',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: 'Veuillez ajuster les quantités sur le ou les emplacement(s) appropriée(s) pour tenir compte de la différence de {{difference}}.',\n        createRequest: 'Créer une nouvelle demande?',\n        itemNotFound: \"L'article d'inventaire <strong>{{item}}</strong> ne pouvait pas être retrouvé.<br>Si vous voulez créer un nouvel article d'inventaire, veuillez saisir les informations ci-dessous. <br>Sinon, appuyez sur le bouton Annuler pour retourner.\",\n        loading: 'Chargement des transactions en cours…',\n        noItems: 'Aucun article retrouvé.',\n        noRequests: 'Aucune demande retrouvée.',\n        purchaseSaved: \"Les achats d'inventaire ont été enregistrés avec succès.\",\n        quantity: 'La quantité totale de <strong>({{quantity}})</strong> ne correspond pas à la quantité totale dans les emplacements <strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Etes-vous sûr de vouloir retirer cet article de cette facture?',\n        removeItemRequest: 'Etes-vous sûr de vouloir supprimer cet article de cette demande?',\n        requestFulfilled: \"La demande d'inventaire a été traitée.\",\n        requestUpdated: \"La demande d'inventaire a été mis à jour.\",\n        warning: \"Veuillez remplir les champs obligatoires (marqués d'un *) et corriger les erreurs avant d'ajouter.\"\n      },\n      reports: {\n        adjustment: 'Ajustement détaillée',\n        daysSupply: 'Stock restant (en nombre de jours)',\n        expenseDetail: 'Détails des dépenses',\n        expenseSum: 'Résumé des dépenses',\n        expiration: \"Date d'expiration\",\n        'export': 'Exporter un rapport',\n        fields: 'Champs à inclure',\n        finance: 'Résumé des finances',\n        generate: 'Créer un rapport',\n        invLocation: 'Inventaire par emplacement',\n        invValuation: \"Valorisation de l'inventaire\",\n        purchaseDetail: \"Détails de l'achat\",\n        purchaseSum: \"Résumé de l'achat\",\n        reportType: 'Type de rapport',\n        rows: {\n          adjustments: 'Ajustements',\n          adjustmentsTotal: 'Ajustements totaux',\n          balanceBegin: \"Solde d'ouverture\",\n          balanceEnd: 'Solde de clôture',\n          category: 'Catégorie',\n          consumed: 'Utilisé',\n          consumedGik: 'GiK utilisé',\n          consumedGikTotal: 'GiK total utilisé',\n          consumedPuchases: 'Achats utilisés',\n          consumedPurchasesTotal: 'Achats totaux utilisés',\n          consumedTotal: 'Total utilisé',\n          errInFinSum: 'Erreur dans _generateFinancialSummaryReport: ',\n          errInFindPur: 'Erreur dans _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Erreur dans _findInventoryItemsByRequest: ',\n          expensesFor: 'Dépenses pour: ',\n          noAccount: '(Pas de compte)',\n          subtotal: 'Sous-total: ',\n          subtotalFor: 'Sous-total pour {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total pour {{var}}: ',\n          totalPurchases: 'Achats totaux',\n          transfer1: '{{quantity}} de {{location}}',\n          trasnfer2: 'De: {{source}} A: {{target}}'\n        },\n        stockTransferDetail: 'Transfert détaillé du stock',\n        stockTransferSum: 'Résumé du transfert du stock',\n        stockUsageDetail: 'Utilisation détaillée du stock',\n        stockUsageSum: \"Résumé de l'utilisation du stock\",\n        titleDateRange: 'Rapport {{name}} {{startDate}} - {{endDate}}',\n        titleSingleDate: 'Rapport {{name}} {{date}}'\n      },\n      titles: {\n        addPurchase: 'Ajouter un achat',\n        addRequest: 'Nouvelle demande',\n        adjustment: 'Ajustement',\n        editPurchase: \"Modifier l'achat\",\n        editRequest: 'Modifier la demande',\n        inventoryItem: \"Nouvel article d'inventaire\",\n        inventoryReport: \"Rapport d'inventaire\",\n        purchaseSaved: \"Achats d'inventaire enregistrés\",\n        quickAddTitle: \"Nouvel article d'inventaire\",\n        removeItem: \"Retirer l'article\",\n        requestFulfilled: 'Demande traitée',\n        requestUpdated: 'Demande mis à jour',\n        transfer: 'Transférer les articles',\n        warning: 'Attention!!!!!'\n      }\n    },\n    labels: {\n      action: 'Action',\n      actions: 'Actions',\n      addNewOutpatientVisit: '--Ajouter une nouvelle consultation externe--',\n      address: 'Adresse',\n      age: 'Age',\n      allDay: 'Toute la journée',\n      amount: 'Montant',\n      anesthesia: 'Anesthésie',\n      assisting: 'Assistant',\n      balanceDue: 'Solde dû',\n      billDate: 'Date de facture',\n      billTo: 'Facturer à',\n      category: 'Catégorie',\n      completed: 'Traité',\n      country: 'Pays',\n      cptcode: 'Code CPT',\n      creditTo: 'Crédit à',\n      currencySymbol: '€',\n      date: 'Date',\n      dateCompleted: 'Date de traitement',\n      dateOfBirth: 'Date de naissance',\n      dateOfBirthShort: 'DdN',\n      datePaid: 'Date de paiement',\n      dateRequested: 'Date de demande',\n      'delete': 'Supprimer',\n      deleteRequest: 'Supprimer la demande',\n      deleteUser: 'Supprimer un utilisateur',\n      department: 'Service',\n      description: 'Description',\n      discount: 'Remise',\n      displayName: 'Nom à afficher',\n      docRead: 'Documents lus',\n      docWritten: 'Documents écrits',\n      edit: 'Modifier',\n      editUser: 'Modifier un utilisateur',\n      email: 'Email',\n      endDate: 'Date de fin',\n      endTime: 'Heure de fin',\n      excess: 'Excédent',\n      expenseTo: 'Frais à',\n      fileLoadSuccessful: 'Téléchargement reussi',\n      fileName: 'Nom du fichier',\n      fileToLoad: 'Téléchargement de fichier',\n      from: 'De',\n      fulfill: 'Traiter',\n      fulfillRequest: 'Traiter la demande',\n      fulfillRequestNow: 'Traiter la demande maintenant',\n      fulfilled: 'Traité',\n      grandTotal: 'Somme finale',\n      id: 'Id',\n      imageOrders: \"Demandes d'imagerie\",\n      imagingType: \"Type d'imagerie\",\n      importFile: 'Importer un fichier',\n      invoiceId: 'ID de la facture',\n      labOrders: 'Demandes de labo',\n      lineItems: 'Articles de ligne',\n      loading: 'Chargement',\n      location: 'Emplacement',\n      lookupType: 'Type de référence',\n      medication: 'Médicament',\n      name: 'Nom',\n      newUser: 'Nouvel utilisateur',\n      note: 'Note',\n      notes: 'Notes',\n      number: 'Numéro',\n      on: 'sur',\n      password: 'Mot de passe',\n      patient: 'Patient',\n      payments: 'Paiement',\n      physician: 'Médecin',\n      prescriber: 'prescripteur',\n      prescription: 'Ordonnance',\n      prescriptionDate: 'Date de prescription',\n      price: 'Prix',\n      print: 'Imprimer',\n      procedures: 'Procédures',\n      provider: 'Fournisseur',\n      pullFrom: 'Tirer de',\n      quantity: 'Quantité',\n      remarks: 'Remarque',\n      requestedBy: 'Demandé par',\n      requestedOn: 'Demandé le',\n      requests: 'Demandes',\n      result: 'Resultat',\n      results: 'Resultats',\n      role: 'Rôle',\n      search: 'Recherche',\n      sex: 'Sexe',\n      startDate: 'Date de debut',\n      startTime: 'Heure de debut',\n      status: 'Statut',\n      takenBy: 'Pris par',\n      to: 'À',\n      total: 'Total',\n      type: 'Type',\n      userCanAddNewValue: 'Utilisateur peut ajouter de nouvelles valeurs',\n      username: \"Nom d'utilisateur\",\n      value: 'Valeur',\n      view: 'Afficher',\n      visit: 'Visite',\n      'with': 'Avec'\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: 'La demande de labo a été traitée.',\n        requestCompletedTitle: 'Demande de labo traitée',\n        requestSavedMessage: 'La demande de labo a été enregistrée.',\n        requestSavedTitle: 'Demande de labo enregistrée'\n      },\n      buttons: { newButton: '+ nouveau labo' },\n      completedTitle: 'Labos traités',\n      deleteTitle: 'Supprimer la demande',\n      editTitle: 'Modifier la demande de labo',\n      labels: {\n        addNewVisit: '--Ajouter une nouvelle visite--',\n        labType: 'Type de labo'\n      },\n      messages: {\n        createNewRecord: 'Créer un nouveau dossier?',\n        noCompleted: 'Aucun article traité retrouvé.',\n        noItemsFound: 'Aucun labo retrouvé.'\n      },\n      newTitle: 'Nouvelle demande de labo',\n      requestsTitle: 'Demandes de labo',\n      sectionTitle: 'Labos'\n    },\n    languages: {\n      en: 'Anglais',\n      fr: 'Français',\n      es: 'Espagnol',\n      de: 'Allemand',\n      ru: 'Russe',\n      'es-co': 'Espagnol (Colombien)',\n      'pt-br': 'Portugais (Brésilien)',\n      tr: 'Turc',\n      ur: 'Ourdou'\n    },\n    loading: {\n      messages: {\n        '0': \"La vitesse maximal du vol de papillon est de 20 kilomètres par heure. Certaines mites peuvent voler jusqu'à 40 kilomètres par heure !\",\n        '1': 'Les chouettes sont les seuls oiseaux qui peuvent voir la couleur bleue',\n        '2': 'Les chats disposent de plus de 100 sons vocaux ; Les chiens seulement 10.',\n        '3': 'Les humains utilisent 72 muscles différents pour parler',\n        '4': 'Plus de 1000 langues différentes sont parlées sur le continent Africain.',\n        '5': \"Un érythrophobe est quelqu'un qui rougit facilement.\",\n        '6': \"La phobie la plus commune au monde est l'odynophobie qui est la peur de la douleur.\",\n        '7': \"Votre corps utilise 300 muscles pour s'équilibrer lorsqu'il est immobile.\",\n        '8': 'Certaines grenouilles peuvent être congelées puis décongelées, et continuer à vivre.',\n        '9': 'Nos yeux ont leur taille définitive dès la naissance, mais notre nez et nos oreilles ne cessent jamais de grandir.',\n        '10': 'Votre langue est le seul muscle du corps qui est attaché à un seul endroit.',\n        '11': 'Les chameaux ont trois paupières pour se protéger contre le sable.'\n      },\n      progressBar: { progress: '{{progressBarValue}}%' }\n    },\n    login: {\n      labels: {\n        password: 'Mot de passe',\n        signIn: 'Connexion',\n        username: \"Nom d'utilisateur\"\n      },\n      messages: {\n        error: \"Nom d'utilisateur ou mot de passe incorrect.\",\n        offlineError: 'Impossible de se connecter hors ligne. Merci de vous connecter et de réésayer',\n        signIn: 'Veuillez vous connecter'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: 'Demande de médicament traitée',\n        returnedMessage: 'Le médicament a été marqué comme retourné.',\n        returnedTitle: 'Médicament retourné',\n        savedMessage: 'Le dossier de médicament a été enregistré.',\n        savedTitle: 'Demande de médicament enregistrée'\n      },\n      buttons: {\n        dispenseMedication: 'dispenser un médicament',\n        newButton: '+ nouvelle demande',\n        returnMedication: 'retourner un médicament'\n      },\n      labels: {\n        adjustmentDate: \"Date d'ajustement\",\n        creditToAccount: 'Créditer le compte',\n        quantityDispensed: 'Quantité dispensé',\n        quantityDistributed: 'Quantité distribué',\n        quantityRequested: 'Quantité demandé',\n        quantityToReturn: 'Quantité à retourner',\n        refills: 'Renouvellements',\n        returnAisle: 'Rayon de retour',\n        returnLocation: 'Emplacement de retour',\n        returnReason: 'Motif/notes du retour'\n      },\n      messages: { createNew: 'Créer une nouvelle demande de médicament?' },\n      pageTitle: 'Demandes de médicament',\n      returnMedication: 'Retourner un médicament',\n      sectionTitle: 'Médicament',\n      titles: {\n        completedMedication: 'Médicament traitée',\n        editMedicationRequest: 'Modifier une demande de médicament',\n        newMedicationRequest: 'Nouvelle demande de médicament'\n      }\n    },\n    messages: {\n      createNewRecord: 'Créer un nouveau dossier?',\n      createNewUser: 'Créer un nouvel utilisateur?',\n      'delete': 'Voulez-vous vraiment supprimer {{name}} ?',\n      delete_plural: 'Voulez-vous vraiment supprimer ces {{name}} ?',\n      delete_singular: 'Voulez-vous vraiment supprimer ce {{name}} ?',\n      forAuthorizedPersons: 'Ce rapport est destiné uniquement aux personnes autorisées.',\n      newPatientHasToBeCreated: 'Un nouveau patient doit être crée...Veuillez attendre...',\n      noHistoryAvailable: 'Aucune historique disponible.',\n      noItemsFound: 'Aucun article retrouvé.',\n      noNotesAvailable: 'Aucune note clinique supplémentaire disponible pour cette visite.',\n      noUsersFound: 'Aucun utilisateur retrouvé.',\n      onBehalfOf: 'de la part de',\n      reportError: 'Une erreur est apparue pendant la génération du rapport demandé. Merci de prévenir votre administrateur systême de l\\'erreur rencontrée.',\n      requiredFieldsCorrectErrors: 'Veuillez remplir les champs obligatoires (annotés d\\'un *) et corriger les erreurs avant de sauvegarder.',\n      saveActionException: 'Une erreur est apparue pendant la tentative de sauvegarde: {{message}}',\n      sorry: 'Désolé, quelque chose a mal tourné ...',\n      userHasBeenSaved: \"L'utilisateur a été enregistré.\",\n      userSaved: 'Utilisateur enregistré'\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: 'Toute la journée',\n          appointmentDate: 'Date',\n          appointmentType: 'Type',\n          endDate: 'Date de fin',\n          location: 'Localisation',\n          notes: 'Notes',\n          patient: 'Patient',\n          provider: 'Avec',\n          startDate: 'Date de début',\n          status: 'Statut',\n          type: 'Type'\n        },\n        names: {\n          plural: 'Rendez-vous',\n          singular: 'Renvez-vous'\n        }\n      },\n      attachment: { names: {\n          plural: 'Pièces jointes',\n          singular: 'Pièce jointe'\n        } },\n      form: { names: {\n          plural: 'Formulaires',\n          singular: 'Formulaire'\n        } },\n      imaging: {\n        names: 'Imagerie',\n        request: {\n          plural: \"Demandes d'imagerie\",\n          singular: \"Demande d'imagerie\"\n        }\n      },\n      incident: { names: {\n          plural: 'Incidents',\n          singular: 'Incident'\n        } },\n      item: { names: {\n          plural: 'Articles',\n          singular: 'Article'\n        } },\n      lab: {\n        names: {\n          plural: 'Laboratoires',\n          singular: 'Laboratoire'\n        },\n        request: {\n          plural: 'Demandes de laboratoire',\n          singular: 'Demande de laboratoire'\n        }\n      },\n      medication: {\n        names: {\n          plural: 'Médicaments',\n          singular: 'Médicament'\n        },\n        request: {\n          plural: 'Demandes de médication',\n          singular: 'Demande de médication'\n        }\n      },\n      note: { names: {\n          plural: 'Notes',\n          singular: 'Note'\n        } },\n      patient: {\n        labels: { name: 'Nom' },\n        names: { singular: 'Patient' }\n      },\n      procedure: { names: {\n          plural: 'Procédures',\n          singular: 'Procédure'\n        } },\n      user: { names: {\n          plural: 'Utilisateurs',\n          singular: 'Utilisateur'\n        } },\n      visit: { names: {\n          plural: 'Visites',\n          singular: 'Visite'\n        } },\n      vital: { names: {\n          plural: 'Vitaux',\n          singular: 'Vital'\n        } }\n    },\n    navigation: {\n      about: 'À propos de HospitalRun',\n      actions: {\n        login: 'Connexion',\n        logout: 'Deconnexion',\n        selectLanguage: 'Choisir la langue'\n      },\n      administration: 'Administration',\n      billing: 'Facturation',\n      imaging: 'Imagerie',\n      incident: 'Incident',\n      inventory: 'Inventaire',\n      labs: 'Labos',\n      medication: 'Médicament',\n      messages: { logoutFailed: \"Impossible de se déconnecter pour le moment. La déconnexion n'est pas disponible en mode hors ligne.\" },\n      patients: 'Patients',\n      scheduling: 'Planning',\n      subnav: {\n        actions: 'Actions',\n        addAppointment: 'Ajouter un rendez-vous',\n        addressFields: \"Champs d'adresse\",\n        admittedPatients: 'patients admis',\n        appointmentSearch: 'Rechercher un rendez-vous',\n        appointmentsCalendar: 'Planning des rendez-vous',\n        appointmentsThisWeek: 'Rendez-vous cette semaine',\n        cashier: 'Caisière',\n        completed: 'Traité',\n        currentIncidents: 'Incidents courants',\n        customForms: 'Formulaires personnalisés',\n        dispense: 'Dispenser',\n        history: 'Historique',\n        incidentCategories: \"Catégories d'icindent\",\n        inventoryReceived: 'Inventaire reçu',\n        invoices: 'Factures',\n        items: 'Articles',\n        loadDB: 'Charger BDD',\n        lookupLists: 'Listes de référence',\n        newIncident: 'Nouvel incident',\n        newInvoice: 'Nouvelle facture',\n        newPatient: 'Nouveau patient',\n        newRequest: 'Nouvelle demande',\n        newUser: 'Nouvel utilisateur',\n        outpatient: 'Patient ambulatoire',\n        patientListing: 'Liste des patients',\n        priceProfiles: 'Profils de prix',\n        prices: 'Prix',\n        printHeader: \"Imprimer l'entête\",\n        reports: 'Rapports',\n        requests: 'Demandes',\n        returnMedication: 'Retourner un Médicament',\n        scheduleSurgery: 'Planifier une chirgurie',\n        textReplacements: 'Texte de remplacement',\n        theaterSchedule: 'Horaires du théâtre',\n        \"today'sAppointments\": 'Rendez-vous du jour',\n        userRoles: \"Rôles de l'utilisateur\",\n        users: 'Utilisateurs',\n        workflow: 'Flux de travail'\n      },\n      titles: { logoutFailed: 'Erreur de déconnexion' }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: 'Notes supplémentaires',\n        assistant: 'Assistant',\n        caseComplexity: 'Complexité du cas',\n        operationDescription: \"Déscription de l'opération\",\n        preOpPrimaryDiagnosis: 'Premier diagnostic pré-opération',\n        preOpSecondaryDiagnosis: 'Second diagnostic pré-opération',\n        surgeon: 'Chirurgien',\n        surgeryDate: 'Date de la chirgurie'\n      },\n      messages: { reportSaved: \"Le rapport d'opération a été sauvegardé\" },\n      titles: {\n        editTitle: \"Modifier le rapport d'opération\",\n        newTitle: \"Nouveau rapport d'édition\",\n        reportSaved: 'Rapport sauvegardé'\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: 'Terminer le plan' },\n      labels: {\n        additionalNotes: 'Notes supplémentaires',\n        admissionInstructions: \"Instructions d'admission\",\n        caseComplexity: 'Compléxité du cas',\n        completedStatus: 'Terminé',\n        droppedStatus: 'Annulé',\n        operationDescription: \"Déscription d'opération\",\n        plannedStatus: 'Planifié',\n        status: 'Statut',\n        surgeon: 'Chirurgien'\n      },\n      messages: {\n        planCompleted: \"Le plan d'opération est terminé. Vous allez maintenant être redirigé vers le rapport d'opération.\",\n        planSaved: \"Le plan d'opération a été sauvegardé.\"\n      },\n      titles: {\n        editTitle: \"Modifier le plan d'opération\",\n        newTitle: \"Nouveau plan d'opération\",\n        planCompleted: 'Plan terminé',\n        planSaved: 'Plan sauvegardé'\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: \"Ajout d'un contact\",\n        addExpense: 'Ajout de frais',\n        addFamilyMember: \"Ajout d'un membre de la famille\",\n        addOperativePlan: \"Ajout d'un plan d'opération\",\n        backToPatients: 'Retour à la liste des patients',\n        download: 'Télécharger',\n        editOperativePlan: \"Modifier le plan d'opération courant\",\n        newAppointment: 'Nouveau rendez-vous',\n        newImaging: 'Nouvelle imagerie',\n        newLab: 'Nouveau laboratoire',\n        newMedication: 'Nouveau médicament',\n        newPatient: 'Nouveau patient',\n        newPhoto: 'Nouvelle photo',\n        newVisit: 'Nouvelle visite',\n        patientCheckIn: 'Enregistrement du client',\n        scheduleSurgery: 'Planifier une chirurgie'\n      },\n      labels: {\n        admissionDate: \"Date d'admission\",\n        admit: 'Admit',\n        bloodType: 'Type sanguin',\n        caption: 'Légende',\n        civilStatus: 'Statut civil',\n        clinic: 'Clinique',\n        contacts: 'Contacts',\n        cost: 'Coût',\n        dateOfBirth: 'Date de naissance',\n        dateProcessed: 'Date de traitement',\n        dischargeDate: 'Date de sortie',\n        dob: 'DdN',\n        education: 'Education',\n        email: 'Email',\n        externalPatientId: 'ID externe du patient',\n        firstName: 'Prénom',\n        income: 'Revenu',\n        insurance: 'Assurance',\n        lastName: 'Nom',\n        middleName: 'Deuxème nom',\n        monthlyCost: 'Coût mensuel',\n        occupation: 'Occupation',\n        operativePlan: 'Plan opérationnel',\n        parent: 'Parent',\n        patientDays: 'Jours du patient',\n        patientType: 'Type du patient',\n        patientTypeCharity: 'Association caritative',\n        patientTypePrivate: 'Privé',\n        phone: 'Téléphone',\n        placeOfBirth: 'Lieu de naissance',\n        primaryDiagnosis: 'Premier diagnostic',\n        referredBy: 'Réferencé par',\n        referredDate: 'Date de référence',\n        relationship: 'Relation avec le patient',\n        relationships: 'Relations',\n        religion: 'Religion',\n        secondaryDiagnosis: 'Second diagnostic',\n        sex: 'Sexe',\n        sexNotEntered: 'Sexe non précisé',\n        sources: 'Sources',\n        status: 'Statut du patient',\n        totalMontlyExpense: 'Revenue mensuel'\n      },\n      messages: {\n        areYouSureDelete: 'Voulez-vous vraiment supprimer {{object}} ?',\n        createNewPatient: 'Créer un nouveau dossier patient ?',\n        deletingPatient: 'Supprimer le patient et tous ses dossiers associés',\n        noPatientsFound: 'Aucun patient trouvé.',\n        notFoundQuickAdd: \"Le patient <strong>{{patientFullName}}</strong> n'a pas été trouvé. Si vous souhaitez créer le patient, remplissez les informations ci-dessous. Sinon, utilisez sur le bouton précédent pour revenir à la page précédente.\",\n        photoFileRequired: \"Merci de prendre une photo ou d'en envoyer une avant d'enregistrer.\",\n        savedPatient: 'Le dossier du patient {{displayName}} a été sauvegardé.'\n      },\n      navigation: {\n        appointments: 'Rendez-vous',\n        general: 'Général',\n        history: 'Historique',\n        imaging: 'Imagerie',\n        labs: 'Laboratoires',\n        medication: 'Médicaments',\n        photos: 'Photos',\n        socialWork: 'Travail social',\n        visits: 'Visites'\n      },\n      notes: {\n        newNote: 'Nouvelle note',\n        onBehalfOfCopy: 'de la part de',\n        onBehalfOfLabel: 'De la part de',\n        pleaseSelectAVisit: 'Veuillez sélectionner une visite',\n        updateNote: 'Mettre à jour la note'\n      },\n      titles: {\n        addContact: 'Ajouter un contact',\n        addPhoto: 'Ajouter une photo',\n        additionalContacts: 'Contacts supplémentaires',\n        admissionsDetail: \"Détail d'admission\",\n        admissionsSummary: \"Résumé d'admission\",\n        admittedPatients: 'Patients admis',\n        'delete': 'Supprimer un patient',\n        deleteContact: 'Supprimer un contact',\n        deleteExpense: 'Supprimer un frais',\n        deleteFamilyMember: 'Supprimer un membre de la famille',\n        deletePatientRecord: 'Supprimer un dossier de patient',\n        deletePhoto: 'Supprimer la photo',\n        diagnosticTesting: 'Test de diagnostic',\n        dischargesDetail: 'Détail des sorties',\n        dischargesSummary: 'Résumé des sorties',\n        edit: 'Modifier le patient',\n        editPhoto: 'Modifier la photo',\n        expenses: 'Frais',\n        familyInfo: 'Info sur la famille',\n        familyInformation: 'Information sur le famille',\n        'new': 'Nouveau patient',\n        outpatientsForDate: 'Patients ambulatoires pour {{visitDate}}',\n        patient: 'Rapport du patient',\n        patientListing: 'Liste de patients',\n        patientReport: 'Rapport du patient',\n        patientStatus: 'Statut du patient',\n        proceduresDetail: 'Détail des procédures',\n        proceduresSummary: 'Résumé des procédures',\n        savedPatient: 'Patient sauvegardé',\n        socialWork: 'Frais',\n        todaysOutpatients: 'Patients ambulatoires du jour',\n        totalPatientDays: 'Nombre total de patients',\n        totalPatientDaysDetailed: 'Nombre total de patients (détaillé)',\n        visit: 'Visite'\n      }\n    },\n    pricing: { labels: {\n        discountAmount: 'Montant de remise',\n        discountPercentage: 'Pourcentage de remise',\n        setFee: 'Définir les frais'\n      } },\n    print: { invoice: {\n        labels: {\n          billedBy: 'Facturé par :',\n          billedDate: 'Date de facture :',\n          dateAdmitted: 'Admission :',\n          dateDischarged: 'Sortie :',\n          dischargeNotes: 'Note de sortie :',\n          patientAddress: 'Adresse :',\n          patientAge: 'Age :',\n          patientId: 'Numéro du patient :',\n          patientName: 'Nom du patient :',\n          remarks: 'Remarque :',\n          spacer: '__________________________________________'\n        },\n        messages: { whereConducted: 'ont été déduis durant mon accouchement' },\n        titles: {\n          billingStatement: 'Relevé de facture',\n          patientMember: 'Patient-membre',\n          patients: 'du patient',\n          relContact: 'Relation/N° Contact'\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: 'Ajouter un médicament' },\n      labels: { medicationUsed: 'Médicament utilisé' },\n      messages: { saved: 'La procédure a été sauvegardée' },\n      titles: {\n        addChargeItem: 'Ajouter un article de charge',\n        addMedicationUsed: 'Ajouter un médicament',\n        deleteChargeItem: 'Supprimer un article de charge',\n        deleteMedicationUsed: 'Supprimer un médicament utilisé',\n        edit: 'Modifier la procédure',\n        editChargeItem: 'Modifier la ligne de charge',\n        editMedicationUsed: 'Modifier un médicament utilisé',\n        medicationUsed: 'Médicament utilisé',\n        'new': 'Nouvelle procédure',\n        saved: 'Procédure sauvegardée'\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: \"Date d'admission\",\n        allProcedures: 'Toutes les procédures effectuées',\n        completedBy: 'Complété par',\n        dischargeDate: 'Date de sortie',\n        examiner: 'Examiner',\n        images: 'Images',\n        labs: 'Labos',\n        location: 'Emplacement de visite',\n        medications: 'Médicaments',\n        nextAppointment: 'Prochain rendez-vous',\n        nextAppointments: 'Prochains rendez-vous',\n        notes: {\n          author: 'Auteur',\n          date: 'Date',\n          title: 'Titre'\n        },\n        operativePlan: {\n          description: \"Description d'opération\",\n          instructions: \"Instructions pour l'admission\",\n          procedures: 'Procédures prévues',\n          title: \"Plan d'opération\"\n        },\n        primaryDiagnosis: 'Premier diagnostic',\n        procedures: 'Procédures',\n        secondaryDiagnosis: 'Second diagnostic',\n        visitDate: 'Date de visite',\n        visitType: 'Type de visite'\n      },\n      messages: {\n        'delete': 'Etes-vous sûr de vouloir supprimer ce rapport ?',\n        saved: 'Le rapport a été sauvegardé'\n      },\n      titles: {\n        dischargeReport: 'Rapport de sortie',\n        newDischargeReport: 'Nouveau rapport de sortie',\n        newOPDReport: 'Nouveau rapport du service des patients en consultation externe',\n        opdReport: 'Rapport du service des patients en consultation externe',\n        saved: 'Rapport enregistré'\n      }\n    },\n    user: {\n      plusNewUser: '+ nouvel utilisateur',\n      usersPageTile: 'Liste des Utilisateurs'\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: 'Ajouter un diagnostic',\n        checkIn: 'Enregistrement',\n        checkOut: 'Départ',\n        discharge: 'Sortie',\n        newAppointment: 'Nouveau rendez-vous',\n        newDischargeReport: 'Nouveau rapport de sortie',\n        newOPDReport: 'Nouveau rapport du service des patients en consultation externe',\n        newProcedure: 'Nouvelle procédure',\n        newVitals: 'Nouveau signes vitaux'\n      },\n      labels: {\n        appointment: 'Rendez-vous',\n        authoredBy: 'Rédigé par',\n        checkInTime: \"Heure d'enregistrement\",\n        checkOutTime: 'Heure de départ',\n        createNewPatient: 'Créer un nouveau patient',\n        diagnosis: 'Diagnostics',\n        examiner: 'Examiner',\n        finalDiagnosis: 'Diagnostic final',\n        haveAppointment: 'O',\n        haveDoneOrders: 'O',\n        noAppointment: 'N',\n        ordersDone: 'Commandes effectuées',\n        ordersNotDone: 'N',\n        patientToCheckIn: 'Patient à enregistrer',\n        procedure: 'Procédure',\n        procedureDate: 'Date de procédure',\n        reasonForVisit: 'Raison de la visite',\n        reportType: 'Type de rapport',\n        status: 'Statut de la visite',\n        statusAdmitted: 'Admis',\n        statusCheckedIn: 'Enregistré',\n        statusCheckedOut: 'Parti',\n        statusDischarged: 'Sorti',\n        visitDate: 'Date de visite',\n        visitInformation: 'Information sur la visite',\n        visitType: 'Type de visite'\n      },\n      messages: {\n        checkOut: 'Etes-vous sûr de vouloir enregistrer le départ de {{patientName}} ?',\n        checkedOut: 'Le départ de {{patientName}} a été enregistré',\n        discharged: 'La sortie de {{patientName}} a été enregistré',\n        patientCheckedIn: \"L'enregistrement de {{patientName}} a été effectué\",\n        patientCreatedAndCheckedIn: \"{{patientName}} a été crée et son enregistrment d'entrée a été effectué\",\n        visitAndPatientSaved: 'Le patient et sa visite ont été sauvegardés',\n        visitSaved: 'La visite a été sauvegardé'\n      },\n      navigation: {\n        charges: 'Charges',\n        notes: 'Notes',\n        orders: 'Commandes',\n        procedures: 'Procédures',\n        reports: 'Rapports',\n        vitals: 'Signes vitaux'\n      },\n      titles: {\n        additionalDiagnoses: 'Diagnostics supplémentaires',\n        checkOut: 'Départ du patient',\n        checkedIn: 'Enregistrement du patient',\n        checkedOut: 'Patient parti',\n        discharged: 'Patient enregistré',\n        editVisit: 'Modifier une visite',\n        newVisit: 'Nouvelle visite',\n        patientCheckIn: 'Enregistrement de patient',\n        visitSaved: 'Visite sauvegardé'\n      }\n    },\n    vitals: { labels: {\n        dateRecorded: \"Date d'enregistrement\",\n        dbp: 'Pression diastolique',\n        heartRate: 'Rythme cardiaque',\n        height: 'Taille',\n        respiratoryRate: 'Fréquence respiratoire',\n        sbp: 'Pression systolique',\n        temperature: 'Température',\n        weight: 'Poids'\n      } }\n  };\n});","define('hospitalrun/tests/locales/fr/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/fr/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/fr/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/pt-br/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    admin: {\n      address: {\n        address1Label: 'Rótulo Endereço 1',\n        address2Label: 'Rótulo Endereço 2',\n        address3Label: 'Rótulo Endereço 3',\n        address4Label: 'Rótulo Endereço 4',\n        addressLabel: 'Endereço',\n        editTitle: 'Opções de Endereço',\n        include1Label: 'Rótulo Include 1',\n        include2Label: 'Rótulo Include 2',\n        include3Label: 'Rótulo Include 3',\n        include4Label: 'Rótulo Include 4',\n        messages: { addressSaved: 'As opções de endereço foram salvas' },\n        newTitle: 'Opções de Endereço',\n        titles: { optionsSaved: 'Opções Salvas' }\n      },\n      addressOptions: 'Opções de Endereço',\n      customForms: {\n        buttons: {\n          addField: 'Adicionar Campo',\n          moveDown: '',\n          moveUp: '',\n          newForm: '',\n          preview: 'Visualizar'\n        },\n        labels: {\n          alwaysInclude: '',\n          checkbox: '',\n          colSpan: '',\n          columns: '',\n          customForm: '',\n          dischargeReportFormType: '',\n          formName: '',\n          formType: '',\n          incidentFormType: '',\n          includeOtherOption: '',\n          labFormType: '',\n          label: '',\n          newForm: '',\n          opdReportFormType: '',\n          operativePlanFormType: '',\n          otherOptionLabel: '',\n          patientFormType: '',\n          property: '',\n          radio: '',\n          select: '',\n          socialworkFormType: '',\n          text: '',\n          textarea: '',\n          visitFormType: ''\n        },\n        messages: { formSaved: '' },\n        titles: {\n          checkboxValues: '',\n          customForms: '',\n          deleteForm: '',\n          dropDownValues: '',\n          editCustomForm: '',\n          fields: '',\n          formSaved: '',\n          newCustomForm: '',\n          radioValues: ''\n        }\n      },\n      header: {\n        editTitle: '',\n        facilityName: '',\n        headerLabel: '',\n        headerLine1: '',\n        headerLine2: '',\n        headerLine3: '',\n        logoURL: '',\n        messages: { headerSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      loadDb: 'Carregar DB',\n      loaddb: {\n        displayAlertMessage: 'Por favor Selecione o Arquivo para Carregar.',\n        displayAlertTitle: 'Selecione o Arquivo para Carregar',\n        editTitle: 'Carregando BD',\n        errorDisplayAlertMessage: 'O banco de dados não foi carregado. O erro foi: {{error}}',\n        errorDisplayAlertTitle: 'Erro ao carregar',\n        progressMessage: 'Por favor aguarde enquanto o seu banco de dados é carregado.',\n        progressTitle: 'Carregando Banco de Dados'\n      },\n      lookup: {\n        aisleLocationList: 'Localização de Corredores no Inventário',\n        alertImportListMessage: 'Por favor Selecione o arquivo para importação.',\n        alertImportListSaveMessage: 'A lista de pesquisa foi importada.',\n        alertImportListSaveTitle: 'Lista Importdada',\n        alertImportListTitle: 'Selecione o arquivo para importação',\n        alertImportListUpdateMessage: 'A lista de pesquisa foi salva.',\n        alertImportListUpdateTitle: 'Lista Salva',\n        anesthesiaTypes: 'Tipos de Anestesia',\n        anesthesiologists: 'Anestesiologista',\n        billingCategories: 'Categorias de Faturamento',\n        clinicList: 'Localização de Clínicas',\n        countryList: 'Países',\n        cptCodeList: 'Códigos CPT',\n        diagnosisList: 'Diagnósticos',\n        edit: { template: {\n            addTitle: 'Adicionar Valor',\n            editTitle: 'Editar Valor',\n            labelTitle: 'Valor',\n            updateButtonTextAdd: 'Adicionar',\n            updateButtonTextUpdate: 'Atualizar'\n          } },\n        expenseAccountList: 'Contas de Despesas',\n        imagingPricingTypes: 'Tipos de Preço Imagem',\n        incidentDepartments: '',\n        inventoryTypes: 'Tipos de Inventário',\n        labPricingTypes: 'Tipos de Preço Laboratório',\n        pageTitle: 'Listas de Pesquisa',\n        patientStatusList: 'Lista de Situação do Paciente',\n        physicianList: 'Médicos',\n        procedureList: 'Procedimentos',\n        procedureLocations: 'Localização de Procedimentos',\n        procedurePricingTypes: 'Tipos de Preço Procedimento',\n        radiologists: 'Radiologista',\n        titles: { deleteLookupValue: '' },\n        unitTypes: 'Tipos de Unidade',\n        vendorList: 'Fornecedor',\n        visitLocationList: 'Localização dos Visitantes',\n        visitTypes: 'Tipos de Visita',\n        wardPricingTypes: 'Tipos de Preços Enfermaria',\n        warehouseList: 'Locais de Inventário'\n      },\n      lookupLists: 'Lista de Pesquisas',\n      roles: {\n        capability: {\n          addAllergy: 'Adicionar Alergia',\n          addAppointment: 'Adicionar Compromissos',\n          addBillingDiagnosis: '',\n          addCharge: 'Adicionar Cobrança',\n          addDiagnosis: 'Adicionar Diagnóstico',\n          addImaging: 'Adicionar Imagem',\n          addIncident: 'Adicionar Incidente',\n          addIncidentCategory: 'Adicionar Categoria de Incidente',\n          addInventoryItem: 'Adicionar Item de Inventário',\n          addInventoryPurchase: 'Adicionar Compra de Inventário',\n          addInventoryRequest: 'Adicionar Requisição de Inventário',\n          addInvoice: 'Adicionar Fatura',\n          addLab: 'Adicionar Laboratório',\n          addMedication: 'Adicionar Medicação',\n          addNote: 'Adicionar Nota',\n          addOperationReport: '',\n          addOperativePlan: 'Adicionar Plano Operativo',\n          addPatient: 'Adicionar Paciente',\n          addPayment: 'Adicionar Pagamentos',\n          addPhoto: 'Adicionar Foto',\n          addPricing: 'Adicionar Preço',\n          addPricingProfile: 'Adicionar Perfil de Preço',\n          addProcedure: 'Adicionar Procedimento',\n          addSocialwork: 'Adicionar Rede Social',\n          addVisit: 'Adicionar Visita',\n          addVitals: 'Adicionar Sinais Vitais',\n          adjustInventoryLocation: 'Ajustar Localização de Inventário',\n          admin: 'Administração',\n          admitPatient: 'Admitir Paciente',\n          appointments: 'Compromissos',\n          billing: 'Faturamentos',\n          completeImaging: 'Imagem Concluída',\n          completeLab: 'Laboratório Concluído',\n          defineUserRoles: 'Perfis de Usuários',\n          deleteAppointment: 'Excluir Compromisso',\n          deleteDiagnosis: 'Excluir Diagnóstico',\n          deleteImaging: 'Excluir Imagem',\n          deleteIncident: '',\n          deleteIncidentCategory: '',\n          deleteInventoryItem: 'Excluir Item de Inventário',\n          deleteInvoice: 'Excluir Fatura',\n          deleteLab: 'Excluir Laboratório',\n          deleteMedication: 'Excluir Medicação',\n          deleteNote: '',\n          deletePatient: 'Excluir Paciente',\n          deletePhoto: 'Excluir Paciente',\n          deletePricing: 'Excluir Preço',\n          deletePricingProfile: 'Excluir Perfil de Preço',\n          deleteProcedure: 'Excluir Procedimento',\n          deleteSocialwork: 'Excluir Trabalho Social',\n          deleteVisit: 'Excluir Visita',\n          deleteVitals: 'Excluir Sinais Vitais',\n          dischargePatient: 'Alta do Paciente',\n          editInvoice: 'Editar Fatura',\n          fulfillInventory: 'Preencher Inventário',\n          fulfillMedication: 'Preencher Medicação',\n          generateIncidentReport: '',\n          imaging: 'Imagem',\n          incident: 'Incidente',\n          inventory: 'Inventário',\n          invoices: 'Faturas',\n          labs: 'Laboratório',\n          loadDb: 'Carregar Banco de Dados',\n          manageIncidents: 'Gerenciar Incidentes',\n          medication: 'Medicação',\n          overrideInvoice: 'Substituir Fatura',\n          patientReports: 'Relatório do Paciente',\n          patients: 'Pacientes',\n          pricing: 'Preço',\n          updateConfig: 'Atualizar Configurações',\n          visits: 'Visita'\n        },\n        messages: { roleSaved: 'O perfil {{roleName}} foi salvo.' },\n        titles: { roleSaved: 'Perfil Salvo' }\n      },\n      userRoles: 'Perfis de Usuários',\n      users: 'Usuários',\n      visitForms: {\n        labels: {\n          followup: '',\n          form: '',\n          initial: '',\n          visitType: ''\n        },\n        titles: { visitForms: '' }\n      },\n      workflow: {\n        admissionDepositLabel: 'Depósito de Admissão é exigido',\n        clinicPrepaymentLabel: 'Pagamento Antecipado da Clínica é exigido',\n        editTitle: 'Opções de Workflow',\n        followupPrepaymentLabel: 'Pagamento Antecipado do Acompanhamento é exigido',\n        messages: { optionsSaved: 'As opções de WorkFlow foram salvas' },\n        newTitle: 'Opções de Workflow',\n        outpatientImagingLabel: 'Pagamento Antecipado do Ambulatorio de Imagem é exigido',\n        outpatientLabLabel: 'Pagamento Antecipado do Laboratório Ambulatorial é exigido',\n        outpatientMedicationLabel: 'Pagamento Antecipado do Ambulatorio de Medicação é exigido',\n        titles: { optionsSaved: 'Opções Salvas' },\n        workflowLabel: 'Workflow'\n      }\n    },\n    alerts: {\n      errorExclamation: '',\n      pleaseWait: 'Por Favor Aguarde',\n      reportError: '',\n      warningExclamation: ''\n    },\n    allergies: {\n      buttons: { addAllergy: 'Adicionar alergia' },\n      labels: {\n        allergyName: 'Nome',\n        patientAllergy: 'Alergias do paciente'\n      },\n      titles: {\n        addAllergy: 'Adicionar alergia',\n        editAllergy: 'Editar alergia'\n      }\n    },\n    application: {\n      messages: { sessionExpired: 'Sua sessaão expirou. Faça login para continuar.' },\n      titles: { sessionExpired: 'Sessaão expirada' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '+ novo compromisso',\n        scheduleSurgery: '+ nova cirurgia'\n      },\n      calendarTitle: 'Compromissos',\n      currentScreenTitle: 'Lista de Compromisso',\n      editTitle: 'Editar Compromisso',\n      labels: {\n        noLocation: 'Sem Localização',\n        selectedStartingDate: 'Mostrar Compromisso em ou após'\n      },\n      messages: {\n        appointmentSaved: '',\n        endTimeLaterThanStart: 'Por favor, selecione um horário de término mais tarde do que a hora de início.'\n      },\n      missed: 'Compromissos Esquecidos',\n      newTitle: 'Novo Compromisso',\n      searchTitle: 'Pesquisar Compromissos',\n      sectionTitle: 'Compromissos',\n      thisWeek: 'Compromissos dessa Semana',\n      titles: {\n        appointmentSaved: 'Compromisso Salvo',\n        editSurgicalAppointment: 'Editar cirurgia',\n        newSurgicalAppointment: 'Nova cirurgia',\n        theaterSchedule: 'Cirurgias'\n      },\n      todayTitle: 'Compromissos de Hoje'\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: 'Nenhuma fatura encontrada',\n        noPricingItems: 'Nenhum item de preço encontrado.',\n        noPricingProfiles: 'Nenhum perfil de preço encontrado.'\n      },\n      buttons: {\n        addOverride: 'Adicionar Substituir',\n        createInvoice: 'Criar nova fatura?'\n      },\n      labels: {\n        actualCharges: 'Cobranças Atuais',\n        discountAmount: 'Quantidade de Desconto',\n        discountPercentage: 'Porcentagem de Desconto',\n        externalInvoiceNumber: 'Fatura Externa #',\n        hmoCom: 'HMO/COM',\n        insurance: 'Seguro Nacional',\n        paymentProfile: 'Perfil de Pagamento',\n        paymentsDeposits: 'Pagamentos/Depositos',\n        pricingPanelOverrides: 'Substituição e Perfil de Preços',\n        pricingProfile: 'Perfil de Preços'\n      }\n    },\n    buttons: {\n      add: 'Adicionar',\n      addItem: 'Adicionar Item',\n      addLineItem: 'Adicionar Item de Linha',\n      addValue: 'Adicionar Valor',\n      addVisit: 'Adicionar Visita',\n      allRequests: 'Todas as Requisições',\n      barcode: 'Código de Barras',\n      cancel: 'Cancelar',\n      clear: 'Limpar',\n      close: 'Fechar',\n      complete: 'Completo',\n      'delete': 'Excluir',\n      dispense: 'Dispensar',\n      edit: 'Editar',\n      filter: 'Filtrar',\n      fulfill: 'Preencher',\n      'import': 'Importar',\n      loadFile: 'Carregar Arquivo',\n      newItem: '+ novo item',\n      newNote: 'Nova Nota',\n      newRequest: 'Nova Requisição',\n      newRequestPlus: '+ nova requisição',\n      newUser: 'Novo Usuário',\n      ok: 'Ok',\n      remove: 'Remover',\n      returnButton: 'Retornar',\n      search: 'Pesquisa',\n      showAll: '',\n      showFewer: '',\n      update: 'Atualizar'\n    },\n    components: {\n      chargesByTypeTab: { charges: 'cobranças' },\n      customFormManager: { buttons: { addForm: '' } },\n      dateTimePicker: {\n        amHour: '{{hour}} AM',\n        midnight: 'Meia-noite',\n        noon: 'Meio-dia',\n        pmHour: '{{hour}} PM'\n      },\n      imageUpload: { messages: { selectValidImageFile: '' } },\n      operativeProcedures: {\n        buttons: { addProcedure: '' },\n        labels: { procedure: '' },\n        titles: { procedures: '' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: '',\n          newLab: '',\n          newMedication: ''\n        },\n        labels: {\n          imagingOrderType: '',\n          labOrderType: '',\n          medicationOrderType: '',\n          orderType: ''\n        }\n      },\n      priceList: { charges: 'cobranças de {{pricingType}}' },\n      quantityCalc: { result: '{{targetUnit}} total: {{calculated}}' },\n      quantityConv: {\n        conversion: 'O que significa contém 1 {{name}}?',\n        unit: 'Unidade'\n      },\n      sortableColumn: { labels: { selectAll: '' } },\n      takePhoto: {\n        camera: 'Câmera',\n        how: 'Como você quer adicionar um Foto?',\n        labels: {\n          takeAPicture: '',\n          uploadAFile: ''\n        },\n        photo: 'foto',\n        preview: 'pré visualização',\n        takePhoto: 'Tirar um Foto',\n        uploadFile: 'Upload de Arquivo'\n      },\n      upcomingAppointments: {\n        labels: {\n          date: '',\n          location: '',\n          type: '',\n          'with': ''\n        },\n        titles: { upcomingAppointments: '' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: 'Adicionar formulário' },\n      labels: { formToAdd: 'Formulário para adicionar' },\n      titles: { addCustomForm: 'Adicionar formulário customisado' }\n    },\n    dashboard: {\n      setup: '',\n      title: 'O que você gostaria de fazer?'\n    },\n    dates: {\n      'long': '{{years}} ano {{months}} meses {{days}} dias',\n      longOmitDays: '{{years}} ano {{months}} meses',\n      longOmitDaysPlural: '{{years}} anos {{months}} meses',\n      longOmitDaysYears: '{{months}} meses',\n      longOmitYears: '{{months}} meses {{days}} dias',\n      longPlural: '{{years}} anos {{months}} meses {{days}} dias',\n      'short': '{{years}}y {{months}}m {{days}}d',\n      shortOmitYears: '{{months}}m {{days}}d'\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: 'Diagnóstico ativo',\n        date: 'Data',\n        diagnosis: 'Diagnóstico',\n        secondaryDiagnosis: 'Diagnóstico secundário'\n      },\n      titles: {\n        addDiagnosis: 'Adicionar diagnóstico',\n        editDiagnosis: 'Editar diagnóstico'\n      }\n    },\n    errors: {\n      accepted: 'deve ser aceito',\n      blank: 'não pode ser branco',\n      confirmation: '{{attribute}} não corresponde',\n      empty: 'não pode ser vazio',\n      equalTo: 'deve ser igual à {{count}}',\n      even: 'deve ser até',\n      exclusion: 'é reservado',\n      greaterThan: 'deve ser maior do que {{count}}',\n      greaterThanOrEqualTo: 'deve ser maior ou igual à {{count}}',\n      inclusion: 'não está na lista',\n      invalid: 'é inválido',\n      invalidNumber: 'número não é valido',\n      lessThan: 'deve ser menor do que {{count}}',\n      lessThanOrEqualTo: 'deve ser menor ou igual à {{count}}',\n      notANumber: 'não é um número',\n      notAnInteger: 'deve ser um número inteiro',\n      odd: 'deve ser ímpar',\n      otherThan: 'deve ser diferente de {{count}}',\n      present: 'pode ser branco',\n      result: 'Informe um resultado antes de concluir',\n      tooLong: 'é muito longo (quantidade máxima de caracteres é {{count}} )',\n      tooShort: 'é muito curta (quantidade mínima de caracteres é {{count}})',\n      wrongLength: 'o tamanho está errado (são esperados {{count}} caracteres)'\n    },\n    headings: { chargedItems: 'Itens Carregados' },\n    imaging: {\n      alerts: {\n        completedMessage: 'A requisição de imagem esta completa.',\n        completedTitle: 'Requisição de Imagem Completa',\n        savedMessage: 'A requisição de imagem foi salva.',\n        savedTitle: 'Requisição de imagem salva'\n      },\n      buttons: { newButton: '+ nova imagem' },\n      labels: {\n        addNewVisit: '--Adicionar novo visitante--',\n        radiologist: 'Radiologista'\n      },\n      messages: { noCompleted: 'Nenhum item completo encontrado.' },\n      pageTitle: 'Requisição de imagens',\n      sectionTitle: 'Imagem',\n      titles: {\n        completedImaging: 'Imagem completa',\n        editTitle: 'Requisição de edição de imagem',\n        newTitle: 'Nova requisição de imagem'\n      }\n    },\n    incident: {\n      buttons: {\n        add: '',\n        addForm: '',\n        addItem: '',\n        cancel: '',\n        'delete': '',\n        download: '',\n        edit: '',\n        'export': '',\n        generateRep: '',\n        newAttachment: '',\n        newCategory: '',\n        newIncident: '',\n        newNote: ''\n      },\n      labels: {\n        actions: '',\n        addedBy: '',\n        category: '',\n        categoryItem: '',\n        date: '',\n        dateRecorded: '',\n        department: '',\n        description: '',\n        endDate: '',\n        givenBy: '',\n        howToAddAttachment: '',\n        incidentDate: '',\n        incidentId: '',\n        item: '',\n        lastUpdated: '',\n        note: '',\n        patientId: '',\n        patientImpacted: '',\n        reportType: '',\n        reportedBy: '',\n        reportedDate: '',\n        reportedTo: '',\n        sentinelEvent: '',\n        startDate: '',\n        status: '',\n        statusActive: '',\n        statusClosed: '',\n        statusFollowup: '',\n        statusReported: '',\n        title: '',\n        total: '',\n        updatedBy: ''\n      },\n      messages: {\n        attachmentFileRequired: '',\n        createNew: '',\n        createNewIncidentCategory: '',\n        fillIn: '',\n        incidentCategorySaved: '',\n        noClosedIncidents: '',\n        noIncidentCategoriesFound: '',\n        noIncidents: '',\n        saved: '',\n        selectExistingPatient: ''\n      },\n      titles: {\n        addAttachment: '',\n        addCategoryItem: '',\n        addNote: '',\n        attachments: '',\n        closed: '',\n        current: '',\n        deleteAttachment: '',\n        deleteIncident: '',\n        deleteIncidentCategory: '',\n        deleteItem: '',\n        deleteNote: '',\n        editAttachment: '',\n        editIncident: '',\n        editIncidentCategory: '',\n        editNote: '',\n        general: '',\n        history: '',\n        incidentCategories: '',\n        incidentCategoryItem: '',\n        incidentCategoryName: '',\n        incidentCategorySaved: '',\n        incidentSaved: '',\n        incidents: '',\n        incidentsByCategory: '',\n        incidentsByDepartment: '',\n        newIncident: '',\n        newIncidentCategory: '',\n        notes: '',\n        reports: ''\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Preço por Unidade:',\n        delivered: 'Entregue a:',\n        location: 'Localização Ajustada:',\n        prescription: 'Prescrição para:',\n        pulled: 'Retirado de:',\n        quantity: 'Quantidade na Conclusão:',\n        reason: 'Motivo:',\n        returned: 'Devolvido do Paciente:',\n        transferredFrom: 'Transferido de:',\n        transferredTo: 'Transferido para:'\n      },\n      labels: {\n        action: 'Ação',\n        add: 'Adicionar',\n        addAdjustmentType: '',\n        adjust: 'Ajustar',\n        adjustmentDate: 'Data de Ajuste',\n        adjustmentFor: 'Ajuste Para',\n        adjustmentType: 'Tipo de Ajuste',\n        aisle: 'Corredor',\n        aisleLocation: 'Localização do Corredor',\n        allInventory: 'Todo Inventário',\n        allItems: 'Todos os Itens',\n        availableQuantity: '',\n        billTo: 'Conta Para',\n        consumePurchases: 'Compras para Consumo',\n        consumptionRate: 'Taxa de Consumo',\n        cost: 'Preço',\n        costPerUnit: 'Preço por Unidade',\n        crossReference: 'Referência Cruzada',\n        currentQuantity: 'Quantidade Atual',\n        dateCompleted: 'Data de Conclusao',\n        dateEffective: 'Data Efetiva',\n        dateEnd: 'Data de Término',\n        dateReceived: 'Data Recebida',\n        dateStart: 'Data de Início',\n        dateTransferred: 'Data Transferida',\n        daysLeft: 'Dias Restantes',\n        deleteItem: 'Deletar Item',\n        deliveryAisle: 'Corredor de Entrega',\n        deliveryLocation: 'Local de Entrega',\n        details: 'Detalhes',\n        distributionUnit: 'Centro de Distribuição',\n        editItem: 'Editar Item',\n        expense: 'Despesa para',\n        expirationDate: 'Data de Expiração',\n        fulfillRequest: 'Preencher Requisição',\n        fulfillRequestNow: 'Preencher Requisição Agora',\n        gift: 'Doação em Espécie',\n        giftInKindNo: 'N',\n        giftInKindYes: 'S',\n        giftUsage: 'Uso de Doação em Espécie',\n        inventoryConsumed: 'Inventário Consumido',\n        inventoryItem: 'Item de Inventário',\n        inventoryObsolence: 'Obsolescência de Inventário',\n        invoiceItems: 'Itens da Fatura',\n        invoiceLineItem: 'Item de Linha da Fatura',\n        invoiceNumber: 'Número da Fatura',\n        item: 'Item',\n        itemNumber: 'Número de Item',\n        items: 'Itens',\n        location: 'Localização',\n        locations: 'Localizações',\n        markAsConsumed: 'Marcar como Consumido',\n        name: 'Nome',\n        newItem: 'Novo Item',\n        originalQuantity: 'Quantidade Original',\n        print: 'Imprimir',\n        printBarcode: 'Imprimir Código Barras',\n        printer: 'Impressora',\n        pullFrom: 'Retirar de',\n        purchaseCost: 'Custo da Compra',\n        purchaseInfo: 'Informações da Compra',\n        purchases: 'Compras',\n        quantity: 'Quantity ({{unit}})',\n        quantityAvailable: 'Quantity Available',\n        quantityOnHand: 'Quantidade on Hand',\n        quantityRequested: 'Quantidade Solicitada',\n        rank: 'Classificação',\n        reason: 'Motivo',\n        remove: 'Remover',\n        removeAdjustmentType: '',\n        reorderPoint: 'Ponto de Reabastecimento',\n        requestedItems: 'Itens Solicitados',\n        returnAdjustmentType: '',\n        returnToVendorAdjustmentType: '',\n        salePricePerUnit: 'Preço de Venda por Unidade',\n        save: 'Salvar',\n        serialNumber: 'Lote/Número de Série',\n        total: 'Total',\n        totalCost: 'Preço Total',\n        totalReceived: 'Total Recebido: {{total}}',\n        transaction: 'Transação',\n        transactions: 'Transações',\n        transfer: 'Transferir',\n        transferFrom: 'Transferir de',\n        transferTo: 'Transferir para Localização',\n        transferToAisle: 'Transferir para Localização de Corredor',\n        unit: 'Unidade',\n        unitCost: 'Preço Unitário',\n        vendor: 'Fornecedor',\n        vendorItemNumber: 'Número de Item do Fornecedor',\n        writeOffAdjustmentType: '',\n        xref: 'RefX'\n      },\n      messages: {\n        adjust: 'Por favor ajustar as quantidades no(s) local(is) apropriado(s) da conta para a diferença de {{difference}}.',\n        createRequest: 'Criar uma nova requisição?',\n        itemNotFound: 'O item de inventário <strong>{{item}}</strong> não pode ser encontrado.<br>Se você quiser criar um novo item de inventário, preencha as informações abaixo.<br>Caso o contrário, pressione o botão Cancelar para voltar.',\n        loading: 'Carregando transações ...',\n        noItems: 'Nenhum item encontrado.',\n        noRequests: 'Nenhuma requisição encontrada.',\n        purchaseSaved: 'As compras de inventário foram salvas com sucesso.',\n        quantity: 'A quantidade total de <strong>({{quantity}})</strong> não corresponde com a quantidade total nas localizações<strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Você tem certeza de que deseja remover este item desta fatura?',\n        removeItemRequest: 'Você tem certeza de que deseja remover este item desta requisição?',\n        requestFulfilled: 'A requisição de invenário foi preenchida.',\n        requestUpdated: 'A requisição de invenário foi atualizada.',\n        warning: 'Por favor preencher campos obrigatório (marcado(s) com *) e corrija os erros antes de adicionar.'\n      },\n      reports: {\n        adjustment: 'Ajuste Detalhado',\n        daysSupply: 'Dias de Abastecimento Deixado no Estoque',\n        expenseDetail: 'Despesas Detalhadas',\n        expenseSum: 'Sumário de Despesas',\n        expiration: 'Data de Expiração',\n        'export': 'Exportar Relatório',\n        fields: 'Campos para Incluir',\n        finance: 'Sumário Financeiro',\n        generate: 'Gerar Relatório',\n        invLocation: 'Inventário por Localização',\n        invValuation: 'Valorização do Inventário',\n        purchaseDetail: 'Compras Detalhadas',\n        purchaseSum: 'Sumário de Compras',\n        reportType: 'Tipo de Relatório',\n        rows: {\n          adjustments: 'Ajustes',\n          adjustmentsTotal: 'Total dos Ajustes',\n          balanceBegin: 'Balanço Inicial',\n          balanceEnd: 'Balanço Final',\n          category: 'Categoria',\n          consumed: 'Consumidos',\n          consumedGik: 'Doações Consumidas',\n          consumedGikTotal: 'Total Doações Consumidas',\n          consumedPuchases: 'Compras Consumidas',\n          consumedPurchasesTotal: 'Total Compras Consumidas',\n          consumedTotal: 'Total Consumido',\n          errInFinSum: 'Erro em _generateFinancialSummaryReport: ',\n          errInFindPur: 'Erro em _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Erro em _findInventoryItemsByRequest: ',\n          expensesFor: 'Despesas para: ',\n          noAccount: '(Sem Conta)',\n          subtotal: 'Subtotal: ',\n          subtotalFor: 'Subtotal para {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total para {{var}}: ',\n          totalPurchases: 'Total de Compras',\n          transfer1: '{{quantity}} de {{location}}',\n          trasnfer2: 'De: {{source}} Para: {{target}}'\n        },\n        stockTransferDetail: 'Tranferências de Estoque Detalhadas',\n        stockTransferSum: 'Sumário de Tranferências de Estoque',\n        stockUsageDetail: 'Uso de Estoque Detalhado',\n        stockUsageSum: 'Sumário de Uso de Estoque',\n        titleDateRange: '',\n        titleSingleDate: ''\n      },\n      titles: {\n        addPurchase: 'Adicionar Compra',\n        addRequest: 'Nova Requisição',\n        adjustment: 'Ajuste',\n        editPurchase: 'Editar Compra',\n        editRequest: 'Editar Requisição',\n        inventoryItem: 'Novo Item de Inventário',\n        inventoryReport: 'Relatório de Inventário',\n        purchaseSaved: 'Compras de Invenários Salvas',\n        quickAddTitle: 'Novo Item de Inventário',\n        removeItem: 'Remover Item',\n        requestFulfilled: 'Requisição Preenchida',\n        requestUpdated: 'Requisição Atualizada',\n        transfer: 'Itens de Transferência',\n        warning: 'Atenção!!!!!'\n      }\n    },\n    labels: {\n      action: 'Ação',\n      actions: 'Ações',\n      addNewOutpatientVisit: '--Adicionar Nova Visita Ambulatorial--',\n      address: 'Endereço',\n      age: 'Idade',\n      allDay: 'Todo Dia',\n      amount: 'Quantidade',\n      anesthesia: 'Anestesia',\n      assisting: 'Ajudante',\n      balanceDue: 'Saldo Devedor',\n      billDate: 'Data da Conta',\n      billTo: 'Conta Para',\n      category: 'Categoria',\n      completed: 'Completo',\n      country: 'País',\n      cptcode: 'Código CPT*',\n      creditTo: 'Crédito Para',\n      date: 'Data',\n      dateCompleted: 'Data da Conclusão',\n      dateOfBirth: 'Data de Nascimento',\n      dateOfBirthShort: 'DtNasc',\n      datePaid: 'Data de Pagamento',\n      dateRequested: 'Data da Requisição',\n      'delete': 'Excluir',\n      deleteRequest: 'Excluir Requisição',\n      deleteUser: 'Excluir Usuário',\n      department: 'Departamento',\n      description: 'Descrição',\n      discount: 'Desconto',\n      displayName: 'Nome de Exibição',\n      docRead: 'Documentos Lidos',\n      docWritten: 'Documentos Escritos',\n      edit: 'Editar',\n      editUser: 'Editar Usuário',\n      email: 'Email',\n      endDate: 'Data de Término',\n      endTime: 'Hora de Término',\n      excess: 'Excesso',\n      expenseTo: 'Despesa Para',\n      fileLoadSuccessful: 'Arquivo Carregado com Sucesso',\n      fileName: '',\n      fileToLoad: 'Carregar Arquivo',\n      fulfill: 'Preencha',\n      fulfillRequest: 'Preencha a Requisição',\n      fulfillRequestNow: 'Preencha a Requisição Agora',\n      fulfilled: 'Preenchido',\n      grandTotal: 'Total Geral',\n      id: 'Id',\n      imageOrders: 'Pedido de Imagem',\n      imagingType: 'Tipo de Imagem',\n      importFile: 'Importar Arquivo',\n      invoiceId: 'ID da Fatura',\n      labOrders: 'Pedidos de Laboratório',\n      lineItems: 'Itens de Linha',\n      loading: 'Carregando',\n      location: 'Localização',\n      lookupType: 'Tipo de Pesquisa',\n      medication: 'Medicação',\n      name: 'Nome',\n      newUser: 'Novo Usuário',\n      note: 'Note',\n      notes: 'Notas',\n      number: 'Número',\n      on: 'ligado',\n      password: 'Senha',\n      patient: 'Paciente',\n      payments: 'Pagamentos',\n      physician: 'Médico',\n      prescriber: 'Médico Responsável pela Prescrição',\n      prescription: 'Prescrição',\n      prescriptionDate: 'Data da Prescrição',\n      price: 'Preço',\n      print: '',\n      procedures: 'Procedimentos',\n      provider: 'Fornecedor',\n      pullFrom: 'Puxar De',\n      quantity: 'Quantidade',\n      remarks: 'Observações',\n      requestedBy: 'Requisitado por',\n      requestedOn: 'Solicitado em',\n      requests: 'Requisições',\n      result: 'Resultado',\n      results: 'Resultados',\n      role: 'Papel',\n      search: 'Pesquisa',\n      sex: 'Sexo',\n      startDate: 'Data de Início',\n      startTime: 'Hora Início',\n      status: 'Situação',\n      takenBy: '',\n      total: 'Total',\n      type: 'Tipo',\n      userCanAddNewValue: 'O usuário pode adicionar novos valores',\n      username: 'Usuário',\n      value: 'Valor',\n      view: '',\n      visit: 'Visita',\n      'with': 'Com'\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: 'Requisição de laboratório foi concluída.',\n        requestCompletedTitle: 'Requisições de Laboratório Concluída',\n        requestSavedMessage: 'A requisição de laboratório foi salva.',\n        requestSavedTitle: 'Requisição de Laboratório Salva'\n      },\n      buttons: { newButton: '+ novo laboratório' },\n      completedTitle: 'Laboratórios Concluídos',\n      deleteTitle: 'Excluir Requisição',\n      editTitle: 'Editar Requisição de Laboratório',\n      labels: {\n        addNewVisit: '--Adicionar Nova Visita--',\n        labType: 'Tipo de Laboratório'\n      },\n      messages: {\n        createNewRecord: 'Criar novo registro?',\n        noCompleted: 'Items concluídos não econtrados.',\n        noItemsFound: 'Nenhum laboratório encontrado.'\n      },\n      newTitle: 'Nova Requisição de Laboratório',\n      requestsTitle: 'Requisições de Laboratório',\n      sectionTitle: 'Laboratório'\n    },\n    languages: {\n      en: 'Inglês',\n      fr: 'Francês',\n      es: 'Espanhol',\n      de: 'Alemão',\n      ru: 'Russo',\n      'es-co': 'Espanhol (Colombiano)',\n      'pt-br': 'Portugues (Brasileiro)',\n      tr: 'Turco',\n      ur: 'Urdu'\n    },\n    loading: {\n      messages: {\n        '0': 'A velocidade de vôo borboleta superior é de 12 milhas por hora. Alguns meses pode voar 25 milhas por hora!',\n        '1': 'As corujas são os únicos pássaros que podem ver a cor azul.',\n        '2': 'Os gatos têm mais de 100 sons vocais; cachorros têm apenas 10.',\n        '3': 'Os Humanos usam um total de 72 músculos diferentes na fala.',\n        '4': 'Mais de 1.000 idiomas diferentes são falados no continente africano',\n        '5': 'Uma eritrofobo é alguém que fica vermelho facilmente.',\n        '6': 'A fobia mais comum do mundo é a Odinofobia que é o medo da dor.',\n        '7': 'Seu corpo utiliza 300 músculo para manter o equilíbrio quando você está parado.',\n        '8': 'Alguns sapos podem ser congelados e depois de serem descongelados continuarem a viver.',\n        '9': 'Nossos olhos estão sempre do mesmo tamanho de quando nascemos, mas nossas orelhas e nariz nunca param de crescer.',\n        '10': 'Sua língua é o único músculo em seu corpo qu está ligado apenas em uma extremidade.',\n        '11': 'Camelos tem três pálpebras para se protegerem das tempestades de areia.'\n      },\n      progressBar: { progress: '{{progressBarValue}}% concluído' }\n    },\n    login: {\n      labels: {\n        password: 'Senha',\n        signIn: 'Entrar',\n        username: 'Usuário'\n      },\n      messages: {\n        error: 'Nome de usuário ou senha está incorreta.',\n        signIn: 'Entrar'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: 'Requisição de Medicação Preenchido',\n        returnedMessage: 'A medicação foi marcada como retornada.',\n        returnedTitle: 'Medicação Retornada',\n        savedMessage: 'O registro de medicação foi salvo.',\n        savedTitle: 'Requisição de Medicação foi Salva'\n      },\n      buttons: {\n        dispenseMedication: 'dispensar medicação',\n        newButton: '+ nova requisição',\n        returnMedication: 'retorno de medicação'\n      },\n      labels: {\n        adjustmentDate: 'Data de Ajuste',\n        creditToAccount: 'Crédito na Conta',\n        quantityDispensed: 'Quantidade Dispensada',\n        quantityDistributed: 'Quantidade Distribuída',\n        quantityRequested: 'Quantidade Requisitada',\n        quantityToReturn: 'Quantidade Retornada',\n        refills: 'Recargas',\n        returnAisle: 'Corredor de Retorno',\n        returnLocation: 'Localização de Retorno',\n        returnReason: 'Razão/Notas de Retorno'\n      },\n      messages: { createNew: 'Criar uma nova requisição de medicação?' },\n      pageTitle: 'Requisição de Medicação',\n      returnMedication: 'Retorno de Medicação',\n      sectionTitle: 'Medicação',\n      titles: {\n        completedMedication: 'Medicação Concluída',\n        editMedicationRequest: 'Editar Requisição de Medicação',\n        newMedicationRequest: 'Nova Requisição de Medicação'\n      }\n    },\n    messages: {\n      createNewRecord: 'Criar uma nova gravação?',\n      createNewUser: 'Criar um novo usuário?',\n      'delete': '',\n      delete_plural: '',\n      delete_singular: '',\n      forAuthorizedPersons: 'Este relatório é somente para pessoas autorizadas.',\n      newPatientHasToBeCreated: 'Um novo paciente precisa ser criado... Por favor aguarde...',\n      noHistoryAvailable: 'Histórico não disponível.',\n      noItemsFound: 'Nenhum item encontrado',\n      noNotesAvailable: 'Nenhuma nota clinica adicional está diponível para essa visita.',\n      noUsersFound: 'Nenhum usuário encontrado.',\n      onBehalfOf: 'em nome de',\n      reportError: '',\n      requiredFieldsCorrectErrors: '',\n      saveActionException: '',\n      sorry: 'Desculpe, algo deu errado...',\n      userHasBeenSaved: 'O usuário foi salvo.',\n      userSaved: 'Usuário Salvo'\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: '',\n          appointmentDate: '',\n          appointmentType: '',\n          endDate: '',\n          location: '',\n          notes: '',\n          patient: '',\n          provider: '',\n          startDate: '',\n          status: '',\n          type: ''\n        },\n        names: {\n          plural: '',\n          singular: ''\n        }\n      },\n      attachment: { names: {\n          plural: '',\n          singular: ''\n        } },\n      form: { names: {\n          plural: '',\n          singular: ''\n        } },\n      imaging: {\n        names: '',\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      incident: { names: {\n          plural: '',\n          singular: ''\n        } },\n      item: { names: {\n          plural: '',\n          singular: ''\n        } },\n      lab: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      medication: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      note: { names: {\n          plural: '',\n          singular: ''\n        } },\n      patient: {\n        labels: { name: '' },\n        names: { singular: '' }\n      },\n      procedure: { names: {\n          plural: '',\n          singular: ''\n        } },\n      user: { names: {\n          plural: '',\n          singular: ''\n        } },\n      visit: { names: {\n          plural: '',\n          singular: ''\n        } },\n      vital: { names: {\n          plural: '',\n          singular: ''\n        } }\n    },\n    navigation: {\n      about: 'Sobre HospitalRun',\n      actions: {\n        login: 'Entrar',\n        logout: 'Sair',\n        selectLanguage: 'Selecione o idioma'\n      },\n      administration: 'Administração',\n      billing: 'Faturamento',\n      imaging: 'Imagem',\n      incident: 'Incidente',\n      inventory: 'Inventário',\n      labs: 'Laboratórios',\n      medication: 'Medicação',\n      patients: 'Pacientes',\n      scheduling: 'Agenda',\n      subnav: {\n        actions: 'Ações',\n        addAppointment: 'Adicionar Compromisso',\n        addressFields: 'Campos de Endereço',\n        admittedPatients: 'Pacientes Admitidos',\n        appointmentSearch: 'Pesquisar compromissos',\n        appointmentsCalendar: 'Compromissos',\n        appointmentsThisWeek: 'Compromissos dessa Semana',\n        completed: 'Concluídos',\n        currentIncidents: '',\n        customForms: 'Formulários customisados',\n        dispense: 'Dispensar',\n        history: '',\n        incidentCategories: '',\n        inventoryReceived: 'Inventário Recebido',\n        invoices: 'Faturas',\n        items: 'Itens',\n        loadDB: 'Carregar BD',\n        lookupLists: 'Listas de Pesquisa',\n        missedAppointments: 'Compromissos Esquecidos',\n        newIncident: '',\n        newInvoice: 'Nova Fatura',\n        newPatient: 'Novo Paciente',\n        newRequest: 'Nova Requisição',\n        newUser: 'Novo Usuário',\n        outpatient: 'Ambulatório',\n        patientListing: 'Lista de Pacientes',\n        priceProfiles: 'Perfis de Preços',\n        prices: 'Preços',\n        printHeader: '',\n        reports: 'Relatórios',\n        requests: 'Requisições',\n        returnMedication: 'Retorno de Medicação',\n        scheduleSurgery: 'Agendar Cirurgia',\n        theaterSchedule: 'Agenda de Cirurgias',\n        \"today'sAppointments\": 'Compromissos de Hoje',\n        userRoles: 'Perfis de Usuário',\n        users: 'Usuários',\n        workflow: 'Workflow'\n      }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: 'Notas adicionais',\n        assistant: 'Assistente',\n        caseComplexity: 'Complexidade do caso',\n        operationDescription: 'Descriçaão da operaçaão',\n        preOpPrimaryDiagnosis: 'Pre-op diagnóstico primário',\n        preOpSecondaryDiagnosis: 'Pre-op diagnóstico secundário',\n        surgeon: 'Cirurgião',\n        surgeryDate: 'Data da cirurgia'\n      },\n      messages: { reportSaved: 'O relatório da operação foi salvo.' },\n      titles: {\n        editTitle: 'Editar relatório de operação',\n        newTitle: 'Novo relatório da operação',\n        reportSaved: 'Relatório salvo'\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: 'Plano completo' },\n      labels: {\n        additionalNotes: 'Notas adicionais',\n        admissionInstructions: 'Instruções após admissaão',\n        caseComplexity: 'Complexidade do caso',\n        completedStatus: 'Completo',\n        droppedStatus: 'Desistiu',\n        operationDescription: 'Descriçaão da operação',\n        plannedStatus: 'Planejado',\n        status: 'Estado',\n        surgeon: 'Cirurgião'\n      },\n      messages: {\n        planCompleted: 'O plano de operação foi concluído. Agora você será direcionado para o relatório de operação.',\n        planSaved: 'O plano de operação foi salvo.'\n      },\n      titles: {\n        editTitle: 'Editar plano de operação',\n        newTitle: 'Novo plano de operação',\n        planCompleted: 'Plano completo',\n        planSaved: 'Plano salvo'\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: 'Adicionar Contato',\n        addExpense: 'Adicionar Despesa',\n        addFamilyMember: 'Adicionar Membro Familiar',\n        addOperativePlan: '',\n        backToPatients: 'Voltar para Lista de Pacientes',\n        download: '',\n        editOperativePlan: '',\n        newAppointment: 'Novo Compromisso',\n        newImaging: 'Nova Imagem',\n        newLab: 'Novo Laboratório',\n        newMedication: 'Nova Medicação',\n        newPatient: '+ novo paciente',\n        newPhoto: 'Nova Foto',\n        newVisit: 'Nova Visita',\n        patientCheckIn: '',\n        scheduleSurgery: ''\n      },\n      labels: {\n        admissionDate: 'Data de Admissão',\n        admit: 'Admitir',\n        bloodType: 'Tipo Sanguíneo',\n        caption: '',\n        civilStatus: 'Estado Civil',\n        clinic: 'Site(Filial) da Clínica',\n        contacts: '',\n        cost: 'Custo',\n        dateOfBirth: 'Data de Nascimento',\n        dateProcessed: 'Data de Processamento',\n        dischargeDate: 'Data de Pagamento',\n        dob: 'DatNasc',\n        education: 'Educação',\n        email: 'Email',\n        externalPatientId: 'ID de Paciente Externo',\n        firstName: 'Primeiro Nome',\n        income: 'Renda',\n        insurance: 'Seguro',\n        lastName: 'Último Nome',\n        middleName: 'Nome do meio',\n        monthlyCost: 'Custo Mensal',\n        occupation: 'Ocupação',\n        operativePlan: '',\n        parent: 'Responsável Legal',\n        patientDays: 'Dias do Paciente',\n        patientType: 'Tipo de Paciente',\n        patientTypeCharity: 'Caridade',\n        patientTypePrivate: 'Privado',\n        phone: 'Telefone',\n        placeOfBirth: 'Local de Nascimento',\n        primaryDiagnosis: 'Diagnósticos Primários',\n        referredBy: 'Indicado Por',\n        referredDate: 'Data de Indicação',\n        relationship: 'Relação com Paciente',\n        relationships: 'Relação',\n        religion: 'Religião',\n        secondaryDiagnosis: 'Diagnósticos Secundários',\n        sex: 'Sexo',\n        sexNotEntered: '',\n        sources: 'Fontes',\n        status: 'Situação do Paciente',\n        totalMontlyExpense: 'Total de Despesas Mensais'\n      },\n      messages: {\n        areYouSureDelete: 'Você tem certeza que deseja excluir este(a) {{object}}?',\n        createNewPatient: 'Criar novos registro de paciente?',\n        deletingPatient: '',\n        noPatientsFound: 'Nenhum paciente encontrado.',\n        notFoundQuickAdd: 'O paciente <strong>{{patientFullName}}</strong> não pode ser encontrato.  Se você deseja cadastras um novo paciente, preencha as informações abaixo.  Caso contrário clique em Cancelar para voltar.',\n        photoFileRequired: '',\n        savedPatient: 'O registro de paciente para {{displayName}} foi salvo.'\n      },\n      navigation: {\n        appointments: 'Compromissos',\n        general: 'Geral',\n        history: 'Histórico',\n        imaging: 'Imagem',\n        labs: 'Laboratórios',\n        medication: 'Medicação',\n        photos: 'Fotos',\n        socialWork: 'Assitência Social',\n        visits: 'Visitas'\n      },\n      notes: {\n        newNote: 'Nova Nota para',\n        onBehalfOfCopy: 'em nome de',\n        onBehalfOfLabel: 'Em Nome de',\n        pleaseSelectAVisit: 'Por favor selecione uma visita',\n        updateNote: 'Atualizando Nota de'\n      },\n      titles: {\n        addContact: '',\n        addPhoto: 'Adicionar Foto',\n        additionalContacts: 'Contatos Adicionais',\n        admissionsDetail: '',\n        admissionsSummary: '',\n        admittedPatients: '',\n        'delete': 'Excluir Paciente',\n        deleteContact: 'Excluir Contato',\n        deleteExpense: 'Excluir Despesa',\n        deleteFamilyMember: 'Excluir Membro Familiar',\n        deletePatientRecord: '',\n        deletePhoto: 'Excluir Foto',\n        diagnosticTesting: '',\n        dischargesDetail: '',\n        dischargesSummary: '',\n        edit: 'Editar Paciente',\n        editPhoto: 'Editar Foto',\n        expenses: 'Despesas',\n        familyInfo: 'Informação Familiar',\n        familyInformation: 'Informação Familiar',\n        'new': 'Novo Paciente',\n        outpatientsForDate: '',\n        patient: 'Relatório de Paciente',\n        patientListing: 'Lista de Pacientes',\n        patientReport: '',\n        patientStatus: '',\n        proceduresDetail: '',\n        proceduresSummary: '',\n        savedPatient: 'Paciente Salvo',\n        socialWork: 'Despesa',\n        todaysOutpatients: '',\n        totalPatientDays: '',\n        totalPatientDaysDetailed: '',\n        visit: ''\n      }\n    },\n    print: { invoice: {\n        labels: {\n          billedBy: 'Faturado por:',\n          billedDate: 'Data de Faturamento:',\n          dateAdmitted: 'ADMITIDO:',\n          dateDischarged: 'PAGAMENTO:',\n          dischargeNotes: 'Notas de Pagamento:',\n          patientAddress: 'ENDEREÇO:',\n          patientAge: 'IDADE:',\n          patientId: 'PACIENTE #:',\n          patientName: 'NOME DO PACIENTE:',\n          remarks: 'Observações:',\n          spacer: '__________________________________________'\n        },\n        messages: { whereConducted: 'foram deduzidos durante minha internação' },\n        titles: {\n          billingStatement: 'DECLARAÇÃO DO FATURAMENTO',\n          patientMember: 'Paciente-Membro',\n          patients: 'DO PACIENTE',\n          relContact: 'Relações/Contato'\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: 'Adicionar Medicação' },\n      labels: { medicationUsed: 'Medicação Usada' },\n      messages: { saved: 'O registro de procedimento foi salvo.' },\n      titles: {\n        addChargeItem: 'Adicionar Item de Cobrança',\n        addMedicationUsed: 'Adicionar Medicação Usada',\n        deleteChargeItem: 'Excluir Item de Cobrança',\n        deleteMedicationUsed: 'Excluir Medicação Usada',\n        edit: 'Editar Procedimento',\n        editChargeItem: 'Editar Item de Cobrança',\n        editMedicationUsed: 'Editar Medicação Usada',\n        medicationUsed: 'Medicação Usada',\n        'new': 'Novo Procedimento',\n        saved: 'Procedimento Salvo'\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: '',\n        allProcedures: '',\n        completedBy: '',\n        dischargeDate: '',\n        examiner: '',\n        images: '',\n        labs: '',\n        location: '',\n        medications: '',\n        nextAppointment: '',\n        nextAppointments: '',\n        notes: {\n          author: '',\n          date: '',\n          title: ''\n        },\n        operativePlan: {\n          description: '',\n          instructions: '',\n          procedures: '',\n          title: ''\n        },\n        primaryDiagnosis: '',\n        procedures: '',\n        secondaryDiagnosis: '',\n        visitDate: '',\n        visitType: ''\n      },\n      messages: {\n        'delete': '',\n        saved: ''\n      },\n      titles: {\n        dischargeReport: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        opdReport: '',\n        saved: ''\n      }\n    },\n    user: {\n      plusNewUser: '+ novo usuário',\n      usersPageTile: 'Lista de Usuários'\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: 'Adicionar Diagnóstico',\n        checkIn: 'Entrada',\n        checkOut: '',\n        discharge: '',\n        newAppointment: 'Novo Compromisso',\n        newDischargeReport: '',\n        newOPDReport: '',\n        newProcedure: 'Novo Procedimento',\n        newVitals: 'Novos Sinais Vitais'\n      },\n      labels: {\n        appointment: '',\n        authoredBy: 'Autorizado Por',\n        checkInTime: '',\n        checkOutTime: '',\n        createNewPatient: '',\n        diagnosis: 'Diagnósticos',\n        examiner: 'Examinador',\n        finalDiagnosis: 'Diagnósticos de Finais/Faturamento',\n        haveAppointment: '',\n        haveDoneOrders: '',\n        noAppointment: '',\n        ordersDone: '',\n        ordersNotDone: '',\n        patientToCheckIn: '',\n        procedure: 'Procedimentos',\n        procedureDate: '',\n        reasonForVisit: '',\n        reportType: 'Tipo do relatório',\n        status: 'Situação de Visita',\n        statusAdmitted: '',\n        statusCheckedIn: '',\n        statusCheckedOut: '',\n        statusDischarged: '',\n        visitDate: '',\n        visitInformation: 'Imformação de Visita',\n        visitType: 'Tipo de Visita'\n      },\n      messages: {\n        checkOut: '',\n        checkedOut: '',\n        discharged: '',\n        patientCheckedIn: '',\n        patientCreatedAndCheckedIn: '',\n        visitAndPatientSaved: 'Os registros de visita e paciente foram salvos.',\n        visitSaved: 'O registro de visita foi salvo.'\n      },\n      navigation: {\n        charges: '',\n        notes: 'Notas',\n        orders: '',\n        procedures: 'Procedimentos',\n        reports: 'Relatórios',\n        vitals: 'Sinais Vitais'\n      },\n      titles: {\n        additionalDiagnoses: 'Diagnósticos Adicionais',\n        checkOut: 'Saída de Paciente',\n        checkedIn: '',\n        checkedOut: '',\n        discharged: '',\n        editVisit: 'Editar Visita',\n        newVisit: 'Nova Visita',\n        patientCheckIn: 'Entrada de Paciente',\n        visitSaved: 'Visita Salva'\n      }\n    },\n    vitals: { labels: {\n        dateRecorded: 'Data de Gravação',\n        dbp: 'PAD',\n        heartRate: 'Frequência Cardíaca',\n        height: 'Altura',\n        respiratoryRate: 'Frequência Respiratória',\n        sbp: 'PAS',\n        temperature: 'Temperatura',\n        weight: 'Peso'\n      } }\n  };\n});","define('hospitalrun/tests/locales/pt-br/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/pt-br/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/pt-br/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/ru/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    admin: {\n      address: {\n        address1Label: '',\n        address2Label: '',\n        address3Label: '',\n        address4Label: '',\n        addressLabel: '',\n        editTitle: '',\n        include1Label: '',\n        include2Label: '',\n        include3Label: '',\n        include4Label: '',\n        messages: { addressSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      addressOptions: '',\n      customForms: {\n        buttons: {\n          addField: '',\n          moveDown: '',\n          moveUp: '',\n          newForm: '',\n          preview: ''\n        },\n        labels: {\n          alwaysInclude: '',\n          checkbox: '',\n          colSpan: '',\n          columns: '',\n          customForm: '',\n          dischargeReportFormType: '',\n          formName: '',\n          formType: '',\n          incidentFormType: '',\n          includeOtherOption: '',\n          labFormType: '',\n          label: '',\n          newForm: '',\n          opdReportFormType: '',\n          operativePlanFormType: '',\n          otherOptionLabel: '',\n          patientFormType: '',\n          property: '',\n          radio: '',\n          select: '',\n          socialworkFormType: '',\n          text: '',\n          textarea: '',\n          visitFormType: ''\n        },\n        messages: { formSaved: '' },\n        titles: {\n          checkboxValues: '',\n          customForms: '',\n          deleteForm: '',\n          dropDownValues: '',\n          editCustomForm: '',\n          fields: '',\n          formSaved: '',\n          newCustomForm: '',\n          radioValues: ''\n        }\n      },\n      header: {\n        editTitle: '',\n        facilityName: '',\n        headerLabel: '',\n        headerLine1: '',\n        headerLine2: '',\n        headerLine3: '',\n        logoURL: '',\n        messages: { headerSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      loadDb: '',\n      loaddb: {\n        displayAlertMessage: '',\n        displayAlertTitle: '',\n        editTitle: '',\n        errorDisplayAlertMessage: '',\n        errorDisplayAlertTitle: '',\n        progressMessage: '',\n        progressTitle: ''\n      },\n      lookup: {\n        aisleLocationList: '',\n        alertImportListMessage: '',\n        alertImportListSaveMessage: '',\n        alertImportListSaveTitle: '',\n        alertImportListTitle: '',\n        alertImportListUpdateMessage: '',\n        alertImportListUpdateTitle: '',\n        anesthesiaTypes: '',\n        anesthesiologists: '',\n        billingCategories: '',\n        clinicList: '',\n        countryList: '',\n        cptCodeList: '',\n        diagnosisList: '',\n        edit: { template: {\n            addTitle: '',\n            editTitle: '',\n            labelTitle: '',\n            updateButtonTextAdd: '',\n            updateButtonTextUpdate: ''\n          } },\n        expenseAccountList: '',\n        imagingPricingTypes: '',\n        incidentDepartments: '',\n        inventoryTypes: '',\n        labPricingTypes: '',\n        pageTitle: '',\n        patientStatusList: '',\n        physicianList: '',\n        procedureList: '',\n        procedureLocations: '',\n        procedurePricingTypes: '',\n        radiologists: '',\n        titles: { deleteLookupValue: '' },\n        unitTypes: '',\n        vendorList: '',\n        visitLocationList: '',\n        visitTypes: '',\n        wardPricingTypes: '',\n        warehouseList: ''\n      },\n      lookupLists: '',\n      roles: {\n        capability: {\n          addAllergy: '',\n          addAppointment: '',\n          addBillingDiagnosis: '',\n          addCharge: '',\n          addDiagnosis: '',\n          addImaging: '',\n          addIncident: '',\n          addIncidentCategory: '',\n          addInventoryItem: '',\n          addInventoryPurchase: '',\n          addInventoryRequest: '',\n          addInvoice: '',\n          addLab: '',\n          addMedication: '',\n          addNote: '',\n          addOperationReport: '',\n          addOperativePlan: '',\n          addPatient: '',\n          addPayment: '',\n          addPhoto: '',\n          addPricing: '',\n          addPricingProfile: '',\n          addProcedure: '',\n          addSocialwork: '',\n          addVisit: '',\n          addVitals: '',\n          adjustInventoryLocation: '',\n          admin: '',\n          admitPatient: '',\n          appointments: '',\n          billing: '',\n          completeImaging: '',\n          completeLab: '',\n          defineUserRoles: '',\n          deleteAppointment: '',\n          deleteDiagnosis: '',\n          deleteImaging: '',\n          deleteIncident: '',\n          deleteIncidentCategory: '',\n          deleteInventoryItem: '',\n          deleteInvoice: '',\n          deleteLab: '',\n          deleteMedication: '',\n          deleteNote: '',\n          deletePatient: '',\n          deletePhoto: '',\n          deletePricing: '',\n          deletePricingProfile: '',\n          deleteProcedure: '',\n          deleteSocialwork: '',\n          deleteVisit: '',\n          deleteVitals: '',\n          dischargePatient: '',\n          editInvoice: '',\n          fulfillInventory: '',\n          fulfillMedication: '',\n          generateIncidentReport: '',\n          imaging: '',\n          incident: '',\n          inventory: '',\n          invoices: '',\n          labs: '',\n          loadDb: '',\n          manageIncidents: '',\n          medication: '',\n          overrideInvoice: '',\n          patientReports: '',\n          patients: '',\n          pricing: '',\n          updateConfig: '',\n          visits: ''\n        },\n        messages: { roleSaved: '' },\n        titles: { roleSaved: '' }\n      },\n      userRoles: '',\n      users: '',\n      visitForms: {\n        labels: {\n          followup: '',\n          form: '',\n          initial: '',\n          visitType: ''\n        },\n        titles: { visitForms: '' }\n      },\n      workflow: {\n        admissionDepositLabel: '',\n        clinicPrepaymentLabel: '',\n        editTitle: '',\n        followupPrepaymentLabel: '',\n        messages: { optionsSaved: '' },\n        newTitle: '',\n        outpatientImagingLabel: '',\n        outpatientLabLabel: '',\n        outpatientMedicationLabel: '',\n        titles: { optionsSaved: '' },\n        workflowLabel: ''\n      }\n    },\n    alerts: {\n      errorExclamation: '',\n      pleaseWait: '',\n      reportError: '',\n      warningExclamation: ''\n    },\n    allergies: {\n      buttons: { addAllergy: '' },\n      labels: {\n        allergyName: '',\n        patientAllergy: ''\n      },\n      titles: {\n        addAllergy: '',\n        editAllergy: ''\n      }\n    },\n    application: {\n      messages: { sessionExpired: '' },\n      titles: { sessionExpired: '' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '',\n        scheduleSurgery: ''\n      },\n      calendarTitle: '',\n      currentScreenTitle: '',\n      editTitle: '',\n      labels: {\n        noLocation: '',\n        selectedStartingDate: ''\n      },\n      messages: {\n        appointmentSaved: '',\n        endTimeLaterThanStart: ''\n      },\n      missed: '',\n      newTitle: '',\n      searchTitle: '',\n      sectionTitle: '',\n      thisWeek: '',\n      titles: {\n        appointmentSaved: '',\n        editSurgicalAppointment: '',\n        newSurgicalAppointment: '',\n        theaterSchedule: ''\n      },\n      todayTitle: ''\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: '',\n        noPricingItems: '',\n        noPricingProfiles: ''\n      },\n      buttons: {\n        addOverride: '',\n        createInvoice: ''\n      },\n      labels: {\n        actualCharges: '',\n        discountAmount: '',\n        discountPercentage: '',\n        externalInvoiceNumber: '',\n        hmoCom: '',\n        insurance: '',\n        paymentProfile: '',\n        paymentsDeposits: '',\n        pricingPanelOverrides: '',\n        pricingProfile: ''\n      }\n    },\n    buttons: {\n      add: 'Добавить',\n      addItem: '',\n      addLineItem: '',\n      addValue: '',\n      addVisit: '',\n      allRequests: '',\n      barcode: '',\n      cancel: 'Отметить',\n      clear: '',\n      close: '',\n      complete: 'Готово',\n      'delete': '',\n      dispense: '',\n      edit: '',\n      filter: '',\n      fulfill: '',\n      'import': '',\n      loadFile: '',\n      newItem: '',\n      newNote: '',\n      newRequest: '',\n      newRequestPlus: '',\n      newUser: '',\n      ok: 'Ок',\n      remove: '',\n      returnButton: 'Вернутся',\n      search: '',\n      showAll: '',\n      showFewer: '',\n      update: 'Обновить'\n    },\n    components: {\n      chargesByTypeTab: { charges: '' },\n      customFormManager: { buttons: { addForm: '' } },\n      dateTimePicker: {\n        amHour: '',\n        midnight: '',\n        noon: '',\n        pmHour: ''\n      },\n      imageUpload: { messages: { selectValidImageFile: '' } },\n      operativeProcedures: {\n        buttons: { addProcedure: '' },\n        labels: { procedure: '' },\n        titles: { procedures: '' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: '',\n          newLab: '',\n          newMedication: ''\n        },\n        labels: {\n          imagingOrderType: '',\n          labOrderType: '',\n          medicationOrderType: '',\n          orderType: ''\n        }\n      },\n      priceList: { charges: '' },\n      quantityCalc: { result: '' },\n      quantityConv: {\n        conversion: '',\n        unit: ''\n      },\n      sortableColumn: { labels: { selectAll: '' } },\n      takePhoto: {\n        camera: '',\n        how: '',\n        labels: {\n          takeAPicture: '',\n          uploadAFile: ''\n        },\n        photo: '',\n        preview: '',\n        takePhoto: '',\n        uploadFile: ''\n      },\n      upcomingAppointments: {\n        labels: {\n          date: '',\n          location: '',\n          type: '',\n          'with': ''\n        },\n        titles: { upcomingAppointments: '' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: '' },\n      labels: { formToAdd: '' },\n      titles: { addCustomForm: '' }\n    },\n    dashboard: {\n      setup: '',\n      title: 'Что вы хотите сделать?'\n    },\n    dates: {\n      'long': '',\n      longOmitDays: '',\n      longOmitDaysPlural: '',\n      longOmitDaysYears: '',\n      longOmitYears: '',\n      longPlural: '',\n      'short': '',\n      shortOmitYears: ''\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: '',\n        date: '',\n        diagnosis: '',\n        secondaryDiagnosis: ''\n      },\n      titles: {\n        addDiagnosis: '',\n        editDiagnosis: ''\n      }\n    },\n    errors: {\n      accepted: '',\n      blank: '',\n      confirmation: '',\n      empty: '',\n      equalTo: '',\n      even: '',\n      exclusion: '',\n      greaterThan: '',\n      greaterThanOrEqualTo: '',\n      inclusion: '',\n      invalid: '',\n      invalidNumber: '',\n      lessThan: '',\n      lessThanOrEqualTo: '',\n      notANumber: '',\n      notAnInteger: '',\n      odd: '',\n      otherThan: '',\n      present: '',\n      result: '',\n      tooLong: '',\n      tooShort: '',\n      wrongLength: ''\n    },\n    headings: { chargedItems: '' },\n    imaging: {\n      alerts: {\n        completedMessage: 'Запрос на визуализацию удовлетворён.',\n        completedTitle: 'Визуализация выполнена',\n        savedMessage: 'Запрос на визуализацию сохранён.',\n        savedTitle: 'Запрос сохранён'\n      },\n      buttons: { newButton: '+ новый запрос' },\n      labels: {\n        addNewVisit: '--Добавить новый тип осмотра--',\n        radiologist: 'Радиолог'\n      },\n      messages: { noCompleted: 'Не найдено выполненых запросов.' },\n      pageTitle: 'Запросы на визуализацию',\n      sectionTitle: 'Визуализация',\n      titles: {\n        completedImaging: 'Выполненые запросы',\n        editTitle: 'Редактировать запрос на визуализацию',\n        newTitle: 'Новый запрос на визуализацию'\n      }\n    },\n    incident: {\n      buttons: {\n        add: '',\n        addForm: '',\n        addItem: '',\n        cancel: '',\n        'delete': '',\n        download: '',\n        edit: '',\n        'export': '',\n        generateRep: '',\n        newAttachment: '',\n        newCategory: '',\n        newIncident: '',\n        newNote: ''\n      },\n      labels: {\n        actions: '',\n        addedBy: '',\n        category: '',\n        categoryItem: '',\n        date: '',\n        dateRecorded: '',\n        department: '',\n        description: '',\n        endDate: '',\n        givenBy: '',\n        howToAddAttachment: '',\n        incidentDate: '',\n        incidentId: '',\n        item: '',\n        lastUpdated: '',\n        note: '',\n        patientId: '',\n        patientImpacted: '',\n        reportType: '',\n        reportedBy: '',\n        reportedDate: '',\n        reportedTo: '',\n        sentinelEvent: '',\n        startDate: '',\n        status: '',\n        statusActive: '',\n        statusClosed: '',\n        statusFollowup: '',\n        statusReported: '',\n        title: '',\n        total: '',\n        updatedBy: ''\n      },\n      messages: {\n        attachmentFileRequired: '',\n        createNew: '',\n        createNewIncidentCategory: '',\n        fillIn: '',\n        incidentCategorySaved: '',\n        noClosedIncidents: '',\n        noIncidentCategoriesFound: '',\n        noIncidents: '',\n        saved: '',\n        selectExistingPatient: ''\n      },\n      titles: {\n        addAttachment: '',\n        addCategoryItem: '',\n        addNote: '',\n        attachments: '',\n        closed: '',\n        current: '',\n        deleteAttachment: '',\n        deleteIncident: '',\n        deleteIncidentCategory: '',\n        deleteItem: '',\n        deleteNote: '',\n        editAttachment: '',\n        editIncident: '',\n        editIncidentCategory: '',\n        editNote: '',\n        general: '',\n        history: '',\n        incidentCategories: '',\n        incidentCategoryItem: '',\n        incidentCategoryName: '',\n        incidentCategorySaved: '',\n        incidentSaved: '',\n        incidents: '',\n        incidentsByCategory: '',\n        incidentsByDepartment: '',\n        newIncident: '',\n        newIncidentCategory: '',\n        notes: '',\n        reports: ''\n      }\n    },\n    inventory: {\n      edit: {\n        cost: '',\n        delivered: '',\n        location: '',\n        prescription: '',\n        pulled: '',\n        quantity: '',\n        reason: '',\n        returned: '',\n        transferredFrom: '',\n        transferredTo: ''\n      },\n      labels: {\n        action: '',\n        add: '',\n        addAdjustmentType: '',\n        adjust: '',\n        adjustmentDate: '',\n        adjustmentFor: '',\n        adjustmentType: '',\n        aisle: '',\n        aisleLocation: '',\n        allInventory: '',\n        allItems: '',\n        availableQuantity: '',\n        billTo: '',\n        consumePurchases: '',\n        consumptionRate: '',\n        cost: '',\n        costPerUnit: '',\n        crossReference: '',\n        currentQuantity: '',\n        dateCompleted: '',\n        dateEffective: '',\n        dateEnd: '',\n        dateReceived: '',\n        dateStart: '',\n        dateTransferred: '',\n        daysLeft: '',\n        deleteItem: '',\n        deliveryAisle: '',\n        deliveryLocation: '',\n        details: '',\n        distributionUnit: '',\n        editItem: '',\n        expense: '',\n        expirationDate: '',\n        fulfillRequest: '',\n        fulfillRequestNow: '',\n        gift: '',\n        giftInKindNo: '',\n        giftInKindYes: '',\n        giftUsage: '',\n        inventoryConsumed: '',\n        inventoryItem: '',\n        inventoryObsolence: '',\n        invoiceItems: '',\n        invoiceLineItem: '',\n        invoiceNumber: '',\n        item: '',\n        itemNumber: '',\n        items: '',\n        location: '',\n        locations: '',\n        markAsConsumed: '',\n        name: '',\n        newItem: '',\n        originalQuantity: '',\n        print: '',\n        printBarcode: '',\n        printer: '',\n        pullFrom: '',\n        purchaseCost: '',\n        purchaseInfo: '',\n        purchases: '',\n        quantity: '',\n        quantityAvailable: '',\n        quantityOnHand: '',\n        quantityRequested: '',\n        rank: '',\n        reason: '',\n        remove: '',\n        removeAdjustmentType: '',\n        reorderPoint: '',\n        requestedItems: '',\n        returnAdjustmentType: '',\n        returnToVendorAdjustmentType: '',\n        salePricePerUnit: '',\n        save: '',\n        serialNumber: '',\n        total: '',\n        totalCost: '',\n        totalReceived: '',\n        transaction: '',\n        transactions: '',\n        transfer: '',\n        transferFrom: '',\n        transferTo: '',\n        transferToAisle: '',\n        unit: '',\n        unitCost: '',\n        vendor: '',\n        vendorItemNumber: '',\n        writeOffAdjustmentType: '',\n        xref: ''\n      },\n      messages: {\n        adjust: '',\n        createRequest: 'Создать новый запрос?',\n        itemNotFound: '',\n        loading: '',\n        noItems: '',\n        noRequests: 'Запросов не найдено.',\n        purchaseSaved: '',\n        quantity: '',\n        removeItem: '',\n        removeItemRequest: '',\n        requestFulfilled: '',\n        requestUpdated: '',\n        warning: ''\n      },\n      reports: {\n        adjustment: '',\n        daysSupply: '',\n        expenseDetail: '',\n        expenseSum: '',\n        expiration: '',\n        'export': '',\n        fields: '',\n        finance: '',\n        generate: '',\n        invLocation: '',\n        invValuation: '',\n        purchaseDetail: '',\n        purchaseSum: '',\n        reportType: '',\n        rows: {\n          adjustments: '',\n          adjustmentsTotal: '',\n          balanceBegin: '',\n          balanceEnd: '',\n          category: '',\n          consumed: '',\n          consumedGik: '',\n          consumedGikTotal: '',\n          consumedPuchases: '',\n          consumedPurchasesTotal: '',\n          consumedTotal: '',\n          errInFinSum: '',\n          errInFindPur: '',\n          errInFindReq: '',\n          expensesFor: '',\n          noAccount: '',\n          subtotal: '',\n          subtotalFor: '',\n          total: '',\n          totalFor: '',\n          totalPurchases: '',\n          transfer1: '',\n          trasnfer2: ''\n        },\n        stockTransferDetail: '',\n        stockTransferSum: '',\n        stockUsageDetail: '',\n        stockUsageSum: '',\n        titleDateRange: '',\n        titleSingleDate: ''\n      },\n      titles: {\n        addPurchase: '',\n        addRequest: '',\n        adjustment: '',\n        editPurchase: '',\n        editRequest: '',\n        inventoryItem: '',\n        inventoryReport: '',\n        purchaseSaved: '',\n        quickAddTitle: '',\n        removeItem: '',\n        requestFulfilled: '',\n        requestUpdated: '',\n        transfer: '',\n        warning: ''\n      }\n    },\n    labels: {\n      action: 'Действие',\n      actions: 'Действия',\n      addNewOutpatientVisit: '',\n      address: '',\n      age: 'Возраст',\n      allDay: '',\n      amount: '',\n      anesthesia: '',\n      assisting: '',\n      balanceDue: '',\n      billDate: '',\n      billTo: '',\n      category: '',\n      completed: 'Выполненые',\n      country: '',\n      cptcode: '',\n      creditTo: '',\n      date: '',\n      dateCompleted: 'Дата Выполнения',\n      dateOfBirth: '',\n      dateOfBirthShort: '',\n      datePaid: '',\n      dateRequested: 'Дата Запроса',\n      'delete': '',\n      deleteRequest: '',\n      deleteUser: '',\n      department: '',\n      description: '',\n      discount: '',\n      displayName: '',\n      docRead: '',\n      docWritten: '',\n      edit: 'Редактировать',\n      editUser: '',\n      email: '',\n      endDate: '',\n      endTime: '',\n      excess: '',\n      expenseTo: '',\n      fileLoadSuccessful: '',\n      fileName: '',\n      fileToLoad: '',\n      fulfill: 'Отправить',\n      fulfillRequest: '',\n      fulfillRequestNow: '',\n      fulfilled: '',\n      grandTotal: '',\n      id: 'Номер',\n      imageOrders: '',\n      imagingType: 'Тип визуализации',\n      importFile: '',\n      invoiceId: '',\n      labOrders: '',\n      lineItems: '',\n      loading: '',\n      location: '',\n      lookupType: '',\n      medication: '',\n      name: 'Имя',\n      newUser: '',\n      note: '',\n      notes: 'Заметки',\n      number: '',\n      on: '',\n      password: '',\n      patient: 'Пациент',\n      payments: '',\n      physician: '',\n      prescriber: '',\n      prescription: '',\n      prescriptionDate: '',\n      price: '',\n      print: '',\n      procedures: '',\n      provider: '',\n      pullFrom: '',\n      quantity: 'Количество',\n      remarks: '',\n      requestedBy: 'Запрошен',\n      requestedOn: 'Запрошен',\n      requests: 'Ожидающие',\n      result: 'Результат',\n      results: 'Результаты',\n      role: '',\n      search: '',\n      sex: 'Пол',\n      startDate: '',\n      startTime: '',\n      status: '',\n      takenBy: '',\n      total: '',\n      type: '',\n      userCanAddNewValue: '',\n      username: '',\n      value: '',\n      view: '',\n      visit: 'Осмотр',\n      'with': ''\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: '',\n        requestCompletedTitle: '',\n        requestSavedMessage: '',\n        requestSavedTitle: ''\n      },\n      buttons: { newButton: '' },\n      completedTitle: '',\n      deleteTitle: '',\n      editTitle: '',\n      labels: {\n        addNewVisit: '',\n        labType: ''\n      },\n      messages: {\n        createNewRecord: '',\n        noCompleted: '',\n        noItemsFound: ''\n      },\n      newTitle: '',\n      requestsTitle: '',\n      sectionTitle: ''\n    },\n    languages: {\n      en: 'английский',\n      fr: 'Французский',\n      es: 'испанский',\n      de: 'Немецкий',\n      ru: 'русский',\n      'es-co': 'Испанский (колумбийский)',\n      'pt-br': 'Португальский (бразильский)',\n      tr: 'турецкий',\n      ur: 'урду'\n    },\n    loading: {\n      messages: {\n        '0': '',\n        '1': '',\n        '2': '',\n        '3': '',\n        '4': '',\n        '5': '',\n        '6': '',\n        '7': '',\n        '8': '',\n        '9': '',\n        '10': '',\n        '11': ''\n      },\n      progressBar: { progress: '' }\n    },\n    login: {\n      labels: {\n        password: 'Пароль',\n        signIn: 'Войти',\n        username: 'Имя пользователя'\n      },\n      messages: {\n        error: 'Неверное имя пользователя или пароль.',\n        signIn: 'войдите в систему'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: '',\n        returnedMessage: '',\n        returnedTitle: '',\n        savedMessage: '',\n        savedTitle: ''\n      },\n      buttons: {\n        dispenseMedication: '',\n        newButton: '',\n        returnMedication: ''\n      },\n      labels: {\n        adjustmentDate: '',\n        creditToAccount: '',\n        quantityDispensed: '',\n        quantityDistributed: '',\n        quantityRequested: '',\n        quantityToReturn: '',\n        refills: '',\n        returnAisle: '',\n        returnLocation: '',\n        returnReason: ''\n      },\n      messages: { createNew: '' },\n      pageTitle: '',\n      returnMedication: '',\n      sectionTitle: '',\n      titles: {\n        completedMedication: '',\n        editMedicationRequest: '',\n        newMedicationRequest: ''\n      }\n    },\n    messages: {\n      createNewRecord: 'Создать новую запись?',\n      createNewUser: '',\n      'delete': '',\n      delete_plural: '',\n      delete_singular: '',\n      forAuthorizedPersons: 'Этот отчет предназначен только для уполномоченных лиц.',\n      newPatientHasToBeCreated: '',\n      noHistoryAvailable: '',\n      noItemsFound: 'Ничего не найдено.',\n      noNotesAvailable: '',\n      noUsersFound: '',\n      onBehalfOf: '',\n      reportError: '',\n      requiredFieldsCorrectErrors: '',\n      saveActionException: '',\n      sorry: '',\n      userHasBeenSaved: '',\n      userSaved: ''\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: '',\n          appointmentDate: '',\n          appointmentType: '',\n          endDate: '',\n          location: '',\n          notes: '',\n          patient: '',\n          provider: '',\n          startDate: '',\n          status: '',\n          type: ''\n        },\n        names: {\n          plural: '',\n          singular: ''\n        }\n      },\n      attachment: { names: {\n          plural: '',\n          singular: ''\n        } },\n      form: { names: {\n          plural: '',\n          singular: ''\n        } },\n      imaging: {\n        names: '',\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      incident: { names: {\n          plural: '',\n          singular: ''\n        } },\n      item: { names: {\n          plural: '',\n          singular: ''\n        } },\n      lab: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      medication: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      note: { names: {\n          plural: '',\n          singular: ''\n        } },\n      patient: {\n        labels: { name: '' },\n        names: { singular: '' }\n      },\n      procedure: { names: {\n          plural: '',\n          singular: ''\n        } },\n      user: { names: {\n          plural: '',\n          singular: ''\n        } },\n      visit: { names: {\n          plural: '',\n          singular: ''\n        } },\n      vital: { names: {\n          plural: '',\n          singular: ''\n        } }\n    },\n    navigation: {\n      about: '',\n      actions: {\n        login: '',\n        logout: '',\n        selectLanguage: 'Выберите язык'\n      },\n      administration: '',\n      billing: '',\n      imaging: '',\n      incident: '',\n      inventory: '',\n      labs: '',\n      medication: '',\n      patients: '',\n      scheduling: '',\n      subnav: {\n        actions: '',\n        addAppointment: '',\n        addressFields: '',\n        admittedPatients: '',\n        appointmentSearch: '',\n        appointmentsCalendar: '',\n        appointmentsThisWeek: '',\n        completed: '',\n        currentIncidents: '',\n        customForms: '',\n        dispense: '',\n        history: '',\n        incidentCategories: '',\n        inventoryReceived: '',\n        invoices: '',\n        items: '',\n        loadDB: '',\n        lookupLists: '',\n        missedAppointments: '',\n        newIncident: '',\n        newInvoice: '',\n        newPatient: '',\n        newRequest: '',\n        newUser: '',\n        outpatient: '',\n        patientListing: '',\n        priceProfiles: '',\n        prices: '',\n        printHeader: '',\n        reports: '',\n        requests: '',\n        returnMedication: '',\n        scheduleSurgery: '',\n        theaterSchedule: '',\n        \"today'sAppointments\": '',\n        userRoles: '',\n        users: '',\n        workflow: ''\n      }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: '',\n        assistant: '',\n        caseComplexity: '',\n        operationDescription: '',\n        preOpPrimaryDiagnosis: '',\n        preOpSecondaryDiagnosis: '',\n        surgeon: '',\n        surgeryDate: ''\n      },\n      messages: { reportSaved: '' },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        reportSaved: ''\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: '' },\n      labels: {\n        additionalNotes: '',\n        admissionInstructions: '',\n        caseComplexity: '',\n        completedStatus: '',\n        droppedStatus: '',\n        operationDescription: '',\n        plannedStatus: '',\n        status: '',\n        surgeon: ''\n      },\n      messages: {\n        planCompleted: '',\n        planSaved: ''\n      },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        planCompleted: '',\n        planSaved: ''\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: '',\n        addExpense: '',\n        addFamilyMember: '',\n        addOperativePlan: '',\n        backToPatients: '',\n        download: '',\n        editOperativePlan: '',\n        newAppointment: '',\n        newImaging: '',\n        newLab: '',\n        newMedication: '',\n        newPatient: '',\n        newPhoto: '',\n        newVisit: '',\n        patientCheckIn: '',\n        scheduleSurgery: ''\n      },\n      labels: {\n        admissionDate: '',\n        admit: '',\n        bloodType: '',\n        caption: '',\n        civilStatus: '',\n        clinic: '',\n        contacts: '',\n        cost: '',\n        dateOfBirth: '',\n        dateProcessed: '',\n        dischargeDate: '',\n        dob: '',\n        education: '',\n        email: '',\n        externalPatientId: '',\n        firstName: '',\n        income: '',\n        insurance: '',\n        lastName: '',\n        middleName: '',\n        monthlyCost: '',\n        occupation: '',\n        operativePlan: '',\n        parent: '',\n        patientDays: '',\n        patientType: '',\n        patientTypeCharity: '',\n        patientTypePrivate: '',\n        phone: '',\n        placeOfBirth: '',\n        primaryDiagnosis: '',\n        referredBy: '',\n        referredDate: '',\n        relationship: '',\n        relationships: '',\n        religion: '',\n        secondaryDiagnosis: '',\n        sex: '',\n        sexNotEntered: '',\n        sources: '',\n        status: '',\n        totalMontlyExpense: ''\n      },\n      messages: {\n        areYouSureDelete: '',\n        createNewPatient: '',\n        deletingPatient: '',\n        noPatientsFound: '',\n        notFoundQuickAdd: '',\n        photoFileRequired: '',\n        savedPatient: ''\n      },\n      navigation: {\n        appointments: '',\n        general: '',\n        history: '',\n        imaging: '',\n        labs: '',\n        medication: '',\n        photos: '',\n        socialWork: '',\n        visits: ''\n      },\n      notes: {\n        newNote: '',\n        onBehalfOfCopy: '',\n        onBehalfOfLabel: '',\n        pleaseSelectAVisit: '',\n        updateNote: ''\n      },\n      titles: {\n        addContact: '',\n        addPhoto: '',\n        additionalContacts: '',\n        admissionsDetail: '',\n        admissionsSummary: '',\n        admittedPatients: '',\n        'delete': '',\n        deleteContact: '',\n        deleteExpense: '',\n        deleteFamilyMember: '',\n        deletePatientRecord: '',\n        deletePhoto: '',\n        diagnosticTesting: '',\n        dischargesDetail: '',\n        dischargesSummary: '',\n        edit: '',\n        editPhoto: '',\n        expenses: '',\n        familyInfo: '',\n        familyInformation: '',\n        'new': '',\n        outpatientsForDate: '',\n        patient: '',\n        patientListing: '',\n        patientReport: '',\n        patientStatus: '',\n        proceduresDetail: '',\n        proceduresSummary: '',\n        savedPatient: '',\n        socialWork: '',\n        todaysOutpatients: '',\n        totalPatientDays: '',\n        totalPatientDaysDetailed: '',\n        visit: ''\n      }\n    },\n    print: { invoice: {\n        labels: {\n          billedBy: '',\n          billedDate: '',\n          dateAdmitted: '',\n          dateDischarged: '',\n          dischargeNotes: '',\n          patientAddress: '',\n          patientAge: '',\n          patientId: '',\n          patientName: '',\n          remarks: '',\n          spacer: ''\n        },\n        messages: { whereConducted: '' },\n        titles: {\n          billingStatement: '',\n          patientMember: '',\n          patients: '',\n          relContact: ''\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: '' },\n      labels: { medicationUsed: '' },\n      messages: { saved: '' },\n      titles: {\n        addChargeItem: '',\n        addMedicationUsed: '',\n        deleteChargeItem: '',\n        deleteMedicationUsed: '',\n        edit: '',\n        editChargeItem: '',\n        editMedicationUsed: '',\n        medicationUsed: '',\n        'new': '',\n        saved: ''\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: '',\n        allProcedures: '',\n        completedBy: '',\n        dischargeDate: '',\n        examiner: '',\n        images: '',\n        labs: '',\n        location: '',\n        medications: '',\n        nextAppointment: '',\n        nextAppointments: '',\n        notes: {\n          author: '',\n          date: '',\n          title: ''\n        },\n        operativePlan: {\n          description: '',\n          instructions: '',\n          procedures: '',\n          title: ''\n        },\n        primaryDiagnosis: '',\n        procedures: '',\n        secondaryDiagnosis: '',\n        visitDate: '',\n        visitType: ''\n      },\n      messages: {\n        'delete': '',\n        saved: ''\n      },\n      titles: {\n        dischargeReport: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        opdReport: '',\n        saved: ''\n      }\n    },\n    user: {\n      plusNewUser: '',\n      usersPageTile: ''\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: '',\n        checkIn: '',\n        checkOut: '',\n        discharge: '',\n        newAppointment: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        newProcedure: '',\n        newVitals: ''\n      },\n      labels: {\n        appointment: '',\n        authoredBy: '',\n        checkInTime: '',\n        checkOutTime: '',\n        createNewPatient: '',\n        diagnosis: '',\n        examiner: '',\n        finalDiagnosis: '',\n        haveAppointment: '',\n        haveDoneOrders: '',\n        noAppointment: '',\n        ordersDone: '',\n        ordersNotDone: '',\n        patientToCheckIn: '',\n        procedure: '',\n        procedureDate: '',\n        reasonForVisit: '',\n        reportType: '',\n        status: '',\n        statusAdmitted: '',\n        statusCheckedIn: '',\n        statusCheckedOut: '',\n        statusDischarged: '',\n        visitDate: '',\n        visitInformation: '',\n        visitType: ''\n      },\n      messages: {\n        checkOut: '',\n        checkedOut: '',\n        discharged: '',\n        patientCheckedIn: '',\n        patientCreatedAndCheckedIn: '',\n        visitAndPatientSaved: '',\n        visitSaved: ''\n      },\n      navigation: {\n        charges: '',\n        notes: '',\n        orders: '',\n        procedures: '',\n        reports: '',\n        vitals: ''\n      },\n      titles: {\n        additionalDiagnoses: '',\n        checkOut: '',\n        checkedIn: '',\n        checkedOut: '',\n        discharged: '',\n        editVisit: '',\n        newVisit: '',\n        patientCheckIn: '',\n        visitSaved: ''\n      }\n    },\n    vitals: { labels: {\n        dateRecorded: '',\n        dbp: '',\n        heartRate: '',\n        height: '',\n        respiratoryRate: '',\n        sbp: '',\n        temperature: '',\n        weight: ''\n      } }\n  };\n});","define('hospitalrun/tests/locales/ru/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/ru/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/tr/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    admin: {\n      address: {\n        address1Label: '',\n        address2Label: '',\n        address3Label: '',\n        address4Label: '',\n        addressLabel: '',\n        editTitle: '',\n        include1Label: '',\n        include2Label: '',\n        include3Label: '',\n        include4Label: '',\n        messages: { addressSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      addressOptions: '',\n      customForms: {\n        buttons: {\n          addField: '',\n          moveDown: '',\n          moveUp: '',\n          newForm: '',\n          preview: ''\n        },\n        labels: {\n          alwaysInclude: '',\n          checkbox: '',\n          colSpan: '',\n          columns: '',\n          customForm: '',\n          dischargeReportFormType: '',\n          formName: '',\n          formType: '',\n          incidentFormType: '',\n          includeOtherOption: '',\n          labFormType: '',\n          label: '',\n          newForm: '',\n          opdReportFormType: '',\n          operativePlanFormType: '',\n          otherOptionLabel: '',\n          patientFormType: '',\n          property: '',\n          radio: '',\n          select: '',\n          socialworkFormType: '',\n          text: '',\n          textarea: '',\n          visitFormType: ''\n        },\n        messages: { formSaved: '' },\n        titles: {\n          checkboxValues: '',\n          customForms: '',\n          deleteForm: '',\n          dropDownValues: '',\n          editCustomForm: '',\n          fields: '',\n          formSaved: '',\n          newCustomForm: '',\n          radioValues: ''\n        }\n      },\n      header: {\n        editTitle: '',\n        facilityName: '',\n        headerLabel: '',\n        headerLine1: '',\n        headerLine2: '',\n        headerLine3: '',\n        logoURL: '',\n        messages: { headerSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      loadDb: '',\n      loaddb: {\n        displayAlertMessage: '',\n        displayAlertTitle: '',\n        editTitle: '',\n        errorDisplayAlertMessage: '',\n        errorDisplayAlertTitle: '',\n        progressMessage: '',\n        progressTitle: ''\n      },\n      lookup: {\n        aisleLocationList: '',\n        alertImportListMessage: '',\n        alertImportListSaveMessage: '',\n        alertImportListSaveTitle: '',\n        alertImportListTitle: '',\n        alertImportListUpdateMessage: '',\n        alertImportListUpdateTitle: '',\n        anesthesiaTypes: '',\n        anesthesiologists: '',\n        billingCategories: '',\n        clinicList: '',\n        countryList: '',\n        cptCodeList: '',\n        diagnosisList: '',\n        edit: { template: {\n            addTitle: '',\n            editTitle: '',\n            labelTitle: '',\n            updateButtonTextAdd: '',\n            updateButtonTextUpdate: ''\n          } },\n        expenseAccountList: '',\n        imagingPricingTypes: '',\n        incidentDepartments: '',\n        inventoryTypes: '',\n        labPricingTypes: '',\n        pageTitle: '',\n        patientStatusList: '',\n        physicianList: '',\n        procedureList: '',\n        procedureLocations: '',\n        procedurePricingTypes: '',\n        radiologists: '',\n        titles: { deleteLookupValue: '' },\n        unitTypes: '',\n        vendorList: '',\n        visitLocationList: '',\n        visitTypes: '',\n        wardPricingTypes: '',\n        warehouseList: ''\n      },\n      lookupLists: '',\n      roles: {\n        capability: {\n          addAllergy: '',\n          addAppointment: '',\n          addBillingDiagnosis: '',\n          addCharge: '',\n          addDiagnosis: '',\n          addImaging: '',\n          addIncident: '',\n          addIncidentCategory: '',\n          addInventoryItem: '',\n          addInventoryPurchase: '',\n          addInventoryRequest: '',\n          addInvoice: '',\n          addLab: '',\n          addMedication: '',\n          addNote: '',\n          addOperationReport: '',\n          addOperativePlan: '',\n          addPatient: '',\n          addPayment: '',\n          addPhoto: '',\n          addPricing: '',\n          addPricingProfile: '',\n          addProcedure: '',\n          addSocialwork: '',\n          addVisit: '',\n          addVitals: '',\n          adjustInventoryLocation: '',\n          admin: '',\n          admitPatient: '',\n          appointments: '',\n          billing: '',\n          completeImaging: '',\n          completeLab: '',\n          defineUserRoles: '',\n          deleteAppointment: '',\n          deleteDiagnosis: '',\n          deleteImaging: '',\n          deleteIncident: '',\n          deleteIncidentCategory: '',\n          deleteInventoryItem: '',\n          deleteInvoice: '',\n          deleteLab: '',\n          deleteMedication: '',\n          deleteNote: '',\n          deletePatient: '',\n          deletePhoto: '',\n          deletePricing: '',\n          deletePricingProfile: '',\n          deleteProcedure: '',\n          deleteSocialwork: '',\n          deleteVisit: '',\n          deleteVitals: '',\n          dischargePatient: '',\n          editInvoice: '',\n          fulfillInventory: '',\n          fulfillMedication: '',\n          generateIncidentReport: '',\n          imaging: '',\n          incident: '',\n          inventory: '',\n          invoices: '',\n          labs: '',\n          loadDb: '',\n          manageIncidents: '',\n          medication: '',\n          overrideInvoice: '',\n          patientReports: '',\n          patients: '',\n          pricing: '',\n          updateConfig: '',\n          visits: ''\n        },\n        messages: { roleSaved: '' },\n        titles: { roleSaved: '' }\n      },\n      userRoles: '',\n      users: '',\n      visitForms: {\n        labels: {\n          followup: '',\n          form: '',\n          initial: '',\n          visitType: ''\n        },\n        titles: { visitForms: '' }\n      },\n      workflow: {\n        admissionDepositLabel: '',\n        clinicPrepaymentLabel: '',\n        editTitle: '',\n        followupPrepaymentLabel: '',\n        messages: { optionsSaved: '' },\n        newTitle: '',\n        outpatientImagingLabel: '',\n        outpatientLabLabel: '',\n        outpatientMedicationLabel: '',\n        titles: { optionsSaved: '' },\n        workflowLabel: ''\n      }\n    },\n    alerts: {\n      errorExclamation: '',\n      pleaseWait: '',\n      reportError: '',\n      warningExclamation: ''\n    },\n    allergies: {\n      buttons: { addAllergy: '' },\n      labels: {\n        allergyName: '',\n        patientAllergy: ''\n      },\n      titles: {\n        addAllergy: '',\n        editAllergy: ''\n      }\n    },\n    application: {\n      messages: { sessionExpired: '' },\n      titles: { sessionExpired: '' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '',\n        scheduleSurgery: ''\n      },\n      calendarTitle: '',\n      currentScreenTitle: '',\n      editTitle: '',\n      labels: {\n        noLocation: '',\n        selectedStartingDate: ''\n      },\n      messages: {\n        appointmentSaved: '',\n        endTimeLaterThanStart: ''\n      },\n      missed: '',\n      newTitle: '',\n      searchTitle: '',\n      sectionTitle: '',\n      thisWeek: '',\n      titles: {\n        appointmentSaved: '',\n        editSurgicalAppointment: '',\n        newSurgicalAppointment: '',\n        theaterSchedule: ''\n      },\n      todayTitle: ''\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: '',\n        noPricingItems: '',\n        noPricingProfiles: ''\n      },\n      buttons: {\n        addOverride: '',\n        createInvoice: ''\n      },\n      labels: {\n        actualCharges: '',\n        discountAmount: '',\n        discountPercentage: '',\n        externalInvoiceNumber: '',\n        hmoCom: '',\n        insurance: '',\n        paymentProfile: '',\n        paymentsDeposits: '',\n        pricingPanelOverrides: '',\n        pricingProfile: ''\n      }\n    },\n    buttons: {\n      add: 'Ekle',\n      addItem: '',\n      addLineItem: '',\n      addValue: '',\n      addVisit: '',\n      allRequests: '',\n      barcode: '',\n      cancel: 'Vazgeç',\n      clear: '',\n      close: '',\n      complete: 'Bitir',\n      'delete': '',\n      dispense: '',\n      edit: '',\n      filter: '',\n      fulfill: '',\n      'import': '',\n      loadFile: '',\n      newItem: '',\n      newNote: '',\n      newRequest: '',\n      newRequestPlus: '',\n      newUser: '',\n      ok: 'Tamam',\n      remove: '',\n      returnButton: 'Geri Dön',\n      search: '',\n      showAll: '',\n      showFewer: '',\n      update: 'Güncelle'\n    },\n    components: {\n      chargesByTypeTab: { charges: '' },\n      customFormManager: { buttons: { addForm: '' } },\n      dateTimePicker: {\n        amHour: '',\n        midnight: '',\n        noon: '',\n        pmHour: ''\n      },\n      imageUpload: { messages: { selectValidImageFile: '' } },\n      operativeProcedures: {\n        buttons: { addProcedure: '' },\n        labels: { procedure: '' },\n        titles: { procedures: '' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: '',\n          newLab: '',\n          newMedication: ''\n        },\n        labels: {\n          imagingOrderType: '',\n          labOrderType: '',\n          medicationOrderType: '',\n          orderType: ''\n        }\n      },\n      priceList: { charges: '' },\n      quantityCalc: { result: '' },\n      quantityConv: {\n        conversion: '',\n        unit: ''\n      },\n      sortableColumn: { labels: { selectAll: '' } },\n      takePhoto: {\n        camera: '',\n        how: '',\n        labels: {\n          takeAPicture: '',\n          uploadAFile: ''\n        },\n        photo: '',\n        preview: '',\n        takePhoto: '',\n        uploadFile: ''\n      },\n      upcomingAppointments: {\n        labels: {\n          date: '',\n          location: '',\n          type: '',\n          'with': ''\n        },\n        titles: { upcomingAppointments: '' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: '' },\n      labels: { formToAdd: '' },\n      titles: { addCustomForm: '' }\n    },\n    dashboard: {\n      setup: '',\n      title: 'Ne yapmak istersiniz?'\n    },\n    dates: {\n      'long': '',\n      longOmitDays: '',\n      longOmitDaysPlural: '',\n      longOmitDaysYears: '',\n      longOmitYears: '',\n      longPlural: '',\n      'short': '',\n      shortOmitYears: ''\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: '',\n        date: '',\n        diagnosis: '',\n        secondaryDiagnosis: ''\n      },\n      titles: {\n        addDiagnosis: '',\n        editDiagnosis: ''\n      }\n    },\n    errors: {\n      accepted: '',\n      blank: '',\n      confirmation: '',\n      empty: '',\n      equalTo: '',\n      even: '',\n      exclusion: '',\n      greaterThan: '',\n      greaterThanOrEqualTo: '',\n      inclusion: '',\n      invalid: '',\n      invalidNumber: '',\n      lessThan: '',\n      lessThanOrEqualTo: '',\n      notANumber: '',\n      notAnInteger: '',\n      odd: '',\n      otherThan: '',\n      present: '',\n      result: '',\n      tooLong: '',\n      tooShort: '',\n      wrongLength: ''\n    },\n    headings: { chargedItems: '' },\n    imaging: {\n      alerts: {\n        completedMessage: 'Görüntüleme talebi başarıyla tamamlandı.',\n        completedTitle: 'Görüntüleme Talebi Tamamlandı',\n        savedMessage: 'Görüntüleme Talebi başarıyla kaydedildi.',\n        savedTitle: 'Görüntüleme Talebi Kaydedildi'\n      },\n      buttons: { newButton: '+ yeni görüntüleme' },\n      labels: {\n        addNewVisit: '--Yeni Ziyaret Ekle--',\n        radiologist: 'Radyolog'\n      },\n      messages: { noCompleted: 'Tamamlanmayan öğe bulunamadı.' },\n      pageTitle: 'Görüntüleme talepleri',\n      sectionTitle: 'Görüntüleme',\n      titles: {\n        completedImaging: 'Görüntüleme Tamamlandı',\n        editTitle: 'Görüntüleme Talebini Düzenle',\n        newTitle: 'Yeni Görüntüleme Talebi'\n      }\n    },\n    incident: {\n      buttons: {\n        add: '',\n        addForm: '',\n        addItem: '',\n        cancel: '',\n        'delete': '',\n        download: '',\n        edit: '',\n        'export': '',\n        generateRep: '',\n        newAttachment: '',\n        newCategory: '',\n        newIncident: '',\n        newNote: ''\n      },\n      labels: {\n        actions: '',\n        addedBy: '',\n        category: '',\n        categoryItem: '',\n        date: '',\n        dateRecorded: '',\n        department: '',\n        description: '',\n        endDate: '',\n        givenBy: '',\n        howToAddAttachment: '',\n        incidentDate: '',\n        incidentId: '',\n        item: '',\n        lastUpdated: '',\n        note: '',\n        patientId: '',\n        patientImpacted: '',\n        reportType: '',\n        reportedBy: '',\n        reportedDate: '',\n        reportedTo: '',\n        sentinelEvent: '',\n        startDate: '',\n        status: '',\n        statusActive: '',\n        statusClosed: '',\n        statusFollowup: '',\n        statusReported: '',\n        title: '',\n        total: '',\n        updatedBy: ''\n      },\n      messages: {\n        attachmentFileRequired: '',\n        createNew: '',\n        createNewIncidentCategory: '',\n        fillIn: '',\n        incidentCategorySaved: '',\n        noClosedIncidents: '',\n        noIncidentCategoriesFound: '',\n        noIncidents: '',\n        saved: '',\n        selectExistingPatient: ''\n      },\n      titles: {\n        addAttachment: '',\n        addCategoryItem: '',\n        addNote: '',\n        attachments: '',\n        closed: '',\n        current: '',\n        deleteAttachment: '',\n        deleteIncident: '',\n        deleteIncidentCategory: '',\n        deleteItem: '',\n        deleteNote: '',\n        editAttachment: '',\n        editIncident: '',\n        editIncidentCategory: '',\n        editNote: '',\n        general: '',\n        history: '',\n        incidentCategories: '',\n        incidentCategoryItem: '',\n        incidentCategoryName: '',\n        incidentCategorySaved: '',\n        incidentSaved: '',\n        incidents: '',\n        incidentsByCategory: '',\n        incidentsByDepartment: '',\n        newIncident: '',\n        newIncidentCategory: '',\n        notes: '',\n        reports: ''\n      }\n    },\n    inventory: {\n      edit: {\n        cost: '',\n        delivered: '',\n        location: '',\n        prescription: '',\n        pulled: '',\n        quantity: '',\n        reason: '',\n        returned: '',\n        transferredFrom: '',\n        transferredTo: ''\n      },\n      labels: {\n        action: '',\n        add: '',\n        addAdjustmentType: '',\n        adjust: '',\n        adjustmentDate: '',\n        adjustmentFor: '',\n        adjustmentType: '',\n        aisle: '',\n        aisleLocation: '',\n        allInventory: '',\n        allItems: '',\n        availableQuantity: '',\n        billTo: '',\n        consumePurchases: '',\n        consumptionRate: '',\n        cost: '',\n        costPerUnit: '',\n        crossReference: '',\n        currentQuantity: '',\n        dateCompleted: '',\n        dateEffective: '',\n        dateEnd: '',\n        dateReceived: '',\n        dateStart: '',\n        dateTransferred: '',\n        daysLeft: '',\n        deleteItem: '',\n        deliveryAisle: '',\n        deliveryLocation: '',\n        details: '',\n        distributionUnit: '',\n        editItem: '',\n        expense: '',\n        expirationDate: '',\n        fulfillRequest: '',\n        fulfillRequestNow: '',\n        gift: '',\n        giftInKindNo: '',\n        giftInKindYes: '',\n        giftUsage: '',\n        inventoryConsumed: '',\n        inventoryItem: '',\n        inventoryObsolence: '',\n        invoiceItems: '',\n        invoiceLineItem: '',\n        invoiceNumber: '',\n        item: '',\n        itemNumber: '',\n        items: '',\n        location: '',\n        locations: '',\n        markAsConsumed: '',\n        name: '',\n        newItem: '',\n        originalQuantity: '',\n        print: '',\n        printBarcode: '',\n        printer: '',\n        pullFrom: '',\n        purchaseCost: '',\n        purchaseInfo: '',\n        purchases: '',\n        quantity: '',\n        quantityAvailable: '',\n        quantityOnHand: '',\n        quantityRequested: '',\n        rank: '',\n        reason: '',\n        remove: '',\n        removeAdjustmentType: '',\n        reorderPoint: '',\n        requestedItems: '',\n        returnAdjustmentType: '',\n        returnToVendorAdjustmentType: '',\n        salePricePerUnit: '',\n        save: '',\n        serialNumber: '',\n        total: '',\n        totalCost: '',\n        totalReceived: '',\n        transaction: '',\n        transactions: '',\n        transfer: '',\n        transferFrom: '',\n        transferTo: '',\n        transferToAisle: '',\n        unit: '',\n        unitCost: '',\n        vendor: '',\n        vendorItemNumber: '',\n        writeOffAdjustmentType: '',\n        xref: ''\n      },\n      messages: {\n        adjust: '',\n        createRequest: 'Yeni talep oluştur?',\n        itemNotFound: '',\n        loading: '',\n        noItems: '',\n        noRequests: 'Talep bulunamadı',\n        purchaseSaved: '',\n        quantity: '',\n        removeItem: '',\n        removeItemRequest: '',\n        requestFulfilled: '',\n        requestUpdated: '',\n        warning: ''\n      },\n      reports: {\n        adjustment: '',\n        daysSupply: '',\n        expenseDetail: '',\n        expenseSum: '',\n        expiration: '',\n        'export': '',\n        fields: '',\n        finance: '',\n        generate: '',\n        invLocation: '',\n        invValuation: '',\n        purchaseDetail: '',\n        purchaseSum: '',\n        reportType: '',\n        rows: {\n          adjustments: '',\n          adjustmentsTotal: '',\n          balanceBegin: '',\n          balanceEnd: '',\n          category: '',\n          consumed: '',\n          consumedGik: '',\n          consumedGikTotal: '',\n          consumedPuchases: '',\n          consumedPurchasesTotal: '',\n          consumedTotal: '',\n          errInFinSum: '',\n          errInFindPur: '',\n          errInFindReq: '',\n          expensesFor: '',\n          noAccount: '',\n          subtotal: '',\n          subtotalFor: '',\n          total: '',\n          totalFor: '',\n          totalPurchases: '',\n          transfer1: '',\n          trasnfer2: ''\n        },\n        stockTransferDetail: '',\n        stockTransferSum: '',\n        stockUsageDetail: '',\n        stockUsageSum: '',\n        titleDateRange: '',\n        titleSingleDate: ''\n      },\n      titles: {\n        addPurchase: '',\n        addRequest: '',\n        adjustment: '',\n        editPurchase: '',\n        editRequest: '',\n        inventoryItem: '',\n        inventoryReport: '',\n        purchaseSaved: '',\n        quickAddTitle: '',\n        removeItem: '',\n        requestFulfilled: '',\n        requestUpdated: '',\n        transfer: '',\n        warning: ''\n      }\n    },\n    labels: {\n      action: 'İşlem',\n      actions: 'İşlemler',\n      addNewOutpatientVisit: '',\n      address: '',\n      age: 'Yaş',\n      allDay: '',\n      amount: '',\n      anesthesia: '',\n      assisting: '',\n      balanceDue: '',\n      billDate: '',\n      billTo: '',\n      category: '',\n      completed: 'Tamamlandı',\n      country: '',\n      cptcode: '',\n      creditTo: '',\n      date: '',\n      dateCompleted: 'Bitiş tarihi',\n      dateOfBirth: '',\n      dateOfBirthShort: '',\n      datePaid: '',\n      dateRequested: 'Talep Tarihi',\n      'delete': '',\n      deleteRequest: '',\n      deleteUser: '',\n      department: '',\n      description: '',\n      discount: '',\n      displayName: '',\n      docRead: '',\n      docWritten: '',\n      edit: 'Düzenle',\n      editUser: '',\n      email: '',\n      endDate: '',\n      endTime: '',\n      excess: '',\n      expenseTo: '',\n      fileLoadSuccessful: '',\n      fileName: '',\n      fileToLoad: '',\n      fulfill: 'Fulfill',\n      fulfillRequest: '',\n      fulfillRequestNow: '',\n      fulfilled: '',\n      grandTotal: '',\n      id: 'Id',\n      imageOrders: '',\n      imagingType: 'Görüntüleme Tipi',\n      importFile: '',\n      invoiceId: '',\n      labOrders: '',\n      lineItems: '',\n      loading: '',\n      location: '',\n      lookupType: '',\n      medication: '',\n      name: 'Ad',\n      newUser: '',\n      note: '',\n      notes: 'Notlar',\n      number: '',\n      on: '',\n      password: '',\n      patient: 'Hasta',\n      payments: '',\n      physician: '',\n      prescriber: '',\n      prescription: '',\n      prescriptionDate: '',\n      price: '',\n      print: '',\n      procedures: '',\n      provider: '',\n      pullFrom: '',\n      quantity: 'Miktar',\n      remarks: '',\n      requestedBy: 'Talep sahibi',\n      requestedOn: 'Açık Talep',\n      requests: 'Talepler',\n      result: 'Sonuç',\n      results: 'Sonuçlar',\n      role: '',\n      search: '',\n      sex: 'Cinsiyet',\n      startDate: '',\n      startTime: '',\n      status: '',\n      takenBy: '',\n      total: '',\n      type: '',\n      userCanAddNewValue: '',\n      username: '',\n      value: '',\n      view: '',\n      visit: 'Ziyaret',\n      'with': ''\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: '',\n        requestCompletedTitle: '',\n        requestSavedMessage: '',\n        requestSavedTitle: ''\n      },\n      buttons: { newButton: '' },\n      completedTitle: '',\n      deleteTitle: '',\n      editTitle: '',\n      labels: {\n        addNewVisit: '',\n        labType: ''\n      },\n      messages: {\n        createNewRecord: '',\n        noCompleted: '',\n        noItemsFound: ''\n      },\n      newTitle: '',\n      requestsTitle: '',\n      sectionTitle: ''\n    },\n    languages: {\n      en: 'Ingilizce',\n      fr: 'Fransızca',\n      es: 'İspanyol',\n      de: 'Almanca',\n      ru: 'Rusça',\n      'es-co': 'İspanyolca (Kolombiyalı)',\n      'pt-br': 'Portekizce (Brezilya)',\n      tr: 'Türk',\n      ur: 'Urduca'\n    },\n    loading: {\n      messages: {\n        '0': '',\n        '1': '',\n        '2': '',\n        '3': '',\n        '4': '',\n        '5': '',\n        '6': '',\n        '7': '',\n        '8': '',\n        '9': '',\n        '10': '',\n        '11': ''\n      },\n      progressBar: { progress: '' }\n    },\n    login: {\n      labels: {\n        password: 'Parola',\n        signIn: 'Giriş yap',\n        username: 'Kullanıcı Adı'\n      },\n      messages: {\n        error: 'Kullanıcı adı veya parola hatalı.',\n        signIn: 'GİRİŞ YAPIN'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: '',\n        returnedMessage: '',\n        returnedTitle: '',\n        savedMessage: '',\n        savedTitle: ''\n      },\n      buttons: {\n        dispenseMedication: '',\n        newButton: '',\n        returnMedication: ''\n      },\n      labels: {\n        adjustmentDate: '',\n        creditToAccount: '',\n        quantityDispensed: '',\n        quantityDistributed: '',\n        quantityRequested: '',\n        quantityToReturn: '',\n        refills: '',\n        returnAisle: '',\n        returnLocation: '',\n        returnReason: ''\n      },\n      messages: { createNew: '' },\n      pageTitle: '',\n      returnMedication: '',\n      sectionTitle: '',\n      titles: {\n        completedMedication: '',\n        editMedicationRequest: '',\n        newMedicationRequest: ''\n      }\n    },\n    messages: {\n      createNewRecord: 'Yeni bir kayıt oluştur?',\n      createNewUser: '',\n      'delete': '',\n      delete_plural: '',\n      delete_singular: '',\n      forAuthorizedPersons: 'Bu rapor yetkili kişiler içindir.',\n      newPatientHasToBeCreated: '',\n      noHistoryAvailable: '',\n      noItemsFound: 'Hiçbir öğe bulunamadı.',\n      noNotesAvailable: '',\n      noUsersFound: '',\n      onBehalfOf: '',\n      reportError: '',\n      requiredFieldsCorrectErrors: '',\n      saveActionException: '',\n      sorry: '',\n      userHasBeenSaved: '',\n      userSaved: ''\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: '',\n          appointmentDate: '',\n          appointmentType: '',\n          endDate: '',\n          location: '',\n          notes: '',\n          patient: '',\n          provider: '',\n          startDate: '',\n          status: '',\n          type: ''\n        },\n        names: {\n          plural: '',\n          singular: ''\n        }\n      },\n      attachment: { names: {\n          plural: '',\n          singular: ''\n        } },\n      form: { names: {\n          plural: '',\n          singular: ''\n        } },\n      imaging: {\n        names: '',\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      incident: { names: {\n          plural: '',\n          singular: ''\n        } },\n      item: { names: {\n          plural: '',\n          singular: ''\n        } },\n      lab: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      medication: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      note: { names: {\n          plural: '',\n          singular: ''\n        } },\n      patient: {\n        labels: { name: '' },\n        names: { singular: '' }\n      },\n      procedure: { names: {\n          plural: '',\n          singular: ''\n        } },\n      user: { names: {\n          plural: '',\n          singular: ''\n        } },\n      visit: { names: {\n          plural: '',\n          singular: ''\n        } },\n      vital: { names: {\n          plural: '',\n          singular: ''\n        } }\n    },\n    navigation: {\n      about: '',\n      actions: {\n        login: '',\n        logout: '',\n        selectLanguage: 'Dil Seçin'\n      },\n      administration: '',\n      billing: '',\n      imaging: '',\n      incident: '',\n      inventory: '',\n      labs: '',\n      medication: '',\n      patients: '',\n      scheduling: '',\n      subnav: {\n        actions: '',\n        addAppointment: '',\n        addressFields: '',\n        admittedPatients: '',\n        appointmentSearch: '',\n        appointmentsCalendar: '',\n        appointmentsThisWeek: '',\n        completed: '',\n        currentIncidents: '',\n        customForms: '',\n        dispense: '',\n        history: '',\n        incidentCategories: '',\n        inventoryReceived: '',\n        invoices: '',\n        items: '',\n        loadDB: '',\n        lookupLists: '',\n        missedAppointments: '',\n        newIncident: '',\n        newInvoice: '',\n        newPatient: '',\n        newRequest: '',\n        newUser: '',\n        outpatient: '',\n        patientListing: '',\n        priceProfiles: '',\n        prices: '',\n        printHeader: '',\n        reports: '',\n        requests: '',\n        returnMedication: '',\n        scheduleSurgery: '',\n        theaterSchedule: '',\n        \"today'sAppointments\": '',\n        userRoles: '',\n        users: '',\n        workflow: ''\n      }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: '',\n        assistant: '',\n        caseComplexity: '',\n        operationDescription: '',\n        preOpPrimaryDiagnosis: '',\n        preOpSecondaryDiagnosis: '',\n        surgeon: '',\n        surgeryDate: ''\n      },\n      messages: { reportSaved: '' },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        reportSaved: ''\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: '' },\n      labels: {\n        additionalNotes: '',\n        admissionInstructions: '',\n        caseComplexity: '',\n        completedStatus: '',\n        droppedStatus: '',\n        operationDescription: '',\n        plannedStatus: '',\n        status: '',\n        surgeon: ''\n      },\n      messages: {\n        planCompleted: '',\n        planSaved: ''\n      },\n      titles: {\n        editTitle: '',\n        newTitle: '',\n        planCompleted: '',\n        planSaved: ''\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: '',\n        addExpense: '',\n        addFamilyMember: '',\n        addOperativePlan: '',\n        backToPatients: '',\n        download: '',\n        editOperativePlan: '',\n        newAppointment: '',\n        newImaging: '',\n        newLab: '',\n        newMedication: '',\n        newPatient: '',\n        newPhoto: '',\n        newVisit: '',\n        patientCheckIn: '',\n        scheduleSurgery: ''\n      },\n      labels: {\n        admissionDate: '',\n        admit: '',\n        bloodType: '',\n        caption: '',\n        civilStatus: '',\n        clinic: '',\n        contacts: '',\n        cost: '',\n        dateOfBirth: '',\n        dateProcessed: '',\n        dischargeDate: '',\n        dob: '',\n        education: '',\n        email: '',\n        externalPatientId: '',\n        firstName: '',\n        income: '',\n        insurance: '',\n        lastName: '',\n        middleName: '',\n        monthlyCost: '',\n        occupation: '',\n        operativePlan: '',\n        parent: '',\n        patientDays: '',\n        patientType: '',\n        patientTypeCharity: '',\n        patientTypePrivate: '',\n        phone: '',\n        placeOfBirth: '',\n        primaryDiagnosis: '',\n        referredBy: '',\n        referredDate: '',\n        relationship: '',\n        relationships: '',\n        religion: '',\n        secondaryDiagnosis: '',\n        sex: '',\n        sexNotEntered: '',\n        sources: '',\n        status: '',\n        totalMontlyExpense: ''\n      },\n      messages: {\n        areYouSureDelete: '',\n        createNewPatient: '',\n        deletingPatient: '',\n        noPatientsFound: '',\n        notFoundQuickAdd: '',\n        photoFileRequired: '',\n        savedPatient: ''\n      },\n      navigation: {\n        appointments: '',\n        general: '',\n        history: '',\n        imaging: '',\n        labs: '',\n        medication: '',\n        photos: '',\n        socialWork: '',\n        visits: ''\n      },\n      notes: {\n        newNote: '',\n        onBehalfOfCopy: '',\n        onBehalfOfLabel: '',\n        pleaseSelectAVisit: '',\n        updateNote: ''\n      },\n      titles: {\n        addContact: '',\n        addPhoto: '',\n        additionalContacts: '',\n        admissionsDetail: '',\n        admissionsSummary: '',\n        admittedPatients: '',\n        'delete': '',\n        deleteContact: '',\n        deleteExpense: '',\n        deleteFamilyMember: '',\n        deletePatientRecord: '',\n        deletePhoto: '',\n        diagnosticTesting: '',\n        dischargesDetail: '',\n        dischargesSummary: '',\n        edit: '',\n        editPhoto: '',\n        expenses: '',\n        familyInfo: '',\n        familyInformation: '',\n        'new': '',\n        outpatientsForDate: '',\n        patient: '',\n        patientListing: '',\n        patientReport: '',\n        patientStatus: '',\n        proceduresDetail: '',\n        proceduresSummary: '',\n        savedPatient: '',\n        socialWork: '',\n        todaysOutpatients: '',\n        totalPatientDays: '',\n        totalPatientDaysDetailed: '',\n        visit: ''\n      }\n    },\n    print: { invoice: {\n        labels: {\n          billedBy: '',\n          billedDate: '',\n          dateAdmitted: '',\n          dateDischarged: '',\n          dischargeNotes: '',\n          patientAddress: '',\n          patientAge: '',\n          patientId: '',\n          patientName: '',\n          remarks: '',\n          spacer: ''\n        },\n        messages: { whereConducted: '' },\n        titles: {\n          billingStatement: '',\n          patientMember: '',\n          patients: '',\n          relContact: ''\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: '' },\n      labels: { medicationUsed: '' },\n      messages: { saved: '' },\n      titles: {\n        addChargeItem: '',\n        addMedicationUsed: '',\n        deleteChargeItem: '',\n        deleteMedicationUsed: '',\n        edit: '',\n        editChargeItem: '',\n        editMedicationUsed: '',\n        medicationUsed: '',\n        'new': '',\n        saved: ''\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: '',\n        allProcedures: '',\n        completedBy: '',\n        dischargeDate: '',\n        examiner: '',\n        images: '',\n        labs: '',\n        location: '',\n        medications: '',\n        nextAppointment: '',\n        nextAppointments: '',\n        notes: {\n          author: '',\n          date: '',\n          title: ''\n        },\n        operativePlan: {\n          description: '',\n          instructions: '',\n          procedures: '',\n          title: ''\n        },\n        primaryDiagnosis: '',\n        procedures: '',\n        secondaryDiagnosis: '',\n        visitDate: '',\n        visitType: ''\n      },\n      messages: {\n        'delete': '',\n        saved: ''\n      },\n      titles: {\n        dischargeReport: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        opdReport: '',\n        saved: ''\n      }\n    },\n    user: {\n      plusNewUser: '',\n      usersPageTile: ''\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: '',\n        checkIn: '',\n        checkOut: '',\n        discharge: '',\n        newAppointment: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        newProcedure: '',\n        newVitals: ''\n      },\n      labels: {\n        appointment: '',\n        authoredBy: '',\n        checkInTime: '',\n        checkOutTime: '',\n        createNewPatient: '',\n        diagnosis: '',\n        examiner: '',\n        finalDiagnosis: '',\n        haveAppointment: '',\n        haveDoneOrders: '',\n        noAppointment: '',\n        ordersDone: '',\n        ordersNotDone: '',\n        patientToCheckIn: '',\n        procedure: '',\n        procedureDate: '',\n        reasonForVisit: '',\n        reportType: '',\n        status: '',\n        statusAdmitted: '',\n        statusCheckedIn: '',\n        statusCheckedOut: '',\n        statusDischarged: '',\n        visitDate: '',\n        visitInformation: '',\n        visitType: ''\n      },\n      messages: {\n        checkOut: '',\n        checkedOut: '',\n        discharged: '',\n        patientCheckedIn: '',\n        patientCreatedAndCheckedIn: '',\n        visitAndPatientSaved: '',\n        visitSaved: ''\n      },\n      navigation: {\n        charges: '',\n        notes: '',\n        orders: '',\n        procedures: '',\n        reports: '',\n        vitals: ''\n      },\n      titles: {\n        additionalDiagnoses: '',\n        checkOut: '',\n        checkedIn: '',\n        checkedOut: '',\n        discharged: '',\n        editVisit: '',\n        newVisit: '',\n        patientCheckIn: '',\n        visitSaved: ''\n      }\n    },\n    vitals: { labels: {\n        dateRecorded: '',\n        dbp: '',\n        heartRate: '',\n        height: '',\n        respiratoryRate: '',\n        sbp: '',\n        temperature: '',\n        weight: ''\n      } }\n  };\n});","define('hospitalrun/tests/locales/tr/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/tr/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/tr/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/ur/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    admin: {\n      address: {\n        address1Label: 'ایڈریس 1 لیبل',\n        address2Label: 'ایڈریس 2 لیبل',\n        address3Label: 'ایڈریس 3 لیبل',\n        address4Label: 'ایڈریس 4 لیبل',\n        addressLabel: 'ایڈریس',\n        editTitle: 'ایڈریس آپشنز',\n        include1Label: '1 لیبل شامل کریں',\n        include2Label: '2 لیبل شامل کریں',\n        include3Label: '3 لیبل شامل کریں',\n        include4Label: '4 لیبل شامل کریں',\n        messages: { addressSaved: 'ایڈریس آپشنز محفوظ کرلیے گۓ ہیں' },\n        newTitle: 'ایڈریس آپشنز',\n        titles: { optionsSaved: 'آپشنز محفوظ ہوگۓ' }\n      },\n      addressOptions: 'ایڈرس آپشنز',\n      customForms: {\n        buttons: {\n          addField: 'فیلڈ کا اضافہ کریں',\n          moveDown: 'نیچے منتقل کریں',\n          moveUp: 'اوپر منتقل کریں',\n          newForm: '+ نیا فام',\n          preview: 'مشاہدہ کریں'\n        },\n        labels: {\n          alwaysInclude: 'ہمیشہ شامل',\n          checkbox: 'چیک باکس',\n          colSpan: 'پھیلاؤ کے کالموں کی تعداد',\n          columns: 'کالم',\n          customForm: 'کسٹم فام',\n          dischargeReportFormType: '',\n          formName: 'فارم کا نام',\n          formType: 'فارم کی قسم',\n          incidentFormType: '',\n          includeOtherOption: 'دیگر آپشن شامل کریں',\n          labFormType: '',\n          label: 'لیبل',\n          newForm: 'نیا فارم',\n          opdReportFormType: '',\n          operativePlanFormType: 'آپریٹو پلان اور رپورٹ',\n          otherOptionLabel: 'دیگر آپشن لیبل',\n          patientFormType: 'مریض',\n          property: 'خصوصیت',\n          radio: 'ریڈیو',\n          select: 'ڈراپ ڈاؤن',\n          socialworkFormType: 'سماجی کام',\n          text: 'عبارت',\n          textarea: 'بڑی عبارت',\n          visitFormType: 'دورہ'\n        },\n        messages: { formSaved: 'فارم محفوظ ہوگیا ہے {{name}} ' },\n        titles: {\n          checkboxValues: 'چیک باکس میں قیمتیں',\n          customForms: 'کسٹم فارمز',\n          deleteForm: 'کسٹم فارم حذف کریں',\n          dropDownValues: 'ڈراپ ڈاؤن فہرست',\n          editCustomForm: 'کسٹم فارم میں ترمیم کریں',\n          fields: 'قطعات',\n          formSaved: 'فارم محفوظ ہوگیا',\n          newCustomForm: 'نئے کسٹم فارم',\n          radioValues: 'ریڈیو میں قیمتیں'\n        }\n      },\n      header: {\n        editTitle: '',\n        facilityName: '',\n        headerLabel: '',\n        headerLine1: '',\n        headerLine2: '',\n        headerLine3: '',\n        logoURL: '',\n        messages: { headerSaved: '' },\n        newTitle: '',\n        titles: { optionsSaved: '' }\n      },\n      loadDb: 'DB لوڈ کریں',\n      loaddb: {\n        displayAlertMessage: 'لوڈ کرنے کے لئے فائل کو منتخب کیجیے.',\n        displayAlertTitle: 'لوڈ کرنے کے لئے فائل کو منتخب کریں',\n        editTitle: 'DB لوڈ کریں',\n        errorDisplayAlertMessage: 'ڈیٹا بیس امپورٹ نہیں ہوسکتی. یہ خامی  ہے {{error}}',\n        errorDisplayAlertTitle: 'لوڈ کرنے میں خامی',\n        progressMessage: 'آپ کا ڈیٹابیس لوڈ کیا جا رہا ہے، براۂ مہربانی انتظار کریں.',\n        progressTitle: 'ڈیٹابیس لوڈ ہو رہا ہے'\n      },\n      lookup: {\n        aisleLocationList: 'انوینٹری راہداری مقامات',\n        alertImportListMessage: 'امپورٹ کرنے کے لئے فائل کو منتخب کیجیے',\n        alertImportListSaveMessage: 'تلاش فہرست امپورٹ ہو گئی ہے.',\n        alertImportListSaveTitle: 'لسٹ امپورٹ ہوگئ',\n        alertImportListTitle: 'امپورٹ کرنے کے لئے فائل کو منتخب کریں',\n        alertImportListUpdateMessage: 'تلاش فہرست محفوظ ہو گئی ہے.',\n        alertImportListUpdateTitle: 'فہرست محفوظ',\n        anesthesiaTypes: 'اینستھیزیا کی اقسام',\n        anesthesiologists: 'اینستھیسیالوجسٹس',\n        billingCategories: 'بلنگ کی اقسام',\n        clinicList: 'کلینک مقامات',\n        countryList: 'ممالک',\n        cptCodeList: 'CPT کوڈز',\n        diagnosisList: 'تشخیص',\n        edit: { template: {\n            addTitle: 'قیمت شامل کریں',\n            editTitle: 'قیمت ترمیم کریں',\n            labelTitle: 'قدر',\n            updateButtonTextAdd: 'شامل کریں',\n            updateButtonTextUpdate: 'اپ ڈیٹ'\n          } },\n        expenseAccountList: 'اخراجات اکاؤنٹس',\n        imagingPricingTypes: 'امیجنگ قیمتوں کا تعین کی اقسام',\n        incidentDepartments: '',\n        inventoryTypes: 'انوینٹری کی اقسا م',\n        labPricingTypes: 'لیب کی قیمتوں کا تعین کی اقسام',\n        pageTitle: 'تلاش فہرستیں',\n        patientStatusList: 'مریض سٹیٹس کی فہرست',\n        physicianList: 'ڈاکٹر',\n        procedureList: 'طریقہ کار',\n        procedureLocations: 'طریقہ کار مقامات',\n        procedurePricingTypes: 'ضابطے کی قیمتوں کا تعین کی اقسام',\n        radiologists: 'ریڈیولوجسٹ',\n        titles: { deleteLookupValue: 'قدر حذف کریں' },\n        unitTypes: 'یونٹ کی اقسام',\n        vendorList: 'وینڈر',\n        visitLocationList: 'دورہ مقامات',\n        visitTypes: 'دورہ کی اقسا م',\n        wardPricingTypes: 'وارڈ کی قیمتوں کا تعین کی اقسام',\n        warehouseList: 'انوینٹری مقامات'\n      },\n      lookupLists: 'تلاش فہرستیں',\n      roles: {\n        capability: {\n          addAllergy: 'الرجی کا اضافہ کریں',\n          addAppointment: 'ملاقات اضافہ',\n          addBillingDiagnosis: 'بلنگ تشخیص شامل کریں',\n          addCharge: 'چارج شامل کریں',\n          addDiagnosis: 'تشخیص کے لئے شامل کریں',\n          addImaging: 'امیجنگ کا اضافہ کریں',\n          addIncident: '',\n          addIncidentCategory: '',\n          addInventoryItem: 'انوینٹری آئٹم شامل کریں',\n          addInventoryPurchase: 'انوینٹری کی خریداری شامل کریں',\n          addInventoryRequest: 'انوینٹری کی درخواست شامل کریں',\n          addInvoice: 'رسید شامل کریں',\n          addLab: 'لیب شامل کریں',\n          addMedication: 'ادویات شامل',\n          addNote: 'نوٹ شامل',\n          addOperationReport: 'آپریشن رپورٹ شامل کریں',\n          addOperativePlan: 'آپریٹو پلان شامل کریں',\n          addPatient: 'مریض شامل کریں',\n          addPayment: 'ادائیگی شامل کریں',\n          addPhoto: 'تصویر کا اضافہ کریں',\n          addPricing: 'قیمتوں کا تعین شامل کریں',\n          addPricingProfile: 'قیمتوں کا تعین پروفائل شامل کریں',\n          addProcedure: 'ضابطے شامل کریں',\n          addSocialwork: 'سوشل ورک شامل',\n          addVisit: 'دورہ شامل کریں',\n          addVitals: 'vitals شامل کریں',\n          adjustInventoryLocation: 'انوینٹری مقام کو درست کریں',\n          admin: 'انتظامیہ',\n          admitPatient: 'مریض جمع کریں',\n          appointments: 'ملاقاتیں',\n          billing: 'بلنگ',\n          completeImaging: 'مکمل امیجنگ',\n          completeLab: 'مکمل لیب',\n          defineUserRoles: 'صارف کے کردار کی وضاحت کریں',\n          deleteAppointment: 'ملاقات حذف کریں',\n          deleteDiagnosis: 'تشخیس حذف کریں',\n          deleteImaging: 'امیجنگ حذف کریں',\n          deleteIncident: '',\n          deleteIncidentCategory: '',\n          deleteInventoryItem: 'حذف انوینٹری آئٹم',\n          deleteInvoice: 'رسید کو حذف کریں',\n          deleteLab: 'لیب حذف کریں',\n          deleteMedication: 'ادویات حذف کریں',\n          deleteNote: 'نوٹ حذف کریں',\n          deletePatient: 'مریض کو حذف کریں',\n          deletePhoto: 'تصویر حذف',\n          deletePricing: 'قیمتوں کا تعین حذف کریں',\n          deletePricingProfile: 'قیمتوں کا تعین پروفائل حذف کریں',\n          deleteProcedure: 'ضابطہ حذف کریں',\n          deleteSocialwork: 'سماجی کام حذف کریں',\n          deleteVisit: ' دورہ حذف کریں',\n          deleteVitals: ' vitals حذف کریں',\n          dischargePatient: 'تخریج مریض',\n          editInvoice: 'رسید میں ترمیم کریں',\n          fulfillInventory: 'انوینٹری پورا کریں',\n          fulfillMedication: 'ادویات پورا کریں',\n          generateIncidentReport: '',\n          imaging: 'امیجنگ',\n          incident: '',\n          inventory: 'انوینٹری',\n          invoices: 'رسیدیں',\n          labs: 'لیبز',\n          loadDb: 'لوڈ کریں ڈیٹا بیس',\n          manageIncidents: '',\n          medication: 'ادویات',\n          overrideInvoice: 'رسید کو منسوخ کردے',\n          patientReports: 'مریض کی رپورٹیں',\n          patients: 'مریض',\n          pricing: 'قیمتوں کا تعین',\n          updateConfig: 'اپ ڈیٹ کی ترتیب',\n          visits: 'دورے'\n        },\n        messages: { roleSaved: '{{roleName}} کردار محفوظ ہوگیا ہے.' },\n        titles: { roleSaved: 'کردار محفوظ ہوگیا ہے' }\n      },\n      userRoles: 'صارف کے کردار',\n      users: 'صارفین',\n      visitForms: {\n        labels: {\n          followup: 'فالواپ',\n          form: 'فارم',\n          initial: 'ابتدائی',\n          visitType: 'دورہ کی قسم'\n        },\n        titles: { visitForms: 'دورہ فارم' }\n      },\n      workflow: {\n        admissionDepositLabel: 'داخلہ جمع کی ضرورت',\n        clinicPrepaymentLabel: 'کلینک قبل از استعمال ادائیگی کی ضرورت',\n        editTitle: 'ورک فلو آپشنز',\n        followupPrepaymentLabel: 'تعاقب قبل از استعمال ادائیگی کی ضرورت',\n        messages: { optionsSaved: 'ورک فلو آپشنز محفوظ ہوگۓ ہیں' },\n        newTitle: 'ورک فلو آپشنز',\n        outpatientImagingLabel: 'بیرونی مریض کی امیجنگ قبل از استعمال ادائیگی کی ضرورت',\n        outpatientLabLabel: 'بیرونی مریضوں کی لیب قبل از استعمال ادائیگی کی ضرورت',\n        outpatientMedicationLabel: 'بیرونی مریضوں کی ادویات قبل از استعمال ادائیگی کی ضرورت',\n        titles: { optionsSaved: 'آپشنز محفوظ ہوگۓ' },\n        workflowLabel: 'فلو آپشنز'\n      }\n    },\n    alerts: {\n      errorExclamation: 'خرابی !!!!',\n      pleaseWait: 'برائے مہربانی انتظار کریں',\n      reportError: ' رپورٹ کی تیاری میں خرابی',\n      warningExclamation: 'انتباہ !!!!'\n    },\n    allergies: {\n      buttons: { addAllergy: 'الرجی شامل کریں' },\n      labels: {\n        allergyName: 'نام',\n        patientAllergy: 'مریض کی الرجی'\n      },\n      titles: {\n        addAllergy: 'الرجی شامل کریں',\n        editAllergy: 'الرجی میں ترمیم کریں'\n      }\n    },\n    application: {\n      messages: { sessionExpired: 'آپ کا سیشن متروک ہو گیا ہے۔ کاروائی جاری رکھنے کے لاگ ان کریں' },\n      titles: { sessionExpired: 'سیشن کی مدت ختم ہوگئی' }\n    },\n    appointments: {\n      buttons: {\n        newButton: '+ نئی ملاقات',\n        scheduleSurgery: ' + سرجری کا وقت مقرر کریں'\n      },\n      calendarTitle: ' ملاقات کا کیلنڈر',\n      currentScreenTitle: 'ملاقات کی فہرست',\n      editTitle: 'ملاقات میں ترمیم کریں',\n      labels: {\n        noLocation: 'کوئی مقام نہیں',\n        selectedStartingDate: 'اس تاریخ پر یا اس کے بعد کی ملاقاتیں دیکھیں'\n      },\n      messages: {\n        appointmentSaved: '  - مریض کے  ساتھ ملاقات محفوظ کر لی گئی ہے {{patient}}',\n        endTimeLaterThanStart: 'براہ مہربانی وقت آغاز کے بعد کا ختم وقت منتخب کریں۔'\n      },\n      missed: 'چوک جانے والی ملاقاتیں',\n      newTitle: 'نئی ملاقات',\n      searchTitle: 'ملاقاتیں تلاش کریں',\n      sectionTitle: 'ملاقاتیں',\n      thisWeek: 'اس ہفتہ کی ملاقاتیں',\n      titles: {\n        appointmentSaved: 'ملاقات محفوظ کر لی گئی',\n        editSurgicalAppointment: 'سرجری کی ملاقات میں ترمیم کریں',\n        newSurgicalAppointment: 'نئی سرجری کی ملاقات',\n        theaterSchedule: 'تھیٹر اوقات نامہ'\n      },\n      todayTitle: 'آج کی ملاقاتیں'\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: 'کوئی رسید نہیں ملی',\n        noPricingItems: 'کوئی قیمتوں کے تعیں والی اشیاء نہیں ملی',\n        noPricingProfiles: 'کوئی قیمتوں کے تعیں والی پروفائل نہیں ملی'\n      },\n      buttons: {\n        addOverride: 'منسوخ شامل کریں',\n        createInvoice: 'ایک رسید بنائیں؟'\n      },\n      labels: {\n        actualCharges: 'اصل قیمت',\n        discountAmount: 'ڈسکاؤنٹ رقم',\n        discountPercentage: 'رعایت فی صد',\n        externalInvoiceNumber: 'بیرونی رسید #',\n        hmoCom: 'HMO / COM',\n        insurance: 'قومی بیمہ',\n        paymentProfile: 'ادائیگی پروفائل',\n        paymentsDeposits: 'ادائیگی / جمع کھاتہ',\n        pricingPanelOverrides: 'قیمتوں کا تعین پروفائل کی منسوخی',\n        pricingProfile: 'قیمتوں کا تعین پروفائل'\n      }\n    },\n    buttons: {\n      add: 'شامل کریں',\n      addItem: 'آئٹم شامل کریں',\n      addLineItem: 'لائن آئٹم شامل کریں',\n      addValue: 'قیمت جمع کریں',\n      addVisit: 'دورہ میں شامل کریں',\n      allRequests: 'تمام درخواستیں',\n      barcode: 'بارکوڈ',\n      cancel: 'منسوخ کریں',\n      clear: 'صاف',\n      close: 'بند کریں',\n      complete: 'مکمل',\n      'delete': 'حذف کریں',\n      dispense: 'تقسیم',\n      edit: 'تصیح',\n      filter: 'فلٹر',\n      fulfill: 'پورا کریں',\n      'import': ' امپورٹ کریں',\n      loadFile: 'فائل لوڈ کریں',\n      newItem: '+ نیا آئٹم',\n      newNote: 'نیا نوٹ',\n      newRequest: 'نئی درخواست',\n      newRequestPlus: '+ نئی درخواست',\n      newUser: 'نیا صارف',\n      ok: 'ٹھیک ہے',\n      remove: 'دور کریں',\n      returnButton: 'واپسی',\n      search: 'تلاش کریں',\n      showAll: 'سارے دکھائیں',\n      showFewer: 'کم دکھائیں',\n      update: 'اپ ڈیٹ'\n    },\n    components: {\n      chargesByTypeTab: { charges: 'چارجز' },\n      customFormManager: { buttons: { addForm: 'فارم کا اضافہ کریں' } },\n      dateTimePicker: {\n        amHour: '{{hour}} AM',\n        midnight: 'آدھی رات',\n        noon: 'دوپہر',\n        pmHour: '{{hour}} PM'\n      },\n      imageUpload: { messages: { selectValidImageFile: '' } },\n      operativeProcedures: {\n        buttons: { addProcedure: 'ضابطے شامل کریں' },\n        labels: { procedure: 'طریقہ کار' },\n        titles: { procedures: 'طریقہ کار/ ضابطے' }\n      },\n      patientOrders: {\n        buttons: {\n          newImaging: 'نئی امیجنگ',\n          newLab: 'نئی لیب',\n          newMedication: 'نئی ادویات'\n        },\n        labels: {\n          imagingOrderType: 'امیجنگ',\n          labOrderType: 'لیب',\n          medicationOrderType: 'ادویات',\n          orderType: 'آرڈر کی قسم'\n        }\n      },\n      priceList: { charges: '{{pricingType}} چارجز' },\n      quantityCalc: { result: '{{targetUnit}} کل: {{calculated}}' },\n      quantityConv: {\n        conversion: ' میں کیا شامل ہے؟ {{name}} 1',\n        unit: 'اکائی'\n      },\n      sortableColumn: { labels: { selectAll: '(تمام منتخب کریں)' } },\n      takePhoto: {\n        camera: 'کیمرہ',\n        how: 'آپ ایک تصویر کو کس طرح شامل کرنا چاہتے ہیں؟',\n        labels: {\n          takeAPicture: '',\n          uploadAFile: ''\n        },\n        photo: 'تصویر',\n        preview: 'پیش نظارہ',\n        takePhoto: 'تصویر کھینچیں',\n        uploadFile: 'فائل اپ لوڈ کریں'\n      },\n      upcomingAppointments: {\n        labels: {\n          date: 'تاریخ',\n          location: 'مقام',\n          type: 'قسم',\n          'with': 'کے ساتھ'\n        },\n        titles: { upcomingAppointments: 'عنقریب آنے والی ملاقاتیں' }\n      }\n    },\n    customForms: {\n      buttons: { addForm: 'فارم شامل کریں' },\n      labels: { formToAdd: 'شامل کرنے کے لئے فارم' },\n      titles: { addCustomForm: 'کسٹم فارم شامل کریں' }\n    },\n    dashboard: {\n      setup: '',\n      title: 'آپ کیا کرنا چاہیں گے؟'\n    },\n    dates: {\n      'long': 'دن {{days}} مہینے {{months}} سال {{years}}',\n      longOmitDays: 'مہینے {{months}} سال {{years}}',\n      longOmitDaysPlural: 'مہینے {{months}} سال {{years}}',\n      longOmitDaysYears: 'مہینے {{months}}',\n      longOmitYears: 'دن {{days}} مہینے {{months}}',\n      longPlural: 'دن {{days}} مہینے {{months}} سال {{years}}',\n      'short': 'د{{days} م{{months}} س{{years}}',\n      shortOmitYears: 'د{{days} م{{months}}'\n    },\n    diagnosis: {\n      labels: {\n        activeDiagnosis: 'فعال تشخیص',\n        date: 'تاریخ',\n        diagnosis: 'تشخیص',\n        secondaryDiagnosis: 'ثانوی تشخیص'\n      },\n      titles: {\n        addDiagnosis: 'تشخیص کے لئے شامل کریں',\n        editDiagnosis: 'تشخیص میں ترمیم کریں'\n      }\n    },\n    errors: {\n      accepted: 'قبول کرنا ضروری',\n      blank: 'خالی نہیں رہ سکتی',\n      confirmation: 'کے مماثل نہیں ہے {{attribute}}',\n      empty: 'خالی نہیں ہو سکتا',\n      equalTo: 'کے برابر ہونا چاہیے {{count}}',\n      even: 'جفت ہونا ضروری ہے',\n      exclusion: 'مخصوص ہے',\n      greaterThan: 'سے زیادہ ہونا چاہیے {{count}}',\n      greaterThanOrEqualTo: 'سے زیادہ یا برابر ہونا چاہیے {{count}}',\n      inclusion: 'فہرست میں شامل نہیں ہے',\n      invalid: 'غلط ہے',\n      invalidNumber: 'درست نمبر نہیں',\n      lessThan: 'سے کم ہونا چاہیے {{count}}',\n      lessThanOrEqualTo: 'سے کم یا برابر ہونا چاہیے {{count}}',\n      notANumber: 'ایک نمبر نہیں ہے',\n      notAnInteger: 'ایک عددی ہونا لازمی ہے',\n      odd: 'طاق ہونا ضروری ہے',\n      otherThan: 'سے مختلف ہونا چاہیے {{count}}',\n      present: 'خالی ہونا ضروری ہے',\n      result: 'براے مہربانی مکمل کرنے سے پہلے نتیجہ درج کریں',\n      tooLong: 'حروف {{count}}بہت طویل ہے، زیادہ سے زیادہ ',\n      tooShort: 'حروف{{count}}بہت مختصر ہے کم از کم ',\n      wrongLength: 'حروف ہونے چاہئے{{count}}غلط لمبائی ہے '\n    },\n    headings: { chargedItems: 'چارج اشیا' },\n    imaging: {\n      alerts: {\n        completedMessage: 'امیجنگ درخواست کو مکمل کیا گیا ہے',\n        completedTitle: 'امیجنگ درخواست مکمل',\n        savedMessage: 'امیجنگ درخواست کو محفوظ کر لیا گیا ہے۔',\n        savedTitle: 'امیجنگ گذارش بچا لیا'\n      },\n      buttons: { newButton: '+ نئے امیجنگ' },\n      labels: {\n        addNewVisit: '--- نیا دورہ شامل کریں ---',\n        radiologist: 'ریڈیولوجسٹ'\n      },\n      messages: { noCompleted: 'کوئی مکمل اشیاء نہیں موجود۔' },\n      pageTitle: 'امیجنگ درخواستیں',\n      sectionTitle: 'امیجنگ',\n      titles: {\n        completedImaging: 'امیجنگ مکمل',\n        editTitle: 'امیجنگ ترمیم کی گذارش',\n        newTitle: 'نئے امیجنگ گذارش'\n      }\n    },\n    incident: {\n      buttons: {\n        add: '',\n        addForm: '',\n        addItem: '',\n        cancel: '',\n        'delete': '',\n        download: '',\n        edit: '',\n        'export': '',\n        generateRep: '',\n        newAttachment: '',\n        newCategory: '',\n        newIncident: '',\n        newNote: ''\n      },\n      labels: {\n        actions: '',\n        addedBy: '',\n        category: '',\n        categoryItem: '',\n        date: '',\n        dateRecorded: '',\n        department: '',\n        description: '',\n        endDate: '',\n        givenBy: '',\n        howToAddAttachment: '',\n        incidentDate: '',\n        incidentId: '',\n        item: '',\n        lastUpdated: '',\n        note: '',\n        patientId: '',\n        patientImpacted: '',\n        reportType: '',\n        reportedBy: '',\n        reportedDate: '',\n        reportedTo: '',\n        sentinelEvent: '',\n        startDate: '',\n        status: '',\n        statusActive: '',\n        statusClosed: '',\n        statusFollowup: '',\n        statusReported: '',\n        title: '',\n        total: '',\n        updatedBy: ''\n      },\n      messages: {\n        attachmentFileRequired: '',\n        createNew: '',\n        createNewIncidentCategory: '',\n        fillIn: '',\n        incidentCategorySaved: '',\n        noClosedIncidents: '',\n        noIncidentCategoriesFound: '',\n        noIncidents: '',\n        saved: '',\n        selectExistingPatient: ''\n      },\n      titles: {\n        addAttachment: '',\n        addCategoryItem: '',\n        addNote: '',\n        attachments: '',\n        closed: '',\n        current: '',\n        deleteAttachment: '',\n        deleteIncident: '',\n        deleteIncidentCategory: '',\n        deleteItem: '',\n        deleteNote: '',\n        editAttachment: '',\n        editIncident: '',\n        editIncidentCategory: '',\n        editNote: '',\n        general: '',\n        history: '',\n        incidentCategories: '',\n        incidentCategoryItem: '',\n        incidentCategoryName: '',\n        incidentCategorySaved: '',\n        incidentSaved: '',\n        incidents: '',\n        incidentsByCategory: '',\n        incidentsByDepartment: '',\n        newIncident: '',\n        newIncidentCategory: '',\n        notes: '',\n        reports: ''\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'فی یونٹ لاگت:',\n        delivered: 'وصول کنندہ:',\n        location: 'مقام کی درستگی:',\n        prescription: 'نسخہ براۓ:',\n        pulled: 'سے نکالا:',\n        quantity: 'تکمیل پر مقدار:',\n        reason: 'وجہ:',\n        returned: 'مریض سے واپس',\n        transferredFrom: 'سے منتقل:',\n        transferredTo: 'میں منتقل کر دیا:'\n      },\n      labels: {\n        action: 'عمل',\n        add: 'شامل کریں',\n        addAdjustmentType: '',\n        adjust: 'درست کریں',\n        adjustmentDate: 'درستگی کی تاریخ',\n        adjustmentFor: 'درستگی براۓ',\n        adjustmentType: 'درستگی کی قسم',\n        aisle: 'راہداری',\n        aisleLocation: 'راہداری مقام',\n        allInventory: 'تمام انوینٹری',\n        allItems: 'تمام چیزیں',\n        availableQuantity: '{{quantity}} دستیاب',\n        billTo: 'کا بل',\n        consumePurchases: 'کھپت خریداریاں',\n        consumptionRate: 'کھپت کی شرح',\n        cost: 'لاگت',\n        costPerUnit: 'فی یونٹ لاگت',\n        crossReference: 'دوطرفی حوالہ',\n        currentQuantity: 'موجودہ مقدار',\n        dateCompleted: 'تاریخ مکمل',\n        dateEffective: 'تاریخ نافذ',\n        dateEnd: 'آخری تاریخ',\n        dateReceived: 'تاریخ موصولی',\n        dateStart: 'شروع کرنے کی تاریخ',\n        dateTransferred: 'تاریخ منتقل',\n        daysLeft: 'دن باقی',\n        deleteItem: 'آٹم حذف کریں',\n        deliveryAisle: 'ڈلیوری راہداری',\n        deliveryLocation: 'ترسیل کے محل وقوع',\n        details: 'تفصیلات دیکھیں',\n        distributionUnit: 'تقسیم کا یونٹ',\n        editItem: 'آٹم میں ترمیم',\n        expense: 'کرنے کے اخراجات',\n        expirationDate: 'میعاد ختم ہونے کی تاریخ',\n        fulfillRequest: 'درخواست کو پورا کریں',\n        fulfillRequestNow: 'ابھی درخواست کو پورا کریں',\n        gift: 'خیراتی تحفہ',\n        giftInKindNo: 'نہیں',\n        giftInKindYes: 'ہاں',\n        giftUsage: 'خیراتی تحفہ کا استعمال',\n        inventoryConsumed: 'انوینٹری کھپت',\n        inventoryItem: 'انوینٹری آئٹم',\n        inventoryObsolence: 'متروک انوینٹری',\n        invoiceItems: 'رسید اشیاء',\n        invoiceLineItem: 'رسید لائن آئٹم',\n        invoiceNumber: 'رسید نمبر',\n        item: 'آئٹم',\n        itemNumber: 'آئٹم نمبر',\n        items: 'اشیاء',\n        location: 'مقام',\n        locations: 'مقامات',\n        markAsConsumed: 'خرچ شدہ کے طور پر درج کریں',\n        name: 'نام',\n        newItem: 'نئی آٹم',\n        originalQuantity: 'اصل مقدار',\n        print: 'پرنٹ',\n        printBarcode: 'پرنٹ بارکوڈ',\n        printer: 'پرنٹر',\n        pullFrom: 'سے ھیںچو',\n        purchaseCost: 'خریداری کی لاگت',\n        purchaseInfo: 'خریداری کی معلومات',\n        purchases: 'خریداری',\n        quantity: 'مقدار ({{unit}})',\n        quantityAvailable: 'دستیاب مقدار',\n        quantityOnHand: 'موجودہ مقدار',\n        quantityRequested: ' درخواست کی گئی مقدار',\n        rank: 'درجہ',\n        reason: 'وجہ',\n        remove: 'دور کریں',\n        removeAdjustmentType: '',\n        reorderPoint: ' پوائنٹ پھر ترتیب کریں',\n        requestedItems: 'درخواست کی گئی اشیاء',\n        returnAdjustmentType: '',\n        returnToVendorAdjustmentType: '',\n        salePricePerUnit: 'فی یونٹ فروخت کی قیمت',\n        save: 'محفوظ کریں',\n        serialNumber: 'سیریل / لوٹ نمبر',\n        total: 'کل',\n        totalCost: 'کل لاگت',\n        totalReceived: 'کل موصول: {{total}}',\n        transaction: 'ٹرانزیکشن',\n        transactions: 'ٹرانزیکشنز',\n        transfer: 'منتقلی',\n        transferFrom: 'سے منتقلی',\n        transferTo: 'مقام پر منتقلی',\n        transferToAisle: 'مقام راہداری پر منتقلی',\n        unit: 'یونٹ',\n        unitCost: 'یونٹ کی لاگت',\n        vendor: 'وینڈر',\n        vendorItemNumber: 'وینڈر آئٹم نمبر',\n        writeOffAdjustmentType: '',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: ' فرق کے تخمینہ کے لئے مناسب جگہ (جگہوں) پر مقدار کو ٹھیک کریں {{difference }}.',\n        createRequest: 'ایک نئی درخواست بنائیں؟',\n        itemNotFound: '<br> ورنہ واپس جانے کے لیے منسوخ کا بٹن دبائیں  <br> اگر آپ ایک نیا انونٹری آئٹم تخلیق کرنا چاہتے ہیں تو ذیل میں معلومات درج کریں۔  <strong>{{item}}</strong>انونٹری آئٹم نہیں ملا۔ ',\n        loading: 'ٹراسیکشنر لوڈ ہو رہی ہے۔۔۔',\n        noItems: 'کوئی آئٹم نہیں ملا۔',\n        noRequests: 'کوئی درخواستیں نہیں ملی۔',\n        purchaseSaved: 'انونٹری کی خریداری کو کامیابی سے محفوظ کر لیا گیا ہے۔',\n        quantity: ' کے مقامات میں کل مقدار سے مماثل نہیں ہے <strong>({{locationQuantity}})</strong>کی کل مقدار <strong>({{quantity}})</strong>',\n        removeItem: ' آپ کو یقین ہے کہ آپ اس آٹم کو رسید سے ہٹانا چاہتے ہیں؟',\n        removeItemRequest: ' آپ کو یقین ہے کہ آپ اس آٹم کو درخواست سے ہٹانا چاہتے ہیں؟',\n        requestFulfilled: 'انونٹری کی درخواست پوری ہو گئی.',\n        requestUpdated: 'انونٹری درخواست کو اپ ڈیٹ کر دیا گیا ہے.',\n        warning: 'ضروری ہے (* کے نشان والے) قطعات میں بھرنا اور شامل کرنے سے پہلے غلطیوں کو درست کریں۔'\n      },\n      reports: {\n        adjustment: 'تفصیلی درستگی',\n        daysSupply: 'اسٹاک میں دنوں کی فراہمی',\n        expenseDetail: 'تفصیلی اخراجات',\n        expenseSum: 'خلاصہ اخراجات',\n        expiration: 'میعاد ختم ہونے کی تاریخ',\n        'export': 'ایکسپورٹ رپورٹ',\n        fields: ' شامل کرنے کے قطعات',\n        finance: 'مالیات کا خلاصہ',\n        generate: 'رپورٹ بنائیں',\n        invLocation: 'محل وقوع کے اعتبار انوینٹری',\n        invValuation: 'انوینٹری کی مالیت',\n        purchaseDetail: 'تفصیلی خرید',\n        purchaseSum: 'خلاصہ خرید',\n        reportType: 'رپورٹ کی قسم',\n        rows: {\n          adjustments: 'درستگیاں',\n          adjustmentsTotal: 'کل درستگیاں',\n          balanceBegin: 'ابتدائی بقایا رقم',\n          balanceEnd: 'اختمام پر بقایا رقم',\n          category: 'قسم',\n          consumed: 'کھپت',\n          consumedGik: 'کی کھپت GiK',\n          consumedGikTotal: 'کی کھپت GiK کل',\n          consumedPuchases: 'خریداری کی کھپت',\n          consumedPurchasesTotal: 'کل خریداری کی کھپت',\n          consumedTotal: 'کل کھپت',\n          errInFinSum: '_generateFinancialSummaryReport میں خرابی: ',\n          errInFindPur: '_findInventoryItemsByPurchase میں خرابی: ',\n          errInFindReq: '_findInventoryItemsByRequest میں خرابی: ',\n          expensesFor: 'کے لئے اخراجات: ',\n          noAccount: '(کوئی اکاؤنٹ نہیں)',\n          subtotal: 'ذیلی کل: ',\n          subtotalFor: '{{account}} - {{category}}ذیلی کل ',\n          total: 'کل: ',\n          totalFor: ' کل براۓ {{var}}: ',\n          totalPurchases: 'کل خریداری',\n          transfer1: '{{quantity }} سے {{location }}',\n          trasnfer2: '{{target}} :براۓ{{source}} :منجانب'\n        },\n        stockTransferDetail: 'تفصیلی اسٹاک کی منتقلی',\n        stockTransferSum: 'خلاصہ اسٹاک کی منتقلی',\n        stockUsageDetail: 'تفصیلی اسٹاک استعمال',\n        stockUsageSum: 'خلاصہ اسٹاک استعمال',\n        titleDateRange: '{{startDate}} - {{endDate}} رپورٹ {{name}}',\n        titleSingleDate: '{{date}} رپورٹ {{name}}'\n      },\n      titles: {\n        addPurchase: 'خریداری شامل کریں',\n        addRequest: 'نئی درخواست',\n        adjustment: 'درستگی',\n        editPurchase: 'خریداری میں ترمیم کریں',\n        editRequest: 'تصیح کی گذارش',\n        inventoryItem: 'نئے انوینٹری آئٹم',\n        inventoryReport: 'انوینٹری کی رپورٹ',\n        purchaseSaved: 'انوینٹری خریداریاں محفوظ کرلی',\n        quickAddTitle: 'نئے انوینٹری آئٹم',\n        removeItem: 'آئٹم ہٹائیں',\n        requestFulfilled: 'درخواست پوری',\n        requestUpdated: 'درخواست اپ ڈیٹ ہوگئی',\n        transfer: ' اشیا منتقل کریں',\n        warning: 'انتباہ!!!'\n      }\n    },\n    labels: {\n      action: 'عمل',\n      actions: 'عوامل',\n      addNewOutpatientVisit: 'نۓ بیرنی مریض کے لیے دورہ کا اضافہ کریں',\n      address: 'ایڈریس',\n      age: 'عمر',\n      allDay: 'تمام دن',\n      amount: 'رقم',\n      anesthesia: 'اینستھیزیا',\n      assisting: 'مدد',\n      balanceDue: 'واجب الادا',\n      billDate: 'بل تاریخ',\n      billTo: 'کا بل',\n      category: 'قسم',\n      completed: 'مکمل',\n      country: 'ملک',\n      cptcode: 'CPT کوڈ',\n      creditTo: 'کرنے کے لئے کریڈٹ',\n      date: 'تاریخ',\n      dateCompleted: 'تاریخ مکمل',\n      dateOfBirth: 'پیدائش کی تاریخ',\n      dateOfBirthShort: 'DOB',\n      datePaid: 'تاریخ ادا',\n      dateRequested: 'درخواست کی تاریخ',\n      'delete': 'حذف کریں',\n      deleteRequest: 'درخواست حذف کریں',\n      deleteUser: 'صارف حذف کریں',\n      department: 'محکمہ',\n      description: 'تفصیل',\n      discount: 'رعایت',\n      displayName: 'دکھانے کے لیے نام',\n      docRead: 'دستاویزات پڑھیں',\n      docWritten: 'ڈاکس سے تحریری',\n      edit: 'تصیح',\n      editUser: 'صارف میں ترمیم کریں',\n      email: 'ای میل',\n      endDate: 'تاریخ اختتام',\n      endTime: 'آخر وقت',\n      excess: 'اضافی',\n      expenseTo: 'کرنے کے اخراجات',\n      fileLoadSuccessful: ' فائل لوڈ کامیابی سے ہو گئ',\n      fileName: 'فائل کا نام',\n      fileToLoad: ' لوڈ کے لیے فائل',\n      fulfill: 'پورا کریں',\n      fulfillRequest: 'درخواست کو پورا کریں',\n      fulfillRequestNow: 'ابھی درخواست کو پورا کریں',\n      fulfilled: 'پوری کر دی گئ',\n      grandTotal: 'مجموعی عدد',\n      id: 'آئی ڈی',\n      imageOrders: 'امیج آرڈرز',\n      imagingType: 'امیجنگ قسم',\n      importFile: 'امپورٹ فائل',\n      invoiceId: 'رسید کی آئی ڈی',\n      labOrders: 'لیب آرڈرز',\n      lineItems: 'لائن آئٹمز',\n      loading: 'لوڈ کر رہا ہے',\n      location: 'مقام',\n      lookupType: 'تلاش قسم',\n      medication: 'ادویات',\n      name: 'نام',\n      newUser: 'نیا صارف',\n      note: 'نوٹ',\n      notes: 'نوٹس',\n      number: 'نمبر',\n      on: 'پر',\n      password: 'پاس ورڈ',\n      patient: 'مریض',\n      payments: 'ادائیگیاں',\n      physician: 'فزیشن',\n      prescriber: 'تجویز کنندہ',\n      prescription: 'نسخے',\n      prescriptionDate: 'نسخے تاریخ',\n      price: 'قیمت',\n      print: '',\n      procedures: 'طریقہ کار',\n      provider: 'مھیا کرنے والا',\n      pullFrom: 'سے کھیںچو',\n      quantity: 'تعداد',\n      remarks: 'تبصرہ',\n      requestedBy: 'کی طرف سے درخواست',\n      requestedOn: 'پر درخواست',\n      requests: 'درخواستیں',\n      result: 'نتیجہ',\n      results: 'نتائج',\n      role: 'کردار',\n      search: 'تلاش کریں',\n      sex: 'جنس',\n      startDate: 'شروع کرنے کی تاریخ',\n      startTime: 'وقت آغاز',\n      status: 'صورتحال',\n      takenBy: '',\n      total: 'کل',\n      type: 'قسم',\n      userCanAddNewValue: 'صارف نئی اقدار کا اضافہ کر سکتے ہیں',\n      username: 'یوزر نیم',\n      value: 'قدر',\n      view: '',\n      visit: 'دورہ',\n      'with': 'ساتھ'\n    },\n    labs: {\n      alerts: {\n        requestCompletedMessage: 'لیب کی درخواست مکمل ہو گئی ہے',\n        requestCompletedTitle: 'لیب درخواست مکمل',\n        requestSavedMessage: 'لیب کی درخواست محفوظ ہو گئی ہے۔',\n        requestSavedTitle: 'لیب کی درخواست محفوظ'\n      },\n      buttons: { newButton: '+ نئی لیب' },\n      completedTitle: 'مکمل لیبز',\n      deleteTitle: 'درخواست حذف کریں',\n      editTitle: 'لیب میں ترمیم کی درخواست',\n      labels: {\n        addNewVisit: '۔۔ نیا دورہ شامل کریں ۔۔',\n        labType: 'لیب کی قسم'\n      },\n      messages: {\n        createNewRecord: 'ایک نیا ریکارڈ بنائیں؟',\n        noCompleted: 'کوئی مکمل آئٹم موجود نہیں',\n        noItemsFound: 'کوئی لیب موجود نہیں'\n      },\n      newTitle: 'نئے لیب کی گذارش',\n      requestsTitle: 'لیب درخواستیں',\n      sectionTitle: 'لیبز'\n    },\n    languages: {\n      en: 'انگریزی',\n      fr: 'فرانسیسی',\n      es: 'ہسپانوی',\n      de: 'جرمن',\n      ru: 'روسی',\n      'es-co': 'ہسپانوی (کولمبیا)',\n      'pt-br': 'پرتگالی (برازیل)',\n      tr: 'ترکی',\n      ur: 'اردو'\n    },\n    loading: {\n      messages: {\n        '0': 'سب سے تیز تیتلی پرواز کی رفتار فی گھنٹہ 12 میل ہے. کچھ کیڑے 25 میل فی گھنٹہ کی رفتار سے پرواز کر سکتے ہیں',\n        '1': ' پرندے میں صرف اللو ہیں جو نیلا رنگ دیکھ سکتے ہیں',\n        '2': 'بلی کی 100 مختلف آوازیں ہیں؛ کتے کی صرف 10 ہیں',\n        '3': 'انسان تقریر میں 72 مختلف پٹھوں کی کل استعمال کرتے ہیں',\n        '4': ' افریقہ کے براعظم میں 1،000 سے زائد مختلف زبانیں بولی جاتی ہیں',\n        '5': ' اراۓتھروفوب وہ ہے جو آسانی سے شرما جاۓ ',\n        '6': 'دنیا میں سب سے زیادہ عام فوبیا درد کا خوف ہے جو اوڈاۓنوفوبیا ہے',\n        '7': ' آپ جب بھی کھڑے ہوتے ہیں آپ کا جسم خود کو متوازن کرنے کے لیے 300 پٹھوں کا استعمال کرتا',\n        '8': 'بعض میںڈک منجمد ٹھوس ہوسکتے ہیں پھر پگھل  جائیں تو بھی جی سکتے ہیں',\n        '9': 'ہماری آنکھیں پیدائش سے ہی اسی ہجم کی ہیں، لیکن ہماری ناک اور کان کبھی بڑھنا نہیں رکتی',\n        '10': 'آپ کی زبان آپ کے جسم میں واحد پٹھہ ہے جو صرف ایک طرف سے منسلک ہے',\n        '11': 'اونٹ کی تین پلکیں ہوتی ہیں جو اڑتی ریت سے بچانے کے لئے ہیں۔'\n      },\n      progressBar: { progress: '{{progressBarValue}}٪ مکمل' }\n    },\n    login: {\n      labels: {\n        password: 'پاس ورڈ',\n        signIn: 'سائن ان ',\n        username: 'یوزر نیم'\n      },\n      messages: {\n        error: 'یوزر نیم یا پاس ورڈ غلط ہے.',\n        signIn: 'سائن ان کریں'\n      }\n    },\n    medication: {\n      alerts: {\n        fulfilledTitle: 'ادویات درخواست پوری',\n        returnedMessage: 'ادویات پر واپس کر دی گئی کا نشان لگا دیا گیا ہے۔',\n        returnedTitle: 'واپس کی گئی ادویات',\n        savedMessage: 'ادویات کا ریکارڈ محفوظ ہوگیا ہے۔',\n        savedTitle: 'ادویات کی درخواست محفوظ کر لی گئی'\n      },\n      buttons: {\n        dispenseMedication: 'ادویات تقسیم',\n        newButton: '+ نئی درخواست',\n        returnMedication: 'واپسی دوا'\n      },\n      labels: {\n        adjustmentDate: 'تاریخ درستگی',\n        creditToAccount: 'اکاؤنٹ کو کریڈٹ',\n        quantityDispensed: 'تقسیم یا استعمال کی گئی مقدار',\n        quantityDistributed: 'تقسیم کی گئی مقدار',\n        quantityRequested: ' درخواست کی گئی مقدار',\n        quantityToReturn: 'مقدار براۓ واپسی',\n        refills: 'دوبارہ بھریں',\n        returnAisle: 'واپسی راہداری',\n        returnLocation: ' مقام واپسی',\n        returnReason: 'واپسی کی وجہ / نوٹس'\n      },\n      messages: { createNew: 'ایک نئی دوا کی درخواست بنائیں؟' },\n      pageTitle: 'ادویات کی درخواستیں',\n      returnMedication: 'واپس دوا',\n      sectionTitle: 'ادویات',\n      titles: {\n        completedMedication: 'مکمل دوا',\n        editMedicationRequest: 'ادویات میں ترمیم کی درخواست',\n        newMedicationRequest: 'نئی دوا کی گذارش'\n      }\n    },\n    messages: {\n      createNewRecord: 'ایک نیا ریکارڈ بنائیں؟',\n      createNewUser: 'ایک نیا صارف بنائیں؟',\n      'delete': '',\n      delete_plural: '',\n      delete_singular: '',\n      forAuthorizedPersons: 'یہ رپورٹ صرف مجاز افراد کے لئے ہے.',\n      newPatientHasToBeCreated: 'ایک نیا مریض بنایا جانا ضروری ہے ... براہ کرم انتظار کریں ...',\n      noHistoryAvailable: 'کوئی سرگزشت دستیاب نہیں',\n      noItemsFound: 'کوئی آئٹم نہیں ملا.',\n      noNotesAvailable: 'کوئی اضافی کلینکل نوٹ اس دورے کے لئے دستیاب نہیں.',\n      noUsersFound: 'کوئی صارف دستیاب نہیں',\n      onBehalfOf: 'کی جانب سے',\n      reportError: 'درخواست کی رپورٹ کو پیدا کرتے وقت ایک خرابی کا سامنا ہوا۔ براہ مہربانی اپنے سسٹم ایڈمنسٹریٹر کے علم میں لائیں کہ آپ کو خرابی کا سامنا ہوا',\n      requiredFieldsCorrectErrors: 'ضرورت ہے کہ خالی قطعات (* کے نشان) میں بھریں اور محفوظ کرنے سے پہلے غلطیوں کو درست کریں.',\n      saveActionException: 'محفوظ کرنے کی کوشش کرتے ہوئے ایک خرابی واقع ہوئی ہے: {{message}}',\n      sorry: 'معاف کرنا، کچھ غلط ہوگیا...',\n      userHasBeenSaved: 'صارف محفوظ ہوگیا ہے.',\n      userSaved: ' صارف محفوظ'\n    },\n    models: {\n      appointment: {\n        labels: {\n          allDay: '',\n          appointmentDate: '',\n          appointmentType: '',\n          endDate: '',\n          location: '',\n          notes: '',\n          patient: '',\n          provider: '',\n          startDate: '',\n          status: '',\n          type: ''\n        },\n        names: {\n          plural: '',\n          singular: ''\n        }\n      },\n      attachment: { names: {\n          plural: '',\n          singular: ''\n        } },\n      form: { names: {\n          plural: '',\n          singular: ''\n        } },\n      imaging: {\n        names: '',\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      incident: { names: {\n          plural: '',\n          singular: ''\n        } },\n      item: { names: {\n          plural: '',\n          singular: ''\n        } },\n      lab: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      medication: {\n        names: {\n          plural: '',\n          singular: ''\n        },\n        request: {\n          plural: '',\n          singular: ''\n        }\n      },\n      note: { names: {\n          plural: '',\n          singular: ''\n        } },\n      patient: {\n        labels: { name: '' },\n        names: { singular: '' }\n      },\n      procedure: { names: {\n          plural: '',\n          singular: ''\n        } },\n      user: { names: {\n          plural: '',\n          singular: ''\n        } },\n      visit: { names: {\n          plural: '',\n          singular: ''\n        } },\n      vital: { names: {\n          plural: '',\n          singular: ''\n        } }\n    },\n    navigation: {\n      about: 'HospitalRun  کے بارے',\n      actions: {\n        login: 'لاگ ان',\n        logout: 'لاگ آوٹ',\n        selectLanguage: 'زبان منتخب کریں'\n      },\n      administration: 'انتظامیہ',\n      billing: 'بلنگ',\n      imaging: 'امیجنگ',\n      incident: '',\n      inventory: 'انوینٹری',\n      labs: 'لیبز',\n      medication: 'ادویات',\n      patients: 'مریض',\n      scheduling: 'اوقات نامہ',\n      subnav: {\n        actions: 'عوامل',\n        addAppointment: 'ملاقات اضافہ',\n        addressFields: 'ایڈریس قطعات',\n        admittedPatients: 'جمع شدہ مریض',\n        appointmentSearch: ' ملاقاتیں تلاش کریں',\n        appointmentsCalendar: 'ملاقاتوں کا کیلنڈر',\n        appointmentsThisWeek: 'اس ہفتے کی ملاقاتیں',\n        completed: 'مکمل',\n        currentIncidents: '',\n        customForms: 'کسٹم فام',\n        dispense: 'تقسیم',\n        history: '',\n        incidentCategories: '',\n        inventoryReceived: 'انوینٹری موصول',\n        invoices: 'رسیدیں',\n        items: 'اشیاء',\n        loadDB: 'DB لوڈ کریں',\n        lookupLists: 'تلاش فہرستیں',\n        missedAppointments: 'ضائع شدہ',\n        newIncident: '',\n        newInvoice: 'نئے رسید',\n        newPatient: 'نئے مریض',\n        newRequest: 'نئی درخواست',\n        newUser: 'نیا صارف',\n        outpatient: 'آؤٹ پیشنٹ',\n        patientListing: 'مریض کی فہرست سازی',\n        priceProfiles: 'قیمت پروفائلز',\n        prices: 'قیمتیں',\n        printHeader: '',\n        reports: 'رپورٹس',\n        requests: 'درخواستیں',\n        returnMedication: 'واپس دوا',\n        scheduleSurgery: 'سرجری اوقات نامہ',\n        theaterSchedule: 'تھیٹر اوقات نامہ',\n        \"today'sAppointments\": '',\n        userRoles: 'صارف کے کردار',\n        users: 'صارفین',\n        workflow: 'ورک فلو'\n      }\n    },\n    operationReport: {\n      labels: {\n        additionalNotes: 'اضافی نوٹس',\n        assistant: 'مددگار',\n        caseComplexity: 'کیس پیچیدگی',\n        operationDescription: 'آپریشن کی تفصیل',\n        preOpPrimaryDiagnosis: 'آپریشن سے پہلے بنیادی تشخیص',\n        preOpSecondaryDiagnosis: 'آپریشن سے پہلے ثانوی تشخیص',\n        surgeon: 'سرجن',\n        surgeryDate: 'سرجری تاریخ'\n      },\n      messages: { reportSaved: 'آپریشن رپورٹ محفوظ ہوگئی ہے۔' },\n      titles: {\n        editTitle: 'آپریشن رپورٹ میں ترمیم کریں',\n        newTitle: 'نئے آپریشن کی رپورٹ',\n        reportSaved: 'رپورٹ محفوظ ہوگئی'\n      }\n    },\n    operativePlan: {\n      buttons: { completePlan: 'مکمل حکمت عمل' },\n      labels: {\n        additionalNotes: 'اضافی نوٹس',\n        admissionInstructions: 'داخلے کی ہدایات',\n        caseComplexity: 'کیس پیچیدگی',\n        completedStatus: 'مکمل',\n        droppedStatus: 'گرا دیا',\n        operationDescription: 'آپریشن کی تفصیل',\n        plannedStatus: 'منصوبہ بندی کر لی گئی',\n        status: 'صورتحال',\n        surgeon: 'سرجن'\n      },\n      messages: {\n        planCompleted: 'آپریٹو پلان مکمل ہو چکا ہے۔ اب آپریشن رپورٹ کی طرف آپ کی رہنمائی کی جائے گی۔',\n        planSaved: 'آپریٹو پلان محفوظ ہوگیا ہے۔'\n      },\n      titles: {\n        editTitle: 'آپریٹو پلان میں ترمیم کریں',\n        newTitle: 'نیا آپریٹو پلان',\n        planCompleted: 'پلان مکمل',\n        planSaved: 'پلان محفوظ'\n      }\n    },\n    patients: {\n      buttons: {\n        addContact: 'رابطہ شامل کریں',\n        addExpense: 'اخراجات میں شامل کریں',\n        addFamilyMember: 'خاندان کا فرد شامل کریں',\n        addOperativePlan: 'آپریٹو پلان میں شامل کریں',\n        backToPatients: 'مریض کی فہرست پر واپس جائیں',\n        download: '',\n        editOperativePlan: 'موجودہ آپریٹو پلان',\n        newAppointment: 'نئی ملاقات',\n        newImaging: 'نئی امیجنگ',\n        newLab: 'نئی لیب',\n        newMedication: 'نئی دوا',\n        newPatient: '+ نیا مریض',\n        newPhoto: 'نئی تصویر',\n        newVisit: 'نیا دورہ',\n        patientCheckIn: 'مریض کا چیک ان',\n        scheduleSurgery: 'سرجری کا وقت مقرر کریں'\n      },\n      labels: {\n        admissionDate: 'داخلے کی تاریخ',\n        admit: 'داخل کریں',\n        bloodType: 'خون کی قسم',\n        caption: '',\n        civilStatus: 'سول حیثیت',\n        clinic: 'کلینک کی جگہ',\n        contacts: 'رابطے',\n        cost: 'لاگت',\n        dateOfBirth: 'پیدائش کی تاریخ',\n        dateProcessed: 'عمل درآمد کی تاریخ',\n        dischargeDate: 'فارغ کرنے کی تاریخ',\n        dob: 'DOB',\n        education: 'تعلیم',\n        email: 'ای میل',\n        externalPatientId: 'بیرونی مریض کی شناخت',\n        firstName: 'نام کا پہلا حصہ',\n        income: 'آمدن',\n        insurance: 'بیمہ',\n        lastName: 'نام کا آخری حصہ',\n        middleName: 'نام کا درمیانی حصہ',\n        monthlyCost: 'ماہانہ اخراجات',\n        occupation: 'پیشہ',\n        operativePlan: 'آپریٹو پلان',\n        parent: 'والدین / سرپرست',\n        patientDays: 'مریض کے دن',\n        patientType: 'مریضوں کی اقسام',\n        patientTypeCharity: '',\n        patientTypePrivate: '',\n        phone: 'فون',\n        placeOfBirth: 'جائے پیدائش',\n        primaryDiagnosis: 'بنیادی تشخیص',\n        referredBy: 'کی طرف سے بھیجا گیا',\n        referredDate: 'حوالہ دینے کی تاریخ',\n        relationship: 'مریض سے تعلق',\n        relationships: 'تعلقات',\n        religion: 'مذہب',\n        secondaryDiagnosis: 'ثانوی تشخیص',\n        sex: 'جنس',\n        sexNotEntered: 'جنس داخل نہیں کیا گیا',\n        sources: 'ذرائع',\n        status: 'مریض کی صورتحال',\n        totalMontlyExpense: 'مجموعی ماہانہ اخراجات'\n      },\n      messages: {\n        areYouSureDelete: ' کو حذف کرنا چاہتے ہیں؟ {{object}} آپ کو یقین ہے کہ آپ اس ',\n        createNewPatient: 'ایک نیا مریض ریکارڈ بنائیں؟',\n        deletingPatient: 'مریض اور سارے متعلقہ ریکارڈز حذف کیا جا رہا ہے',\n        noPatientsFound: 'کوئی مریض نہیں ملا۔',\n        notFoundQuickAdd: ' مریض نہیں مل سکا۔ اگر آپ کو ایک نیا مریض بنانا چاہتے ہیں تو ذیل میں معلومات درج کیجے۔ ورنہ واپس جانے کے کیے منسوخ کا بٹن دبائیں۔ <strong>{{patientFullName}}</strong> ',\n        photoFileRequired: '',\n        savedPatient: ' کے لئے مریض کا ریکارڈ محفوظ ہوگیا ہے۔ {{displayName}} '\n      },\n      navigation: {\n        appointments: 'ملاقاتیں',\n        general: 'عمومی',\n        history: 'سرگزشت',\n        imaging: 'امیجنگ',\n        labs: 'لیبز',\n        medication: 'ادویات',\n        photos: 'تصاویر',\n        socialWork: 'سماجی کام',\n        visits: 'دورے'\n      },\n      notes: {\n        newNote: 'نیا نوٹ برائے',\n        onBehalfOfCopy: 'کی جانب سے',\n        onBehalfOfLabel: 'کی جانب سے',\n        pleaseSelectAVisit: 'ایک دورے براہ مہربانی منتخب کریں',\n        updateNote: 'کی صرف سے نوٹ اپ ڈیٹ ہورہے ہیں'\n      },\n      titles: {\n        addContact: 'رابطہ شامل کریں',\n        addPhoto: 'تصویر کا اضافہ کریں',\n        additionalContacts: 'اضافی رابطے',\n        admissionsDetail: 'داخلوں کی تفصیل',\n        admissionsSummary: 'داخلوں کا خلاصہ',\n        admittedPatients: 'داخل کیے گئے مریض',\n        'delete': 'مریض کو حذف کریں',\n        deleteContact: 'رابطہ کریں حذف کریں',\n        deleteExpense: 'خرچہ حذف کریں',\n        deleteFamilyMember: 'خاندان کے فرد کو حذف کریں',\n        deletePatientRecord: 'مریض ریکارڈ حذف کریں',\n        deletePhoto: 'تصویر حذف کریں',\n        diagnosticTesting: 'تشخیصی جانچ',\n        dischargesDetail: 'فارغ کرنے کی تفصیل',\n        dischargesSummary: 'فارغ کرنے کا خلاصہ',\n        edit: 'مریض میں ترمیم کریں',\n        editPhoto: 'تصویر میں ترمیم کریں',\n        expenses: 'اخراجات',\n        familyInfo: 'خاندانی معلومات',\n        familyInformation: 'خاندان کی معلومات',\n        'new': 'نئے مریض',\n        outpatientsForDate: '{{visitDate}} بیرونی مریض برائے ',\n        patient: 'مریض رپورٹ',\n        patientListing: 'مریض کی فہرست سازی',\n        patientReport: 'مریض رپورٹ',\n        patientStatus: 'مریض کی صورتحال',\n        proceduresDetail: 'طریقہ کار کی تفصیل',\n        proceduresSummary: 'طریقہ کار کا خلاصہ',\n        savedPatient: 'مریض محفوظ ہو گیا',\n        socialWork: 'خرچہ',\n        todaysOutpatients: 'آج کے بیرونی مریضوں',\n        totalPatientDays: 'مریض کے کل دن',\n        totalPatientDaysDetailed: 'مریض کے کل دن(تفصیلی) ۔',\n        visit: 'دورہ'\n      }\n    },\n    print: { invoice: {\n        labels: {\n          billedBy: 'بل منجانب:',\n          billedDate: 'بل کی تاریخ:',\n          dateAdmitted: 'داخلہ کی تاریخ:',\n          dateDischarged: 'فارغ کرنے کی تاریخ:',\n          dischargeNotes: 'فارغ کرنے کے نوٹس:',\n          patientAddress: 'پتہ:',\n          patientAge: 'عمر:',\n          patientId: 'مریض #:',\n          patientName: 'مریض کا نام:',\n          remarks: 'خیالات:',\n          spacer: '__________________________________________'\n        },\n        messages: { whereConducted: 'میری محدودیت کے دوران کاٹ لیے گئے تھے' },\n        titles: {\n          billingStatement: 'بلنگ کی عبارت',\n          patientMember: 'مریض رکن',\n          patients: 'مریض کا',\n          relContact: 'تعلق / رابطہ نمبر'\n        }\n      } },\n    procedures: {\n      buttons: { addMedication: 'ادویات شامل کریں' },\n      labels: { medicationUsed: 'استعمال کی گئی ادویات' },\n      messages: { saved: ' آپ کو یقین ہے کہ آپ اس طریقہ کار کو حذف کرنا چاہتے ہیں؟' },\n      titles: {\n        addChargeItem: 'چارج آئٹم شامل کریں',\n        addMedicationUsed: 'استعمال کی گئی ادویات شامل کریں',\n        deleteChargeItem: 'چارج آئٹم حذف کریں',\n        deleteMedicationUsed: 'استعمال کی گئی ادویات حذف کریں',\n        edit: 'ضابطے میں ترمیم کریں',\n        editChargeItem: 'چارج آئٹم میں ترمیم کریں',\n        editMedicationUsed: 'استعمال کی گئی ادویات میں ترمیم کریں',\n        medicationUsed: 'استعمال کی گئی ادویات',\n        'new': 'نیا طریقہ کار',\n        saved: 'ضابطے محفوظ'\n      }\n    },\n    reports: {\n      labels: {\n        admissionDate: '',\n        allProcedures: '',\n        completedBy: '',\n        dischargeDate: '',\n        examiner: '',\n        images: '',\n        labs: '',\n        location: '',\n        medications: '',\n        nextAppointment: '',\n        nextAppointments: '',\n        notes: {\n          author: '',\n          date: '',\n          title: ''\n        },\n        operativePlan: {\n          description: '',\n          instructions: '',\n          procedures: '',\n          title: ''\n        },\n        primaryDiagnosis: '',\n        procedures: '',\n        secondaryDiagnosis: '',\n        visitDate: '',\n        visitType: ''\n      },\n      messages: {\n        'delete': '',\n        saved: ''\n      },\n      titles: {\n        dischargeReport: '',\n        newDischargeReport: '',\n        newOPDReport: '',\n        opdReport: '',\n        saved: ''\n      }\n    },\n    user: {\n      plusNewUser: '+ نیا صارف',\n      usersPageTile: 'صارفین کی فہرست سازی'\n    },\n    visits: {\n      buttons: {\n        addDiagnosis: 'تشخیص کے لئے شامل کریں',\n        checkIn: 'چیک ان',\n        checkOut: 'چیک آٹ',\n        discharge: 'فارغ کر دیں',\n        newAppointment: 'نئی ملاقات',\n        newDischargeReport: '',\n        newOPDReport: '',\n        newProcedure: 'نئے طریقہ کار',\n        newVitals: 'نئے vitals'\n      },\n      labels: {\n        appointment: 'ملاقات',\n        authoredBy: 'کی طرف سے تحریر',\n        checkInTime: 'چیک ان',\n        checkOutTime: 'چیک آٹ',\n        createNewPatient: 'نیا مریض بنائیں',\n        diagnosis: 'تشخیص',\n        examiner: 'معائنہ کار',\n        finalDiagnosis: 'حتمی / بلنگ تشخیص',\n        haveAppointment: 'ہاں',\n        haveDoneOrders: 'ہاں',\n        noAppointment: 'نہیں',\n        ordersDone: 'آرڈرز مکمل کر دیے گئے',\n        ordersNotDone: 'نہیں',\n        patientToCheckIn: 'مریض کا چیک ان کرنا',\n        procedure: 'ضابطے',\n        procedureDate: 'ضابطے کی تاریخ',\n        reasonForVisit: 'دورے کی وجہ',\n        reportType: '',\n        status: 'دورہ کی صورتحال',\n        statusAdmitted: 'داخل کر دیا گیا',\n        statusCheckedIn: 'چیک ان کر دیا گیا',\n        statusCheckedOut: 'چیک آٹ کر دیا گیا',\n        statusDischarged: 'فارغ کر دیا گیا',\n        visitDate: 'دورہ کی تاریخ',\n        visitInformation: 'دورہ معلومات',\n        visitType: 'دورہ کی قسم'\n      },\n      messages: {\n        checkOut: 'کو چیک آٹ کرنا چاہتے ہیں؟ {{patientName}} آپ کو یقین ہے کہ آپ ',\n        checkedOut: 'چیک آٹ کر دیا گیا ہے {{patientName}} ',\n        discharged: ' کو فارغ کر دیا گیا ہے  {{patientName}} ',\n        patientCheckedIn: 'چیک ان کر دیا گیا ہے {{patientName}} ',\n        patientCreatedAndCheckedIn: ' ۔  (مریض) بنا دیا گیا ہے اور چیک ان کر دیا گیا ہے {{patientName}} ',\n        visitAndPatientSaved: 'دورے اور مریض ریکارڈ محفوظ کیا گیا ہے۔',\n        visitSaved: 'دورہ کا ریکارڈ کو محفوظ کیا گیا ہے۔'\n      },\n      navigation: {\n        charges: 'چارجز',\n        notes: 'نوٹس',\n        orders: 'آرڈرز',\n        procedures: 'طریقہ کار',\n        reports: '',\n        vitals: 'Vitals'\n      },\n      titles: {\n        additionalDiagnoses: 'اضافی تشخیص',\n        checkOut: 'مریض چیک آٹ',\n        checkedIn: 'مریض چیک ان مکمل',\n        checkedOut: 'مریض چیک آٹ مکمل',\n        discharged: 'مریض فارغ کر دیا گیا',\n        editVisit: 'دورہ ترمیم کریں',\n        newVisit: 'نیا دورہ',\n        patientCheckIn: 'مریض چیک ان',\n        visitSaved: 'دورہ محفوظ'\n      }\n    },\n    vitals: { labels: {\n        dateRecorded: 'تاریخ اندراج',\n        dbp: 'DBP',\n        heartRate: 'دل کی دھڑکن کی شرح',\n        height: 'اونچائی',\n        respiratoryRate: 'سانس کی شرح',\n        sbp: 'SBP',\n        temperature: 'درجہ حرارت',\n        weight: 'وزن'\n      } }\n  };\n});","define('hospitalrun/tests/locales/ur/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/ur/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ur/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    showActions: false,\n    startKey: []\n  });\n});","define('hospitalrun/tests/medication/completed/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/completed/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/completed/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/completed/route', ['exports', 'ember-i18n', 'hospitalrun/medication/index/route', 'ember'], function (exports, _emberI18n, _hospitalrunMedicationIndexRoute, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunMedicationIndexRoute['default'].extend({\n    modelName: 'medication',\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('medication.titles.completedMedication');\n    }),\n    searchStatus: 'Fulfilled'\n  });\n});","define('hospitalrun/tests/medication/completed/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/completed/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/completed/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/delete/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, _emberI18n, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {\n    title: (0, _emberI18n.translationMacro)('labels.delete_request'),\n\n    actions: {\n      'delete': function _delete() {\n        this.deleteChildFromVisit('medication');\n      }\n    }\n  });\n});","define('hospitalrun/tests/medication/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/add-new-patient', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsAddNewPatient, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsAddNewPatient['default'], _hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsUserSession['default'], {\n    medicationController: _ember['default'].inject.controller('medication'),\n    expenseAccountList: _ember['default'].computed.alias('medicationController.expenseAccountList'),\n\n    canFulfill: (function () {\n      return this.currentUserCan('fulfill_medication');\n    }).property(),\n\n    isFulfilled: (function () {\n      var status = this.get('model.status');\n      return status === 'Fulfilled';\n    }).property('model.status'),\n\n    isFulfilling: (function () {\n      var canFulfill = this.get('canFulfill');\n      var isRequested = this.get('model.isRequested');\n      var fulfillRequest = this.get('model.shouldFulfillRequest');\n      var isFulfilling = canFulfill && (isRequested || fulfillRequest);\n      this.get('model').set('isFulfilling', isFulfilling);\n      return isFulfilling;\n    }).property('canFulfill', 'model.isRequested', 'model.shouldFulfillRequest'),\n\n    isFulfilledOrRequested: (function () {\n      return this.get('isFulfilled') || this.get('model.isRequested');\n    }).property('isFulfilled', 'model.isRequested'),\n\n    prescriptionClass: (function () {\n      var quantity = this.get('model.quantity');\n      if (_ember['default'].isEmpty(quantity)) {\n        return 'required test-medication-prescription';\n      }\n    }).property('model.quantity'),\n\n    quantityClass: (function () {\n      var prescription = this.get('model.prescription');\n      var returnClass = 'col-xs-3';\n      var isFulfilling = this.get('isFulfilling');\n      if (isFulfilling || _ember['default'].isEmpty(prescription)) {\n        returnClass += ' required';\n      }\n      return returnClass + ' test-quantity-input';\n    }).property('isFulfilling', 'model.prescription'),\n\n    quantityLabel: (function () {\n      var i18n = this.get('i18n');\n      var returnLabel = i18n.t('medication.labels.quantityRequested');\n      var isFulfilled = this.get('isFulfilled');\n      var isFulfilling = this.get('isFulfilling');\n      if (isFulfilling) {\n        returnLabel = i18n.t('medication.labels.quantityDispensed');\n      } else if (isFulfilled) {\n        returnLabel = i18n.t('medication.labels.quantityDistributed');\n      }\n      return returnLabel;\n    }).property('isFulfilled'),\n\n    medicationList: [],\n    updateCapability: 'add_medication',\n\n    afterUpdate: function afterUpdate() {\n      var i18n = this.get('i18n');\n      var alertTitle = undefined,\n          alertMessage = undefined;\n      var isFulfilled = this.get('isFulfilled');\n      if (isFulfilled) {\n        alertTitle = i18n.t('medication.alerts.fulfilledTitle');\n        alertMessage = 'The medication request has been fulfilled.';\n        this.set('model.selectPatient', false);\n      } else {\n        alertTitle = i18n.t('medication.alerts.savedTitle');\n        alertMessage = i18n.t('medication.alerts.savedMessage');\n      }\n      this.saveVisitIfNeeded(alertTitle, alertMessage);\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var isFulfilling = this.get('isFulfilling');\n      var isNew = this.get('model.isNew');\n      if (isNew || isFulfilling) {\n        return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n          var newMedication = this.get('model');\n          newMedication.validate().then((function () {\n            if (newMedication.get('isValid')) {\n              if (isNew) {\n                if (_ember['default'].isEmpty(newMedication.get('patient'))) {\n                  this.addNewPatient();\n                  reject({\n                    ignore: true,\n                    message: 'creating new patient first'\n                  });\n                } else {\n                  newMedication.set('medicationTitle', newMedication.get('inventoryItem.name'));\n                  newMedication.set('priceOfMedication', newMedication.get('inventoryItem.price'));\n                  newMedication.set('status', 'Requested');\n                  newMedication.set('requestedBy', newMedication.getUserName());\n                  newMedication.set('requestedDate', new Date());\n                  this.addChildToVisit(newMedication, 'medication', 'Pharmacy').then((function () {\n                    this.finishBeforeUpdate(isFulfilling, resolve);\n                  }).bind(this), reject);\n                }\n              } else {\n                this.finishBeforeUpdate(isFulfilling, resolve);\n              }\n            } else {\n              this.send('showDisabledDialog');\n              reject('invalid model');\n            }\n          }).bind(this))['catch']((function () {\n            this.send('showDisabledDialog');\n            reject('invalid model');\n          }).bind(this));\n        }).bind(this));\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    finishBeforeUpdate: function finishBeforeUpdate(isFulfilling, resolve) {\n      if (isFulfilling) {\n        var inventoryLocations = this.get('model.inventoryLocations');\n        var inventoryRequest = this.get('store').createRecord('inv-request', {\n          expenseAccount: this.get('model.expenseAccount'),\n          dateCompleted: new Date(),\n          inventoryItem: this.get('model.inventoryItem'),\n          inventoryLocations: inventoryLocations,\n          quantity: this.get('model.quantity'),\n          transactionType: 'Fulfillment',\n          patient: this.get('model.patient'),\n          markAsConsumed: true\n        });\n        this.performFulfillRequest(inventoryRequest, false, false, true).then((function () {\n          this.set('model.status', 'Fulfilled');\n          resolve();\n        }).bind(this));\n      } else {\n        resolve();\n      }\n    },\n\n    showUpdateButton: (function () {\n      var isFulfilled = this.get('isFulfilled');\n      if (isFulfilled) {\n        return false;\n      } else {\n        return this._super();\n      }\n    }).property('updateCapability', 'isFulfilled'),\n\n    updateButtonText: (function () {\n      var i18n = this.get('i18n');\n      if (this.get('model.hideFulfillRequest')) {\n        return i18n.t('buttons.dispense');\n      } else if (this.get('isFulfilling')) {\n        return i18n.t('labels.fulfill');\n      }\n      return this._super();\n    }).property('model.isNew', 'isFulfilling', 'model.hideFulfillRequest')\n\n  });\n});\n// inventory-locations mixin is needed for fulfill-request mixin!","define('hospitalrun/tests/medication/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/edit/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/add-to-patient-route', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'moment', 'hospitalrun/mixins/patient-list-route', 'npm:uuid'], function (exports, _emberI18n, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsAddToPatientRoute, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _moment, _hospitalrunMixinsPatientListRoute, _npmUuid) {\n  'use strict';\n\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsAddToPatientRoute['default'], _hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsPatientListRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('medication.titles.editMedicationRequest'),\n    modelName: 'medication',\n    newTitle: (0, _emberI18n.translationMacro)('medication.titles.newMedicationRequest'),\n    database: _ember['default'].inject.service(),\n    getNewData: function getNewData(params) {\n      var idParam = this.get('idParam');\n      var newData = {\n        selectPatient: true,\n        prescriptionDate: (0, _moment['default'])().startOf('day').toDate()\n      };\n      if (params[idParam] === 'dispense') {\n        newData.shouldFulfillRequest = true;\n        newData.hideFulfillRequest = true;\n      }\n      newData.id = _npmUuid['default'].v4();\n      return _ember['default'].RSVP.resolve(newData);\n    },\n\n    model: function model(params) {\n      var idParam = this.get('idParam');\n      var modelPromise = this._super(params);\n      if (!_ember['default'].isEmpty(idParam) && params[idParam] === 'new' || params[idParam] === 'dispense') {\n        if (!isEmpty(params.forPatientId)) {\n          return this._setPatientOnModel(modelPromise, params.forPatientId);\n        } else if (!isEmpty(params.forVisitId)) {\n          return this._setVisitOnModel(modelPromise, params.forVisitId);\n        } else {\n          return this._createNewRecord(params);\n        }\n      } else {\n        return this._super(params);\n      }\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      var inventoryQuery = {\n        key: 'Medication',\n        include_docs: true\n      };\n      var inventoryItemId = model.get('inventoryItem.id');\n      var patient = model.get('patient');\n      if (_ember['default'].isEmpty(inventoryItemId)) {\n        this.get('database').queryMainDB(inventoryQuery, 'inventory_by_type').then(function (result) {\n          var medicationList = result.rows.map(function (medication) {\n            return medication.doc;\n          });\n          controller.set('medicationList', medicationList);\n        });\n      }\n      if (_ember['default'].isEmpty(patient)) {\n        this._fetchPatientList(controller);\n      }\n    }\n  });\n});\n// inventory-locations mixin is needed for fulfill-request mixin!","define('hospitalrun/tests/medication/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    canAdd: (function () {\n      return this.currentUserCan('add_medication');\n    }).property(),\n\n    showActions: (function () {\n      return this.currentUserCan('fulfill_medication');\n    }).property()\n  });\n});","define('hospitalrun/tests/medication/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/index/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, _emberI18n, _hospitalrunRoutesAbstractIndexRoute, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'medication',\n    pageTitle: computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('medication.pageTitle');\n    }),\n    searchStatus: 'Requested',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var prescriptionDateAsTime = item.get('prescriptionDateAsTime');\n      var id = this._getPouchIdFromItem(item);\n      var requestedDateAsTime = item.get('requestedDateAsTime');\n      var searchStatus = this.get('searchStatus');\n      return [searchStatus, requestedDateAsTime, prescriptionDateAsTime, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var maxId = this._getMaxPouchId();\n      var maxValue = this.get('maxValue');\n      var minId = this._getMinPouchId();\n      var searchStatus = this.get('searchStatus');\n      return {\n        options: {\n          startkey: [searchStatus, null, null, minId],\n          endkey: [searchStatus, maxValue, maxValue, maxId]\n        },\n        mapReduce: 'medication_by_status'\n      };\n    }\n  });\n});","define('hospitalrun/tests/medication/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/return/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/utils/select-values'], function (exports, _emberI18n, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsPatientSubmodule, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    medicationController: _ember['default'].inject.controller('medication'),\n    medicationList: [],\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'expenseAccountList', // Name of property containing lookup list\n      property: 'model.expenseAccount', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'expense_account_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    patientMedicationList: [],\n    setNewMedicationList: false,\n\n    aisleLocationList: _ember['default'].computed.alias('medicationController.aisleLocationList'),\n    expenseAccountList: _ember['default'].computed.alias('medicationController.expenseAccountList'),\n    warehouseList: _ember['default'].computed.alias('medicationController.warehouseList'),\n    updateCapability: 'add_medication',\n\n    medicationChanged: (function () {\n      var medication = this.get('model.medication');\n      if (!_ember['default'].isEmpty(medication)) {\n        var inventoryItem = medication.get('inventoryItem');\n        this.set('model.inventoryItemTypeAhead', inventoryItem.get('name') + ' - ' + inventoryItem.get('friendlyId'));\n        this.set('model.inventoryItem', inventoryItem);\n      } else {\n        this.set('model.inventoryItem');\n      }\n      _ember['default'].run.later((function () {\n        this.get('model').validate()['catch'](_ember['default'].K);\n      }).bind(this));\n    }).observes('model.medication'),\n\n    patientVisitsChanged: (function () {\n      var patientVisits = this.get('patientVisits');\n      if (!_ember['default'].isEmpty(patientVisits)) {\n        this.set('model.visit', patientVisits.get('firstObject'));\n      }\n    }).observes('patientVisits'),\n\n    showPatientMedicationList: (function () {\n      var patientMedicationList = this.get('patientMedicationList');\n      this.get('patientMedication'); // Request patient medication be updated\n      return !_ember['default'].isEmpty(patientMedicationList);\n    }).property('patientMedicationList', 'model.patient', 'model.visit'),\n\n    patientMedication: (function () {\n      var setNewMedicationList = this.get('setNewMedicationList');\n      var visit = this.get('model.visit');\n      if (setNewMedicationList) {\n        this.set('setNewMedicationList', false);\n      } else if (!_ember['default'].isEmpty(visit)) {\n        visit.get('medication').then((function (medication) {\n          medication = medication.filterBy('status', 'Fulfilled');\n          this.set('model.medication', medication.get('firstObject'));\n          this.set('patientMedicationList', medication.map(_hospitalrunUtilsSelectValues['default'].selectObjectMap));\n          this.set('setNewMedicationList', true);\n        }).bind(this));\n      }\n      return this.get('patientMedicationList');\n    }).property('setNewMedicationList', 'model.patient', 'model.visit'),\n\n    _finishUpdate: function _finishUpdate() {\n      var aisle = this.get('model.deliveryAisle');\n      var location = this.get('model.deliveryLocation');\n      var inventoryItem = this.get('model.inventoryItem');\n\n      // find location on inventoryItem\n      this._findOrCreateLocation(inventoryItem, location, aisle).then((function (inventoryLocation) {\n        this.set('model.adjustPurchases', true);\n        this.set('model.inventoryLocations', [inventoryLocation]);\n        this.set('model.markAsConsumed', true);\n        // Make sure inventory item is resolved first.\n        this.get('model.inventoryItem').then((function () {\n          this.send('fulfillRequest', this.get('model'), false, true, true);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    actions: {\n      doneFulfillRequest: function doneFulfillRequest() {\n        var i18n = this.get('i18n');\n        this.updateLookupLists();\n        this.displayAlert(i18n.t('medication.alerts.returnedTitle'), i18n.t('medication.alerts.returnedMessage'), 'allItems');\n      },\n      update: function update() {\n        var medication = this.get('model.medication');\n        var quantity = this.get('model.quantity');\n        if (!_ember['default'].isEmpty(medication)) {\n          medication.reload().then((function () {\n            medication.decrementProperty('quantity', quantity);\n            if (medication.get('quantity') < 0) {\n              medication.set('quantity', 0);\n            }\n            medication.save().then(this._finishUpdate.bind(this));\n          }).bind(this));\n        } else {\n          this._finishUpdate();\n        }\n      }\n    },\n\n    updateButtonText: (0, _emberI18n.translationMacro)('medication.returnMedication')\n  });\n});\n// inventory-locations mixin is needed for fulfill-request mixin!","define('hospitalrun/tests/medication/return/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/return/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/return/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/return/route', ['exports', 'ember-i18n', 'hospitalrun/tests/medication/edit/route', 'ember'], function (exports, _emberI18n, _hospitalrunTestsMedicationEditRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunTestsMedicationEditRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('medication.returnMedication'),\n    modelName: 'inv-request',\n    newTitle: (0, _emberI18n.translationMacro)('medication.returnMedication'),\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        dateCompleted: new Date(),\n        selectPatient: true,\n        transactionType: 'Return'\n      });\n    }\n  });\n});","define('hospitalrun/tests/medication/return/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/return/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/return/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-module-route', 'ember'], function (exports, _emberI18n, _hospitalrunRoutesAbstractModuleRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_medication',\n    moduleName: 'medication',\n    newButtonText: (0, _emberI18n.translationMacro)('medication.buttons.newButton'),\n    sectionTitle: (0, _emberI18n.translationMacro)('medication.sectionTitle'),\n\n    additionalButtons: (function () {\n      var i18n = this.get('i18n');\n      var additionalButtons = [];\n      if (this.currentUserCan('fulfill_medication')) {\n        additionalButtons.push({\n          buttonIcon: 'octicon octicon-checklist',\n          buttonAction: 'dispenseMedication',\n          buttonText: i18n.t('medication.buttons.dispenseMedication'),\n          'class': 'btn btn-primary'\n        });\n      }\n      if (this.currentUserCan(this.get('addCapability'))) {\n        additionalButtons.push({\n          buttonIcon: 'octicon octicon-mail-reply',\n          buttonAction: 'returnMedication',\n          buttonText: i18n.t('medication.buttons.returnMedication'),\n          'class': 'btn btn-primary'\n        });\n      }\n      if (!_ember['default'].isEmpty(additionalButtons)) {\n        return additionalButtons;\n      }\n    }).property(),\n\n    additionalModels: [{\n      name: 'aisleLocationList',\n      findArgs: ['lookup', 'aisle_location_list']\n    }, {\n      name: 'expenseAccountList',\n      findArgs: ['lookup', 'expense_account_list']\n    }, {\n      name: 'sexList',\n      findArgs: ['lookup', 'sex']\n    }, {\n      name: 'warehouseList',\n      findArgs: ['lookup', 'warehouse_list']\n    }],\n\n    actions: {\n      dispenseMedication: function dispenseMedication() {\n        if (this.currentUserCan('fulfill_medication')) {\n          this.transitionTo('medication.edit', 'dispense');\n        }\n      },\n\n      returnMedication: function returnMedication() {\n        if (this.currentUserCan(this.get('addCapability'))) {\n          this.transitionTo('medication.return', 'new');\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/medication/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'medication',\n    searchKeys: [{\n      name: 'prescription',\n      type: 'contains'\n    }],\n    searchModel: 'medication'\n  });\n});","define('hospitalrun/tests/medication/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/add-new-patient', ['exports', 'ember', 'hospitalrun/mixins/patient-id'], function (exports, _ember, _hospitalrunMixinsPatientId) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPatientId['default'], {\n    customForms: _ember['default'].inject.service(),\n    addedNewPatient: false,\n    newPatientId: null,\n\n    actions: {\n      addedNewPatient: function addedNewPatient(record) {\n        this.send('closeModal');\n        this.set('addedNewPatient', true);\n        this.set('model.patient', record);\n        this.set('newPatientId');\n        this.send('update');\n      }\n    },\n\n    addNewPatient: function addNewPatient() {\n      var _this = this;\n\n      var i18n = this.get('i18n');\n      this.displayAlert(i18n.t('alerts.pleaseWait'), i18n.t('messages.newPatientHasToBeCreated'));\n      this._getNewPatientId().then(function (friendlyId) {\n        var patientTypeAhead = _this.get('model.patientTypeAhead');\n        var nameParts = patientTypeAhead.split(' ');\n        var patientDetails = {\n          customForms: _ember['default'].Object.create(),\n          friendlyId: friendlyId,\n          patientFullName: patientTypeAhead,\n          requestingController: _this\n        };\n        var customForms = _this.get('customForms');\n        return customForms.setDefaultCustomForms(['patient', 'socialwork'], patientDetails).then(function () {\n          var patient = undefined;\n          if (nameParts.length >= 3) {\n            patientDetails.firstName = nameParts[0];\n            patientDetails.middleName = nameParts[1];\n            patientDetails.lastName = nameParts.splice(2, nameParts.length).join(' ');\n          } else if (nameParts.length === 2) {\n            patientDetails.firstName = nameParts[0];\n            patientDetails.lastName = nameParts[1];\n          } else {\n            patientDetails.firstName = patientTypeAhead;\n          }\n          patient = _this.store.createRecord('patient', patientDetails);\n          _this.send('openModal', 'patients.quick-add', patient);\n        });\n      });\n    },\n\n    _getNewPatientId: function _getNewPatientId() {\n      var newPatientId = this.get('newPatientId');\n      if (_ember['default'].isEmpty(newPatientId)) {\n        return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n          this.generateFriendlyId('patient').then((function (friendlyId) {\n            this.set('newPatientId', friendlyId);\n            resolve(friendlyId);\n          }).bind(this), reject);\n        }).bind(this));\n      } else {\n        return _ember['default'].RSVP.resolve(newPatientId);\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/add-new-patient.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/add-new-patient.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/add-new-patient.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/add-to-patient-route', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var Mixin = _ember['default'].Mixin;\n  exports['default'] = Mixin.create({\n    queryParams: {\n      forPatientId: {\n        refreshModel: false\n      },\n      forVisitId: {\n        refreshModel: false\n      }\n    },\n\n    model: function model(params) {\n      var idParam = get(this, 'idParam');\n      var modelPromise = this._super(params);\n      if (params[idParam] === 'new') {\n        if (!isEmpty(params.forPatientId)) {\n          return this._setPatientOnModel(modelPromise, params.forPatientId);\n        } else if (!isEmpty(params.forVisitId)) {\n          return this._setVisitOnModel(modelPromise, params.forVisitId);\n        } else {\n          return this._createNewRecord(params);\n        }\n      } else {\n        return modelPromise;\n      }\n    },\n\n    /**\n     * Resolves the model promise and then sets the patient information on the model.\n     */\n    _setPatientOnModel: function _setPatientOnModel(modelPromise, patientId) {\n      var store = get(this, 'store');\n      return modelPromise.then(function (model) {\n        return store.find('patient', patientId).then(function (patient) {\n          model.set('patient', patient);\n          model.set('returnToPatient', patientId);\n          model.set('selectPatient', false);\n          return model;\n        });\n      });\n    },\n\n    /**\n     * Resolves the model promise and then sets the visit information on the model.\n     */\n    _setVisitOnModel: function _setVisitOnModel(modelPromise, visitId) {\n      var store = get(this, 'store');\n      return modelPromise.then(function (model) {\n        return store.find('visit', visitId).then(function (visit) {\n          model.set('visit', visit);\n          model.set('returnToVisit', visitId);\n          model.set('selectPatient', false);\n          model.set('patient', visit.get('patient'));\n          return model;\n        });\n      });\n    }\n  });\n});","define('hospitalrun/tests/mixins/add-to-patient-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/add-to-patient-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/add-to-patient-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/allergy-actions', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Mixin.create({\n    openAllergyModal: function openAllergyModal(allergy) {\n      set(allergy, 'editController', this);\n      this.send('openModal', 'allergy.edit', allergy);\n    },\n\n    savePatientAllergy: function savePatientAllergy(patient, allergy) {\n      var _this = this;\n\n      get(patient, 'allergies').pushObject(allergy);\n      patient.save().then(function () {\n        _this.silentUpdate('closeModal');\n      });\n    },\n\n    deletePatientAllergy: function deletePatientAllergy(patient, allergy) {\n      var _this2 = this;\n\n      var patientAllergies = get(patient, 'allergies');\n      allergy.destroyRecord().then(function () {\n        patientAllergies.removeObject(allergy);\n        patient.save().then(function () {\n          _this2.send('closeModal');\n        });\n      });\n    },\n\n    actions: {\n      editAllergy: function editAllergy(allergy) {\n        this.openAllergyModal(allergy);\n      },\n\n      showAddAllergy: function showAddAllergy() {\n        var newAllergy = get(this, 'store').createRecord('allergy');\n        this.openAllergyModal(newAllergy);\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/allergy-actions.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/allergy-actions.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/allergy-actions.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/appointment-statuses', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    appointmentStatusList: ['Attended', 'Scheduled', 'Canceled', 'Missed'],\n    appointmentStatuses: _ember['default'].computed.map('appointmentStatusList', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n\n    appointmentStatusesWithEmpty: (function () {\n      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('appointmentStatusList'), true);\n    }).property()\n  });\n});","define('hospitalrun/tests/mixins/appointment-statuses.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/appointment-statuses.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/appointment-statuses.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/billing-categories', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultBillingCategories: ['Hospital Charges']\n  });\n});","define('hospitalrun/tests/mixins/billing-categories.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/billing-categories.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/billing-categories.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/blood-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    bloodTypes: ['A+', 'A-', 'AB-', 'AB+', 'B+', 'B-', 'O+', 'O-'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap)\n  });\n});","define('hospitalrun/tests/mixins/blood-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/blood-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/blood-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/can-edit-requested', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    canEdit: (function () {\n      var status = this.get('status');\n      return status === 'Requested';\n    }).property('status')\n  });\n});","define('hospitalrun/tests/mixins/can-edit-requested.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/can-edit-requested.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/can-edit-requested.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/charge-actions', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    chargePricingCategory: null,\n    pricingList: null,\n    pricingTypeForObjectType: null,\n    pricingTypes: null,\n    _createNewChargeRecord: function _createNewChargeRecord(quantityCharged, pricingId) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this.store.find('pricing', pricingId).then((function (item) {\n          var newCharge = this.store.createRecord('proc-charge', {\n            dateCharged: new Date(),\n            quantity: quantityCharged,\n            pricingItem: item\n          });\n          newCharge.save().then((function (chargeRecord) {\n            var charges = this.get('model.charges');\n            charges.addObject(chargeRecord);\n            resolve();\n          }).bind(this), reject);\n        }).bind(this), reject);\n      }).bind(this), '_createNewChargeRecord with pricingId:' + pricingId);\n    },\n\n    actions: {\n      addCharge: function addCharge(charge) {\n        var charges = this.get('model.charges');\n        charges.addObject(charge);\n        var from = 'addCharge_' + charge.get('id');\n        if (charge.get('medicationCharge')) {\n          from = 'addMedication_' + charge.get('id');\n        }\n        this.silentUpdate('closeModal', from);\n      },\n\n      deleteCharge: function deleteCharge(model) {\n        var _this = this;\n\n        var chargeToDelete = model.get('chargeToDelete');\n        var charges = this.get('model.charges');\n        charges.removeObject(chargeToDelete);\n        chargeToDelete.destroyRecord().then(function () {\n          _this.silentUpdate('closeModal', 'deleteCharge');\n        });\n      },\n\n      showAddCharge: function showAddCharge() {\n        var newCharge = this.get('store').createRecord('proc-charge', {\n          dateCharged: new Date(),\n          quantity: 1,\n          pricingCategory: this.get('chargePricingCategory')\n        });\n        this.send('openModal', this.get('chargeRoute'), newCharge);\n      },\n\n      showEditCharge: function showEditCharge(charge) {\n        charge.set('itemName', charge.get('pricingItem.name'));\n        charge.set('pricingCategory', this.get('chargePricingCategory'));\n        this.send('openModal', this.get('chargeRoute'), charge);\n      },\n\n      showDeleteCharge: function showDeleteCharge(charge) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          closeModalOnConfirm: false,\n          confirmAction: 'deleteCharge',\n          title: 'Delete Charge Item',\n          message: 'Are you sure you want to delete this charged item?',\n          chargeToDelete: charge,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      setChargeQuantity: function setChargeQuantity(id, quantity) {\n        var model = this.get('model');\n        model.set(id, quantity);\n      }\n    },\n\n    canAddCharge: (function () {\n      return this.currentUserCan('add_charge');\n    }).property(),\n\n    /**\n     * Returns pricing list without object types\n     * Used for labs and imaging where the labs and imaging types are\n     * directly in the price list.\n     */\n    chargesPricingList: (function () {\n      var pricingList = this.get('pricingList');\n      var pricingTypeForObjectType = this.get('pricingTypeForObjectType');\n      return pricingList.filter(function (item) {\n        return item.type !== pricingTypeForObjectType;\n      });\n    }).property('pricingList', 'pricingTypeForObjectType'),\n\n    chargeRoute: null,\n\n    findChargeForPricingItem: function findChargeForPricingItem(pricingItem, charges) {\n      var chargeForItem = charges.find(function (charge) {\n        var chargePricingItemId = charge.get('pricingItem.id');\n        return pricingItem.id === chargePricingItemId;\n      });\n      return chargeForItem;\n    },\n    /**\n     * Returns object types out of the pricing list.\n     * Used for labs and imaging where the labs and imaging types are\n     * directly in the price list.\n     */\n    objectTypeList: (function () {\n      var pricingList = this.get('pricingList');\n      var pricingTypeForObjectType = this.get('pricingTypeForObjectType');\n      var userCanAddPricingTypes = this.get('userCanAddPricingTypes');\n      var returnList = _ember['default'].Object.create({\n        value: [],\n        userCanAdd: userCanAddPricingTypes\n      });\n      if (!_ember['default'].isEmpty(pricingList)) {\n        returnList.set('value', pricingList.filterBy('pricingType', pricingTypeForObjectType));\n      }\n      return returnList;\n    }).property('pricingList', 'pricingTypeForObjectType', 'pricingTypeValues'),\n\n    organizeByType: _ember['default'].computed.alias('pricingTypes.organizeByType'),\n\n    pricingTypeList: (function () {\n      var pricingList = this.get('pricingList');\n      var pricingTypeValues = this.get('pricingTypeValues');\n      var pricingTypeForObjectType = this.get('pricingTypeForObjectType');\n      if (!_ember['default'].isEmpty(pricingTypeValues)) {\n        pricingTypeValues = pricingTypeValues.filter(function (pricingType) {\n          var havePricing = false;\n          if (!_ember['default'].isEmpty(pricingList)) {\n            havePricing = !_ember['default'].isEmpty(pricingList.findBy('pricingType', pricingType));\n          }\n          return havePricing && pricingType !== pricingTypeForObjectType;\n        });\n        pricingTypeValues = pricingTypeValues.sortBy('name');\n        return pricingTypeValues;\n      }\n    }).property('pricingTypeValues', 'pricingTypeForObjectType', 'pricingList'),\n\n    pricingTypeValues: _ember['default'].computed.alias('pricingTypes.value'),\n\n    /**\n     * Create multiple new request records from the pricing records passed in.  This function\n     * will also add those new records to the specified visit.\n     * @param {array} pricingRecords the list of pricing records to use to create request records from.\n     * @param {string} pricingField the name of the field on the request record to set the pricing record on.\n     * @param {string} visitChildName the name of the child object on the visit to add to.\n     * @param {string} newVisitType if a new visit needs to be created, what type of visit\n     * should be created.\n     */\n    createMultipleRequests: function createMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType) {\n      var firstRecord = pricingRecords.get('firstObject');\n      var modelToSave = this.get('model');\n      modelToSave.set(pricingField, firstRecord);\n      this.addChildToVisit(modelToSave, visitChildName, newVisitType).then((function (visit) {\n        modelToSave.save().then((function () {\n          this._finishCreateMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType, visit);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    _finishCreateMultipleRequests: function _finishCreateMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType, visit) {\n      var attributesToSave = {};\n      var baseModel = this.get('model');\n      var modelToSave = undefined;\n      var modelsToAdd = [];\n      var patient = this.get('model.patient');\n      var savePromises = [];\n\n      baseModel.eachAttribute(function (name) {\n        attributesToSave[name] = baseModel.get(name);\n      });\n\n      pricingRecords.forEach((function (pricingRecord, index) {\n        if (index > 0) {\n          modelToSave = this.store.createRecord(newVisitType.toLowerCase(), attributesToSave);\n          modelToSave.set(pricingField, pricingRecord);\n          modelToSave.set('patient', patient);\n          modelToSave.set('visit', visit);\n          modelsToAdd.push(modelToSave);\n          savePromises.push(modelToSave.save());\n        }\n      }).bind(this));\n\n      _ember['default'].RSVP.all(savePromises).then((function () {\n        var addPromises = [];\n        modelsToAdd.forEach((function (modelToSave) {\n          addPromises.push(this.addChildToVisit(modelToSave, visitChildName, newVisitType));\n        }).bind(this));\n        _ember['default'].RSVP.all(addPromises).then((function (addResults) {\n          this.afterUpdate(addResults, true);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    saveNewPricing: function saveNewPricing(pricingName, pricingCategory, priceObjectToSet) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var newPricing = undefined;\n        var pricingTypeForObjectType = this.get('pricingTypeForObjectType');\n        newPricing = this.store.createRecord('pricing', {\n          name: pricingName,\n          category: pricingCategory,\n          pricingType: pricingTypeForObjectType\n        });\n        newPricing.save().then((function (savedNewPricing) {\n          this.get('pricingList').addObject({\n            id: savedNewPricing.get('id'),\n            name: newPricing.get('name')\n          });\n          this.set(priceObjectToSet, newPricing);\n          resolve();\n        }).bind(this), reject);\n      }).bind(this), 'saveNewPricing for: ' + pricingName);\n    },\n\n    getSelectedPricing: function getSelectedPricing(selectedField) {\n      var selectedItem = this.get(selectedField);\n      if (!_ember['default'].isEmpty(selectedItem)) {\n        return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n          if (_ember['default'].isArray(selectedItem)) {\n            this.store.findByIds('pricing', selectedItem).then(resolve, reject);\n          } else {\n            this.store.find('pricing', selectedItem.id).then(resolve, reject);\n          }\n        }).bind(this));\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    showAddCharge: (function () {\n      var canAddCharge = this.get('canAddCharge');\n      var organizeByType = this.get('organizeByType');\n      if (canAddCharge) {\n        return !organizeByType;\n      } else {\n        return false;\n      }\n    }).property('canAddCharge', 'organizeByType'),\n\n    showEditCharges: (function () {\n      var canAddCharge = this.get('canAddCharge');\n      var organizeByType = this.get('organizeByType');\n      if (canAddCharge) {\n        return organizeByType;\n      } else {\n        return false;\n      }\n    }).property('canAddCharge', 'organizeByType'),\n\n    showPricingTypeTabs: (function () {\n      var pricingTypeList = this.get('pricingTypeList');\n      return !_ember['default'].isEmpty(pricingTypeList) && pricingTypeList.get('length') > 1;\n    }).property('pricingTypeList'),\n\n    userCanAddPricingTypes: (function () {\n      var pricingTypes = this.get('pricingTypes');\n      if (_ember['default'].isEmpty(pricingTypes)) {\n        return true;\n      } else {\n        return pricingTypes.get('userCanAdd');\n      }\n    }).property('pricingTypes'),\n\n    /**\n     * When using organizeByType charges need to be mapped over from the price lists\n     */\n    updateCharges: function updateCharges() {\n      var organizeByType = this.get('organizeByType');\n      if (!organizeByType) {\n        return _ember['default'].RSVP.resolve();\n      }\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var charges = this.get('model.charges');\n        var chargePromises = [];\n        var model = this.get('model');\n        var pricingList = this.get('pricingList');\n        pricingList.forEach((function (pricingItem) {\n          var currentCharge = this.findChargeForPricingItem(pricingItem, model.get('charges'));\n          var quantityCharged = model.get(pricingItem.id);\n          if (_ember['default'].isEmpty(quantityCharged)) {\n            if (currentCharge) {\n              // Remove existing charge because quantity is blank\n              charges.removeObject(currentCharge);\n              chargePromises.push(currentCharge.destroyRecord());\n            }\n          } else {\n            if (currentCharge) {\n              if (currentCharge.get('quantity') !== quantityCharged) {\n                currentCharge.set('quantity', quantityCharged);\n                chargePromises.push(currentCharge.save());\n              }\n            } else {\n              chargePromises.push(this._createNewChargeRecord(quantityCharged, pricingItem.id));\n            }\n          }\n        }).bind(this));\n        _ember['default'].RSVP.all(chargePromises, 'Charges updated for current record: ' + this.get('model.id')).then(resolve, reject);\n      }).bind(this), 'updateCharges for current record: ' + this.get('model.id'));\n    }\n  });\n});","define('hospitalrun/tests/mixins/charge-actions.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/charge-actions.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/charge-actions.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/charge-route', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    database: _ember['default'].inject.service(),\n    actions: {\n      deleteCharge: function deleteCharge(model) {\n        this.controller.send('deleteCharge', model);\n      }\n    },\n    pricingList: null,\n\n    afterModel: function afterModel() {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var database = this.get('database');\n        var maxId = database.getMaxPouchId('pricing');\n        var minId = database.getMinPouchId('pricing');\n        var pricingCategory = this.get('pricingCategory');\n        var pricingQuery = {\n          startkey: [pricingCategory, null, null, minId],\n          endkey: [pricingCategory, {}, {}, maxId],\n          include_docs: true\n        };\n        database.queryMainDB(pricingQuery, 'pricing_by_category').then((function (result) {\n          var pricingList = result.rows.map(function (item) {\n            return item.doc;\n          });\n          this.set('pricingList', pricingList);\n          resolve();\n        }).bind(this))['catch'](reject);\n      }).bind(this));\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      controller.set('pricingList', this.get('pricingList'));\n    }\n  });\n});","define('hospitalrun/tests/mixins/charge-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/charge-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/charge-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/check-for-errors', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var Mixin = _ember['default'].Mixin;\n  var RSVP = _ember['default'].RSVP;\n  exports['default'] = Mixin.create({\n    _checkForErrors: function _checkForErrors(callPromise) {\n      var _this = this;\n\n      return new RSVP.Promise(function (resolve, reject) {\n        callPromise.then(resolve, function (err) {\n          var database = get(_this, 'database');\n          reject(database.handleErrorResponse(err));\n        });\n      });\n    }\n  });\n});","define('hospitalrun/tests/mixins/check-for-errors.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/check-for-errors.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/check-for-errors.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/custom-field-types', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _ember['default'].Mixin.create({\n\n    fieldTypeValues: ['checkbox', 'radio', 'select', 'text', 'textarea'],\n\n    fieldTypes: computed(function () {\n      var i18n = this.get('i18n');\n      var fieldTypeValues = this.get('fieldTypeValues');\n      return fieldTypeValues.map(function (fieldTypeId) {\n        return {\n          id: fieldTypeId,\n          value: i18n.t('admin.customForms.labels.' + fieldTypeId)\n        };\n      }).sort(function (a, b) {\n        return _ember['default'].compare(a.value.toString(), b.value.toString());\n      });\n    })\n  });\n});","define('hospitalrun/tests/mixins/custom-field-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/custom-field-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/custom-field-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/date-format', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    _dateFormat: function _dateFormat(value, dateFormat) {\n      if (_ember['default'].isEmpty(dateFormat)) {\n        dateFormat = 'l';\n      }\n      if (!_ember['default'].isEmpty(value)) {\n        return (0, _moment['default'])(value).format(dateFormat);\n      }\n    },\n\n    dateToTime: function dateToTime(date) {\n      if (!_ember['default'].isEmpty(date) && date.getTime) {\n        return date.getTime();\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/date-format.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/date-format.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/date-format.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/diagnosis-actions', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    editDiagnosis: function editDiagnosis(diagnosis) {\n      diagnosis.set('editController', this);\n      this.send('openModal', 'diagnosis.edit', diagnosis);\n    },\n\n    actions: {\n      deleteDiagnosis: function deleteDiagnosis(diagnosis) {\n        var _this = this;\n\n        var diagnoses = this.get('model.diagnoses');\n        diagnoses.removeObject(diagnosis);\n        diagnosis.set('archived', true);\n        diagnosis.save().then(function () {\n          _this.silentUpdate('closeModal');\n        });\n      },\n\n      editDiagnosis: function editDiagnosis(diagnosis) {\n        this.editDiagnosis(diagnosis);\n      },\n\n      showAddDiagnosis: function showAddDiagnosis() {\n        var newDiagnosis = this.get('store').createRecord('diagnosis', {\n          date: new Date()\n        });\n        this.editDiagnosis(newDiagnosis);\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/diagnosis-actions.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/diagnosis-actions.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/diagnosis-actions.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/dob-days', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    convertDOBToText: function convertDOBToText(birthDate, shortFormat, omitDays) {\n      var today = new Date();\n      var years = 0;\n      var months = 0;\n      var days = 0;\n\n      if (birthDate) {\n        if (birthDate.getFullYear === undefined) {\n          birthDate = (0, _moment['default'])(birthDate, 'l').toDate();\n        }\n        if (birthDate.getFullYear !== undefined) {\n          years = today.getFullYear() - birthDate.getFullYear();\n          if (today.getMonth() < birthDate.getMonth() || today.getMonth() === birthDate.getMonth() && today.getDate() < birthDate.getDate()) {\n            years--;\n          }\n        }\n\n        if (birthDate.getMonth) {\n          months = today.getMonth() - birthDate.getMonth();\n          days = today.getDate() - birthDate.getDate();\n          if (months <= 0) {\n            if (days < 0) {\n              months += 11;\n            } else if (months < 0) {\n              months += 12;\n            }\n          } else {\n            if (days < 0) {\n              months = months - 1;\n            }\n          }\n        }\n\n        if (birthDate.getDate) {\n          days = today.getDate() - birthDate.getDate();\n          if (days < 0) {\n            days += 30;\n          }\n        }\n      }\n\n      var formatString = '';\n      var options = {\n        years: years,\n        days: days,\n        months: months\n      };\n      var i18n = this.get('i18n');\n      if (shortFormat) {\n        if (years > 0) {\n          formatString = i18n.t('dates.short', options);\n        } else {\n          formatString = i18n.t('dates.shortOmitYears', options);\n        }\n      } else if (omitDays) {\n        if (years > 1) {\n          formatString = i18n.t('dates.longOmitDaysPlural', options);\n        } else if (years === 1) {\n          formatString = i18n.t('dates.longOmitDays', options);\n        } else {\n          formatString = i18n.t('dates.longOmitDaysYears', options);\n        }\n      } else {\n        if (years > 1) {\n          formatString = i18n.t('dates.longPlural', options);\n        } else if (years === 1) {\n          formatString = i18n.t('dates.long', options);\n        } else {\n          formatString = i18n.t('dates.longOmitYears', options);\n        }\n      }\n      return formatString;\n    }\n  });\n});","define('hospitalrun/tests/mixins/dob-days.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/dob-days.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/dob-days.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/edit-panel-props', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n\n  var ALL_PROPS = ['actionForUpdateButton', 'additionalButtons', 'cancelButtonText', 'disabledAction', 'hideCancelButton', 'showUpdateButton', 'updateButtonAction', 'updateButtonIcon', 'updateButtonText'];\n\n  exports['default'] = _ember['default'].Mixin.create({\n\n    additionalButtons: null,\n    cancelButtonText: null,\n    disabledAction: null,\n    hideCancelButton: null,\n    showUpdateButton: null,\n    updateButtonAction: null,\n    updateButtonIcon: null,\n    updateButtonText: null,\n\n    actionForUpdateButton: computed('disabledAction', function () {\n      var disabledAction = this.get('disabledAction');\n      if (isEmpty(disabledAction) || disabledAction === false) {\n        return 'updateButtonAction';\n      } else {\n        return 'disabledAction';\n      }\n    }),\n\n    editPanelProps: computed.apply(undefined, ALL_PROPS.concat([function () {\n      return this.getProperties(ALL_PROPS);\n    }]))\n\n  });\n});","define('hospitalrun/tests/mixins/edit-panel-props.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/edit-panel-props.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/edit-panel-props.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/filter-list', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  function _instanceof(left, right) { if (right != null && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\n  var compare = _ember['default'].compare;\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var isHTMLSafe = _ember['default'].String.isHTMLSafe;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Mixin.create({\n    filterBy: null,\n    filterValue: null,\n    filteredBy: new _ember['default'].Map(),\n    sortByDesc: null,\n    sortByKey: null,\n\n    filterList: function filterList(list, filterBy, filterValue) {\n      var filteredBy = get(this, 'filteredBy');\n      if (isEmpty(filterBy) && isEmpty(filteredBy)) {\n        return list;\n      }\n      if (!isEmpty(filterBy)) {\n        filteredBy.set(filterBy, filterValue);\n      }\n      this.set('filteredBy', filteredBy);\n      var filteredList = list.filter(function (listItem) {\n        var includeRecord = true;\n        filteredBy.forEach(function (filterValue, filterBy) {\n          var itemValue = listItem.get(filterBy);\n          if (!isEmpty(filterValue)) {\n            if (isHTMLSafe(filterValue)) {\n              filterValue = filterValue.toString();\n            } else if (_instanceof(filterValue, Date)) {\n              filterValue = filterValue.getTime();\n            }\n            if (isHTMLSafe(itemValue)) {\n              itemValue = itemValue.toString();\n            } else if (_instanceof(itemValue, Date)) {\n              itemValue = itemValue.getTime();\n            }\n            if (itemValue !== filterValue) {\n              includeRecord = false;\n            }\n          }\n        });\n        return includeRecord;\n      });\n      return filteredList;\n    },\n\n    sortFilteredList: function sortFilteredList(filteredList) {\n      var sortDesc = get(this, 'sortByDesc');\n      var sortBy = get(this, 'sortByKey');\n      if (isEmpty(filteredList) || isEmpty(sortBy)) {\n        return filteredList;\n      }\n      filteredList = filteredList.toArray().sort(function (a, b) {\n        var compareA = a.get(sortBy);\n        var compareB = b.get(sortBy);\n        if (sortBy === 'orderType') {\n          compareA = compareA.toString();\n          compareB = compareB.toString();\n        }\n        if (sortDesc) {\n          return compare(compareB, compareA);\n        } else {\n          return compare(compareA, compareB);\n        }\n      });\n      return filteredList;\n    },\n\n    actions: {\n      filter: function filter(filterBy, filterValue) {\n        set(this, 'filterBy', filterBy);\n        set(this, 'filterValue', filterValue);\n      },\n\n      sortByKey: function sortByKey(sortKey, sortDesc) {\n        this.setProperties({\n          sortByDesc: sortDesc,\n          sortByKey: sortKey\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/filter-list.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/filter-list.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/filter-list.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/friendly-id', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports.sequenceId = sequenceId;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Mixin.create({\n    database: inject.service(),\n    sequenceName: null,\n    sequenceView: null,\n\n    /**\n    * Override this function to generate an id for a new record\n    * @return a generated id;default is null which means that an\n    * id will be automatically generated via Ember data.\n    */\n    generateFriendlyId: function generateFriendlyId(modelName) {\n      var _this = this;\n\n      var sequenceName = get(this, 'sequenceName');\n      return this.sequencePrefix().then(function (prefix) {\n        return _this.store.find('sequence', sequenceName).then(function (sequence) {\n          return _this._findUnusedId(sequence, prefix, modelName);\n        })['catch'](function () {\n          var store = _this.get('store');\n          var sequence = store.push(store.normalize('sequence', {\n            id: sequenceName,\n            value: 1,\n            prefix: prefix\n          }));\n          return sequence.save().then(function (sequence) {\n            return _this._findUnusedId(sequence, prefix, modelName);\n          });\n        });\n      });\n    },\n\n    sequencePrefix: function sequencePrefix() {\n      var _this2 = this;\n\n      var sequenceName = get(this, 'sequenceName');\n      return this.store.find('sequence', sequenceName).then(function (sequence) {\n        return get(sequence, 'prefix');\n      })['catch'](function () {\n        var type = sequenceName;\n        if (type.indexOf('_') > -1) {\n          type = type.substr(type.indexOf('_') + 1);\n        }\n        return _this2._findNextPrefix(type, 0);\n      });\n    },\n\n    _findNextPrefix: function _findNextPrefix(type, prefixChars) {\n      var _this3 = this;\n\n      prefixChars++;\n      return this._findSequenceByPrefix(type, prefixChars).then(function (records) {\n        if (_ember['default'].isEmpty(records.rows)) {\n          return type.toLowerCase().substr(0, prefixChars);\n        } else {\n          return _this3._findNextSequence(type, prefixChars);\n        }\n      })['catch'](function () {\n        return prefixChars;\n      });\n    },\n\n    _findSequenceByPrefix: function _findSequenceByPrefix(type, prefixChars) {\n      var database = this.get('database');\n      var sequenceQuery = {\n        key: type.toLowerCase().substr(0, prefixChars)\n      };\n      return database.queryMainDB(sequenceQuery, 'sequence_by_prefix');\n    },\n\n    _findUnusedId: function _findUnusedId(sequence, prefix, modelName) {\n      var _this4 = this;\n\n      var database = get(this, 'database');\n      var maxValue = database.getMaxPouchId(modelName);\n      var current = undefined,\n          id = undefined;\n      var sequenceView = get(this, 'sequenceView');\n      current = sequence.get('value');\n      id = sequenceId(prefix, current);\n      var query = {\n        startkey: [id, null],\n        endkey: [id, maxValue]\n      };\n      return database.queryMainDB(query, sequenceView).then(function (found) {\n        if (!isEmpty(found.rows)) {\n          sequence.incrementProperty('value');\n          return _this4._findUnusedId(sequence, prefix, modelName);\n        }\n        if (sequence.get('hasDirtyAttributes')) {\n          return sequence.save().then(function () {\n            return id;\n          });\n        }\n        return id;\n      });\n    }\n  });\n\n  function sequenceId(prefix, sequence) {\n    if (sequence < 100000) {\n      sequence = ('00000' + sequence).slice(-5);\n    }\n    return '' + prefix + sequence;\n  }\n});","define('hospitalrun/tests/mixins/friendly-id.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/friendly-id.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/friendly-id.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/fulfill-request', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  // NOTE!!! inventory-locations mixin is needed for fulfill-request mixin!\n  exports['default'] = _ember['default'].Mixin.create({\n    actions: {\n      doneFulfillRequest: function doneFulfillRequest() {\n        // Placeholder function; override if you need to know when fulfillrequest is complete.\n      },\n\n      fulfillRequest: function fulfillRequest(request, closeModal, increment, skipTransition) {\n        this.performFulfillRequest(request, closeModal, increment, skipTransition);\n      }\n    },\n\n    performFulfillRequest: function performFulfillRequest(request, closeModal, increment, skipTransition) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var markAsConsumed = request.get('markAsConsumed');\n        var transactionType = request.get('transactionType');\n        if (transactionType === 'Request') {\n          transactionType = null; // reset the transaction type so that it gets set below.\n        }\n        request.get('inventoryItem').then((function (inventoryItem) {\n          if (markAsConsumed) {\n            request.set('adjustPurchases', true);\n            if (_ember['default'].isEmpty(transactionType)) {\n              request.set('transactionType', 'Fulfillment');\n            }\n            this._performFulfillment(request, inventoryItem, increment).then((function () {\n              this._finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition);\n              resolve();\n            }).bind(this), reject);\n          } else {\n            request.set('adjustPurchases', false);\n            if (_ember['default'].isEmpty(transactionType)) {\n              request.set('transactionType', 'Transfer');\n            }\n            this._finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition);\n            resolve();\n          }\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    /**\n     * @private\n     */\n    _findQuantity: function _findQuantity(request, purchases, item, increment) {\n      var costPerUnit = undefined;\n      var requestPurchases = [];\n      var quantityOnHand = item.get('quantity');\n      var quantityRequested = parseInt(request.get('quantity'));\n      var quantityNeeded = quantityRequested;\n      var purchaseInfo = [];\n      var totalCost = 0;\n      if (increment) {\n        var purchase = purchases.get('lastObject');\n        costPerUnit = purchase.get('costPerUnit');\n        purchase.incrementProperty('currentQuantity', quantityRequested);\n        totalCost += costPerUnit * quantityNeeded;\n        purchaseInfo.push({\n          id: purchase.get('id'),\n          quantity: quantityRequested\n        });\n        requestPurchases.addObject(purchase);\n      } else {\n        var foundQuantity = purchases.any(function (purchase) {\n          var currentQuantity = purchase.get('currentQuantity');\n          if (purchase.get('expired') || currentQuantity <= 0) {\n            return false;\n          }\n          costPerUnit = purchase.get('costPerUnit');\n          if (increment) {\n\n            return true;\n          } else {\n            if (quantityNeeded > currentQuantity) {\n              totalCost += costPerUnit * currentQuantity;\n              quantityNeeded = quantityNeeded - currentQuantity;\n              purchaseInfo.push({\n                id: purchase.get('id'),\n                quantity: parseInt(currentQuantity)\n              });\n              currentQuantity = 0;\n            } else {\n              totalCost += costPerUnit * quantityNeeded;\n              currentQuantity = currentQuantity - quantityNeeded;\n              purchaseInfo.push({\n                id: purchase.get('id'),\n                quantity: parseInt(quantityNeeded)\n              });\n              quantityNeeded = 0;\n            }\n            purchase.set('currentQuantity', currentQuantity);\n            requestPurchases.addObject(purchase);\n            return quantityNeeded === 0;\n          }\n        });\n        if (!foundQuantity) {\n          return 'Could not find any purchases that had the required quantity: ' + quantityRequested;\n        }\n      }\n      request.set('costPerUnit', (totalCost / quantityRequested).toFixed(2));\n      request.set('quantityAtCompletion', quantityOnHand);\n      request.set('purchasesAffected', purchaseInfo);\n      request.set('purchases', requestPurchases); // Not saved permanently, just set here so that purchases get saved later.\n      item.updateQuantity();\n      return true;\n    },\n\n    /**\n     * @private\n     * Finish the fulfillment request.\n     * @param {object} request the request to fulfill.\n     * @param {object} inventoryItem the inventoryItem that should be used for fulfillment.\n     * @param {boolean} closeModal if the modal should be closed.\n     * @param {boolean} increment if the request should increment, not decrement\n     * @param {boolean} skipTransition if the transition should not run after fulfillment.\n     */\n    _finishFulfillRequest: function _finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition) {\n      var inventoryLocations = request.get('inventoryLocations');\n      var locationsAffected = [];\n      var markAsConsumed = request.get('markAsConsumed');\n      var promises = [];\n      var quantity = parseInt(request.get('quantity'));\n      var requestPurchases = request.get('purchases');\n      if (increment) {\n        var locationToIncrement = inventoryLocations.get('firstObject');\n        locationToIncrement.incrementProperty('quantity', quantity);\n        promises.push(locationToIncrement.save());\n        locationsAffected.push({\n          name: locationToIncrement.get('locationName'),\n          quantity: quantity\n        });\n      } else {\n        inventoryLocations.reduce((function (quantityNeeded, location) {\n          var deliveryLocation = request.get('deliveryLocation');\n          var deliveryAisle = request.get('deliveryAisle');\n          var locationQuantity = parseInt(location.get('quantity'));\n          if (quantityNeeded > 0) {\n            if (!markAsConsumed) {\n              location.set('transferAisleLocation', deliveryAisle);\n              location.set('transferLocation', deliveryLocation);\n            }\n            if (locationQuantity >= quantityNeeded) {\n              if (markAsConsumed) {\n                location.decrementProperty('quantity', quantityNeeded);\n                promises.push(location.save());\n              } else {\n                location.set('adjustmentQuantity', quantityNeeded);\n                promises.push(this.transferToLocation(inventoryItem, location));\n              }\n              locationsAffected.push({\n                name: location.get('locationName'),\n                quantity: quantityNeeded\n              });\n              return 0;\n            } else {\n              if (markAsConsumed) {\n                location.decrementProperty('quantity', locationQuantity);\n                promises.push(location.save());\n              } else {\n                location.set('adjustmentQuantity', locationQuantity);\n                promises.push(this.transferToLocation(inventoryItem, location));\n              }\n              locationsAffected.push({\n                name: location.get('locationName'),\n                quantity: locationQuantity\n              });\n              return quantityNeeded - locationQuantity;\n            }\n          }\n        }).bind(this), quantity);\n      }\n      request.set('locationsAffected', locationsAffected);\n      if (markAsConsumed) {\n        requestPurchases.forEach(function (purchase) {\n          promises.push(purchase.save());\n        });\n      }\n      _ember['default'].RSVP.all(promises, 'Preliminary saving done for inventory fulfillment').then((function () {\n        var savePromises = [];\n        savePromises.push(inventoryItem.save());\n        request.set('status', 'Completed');\n        request.set('completedBy', request.getUserName());\n        savePromises.push(request.save());\n        _ember['default'].RSVP.all(savePromises, 'All saving done for inventory fulfillment').then((function () {\n          this.send('doneFulfillRequest');\n          if (closeModal) {\n            this.send('closeModal');\n          }\n          if (!skipTransition) {\n            this.transitionTo('inventory.index');\n          }\n        }).bind(this));\n      }).bind(this));\n    },\n\n    /**\n     * @private\n     * Fulfill the request, decrementing from the purchases available on the inventory item\n     * This function doesn't save anything, it just updates the objects in memory, so\n     * a route will need to ensure that the models affected here get updated.\n     * @param {object} request the request to fulfill.\n     * @param {object} inventoryItem the inventoryItem that should be used for fulfillment.\n     * @param {boolean} increment if the request should increment, not decrement\n     * @returns true if the request is fulfilled; false if it cannot be fulfilled due to a lack\n     * of stock.\n     */\n    _performFulfillment: function _performFulfillment(request, inventoryItem, increment) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var purchases = inventoryItem.get('purchases');\n        var quantityOnHand = inventoryItem.get('quantity');\n        var quantityRequested = request.get('quantity');\n        if (increment || quantityOnHand >= quantityRequested) {\n          var findResult = this._findQuantity(request, purchases, inventoryItem, increment);\n          if (findResult === true) {\n            resolve();\n          } else {\n            reject(findResult);\n          }\n        } else {\n          reject('The quantity on hand, ' + quantityOnHand + ' is less than the requested quantity of ' + quantityRequested + '.');\n        }\n      }).bind(this));\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/fulfill-request.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/fulfill-request.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/fulfill-request.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/hospitalrun-version', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    version: '1.0.0-beta'\n  });\n});","define('hospitalrun/tests/mixins/hospitalrun-version.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/hospitalrun-version.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/hospitalrun-version.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/incident-statuses', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var ACTIVE = 'Active';\n  exports.ACTIVE = ACTIVE;\n  var CLOSED = 'Closed';\n  exports.CLOSED = CLOSED;\n  var FOLLOW_UP = 'Followup';\n  exports.FOLLOW_UP = FOLLOW_UP;\n  var REPORTED = 'Reported';\n\n  exports.REPORTED = REPORTED;\n  exports['default'] = _ember['default'].Mixin.create({\n    statusList: [ACTIVE, CLOSED, FOLLOW_UP, REPORTED],\n    getLocalizedStatus: function getLocalizedStatus(status) {\n      var i18n = get(this, 'i18n');\n      return i18n.t('incident.labels.status' + status);\n    }\n  });\n});","define('hospitalrun/tests/mixins/incident-statuses.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/incident-statuses.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/incident-statuses.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-adjustment-types', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    adjustmentTypes: (function () {\n      var i18n = this.get('i18n');\n      return [{\n        name: i18n.t('inventory.labels.addAdjustmentType').toString(),\n        type: 'Adjustment (Add)'\n      }, {\n        name: i18n.t('inventory.labels.removeAdjustmentType').toString(),\n        type: 'Adjustment (Remove)'\n      }, {\n        name: i18n.t('inventory.labels.returnToVendorAdjustmentType').toString(),\n        type: 'Return To Vendor'\n      }, {\n        name: i18n.t('inventory.labels.returnAdjustmentType').toString(),\n        type: 'Return'\n      }, {\n        name: i18n.t('inventory.labels.writeOffAdjustmentType').toString(),\n        type: 'Write Off'\n      }];\n    }).property()\n  });\n});","define('hospitalrun/tests/mixins/inventory-adjustment-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-adjustment-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-adjustment-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-id', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    /**\n     * Calculate a new id based on time stamp and randomized number\n     * @return a generated id in base 36 so that its a shorter barcode.\n     */\n    generateId: function generateId() {\n      var min = 1;\n      var max = 999;\n      var part1 = new Date().getTime();\n      var part2 = Math.floor(Math.random() * (max - min + 1)) + min;\n      return _ember['default'].RSVP.resolve(part1.toString(36) + '_' + part2.toString(36));\n    }\n  });\n});","define('hospitalrun/tests/mixins/inventory-id.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-id.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-id.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-locations', ['exports', 'ember', 'npm:uuid'], function (exports, _ember, _npmUuid) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    aisleToFind: null,\n    locationToFind: null,\n\n    _addQuantityToLocation: function _addQuantityToLocation(inventoryItem, quantity, location, aisle) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this._findOrCreateLocation(inventoryItem, location, aisle).then(function (foundLocation) {\n          foundLocation.incrementProperty('quantity', quantity);\n          foundLocation.save().then(resolve, reject);\n        });\n      }).bind(this));\n    },\n\n    _findOrCreateLocation: function _findOrCreateLocation(inventoryItem, location, aisle) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var _this = this;\n\n        var foundLocation = false;\n        var locations = inventoryItem.get('locations');\n        this.set('aisleToFind', aisle);\n        this.set('locationToFind', location);\n\n        foundLocation = locations.find(this.findLocation, this);\n        if (foundLocation) {\n          resolve(foundLocation);\n        } else {\n          (function () {\n            var locationRecord = _this.get('store').createRecord('inv-location', {\n              id: _npmUuid['default'].v4(),\n              aisleLocation: aisle,\n              location: location,\n              quantity: 0\n            });\n            locations.addObject(locationRecord);\n            locationRecord.save().then(function () {\n              resolve(locationRecord);\n            }, reject);\n          })();\n        }\n      }).bind(this));\n    },\n\n    findLocation: function findLocation(inventoryLocation) {\n      var aisleLocation = inventoryLocation.get('aisleLocation');\n      var aisleToFind = this.get('aisleToFind');\n      var itemLocation = inventoryLocation.get('location');\n      var locationToFind = this.get('locationToFind');\n      if ((_ember['default'].isEmpty(aisleLocation) && _ember['default'].isEmpty(aisleToFind) || aisleLocation === aisleToFind) && (_ember['default'].isEmpty(itemLocation) && _ember['default'].isEmpty(locationToFind) || itemLocation === locationToFind)) {\n        return true;\n      }\n    },\n\n    /**\n     * Process a new purchase, updating the corresponding location\n     * with the number of items available.\n     * @returns {Promise} a promise that fulfills once location has been updated.\n     */\n    newPurchaseAdded: function newPurchaseAdded(inventoryItem, newPurchase) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var aisle = newPurchase.get('aisleLocation');\n        var location = newPurchase.get('location');\n        var quantity = parseInt(newPurchase.get('originalQuantity'));\n        this._addQuantityToLocation(inventoryItem, quantity, location, aisle).then(resolve, reject);\n      }).bind(this));\n    },\n\n    /**\n     * Save the location if the quantity is greater than zero, otherwise remove the empty location.\n     * @param {Object} location the location to update or remove.\n     * @param {Object} inventoryItem the inventory item the location belongs to.\n     * @return {Promise} promise for save or remove\n     */\n    saveLocation: function saveLocation(location, inventoryItem) {\n      if (location.get('quantity') === 0) {\n        var locations = inventoryItem.get('locations');\n        locations.removeObject(location);\n        return location.destroyRecord();\n      } else {\n        return location.save();\n      }\n    },\n\n    /**\n     * Transfer items from the current location to the specified location.\n     * @param {Object} inventoryItem the inventory item that items are being transferred from\n     * @param {Object} transferLocation the inventory location to transfer from (also includes\n     * attributes about where to transfer to.\n     * @returns {Promise} a promise that fulfills once the transfer to location has been saved.\n     */\n    transferToLocation: function transferToLocation(inventoryItem, transferLocation) {\n      var aisle = transferLocation.get('transferAisleLocation');\n      var location = transferLocation.get('transferLocation');\n      var quantity = parseInt(transferLocation.get('adjustmentQuantity'));\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this._addQuantityToLocation(inventoryItem, quantity, location, aisle).then(function () {\n          transferLocation.decrementProperty('quantity', quantity);\n          transferLocation.save().then(resolve, reject);\n        }, reject);\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/mixins/inventory-locations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-locations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-locations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-type-list', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultInventoryTypes: ['Medication', 'Supply'],\n\n    inventoryTypes: (function () {\n      var defaultInventoryTypes = this.get('defaultInventoryTypes');\n      var inventoryTypeList = this.get('inventoryTypeList');\n      var typeList = undefined;\n      if (_ember['default'].isEmpty(inventoryTypeList)) {\n        typeList = defaultInventoryTypes;\n      } else {\n        typeList = inventoryTypeList;\n      }\n      typeList = _hospitalrunUtilsSelectValues['default'].selectValues(typeList);\n      return typeList;\n    }).property('inventoryTypeList', 'defaultInventoryTypes')\n  });\n});","define('hospitalrun/tests/mixins/inventory-type-list.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-type-list.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-type-list.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/is-update-disabled', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    isUpdateDisabled: (function () {\n      if (!_ember['default'].isNone(this.get('model.isValid'))) {\n        return !this.get('model.isValid');\n      } else {\n        return false;\n      }\n    }).property('model.isValid')\n  });\n});","define('hospitalrun/tests/mixins/is-update-disabled.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/is-update-disabled.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/is-update-disabled.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/location-name', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    getDisplayLocationName: function getDisplayLocationName(location, aisleLocation) {\n      var locationName = this.formatLocationName(location, aisleLocation);\n      if (_ember['default'].isEmpty(locationName)) {\n        locationName = 'No Location';\n      }\n      return locationName;\n    },\n\n    formatLocationName: function formatLocationName(location, aisleLocation) {\n      var locationName = '';\n      if (!_ember['default'].isEmpty(location)) {\n        locationName += location;\n        if (!_ember['default'].isEmpty(aisleLocation)) {\n          locationName += ' : ';\n        }\n      }\n      if (!_ember['default'].isEmpty(aisleLocation)) {\n        locationName += aisleLocation;\n      }\n      return locationName;\n    },\n\n    locationName: (function () {\n      var aisleLocation = this.get('aisleLocation');\n      var location = this.get('location');\n      return this.getDisplayLocationName(location, aisleLocation);\n    }).property('location', 'aisleLocation')\n  });\n});","define('hospitalrun/tests/mixins/location-name.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/location-name.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/location-name.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/map-oauth-params', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var Mixin = _ember['default'].Mixin;\n  exports['default'] = Mixin.create({\n    mapOauthParams: function mapOauthParams(params) {\n      return {\n        config_consumer_key: params.k,\n        config_consumer_secret: params.s1,\n        config_oauth_token: params.t,\n        config_token_secret: params.s2\n      };\n    }\n  });\n});","define('hospitalrun/tests/mixins/map-oauth-params.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/map-oauth-params.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/map-oauth-params.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/medication-details', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {\n  'use strict';\n\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Mixin.create({\n    // Denormalized medication details so that inventory records do not need to be retrieved\n\n    /**\n     * Does not return name on first call if medicationName is\n     * not set and name is obtained via inventoryAttribute\n     * Additional calls will return the name as medicationName\n     * will then be set\n     */\n    getMedicationName: function getMedicationName(inventoryAttribute) {\n      var _this = this;\n\n      var medicationTitle = this.get('medicationTitle');\n      if (!_ember['default'].isEmpty(medicationTitle)) {\n        return medicationTitle;\n      } else {\n        var inventoryObject = this.get(inventoryAttribute);\n        if (inventoryObject.then) {\n          inventoryObject.then(function (inventoryItem) {\n            if (!isEmpty(inventoryItem)) {\n              _this.set('medicationTitle', inventoryItem.get('name'));\n            }\n          })['catch'](function (err) {\n            console.log('error getting inventory item for medication name:', err);\n          });\n        } else {\n          this.set('medicationTitle', inventoryObject.get('name'));\n        }\n      }\n    },\n\n    /**\n     * Does not return name on first call if priceOfMedication is\n     * not set and price is obtained via inventoryAttribute\n     * Additional calls will return the price as priceOfMedication\n     * will then be set\n     */\n    getMedicationPrice: function getMedicationPrice(inventoryAttribute) {\n      var _this2 = this;\n\n      var priceOfMedication = this.get('priceOfMedication');\n      if (!_ember['default'].isEmpty(priceOfMedication)) {\n        return priceOfMedication;\n      } else {\n        var inventoryObject = this.get(inventoryAttribute);\n        if (inventoryObject.then) {\n          inventoryObject.then(function (inventoryItem) {\n            _this2.set('priceOfMedication', inventoryItem.get('price'));\n          });\n        } else {\n          this.set('priceOfMedication', inventoryObject.get('price'));\n        }\n      }\n    },\n\n    getMedicationDetails: function getMedicationDetails(inventoryAttribute) {\n      var _this3 = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var medicationTitle = _this3.get('medicationTitle');\n        var priceOfMedication = _this3.get('priceOfMedication');\n        if (!_ember['default'].isEmpty(medicationTitle) && !_ember['default'].isEmpty(priceOfMedication)) {\n          resolve({\n            name: medicationTitle,\n            price: priceOfMedication\n          });\n        } else {\n          var objectInventoryItem = _this3.get(inventoryAttribute);\n          if (objectInventoryItem.then) {\n            objectInventoryItem.then(function (inventoryItem) {\n              resolve({\n                name: inventoryItem.get('name'),\n                price: inventoryItem.get('price')\n              });\n            });\n          } else {\n            resolve({\n              name: objectInventoryItem.get('name'),\n              price: objectInventoryItem.get('price')\n            });\n          }\n        }\n      });\n    },\n\n    medicationTitle: _emberData['default'].attr('string'),\n    priceOfMedication: _emberData['default'].attr('number'),\n    rxNormIdentifier: _emberData['default'].attr('string')\n  });\n});","define('hospitalrun/tests/mixins/medication-details.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/medication-details.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/medication-details.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/modal-helper', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    /**\n     * Display a message in a closable modal.\n     * @param title string containing the title to display.\n     * @param message string containing the message to display.\n     * @param okAction string containing the optional action to fire when the ok button is clicked.\n     * @param okContext object containing the context to pass to the okAction.\n     * @param cancelAction string containing the optional action to fire when the cancel button is clicked or the escape button is pressed.\n     */\n    displayAlert: function displayAlert(title, message, okAction, okContext, cancelAction) {\n      var i18n = this.get('i18n');\n      var modalOptions = _ember['default'].Object.extend({\n        updateButtonText: i18n.t('buttons.ok')\n      });\n      this.send('openModal', 'dialog', modalOptions.create({\n        cancelAction: cancelAction,\n        hideCancelButton: true,\n        message: message,\n        okAction: okAction,\n        okContext: okContext,\n        title: title,\n        updateButtonAction: 'ok'\n      }));\n    },\n\n    displayConfirm: function displayConfirm(title, message, confirmAction, model) {\n      var i18n = this.get('i18n');\n      if (_ember['default'].isEmpty(model)) {\n        model = _ember['default'].Object.create();\n      }\n      model.set('confirmAction', confirmAction);\n      model.set('title', title);\n      model.set('message', message);\n      model.set('updateButtonAction', 'confirm');\n      model.set('updateButtonText', i18n.t('buttons.ok'));\n      this.send('openModal', 'dialog', model);\n    }\n  });\n});","define('hospitalrun/tests/mixins/modal-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/modal-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/modal-helper.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/navigation', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var camelize = _ember['default'].String.camelize;\n  var get = _ember['default'].get;\n  var isEqual = _ember['default'].isEqual;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Mixin.create({\n    navItems: [{\n      title: 'Inventory',\n      iconClass: 'octicon-package',\n      route: 'inventory.index',\n      capability: 'inventory',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.index',\n        capability: 'add_inventory_request'\n      }, {\n        title: 'Items',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.listing',\n        capability: 'inventory'\n      }, {\n        title: 'Inventory Received',\n        iconClass: 'octicon-plus',\n        route: 'inventory.batch',\n        subroute: 'new',\n        capability: 'add_inventory_item'\n      }, {\n        title: 'Reports',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.reports',\n        capability: 'inventory'\n      }]\n    }, {\n      title: 'Patients',\n      iconClass: 'octicon-organization',\n      route: 'patients.index',\n      capability: 'patients',\n      subnav: [{\n        title: 'Patient Listing',\n        iconClass: 'octicon-chevron-right',\n        route: 'patients.index',\n        capability: 'patients'\n      }, {\n        title: 'Admitted Patients',\n        iconClass: 'octicon-chevron-right',\n        route: 'patients.admitted',\n        capability: 'patients'\n      }, {\n        title: 'Outpatient',\n        iconClass: 'octicon-chevron-right',\n        route: 'patients.outpatient',\n        capability: 'patients'\n      }, {\n        title: 'New Patient',\n        iconClass: 'octicon-plus',\n        route: 'patients.edit',\n        subroute: 'new',\n        capability: 'add_patient'\n      }, {\n        title: 'Reports',\n        iconClass: 'octicon-chevron-right',\n        route: 'patients.reports',\n        capability: 'patients'\n      }]\n    }, {\n      title: 'Scheduling',\n      iconClass: 'octicon-calendar',\n      route: 'appointments.index',\n      capability: 'appointments',\n      subnav: [{\n        title: 'Appointments This Week',\n        iconClass: 'octicon-chevron-right',\n        route: 'appointments.index',\n        capability: 'appointments'\n      }, {\n        title: 'Today\\'s Appointments',\n        iconClass: 'octicon-chevron-right',\n        route: 'appointments.today',\n        capability: 'appointments'\n      }, {\n        title: 'Appointment Search',\n        iconClass: 'octicon-search',\n        route: 'appointments.search',\n        capability: 'appointments'\n      }, {\n        title: 'Appointments Calendar',\n        iconClass: 'octicon-calendar',\n        route: 'appointments.calendar',\n        capability: 'appointments'\n      }, {\n        title: 'Add Appointment',\n        iconClass: 'octicon-plus',\n        route: 'appointments.edit',\n        subroute: 'new',\n        capability: 'add_appointment'\n      }, {\n        title: 'Theater Schedule',\n        iconClass: 'octicon-calendar',\n        route: 'appointments.theater',\n        capability: 'appointments'\n      }, {\n        title: 'Schedule Surgery',\n        iconClass: 'octicon-plus',\n        route: 'appointments.edit',\n        subroute: 'newsurgery',\n        capability: 'add_appointment'\n      }]\n    }, {\n      title: 'Imaging',\n      iconClass: 'octicon-device-camera',\n      route: 'imaging.index',\n      capability: 'imaging',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'imaging.index',\n        capability: 'imaging'\n      }, {\n        title: 'Completed',\n        iconClass: 'octicon-chevron-right',\n        route: 'imaging.completed',\n        capability: 'imaging'\n      }, {\n        title: 'New Request',\n        iconClass: 'octicon-plus',\n        route: 'imaging.edit',\n        subroute: 'new',\n        capability: 'add_imaging'\n      }]\n    }, {\n      title: 'Medication',\n      iconClass: 'octicon-file-text',\n      route: 'medication.index',\n      capability: 'medication',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'medication.index',\n        capability: 'medication'\n      }, {\n        title: 'Completed',\n        iconClass: 'octicon-chevron-right',\n        route: 'medication.completed',\n        capability: 'medication'\n      }, {\n        title: 'New Request',\n        iconClass: 'octicon-plus',\n        route: 'medication.edit',\n        subroute: 'new',\n        capability: 'add_medication'\n      }, {\n        title: 'Dispense',\n        iconClass: 'octicon-checklist',\n        route: 'medication.edit',\n        subroute: 'dispense',\n        capability: 'fulfill_medication'\n      }, {\n        title: 'Return Medication',\n        iconClass: 'octicon-mail-reply',\n        route: 'medication.return',\n        subroute: 'new',\n        capability: 'add_medication'\n      }]\n    }, {\n      title: 'Labs',\n      iconClass: 'octicon-microscope',\n      route: 'labs.index',\n      capability: 'labs',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'labs.index',\n        capability: 'labs'\n      }, {\n        title: 'Completed',\n        iconClass: 'octicon-chevron-right',\n        route: 'labs.completed',\n        capability: 'labs'\n      }, {\n        title: 'New Request',\n        iconClass: 'octicon-plus',\n        route: 'labs.edit',\n        subroute: 'new',\n        capability: 'add_lab'\n      }]\n    }, {\n      title: 'Billing',\n      iconClass: 'octicon-credit-card',\n      route: 'invoices.index',\n      capability: 'invoices',\n      subnav: [{\n        title: 'Invoices',\n        iconClass: 'octicon-chevron-right',\n        route: 'invoices.index',\n        capability: 'invoices'\n      }, {\n        title: 'New Invoice',\n        iconClass: 'octicon-plus',\n        route: 'invoices.edit',\n        subroute: 'new',\n        capability: 'invoices'\n      }, {\n        title: 'Prices',\n        iconClass: 'octicon-chevron-right',\n        route: 'pricing.index',\n        capability: 'pricing'\n      }, {\n        title: 'Price Profiles',\n        iconClass: 'octicon-chevron-right',\n        route: 'pricing.profiles',\n        capability: 'pricing'\n      }]\n    }, {\n      title: 'Incident',\n      iconClass: 'octicon-package',\n      route: 'incident',\n      capability: 'incident',\n      subnav: [{\n        title: 'Current Incidents',\n        iconClass: 'octicon-chevron-right',\n        route: 'incident.index',\n        capability: 'add_incident'\n      }, {\n        title: 'New Incident',\n        iconClass: 'octicon-plus',\n        route: 'incident.edit',\n        subroute: 'new',\n        capability: 'add_incident'\n      }, {\n        title: 'History',\n        iconClass: 'octicon-chevron-right',\n        route: 'incident.completed',\n        capability: 'add_incident'\n      }, {\n        title: 'Reports',\n        iconClass: 'octicon-chevron-right',\n        route: 'incident.reports',\n        capability: 'generate_incident_report'\n      }]\n    }, {\n      title: 'Administration',\n      iconClass: 'octicon-person',\n      route: 'admin.lookup',\n      capability: 'admin',\n      subnav: [{\n        title: 'Address Fields',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.address',\n        capability: 'update_config'\n      }, {\n        title: 'Custom Forms',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.custom-forms',\n        capability: 'update_config'\n      }, {\n        title: 'Incident Categories',\n        iconClass: 'octicon-chevron-right',\n        route: 'inc-category',\n        capability: 'add_incident_category'\n      }, {\n        title: 'Load DB',\n        iconClass: 'octicon-plus',\n        route: 'admin.loaddb',\n        capability: 'load_db'\n      }, {\n        title: 'Lookup Lists',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.lookup',\n        capability: 'update_config'\n      }, {\n        title: 'Text Replacements',\n        iconClass: 'octicon-plus',\n        route: 'admin.textreplace',\n        capability: 'update_config'\n      }, {\n        title: 'Print Header',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.print-header',\n        capability: 'update_config'\n      }, {\n        title: 'Users',\n        iconClass: 'octicon-chevron-right',\n        route: 'users',\n        capability: 'users'\n      }, {\n        title: 'New User',\n        iconClass: 'octicon-plus',\n        route: 'users.edit',\n        subroute: 'new',\n        capability: 'add_user'\n      }, {\n        title: 'User Roles',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.roles',\n        capability: 'define_user_roles'\n      }]\n    }],\n\n    // Navigation items get mapped localizations\n    localizedNavItems: _ember['default'].computed('navItems.[]', 'i18n.locale', function () {\n      var localizationPrefix = 'navigation.';\n      // Supports unlocalized keys for now, otherwise we would get:\n      // \"Missing translation: key.etc.path\"\n      var translationOrOriginal = function translationOrOriginal(translation, original) {\n        // Check for typeof string, because if it's found in localization,\n        // i18n will return a SafeString object, not a string\n        return typeof translation === 'string' ? original : translation;\n      };\n      var i18n = get(this, 'i18n');\n      var navItems = get(this, 'navItems');\n      return navItems.map(function (nav) {\n        var sectionKey = localizationPrefix + camelize(nav.title).toLowerCase();\n        var navTranslated = i18n.t(sectionKey);\n\n        set(nav, 'localizedTitle', translationOrOriginal(navTranslated, nav.title));\n        // Map all of the sub navs, too\n        set(nav, 'subnav', nav.subnav.map(function (sub) {\n          var subItemKey = localizationPrefix + 'subnav.' + camelize(sub.title);\n          var subTranslated = i18n.t(subItemKey);\n          set(sub, 'localizedTitle', translationOrOriginal(subTranslated, sub.title));\n          return sub;\n        }));\n\n        return nav;\n      });\n    }),\n\n    findNavItemByRoute: function findNavItemByRoute(route) {\n      for (var i = 0; i < this.navItems.length; i++) {\n        if (isEqual(this.navItems[i].route, route)) {\n          return this.navItems[i];\n        } else {\n          for (var j = 0; j < this.navItems[i].subnav.length; j++) {\n            if (isEqual(this.navItems[i].subnav[j].route, route)) {\n              return this.navItems[i].subnav[j];\n            }\n          }\n        }\n      }\n      return null;\n    }\n  });\n});","define('hospitalrun/tests/mixins/navigation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/navigation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/navigation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/number-format', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    /**\n     * Given an array and property, total all of the property values in the array and return the value.\n     * @param array Array|String either the actual array or the property name of the array on this object.\n     * @param propertyName String the property name in the array values to total.\n     * @param number that contains at most two decimal places.\n     */\n    _calculateTotal: function _calculateTotal(array, propertyName) {\n      var arrayItems = undefined;\n      var total = 0;\n      if (_ember['default'].isArray(array)) {\n        arrayItems = array;\n      } else {\n        arrayItems = this.get(array);\n      }\n      total = arrayItems.reduce((function (previousValue, lineItem) {\n        return previousValue += this._getValidNumber(_ember['default'].get(lineItem, propertyName));\n      }).bind(this), 0);\n      return this._numberFormat(total, true);\n    },\n\n    /**\n     * Determine if number passed in is actually a number.  If it is, return the number; otherwise return 0.\n     * @param number the number to valdiate.\n     * @returns number a valid number.\n     */\n    _getValidNumber: function _getValidNumber(number) {\n      if (_ember['default'].isEmpty(number) || isNaN(number)) {\n        return 0;\n      } else {\n        return Number(number);\n      }\n    },\n\n    /**\n     * Return a formatted number with a maximum of two digits\n     * @param value number to format\n     * @param returnAsNumber boolean to denote if formatted number should be returned\n     * as a number instead of a string\n     * @returns String|Number a formatted String or number containing the formatted number.\n     */\n    _numberFormat: function _numberFormat(value, returnAsNumber) {\n      var returnValue = undefined;\n      if (!_ember['default'].isEmpty(value)) {\n        if (isNaN(value)) {\n          return;\n        }\n        if (Math.round(value) === value) {\n          returnValue = Number(value).toString();\n        } else {\n          returnValue = this._round100(value).toFixed(2);\n        }\n        if (returnAsNumber) {\n          return Number(returnValue);\n        } else {\n          return returnValue.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,');\n        }\n      }\n    },\n\n    _validNumber: function _validNumber(number) {\n      return !_ember['default'].isEmpty(number) && !isNaN(number) && number > 0;\n    },\n\n    _round100: function _round100(number) {\n      var tempNumber = 100 * number;\n      return Math.round(tempNumber) / 100;\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/number-format.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/number-format.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/number-format.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/oauth-headers', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var Mixin = _ember['default'].Mixin;\n  exports['default'] = Mixin.create({\n    getOAuthHeaders: function getOAuthHeaders(configs) {\n      return {\n        'x-oauth-consumer-secret': configs.config_consumer_secret,\n        'x-oauth-consumer-key': configs.config_consumer_key,\n        'x-oauth-token-secret': configs.config_token_secret,\n        'x-oauth-token': configs.config_oauth_token\n      };\n    }\n  });\n});","define('hospitalrun/tests/mixins/oauth-headers.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/oauth-headers.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/oauth-headers.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/operative-plan-statuses', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var COMPLETED_STATUS = 'completed';\n  exports.COMPLETED_STATUS = COMPLETED_STATUS;\n  var DROPPED_STATUS = 'dropped';\n  exports.DROPPED_STATUS = DROPPED_STATUS;\n  var PLANNED_STATUS = 'planned';\n\n  exports.PLANNED_STATUS = PLANNED_STATUS;\n  var STATUS_VALUES = [COMPLETED_STATUS, DROPPED_STATUS, PLANNED_STATUS];\n\n  exports['default'] = _ember['default'].Mixin.create({\n    planStatuses: computed(function () {\n      var i18n = this.get('i18n');\n\n      return STATUS_VALUES.map(function (status) {\n        return {\n          id: status,\n          value: i18n.t('operativePlan.labels.' + status + 'Status')\n        };\n      }).sort(function (a, b) {\n        return _ember['default'].compare(a.value.toString(), b.value.toString());\n      });\n    })\n  });\n});","define('hospitalrun/tests/mixins/operative-plan-statuses.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/operative-plan-statuses.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/operative-plan-statuses.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/pagination-props', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    paginationProps: (function () {\n      var paginationProperties = ['disableNextPage', 'disablePreviousPage', 'showFirstPageButton', 'showLastPageButton', 'showPagination'];\n      return this.getProperties(paginationProperties);\n    }).property('disableNextPage', 'disablePreviousPage', 'showFirstPageButton', 'showLastPageButton', 'showPagination')\n  });\n});","define('hospitalrun/tests/mixins/pagination-props.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/pagination-props.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/pagination-props.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/paging-actions', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    firstPage: 'firstPage',\n    lastPage: 'lastPage',\n    nextPage: 'nextPage',\n    previousPage: 'previousPage',\n    actions: {\n      firstPage: function firstPage() {\n        this.sendAction('firstPage');\n      },\n      lastPage: function lastPage() {\n        this.sendAction('lastPage');\n      },\n      nextPage: function nextPage() {\n        this.sendAction('nextPage');\n      },\n      previousPage: function previousPage() {\n        this.sendAction('previousPage');\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/paging-actions.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/paging-actions.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/paging-actions.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-appointments', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, _ember, _hospitalrunMixinsPouchdb) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {\n    getPatientAppointments: function getPatientAppointments(patient) {\n      var patientId = patient.get('id');\n      var maxValue = this.get('maxValue');\n      return this.store.query('appointment', {\n        options: {\n          startkey: [patientId, null, null, 'appointment_'],\n          endkey: [patientId, maxValue, maxValue, maxValue]\n        },\n        mapReduce: 'appointments_by_patient'\n      });\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-appointments.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-appointments.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-appointments.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-diagnosis', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Mixin.create({\n    _addDiagnosisToList: function _addDiagnosisToList(diagnosis, diagnosesList) {\n      if (!_ember['default'].isEmpty(diagnosis)) {\n        if (_ember['default'].isEmpty(diagnosesList.findBy('description', diagnosis))) {\n          diagnosesList.addObject(diagnosis);\n        }\n      }\n    },\n\n    getDiagnoses: function getDiagnoses(diagnosisContainer, hideInActiveDiagnoses, secondaryDiagnoses) {\n      var _this = this;\n\n      var diagnosisProperty = arguments.length <= 3 || arguments[3] === undefined ? 'diagnoses' : arguments[3];\n\n      var diagnosesList = [];\n      if (!isEmpty(diagnosisContainer)) {\n        var diagnoses = diagnosisContainer.get(diagnosisProperty);\n        diagnoses = diagnoses.filterBy('archived', false);\n        if (hideInActiveDiagnoses) {\n          diagnoses = diagnoses.filterBy('active', true);\n        }\n        if (!secondaryDiagnoses) {\n          secondaryDiagnoses = false;\n        }\n        diagnoses = diagnoses.filterBy('secondaryDiagnosis', secondaryDiagnoses);\n        diagnoses.forEach(function (diagnosis) {\n          _this._addDiagnosisToList(diagnosis, diagnosesList);\n        });\n        return diagnosesList;\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-diagnosis.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-diagnosis.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-diagnosis.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-id', ['exports', 'ember', 'hospitalrun/mixins/friendly-id'], function (exports, _ember, _hospitalrunMixinsFriendlyId) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsFriendlyId['default'], {\n    config: inject.service(),\n    sequenceName: 'patient',\n    sequenceView: 'patient_by_display_id',\n\n    sequencePrefix: function sequencePrefix() {\n      var config = get(this, 'config');\n      return config.getPatientPrefix();\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-id.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-id.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-id.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-invoices', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, _ember, _hospitalrunMixinsPouchdb) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {\n    getPatientInvoices: function getPatientInvoices(patient) {\n      var patientId = patient.get('id');\n      return this.store.query('invoice', {\n        options: {\n          key: patientId\n        },\n        mapReduce: 'invoice_by_patient'\n      });\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-invoices.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-invoices.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-invoices.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-list-route', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    database: _ember['default'].inject.service(),\n\n    /**\n     * Lazily load patient list so that it doesn't impact performance.\n     */\n    _fetchPatientList: function _fetchPatientList(controller) {\n      var patientQuery = {\n        startkey: 'patient_',\n        endkey: 'patient_￿',\n        include_docs: true\n      };\n      var database = this.get('database');\n      database.queryMainDB(patientQuery).then(function (result) {\n        if (result.rows) {\n          var list = result.rows.map(function (row) {\n            return row.doc;\n          });\n          controller.set('patientList', list);\n        }\n      });\n    },\n\n    actions: {\n      returnToPatient: function returnToPatient() {\n        this.controller.send('returnToPatient');\n        this.controller.send('closeModal');\n      },\n\n      returnToVisit: function returnToVisit() {\n        this.controller.send('returnToVisit');\n      }\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      this._fetchPatientList(controller);\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-list-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-list-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-list-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-name', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    getPatientDisplayId: function getPatientDisplayId(patient) {\n      var externalPatientId = _ember['default'].get(patient, 'externalPatientId');\n      var friendlyId = _ember['default'].get(patient, 'friendlyId');\n      var id = _ember['default'].get(patient, 'id');\n      if (!_ember['default'].isEmpty(friendlyId)) {\n        return friendlyId;\n      } else if (!_ember['default'].isEmpty(externalPatientId)) {\n        return externalPatientId;\n      } else {\n        return id;\n      }\n    },\n\n    getPatientDisplayName: function getPatientDisplayName(patient, shortName) {\n      var firstName = _ember['default'].get(patient, 'firstName');\n      var lastName = _ember['default'].get(patient, 'lastName');\n      var middleName = _ember['default'].get(patient, 'middleName');\n      var nameArray = [];\n      if (!_ember['default'].isEmpty(firstName)) {\n        nameArray.push(firstName);\n      }\n      if (!_ember['default'].isEmpty(middleName) && !shortName) {\n        nameArray.push(middleName);\n      }\n      if (!_ember['default'].isEmpty(lastName)) {\n        nameArray.push(lastName);\n      }\n      return nameArray.join(' ');\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-name.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-name.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-name.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-notes', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n\n    canAddNote: function canAddNote() {\n      return this.currentUserCan('add_note') && (!_ember['default'].isEmpty(this.get('visits')) || !_ember['default'].isEmpty(this.get('model.visits')));\n    },\n\n    canDeleteNote: function canDeleteNote() {\n      return this.currentUserCan('delete_note');\n    },\n\n    _computeNoteType: function _computeNoteType(visit) {\n      switch (visit.get('visitType')) {\n        case 'Admission':\n          if (_ember['default'].isEmpty(visit.get('procedures'))) {\n            return 'Pre-op';\n          } else {\n            return 'Post-op';\n          }\n        case 'Clinic':\n        case 'Followup':\n          return 'General';\n        default:\n          return visit.get('visitType');\n      }\n    },\n\n    _setNoteType: function _setNoteType() {\n      var model = this.get('model');\n      if (model.get('noteType') == null) {\n        model.set('noteType', this._computeNoteType(model.get('visit')));\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-notes.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-notes.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-notes.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-submodule', ['exports', 'ember-data', 'ember', 'hospitalrun/mixins/patient-visits', 'hospitalrun/utils/select-values'], function (exports, _emberData, _ember, _hospitalrunMixinsPatientVisits, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPatientVisits['default'], {\n    findPatientVisits: true, // Override to false if visits shouldn't be set when patient is selected.\n    needToUpdateVisit: false,\n    patientList: null,\n    selectedPatient: null,\n    newVisitAdded: null,\n\n    actions: {\n      showPatient: function showPatient(patient) {\n        this.transitionToRoute('patients.edit', patient);\n      },\n\n      returnToAllItems: function returnToAllItems() {\n        this._cancelUpdate();\n        this.send('allItems');\n      },\n      returnToPatient: function returnToPatient() {\n        this._cancelUpdate();\n        this.transitionToRoute('patients.edit', this.get('model.returnToPatient'));\n      },\n      returnToVisit: function returnToVisit() {\n        this._cancelUpdate();\n        this.transitionToRoute('visits.edit', this.get('model.returnToVisit'));\n      },\n\n      selectedPatientChanged: function selectedPatientChanged(selectedPatient) {\n        var _this = this;\n\n        if (!_ember['default'].isEmpty(selectedPatient)) {\n          this.store.find('patient', selectedPatient.id).then(function (item) {\n            _this.set('model.patient', item);\n            _this.patientSelected(item);\n            _ember['default'].run.once(_this, function () {\n              this.get('model').validate()['catch'](_ember['default'].K);\n            });\n          });\n        } else {\n          this.set('model.patient', null);\n          this.patientSelected();\n        }\n      }\n    },\n\n    /**\n     * Add the specified child to the current visit and then save the visit.  If a visit\n     * has not been selected, create a new visit and add it to the selected patient.\n     * @param {Object} objectToAdd the object to add.\n     * @param {string} childName the name of the child object on the visit to add to.\n     * @param {string} newVisitType if a new visit needs to be created, what type of visit\n     * should be created.\n     * @returns {Promise} promise that will resolve or reject depending on whether or\n     * not the add and subsequent saves were successful.\n     */\n    addChildToVisit: function addChildToVisit(objectToAdd, childName, newVisitType) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var visit = this.get('model.visit');\n        if (_ember['default'].isEmpty(visit)) {\n          visit = this.createNewVisit(newVisitType).then((function (savedVisit) {\n            this._finishAddChildToVisit(objectToAdd, childName, savedVisit, resolve, reject);\n          }).bind(this), reject);\n        } else {\n          this._finishAddChildToVisit(objectToAdd, childName, visit, resolve, reject);\n        }\n      }).bind(this));\n    },\n\n    addDiagnosisToModelAndPatient: function addDiagnosisToModelAndPatient(newDiagnosis) {\n      var _this2 = this;\n\n      var diagnoses = this.get('model.diagnoses');\n      diagnoses.addObject(newDiagnosis);\n      var patientDiagnoses = this.get('model.patient.diagnoses');\n      var diagnosisExists = patientDiagnoses.any(function (diagnosis) {\n        return diagnosis.get('active') === true && diagnosis.get('diagnosis') === newDiagnosis.get('diagnosis') && diagnosis.get('secondaryDiagnosis') === newDiagnosis.get('secondaryDiagnosis');\n      });\n      if (!diagnosisExists) {\n        (function () {\n          var newPatientDiagnosis = _this2._copyDiagnosis(newDiagnosis);\n          newPatientDiagnosis.save().then(function () {\n            patientDiagnoses.addObject(newPatientDiagnosis);\n            var patient = _this2.get('model.patient');\n            patient.save().then(function () {\n              _this2.silentUpdate('closeModal');\n            });\n          });\n        })();\n      } else {\n        this.silentUpdate('closeModal');\n      }\n    },\n\n    _finishAddChildToVisit: function _finishAddChildToVisit(objectToAdd, childName, visit, resolve, reject) {\n      visit.get(childName).then((function (visitChildren) {\n        visitChildren.addObject(objectToAdd);\n        this.set('needToUpdateVisit', true);\n        resolve(visit);\n      }).bind(this), reject);\n    },\n\n    cancelAction: (function () {\n      var returnToPatient = this.get('model.returnToPatient');\n      var returnToVisit = this.get('model.returnToVisit');\n      if (!isEmpty(returnToVisit)) {\n        return 'returnToVisit';\n      } else if (!isEmpty(returnToPatient)) {\n        return 'returnToPatient';\n      } else {\n        return 'returnToAllItems';\n      }\n    }).property('model.returnToPatient', 'model.returnToVisit'),\n\n    createNewVisit: function createNewVisit(newVisitType) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var model = this.get('model');\n        var patient = model.get('patient');\n        var visit = this.get('store').createRecord('visit', {\n          startDate: new Date(),\n          endDate: new Date(),\n          outPatient: true,\n          patient: patient,\n          visitType: newVisitType\n        });\n        model.set('visit', visit);\n        visit.save().then((function () {\n          visit.reload().then((function (updatedVisit) {\n            this.set('newVisitAdded', updatedVisit);\n            model.set('visit', updatedVisit);\n            resolve(updatedVisit);\n          }).bind(this), reject);\n        }).bind(this), reject)['catch']((function (err) {\n          console.log('Error creating new visit');\n          reject(err);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    deleteChildFromVisit: function deleteChildFromVisit(childName) {\n      var _this3 = this;\n\n      var recordToDelete = this.get('model');\n      recordToDelete.set('archived', true);\n      this.removeChildFromVisit(recordToDelete, childName).then(function () {\n        recordToDelete.save().then(function () {\n          recordToDelete.unloadRecord();\n          _this3.send('closeModal');\n        });\n      });\n    },\n\n    getPatientDiagnoses: function getPatientDiagnoses(patient, model) {\n      var _this4 = this;\n\n      var diagnoses = patient.get('diagnoses');\n      var activeDiagnoses = undefined;\n      if (!isEmpty(diagnoses)) {\n        activeDiagnoses = diagnoses.filterBy('active', true).map(function (diagnosis) {\n          return _this4._copyDiagnosis(diagnosis);\n        });\n      }\n      var currentDiagnoses = get(model, 'diagnoses');\n      currentDiagnoses.clear();\n      if (!isEmpty(activeDiagnoses)) {\n        currentDiagnoses.addObjects(activeDiagnoses);\n      }\n    },\n\n    patientId: _ember['default'].computed.alias('model.patient.id'),\n\n    patientSelected: function patientSelected() /* patient */{},\n\n    patientVisits: (function () {\n      var patient = this.get('model.patient');\n      var visitPromise = undefined;\n\n      if (!_ember['default'].isEmpty(patient) && this.get('findPatientVisits')) {\n        visitPromise = this.getPatientVisits(patient);\n      } else {\n        visitPromise = _ember['default'].RSVP.resolve([]);\n      }\n      return _emberData['default'].PromiseArray.create({\n        promise: visitPromise\n      });\n    }).property('model.patient.id', 'newVisitAdded'),\n\n    patientProcedures: _ember['default'].computed('patientVisits.[]', function () {\n      var _this5 = this;\n\n      var patient = get(this, 'model.patient');\n      return _emberData['default'].PromiseArray.create({\n        promise: get(this, 'patientVisits').then(function (patientVisits) {\n          return get(patient, 'operationReports').then(function (operationReports) {\n            return _this5._getPatientProcedures(operationReports, patientVisits);\n          });\n        })\n      });\n    }),\n\n    patientVisitsForSelect: (function () {\n      return _emberData['default'].PromiseArray.create({\n        promise: this.get('patientVisits').then(function (patientVisits) {\n          return patientVisits.map(_hospitalrunUtilsSelectValues['default'].selectObjectMap);\n        })\n      });\n    }).property('patientVisits.[]'),\n\n    /**\n     * Removes the specified child from the current visit object and then saves the visit.\n     * @param {Object} objectToRemove the object to remove.\n     * @param {string} childName the name of the child object on the visit to remove from.\n     * @returns {Promise} promise that will resolve or reject depending on whether or\n     * not the remove and subsequent save were successful.\n     */\n    removeChildFromVisit: function removeChildFromVisit(objectToRemove, childName) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var childPromises = [];\n        var visit = this.get('model.visit');\n        childPromises.addObjects(this.resolveVisitChildren());\n        _ember['default'].RSVP.all(childPromises, 'Resolved visit children before removing ' + childName).then((function () {\n          visit.get(childName).then((function (visitChildren) {\n            visitChildren.removeObject(objectToRemove);\n            visit.save().then(resolve, reject);\n          }).bind(this), reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    /**\n     * Observer on visits to make sure async relationships are resolved.\n     * @returns {array} of promises which can be used to ensure\n     * all relationships have resolved.\n     */\n    resolveVisitChildren: function resolveVisitChildren() {\n      var promises = [];\n      var visit = this.get('model.visit');\n      if (!_ember['default'].isEmpty(visit)) {\n        // Make sure all the async relationships are resolved\n        promises.push(visit.get('imaging'));\n        promises.push(visit.get('labs'));\n        promises.push(visit.get('medication'));\n        promises.push(visit.get('procedures'));\n        promises.push(visit.get('vitals'));\n        promises.push(visit.get('reports'));\n      }\n      return promises;\n    },\n\n    saveNewDiagnoses: function saveNewDiagnoses() {\n      var diagnoses = this.get('model.diagnoses');\n      diagnoses = diagnoses.filterBy('isNew', true);\n      if (!isEmpty(diagnoses)) {\n        var savePromises = diagnoses.map(function (diagnoses) {\n          return diagnoses.save();\n        });\n        return _ember['default'].RSVP.all(savePromises);\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    /**\n     * If visit needs to saved, save it and then display an alert message; otherwise\n     * just display the alert message.\n     * @param alertTitle String the title to use on the alert.\n     * @param alertMessage String the message to display in the alert.\n     */\n    saveVisitIfNeeded: function saveVisitIfNeeded(alertTitle, alertMessage, alertAction) {\n      if (this.get('needToUpdateVisit')) {\n        this.get('model.visit').save().then((function () {\n          this.set('needToUpdateVisit', false);\n          this.displayAlert(alertTitle, alertMessage, alertAction);\n        }).bind(this));\n      } else {\n        this.displayAlert(alertTitle, alertMessage, alertAction);\n      }\n    },\n\n    visitId: _ember['default'].computed.alias('model.visit.id'),\n    visitsController: _ember['default'].computed.alias('controllers.visits'),\n\n    _copyDiagnosis: function _copyDiagnosis(diagnosisToCopy) {\n      var attributesToCopy = ['date', 'diagnosis', 'secondaryDiagnosis'];\n      return this.store.createRecord('diagnosis', diagnosisToCopy.getProperties(attributesToCopy));\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-submodule.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-submodule.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-submodule.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-visits', ['exports', 'ember', 'hospitalrun/mixins/pouchdb', 'hospitalrun/utils/visit-statuses', 'ember-data', 'moment'], function (exports, _ember, _hospitalrunMixinsPouchdb, _hospitalrunUtilsVisitStatuses, _emberData, _moment) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  var isEmpty = _ember['default'].isEmpty;\n  var get = _ember['default'].get;\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {\n    getPatientVisits: function getPatientVisits(patient) {\n      var maxValue = this.get('maxValue');\n      var patientId = patient.get('id');\n      return this.store.query('visit', {\n        options: {\n          startkey: [patientId, null, null, null, 'visit_'],\n          endkey: [patientId, maxValue, maxValue, maxValue, maxValue]\n        },\n        mapReduce: 'visit_by_patient',\n        debug: true\n      });\n    },\n\n    getPatientFutureAppointment: function getPatientFutureAppointment(visit, outPatient) {\n      var patientId = get(visit, 'patient.id');\n      var visitDate = get(visit, 'startDate');\n      var maxValue = get(this, 'maxValue');\n      var promise = this.store.query('appointment', {\n        options: {\n          startkey: [patientId, null, null, 'appointment_'],\n          endkey: [patientId, maxValue, maxValue, maxValue]\n        },\n        mapReduce: 'appointments_by_patient'\n      }).then(function (result) {\n        var futureAppointments = result.filter(function (data) {\n          var startDate = get(data, 'startDate');\n          return startDate && (0, _moment['default'])(startDate).isAfter((0, _moment['default'])(visitDate), 'day');\n        }).sortBy('startDate');\n        if (!futureAppointments.length) {\n          return null;\n        }\n        if (!outPatient) {\n          var _futureAppointments = _slicedToArray(futureAppointments, 1);\n\n          var appointment = _futureAppointments[0];\n\n          return appointment;\n        } else {\n          return futureAppointments.slice(0, 3);\n        }\n      });\n      return outPatient ? _emberData['default'].PromiseArray.create({ promise: promise }) : _emberData['default'].PromiseObject.create({ promise: promise });\n    },\n\n    _getVisitCollection: function _getVisitCollection(visits, name) {\n      var returnList = [];\n      if (!_ember['default'].isEmpty(visits)) {\n        visits.forEach(function (visit) {\n          get(visit, name).then(function (items) {\n            returnList.addObjects(items);\n          });\n        });\n      }\n      return returnList;\n    },\n\n    _getPatientProcedures: function _getPatientProcedures(operationReports, visits) {\n      var patientProcedures = this._getVisitCollection(visits, 'procedures');\n      operationReports.forEach(function (report) {\n        var reportedProcedures = get(report, 'procedures');\n        var surgeryDate = get(report, 'surgeryDate');\n        reportedProcedures.forEach(function (procedure) {\n          patientProcedures.addObject({\n            description: get(procedure, 'description'),\n            procedureDate: surgeryDate,\n            report: report\n          });\n        });\n      });\n      return patientProcedures;\n    },\n\n    checkoutVisit: function checkoutVisit(visit, status) {\n      var _this = this;\n\n      visit.set('status', status);\n      visit.set('endDate', new Date());\n      return visit.save().then(function (savedVisit) {\n        return _this.updatePatientVisitFlags(savedVisit).then(function () {\n          var i18n = _this.get('i18n');\n          var patientDetails = { patientName: visit.get('patient.displayName') };\n          var message = undefined,\n              title = undefined;\n          if (status === _hospitalrunUtilsVisitStatuses['default'].CHECKED_OUT) {\n            message = i18n.t('visits.messages.checkedOut', patientDetails);\n            title = i18n.t('visits.titles.checkedOut');\n          } else {\n            message = i18n.t('visits.messages.discharged', patientDetails);\n            title = i18n.t('visits.titles.discharged');\n          }\n          _this.displayAlert(title, message);\n        });\n      });\n    },\n\n    updatePatientVisitFlags: function updatePatientVisitFlags(visit) {\n      var patient = visit.get('patient');\n      var patientAdmitted = patient.get('admitted');\n      var patientCheckedIn = patient.get('checkedIn');\n      var status = this.get('model.status');\n      if (status === _hospitalrunUtilsVisitStatuses['default'].ADMITTED && !patientAdmitted) {\n        patient.set('admitted', true);\n        return patient.save();\n      } else if (status === _hospitalrunUtilsVisitStatuses['default'].CHECKED_IN && !patientCheckedIn) {\n        patient.set('checkedIn', true);\n        return patient.save();\n      } else if (status === _hospitalrunUtilsVisitStatuses['default'].CHECKED_OUT && patientCheckedIn) {\n        return this._updateUnlessVisitStatusExists(patient, _hospitalrunUtilsVisitStatuses['default'].CHECKED_IN, 'checkedIn');\n      } else if (status === _hospitalrunUtilsVisitStatuses['default'].DISCHARGED && patientAdmitted) {\n        return this._updateUnlessVisitStatusExists(patient, _hospitalrunUtilsVisitStatuses['default'].ADMITTED, 'admitted');\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    _updateUnlessVisitStatusExists: function _updateUnlessVisitStatusExists(patient, statusToLookFor, patientStatusToSet) {\n      return this.getPatientVisits(patient).then(function (visits) {\n        if (isEmpty(visits.findBy('status', statusToLookFor))) {\n          patient.set(patientStatusToSet, false);\n          return patient.save();\n        }\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/patient-visits.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-visits.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-visits.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/payment-profiles', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    paymentProfiles: ['Private', 'Discounted', 'Free']\n  });\n});","define('hospitalrun/tests/mixins/payment-profiles.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/payment-profiles.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/payment-profiles.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/pikaday-component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Mixin.create({\n    _picker: null,\n    currentDate: null,\n    dateSetAction: null, // Specify an action to fire when a date is selected\n    format: 'l',\n    maxDate: null,\n    minDate: null,\n    originalPropery: null,\n    showTime: false,\n    yearRange: 10,\n\n    // Override with logic to fire when date is set\n    dateSet: function dateSet() {\n      var picker = get(this, '_picker');\n      var newDate = picker.getDate();\n      var dateSetAction = get(this, 'dateSetAction');\n      set(this, 'currentDate', newDate);\n      if (!isEmpty(dateSetAction)) {\n        this.sendAction('dateSetAction', newDate);\n      }\n    },\n\n    didInsertElement: function didInsertElement() {\n      var _this = this;\n\n      var currentDate = get(this, 'currentDate');\n      var $input = this.$('input');\n      $input.on('input', function () {\n        if (isEmpty($input.val())) {\n          set(_this, 'currentDate', null);\n        }\n      });\n      var picker = null;\n      var props = this.getProperties('format', 'yearRange', 'showTime');\n\n      props.onSelect = this.dateSet.bind(this);\n\n      if (!isEmpty(get(this, 'minDate'))) {\n        props.minDate = get(this, 'minDate');\n        if (props.minDate === 'now') {\n          props.minDate = new Date();\n        }\n      }\n      if (!isEmpty(get(this, 'maxDate'))) {\n        props.maxDate = get(this, 'maxDate');\n        if (props.maxDate === 'now') {\n          props.maxDate = new Date();\n        }\n      }\n      props.field = $input[0];\n      picker = new Pikaday(props);\n      _ember['default'].run.next(this, function () {\n        picker.setDate(currentDate);\n      });\n      set(this, '_picker', picker);\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      var picker = get(this, '_picker');\n      if (picker) {\n        picker.destroy();\n      }\n      set(this, '_picker', null);\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/pikaday-component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/pikaday-component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/pikaday-component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/pouch-find-indexes', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var Mixin = _ember['default'].Mixin;\n  exports['default'] = Mixin.create({\n    buildPouchFindIndexes: function buildPouchFindIndexes(db) {\n      var indexesToBuild = [{\n        name: 'inventory',\n        fields: ['data.crossReference', 'data.description', 'data.friendlyId', 'data.name']\n      }, {\n        name: 'invoices',\n        fields: ['data.externalInvoiceNumber', 'data.patientInfo']\n      }, {\n        name: 'patient',\n        fields: ['data.externalPatientId', 'data.firstName', 'data.friendlyId', 'data.lastName', 'data.phone']\n      }, {\n        name: 'medication',\n        fields: ['data.prescription']\n      }, {\n        name: 'pricing',\n        fields: ['data.name']\n      }];\n      indexesToBuild.forEach(function (index) {\n        db.createIndex({\n          index: {\n            fields: index.fields,\n            name: index.name\n          }\n        });\n      });\n    }\n  });\n});","define('hospitalrun/tests/mixins/pouch-find-indexes.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/pouch-find-indexes.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/pouch-find-indexes.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/pouchdb', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    maxValue: '￿'\n  });\n});","define('hospitalrun/tests/mixins/pouchdb.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/pouchdb.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/pouchdb.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/progress-dialog', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    progressDialog: null,\n    progressDialogDefaults: {\n      showProgress: true,\n      hideCancelButton: true,\n      hideUpdateButton: true,\n      progressBarValue: 0,\n      progressBarStyle: 'width: 0%;'\n    },\n    progressInterval: 500,\n    progressMessage: null,\n    progressTimer: null,\n    progressTitle: null,\n\n    scheduleProgress: function scheduleProgress(f) {\n      return _ember['default'].run.later(this, function () {\n        f.apply(this);\n        this.set('progressTimer', this.scheduleProgress(f));\n      }, this.get('progressInterval'));\n    },\n\n    updateProgressBar: function updateProgressBar() {\n      var progressDialog = this.get('progressDialog');\n      var progressBarValue = progressDialog.get('progressBarValue');\n      progressBarValue += 10;\n      if (progressBarValue > 100) {\n        progressBarValue = 0;\n      }\n      progressDialog.set('progressBarValue', progressBarValue);\n      var progressBarStyle = _ember['default'].String.htmlSafe('width: ' + progressBarValue + '%');\n      progressDialog.set('progressBarStyle', progressBarStyle);\n    },\n\n    closeProgressModal: function closeProgressModal() {\n      _ember['default'].run.cancel(this.get('progressTimer'));\n      this.send('closeModal');\n    },\n\n    showProgressModal: function showProgressModal() {\n      var progressDialog = _ember['default'].Object.create(this.get('progressDialogDefaults'));\n      progressDialog.progressBarStyle = _ember['default'].String.htmlSafe(progressDialog.progressBarStyle);\n      progressDialog.set('title', this.get('progressTitle'));\n      progressDialog.set('message', this.get('progressMessage'));\n      this.set('progressDialog', progressDialog);\n      this.set('progressTimer', this.scheduleProgress(this.get('updateProgressBar')));\n      this.send('openModal', 'dialog', progressDialog);\n    }\n  });\n});","define('hospitalrun/tests/mixins/progress-dialog.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/progress-dialog.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/progress-dialog.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/publish-statuses', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    publishStatuses: ['Draft', 'Published', 'Private', 'Archived']\n  });\n});","define('hospitalrun/tests/mixins/publish-statuses.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/publish-statuses.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/publish-statuses.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/result-validation', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    validations: {\n      result: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!object.get('hasDirtyAttributes')) {\n              return false;\n            }\n            var status = object.get('status');\n            var result = object.get('result');\n            if (status === 'Completed' && _ember['default'].isEmpty(result)) {\n              // force validation to fail\n              return true;\n            }\n            return false;\n          },\n          message: (0, _emberI18n.translationMacro)('errors.result')\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/result-validation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/result-validation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/result-validation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/return-to', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    cancelAction: (function () {\n      var returnTo = this.get('model.returnTo');\n      if (_ember['default'].isEmpty(returnTo)) {\n        return 'allItems';\n      } else {\n        return 'returnTo';\n      }\n    }).property('returnTo')\n  });\n});","define('hospitalrun/tests/mixins/return-to.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/return-to.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/return-to.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/setup-user-role', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    setupUserRole: function setupUserRole() {\n      var session = this.get('session');\n      var userRole = session.get('data.authenticated.role');\n      return this.get('store').find('user-role', userRole.dasherize()).then(function (userCaps) {\n        session.set('data.authenticated.userCaps', userCaps.get('capabilities'));\n        var sessionStore = session.get('store');\n        var sessionData = session.get('data');\n        sessionStore.persist(sessionData);\n        return true;\n      })['catch'](_ember['default'].K);\n    }\n  });\n});","define('hospitalrun/tests/mixins/setup-user-role.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/setup-user-role.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/setup-user-role.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/typeahead', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {\n  'use strict';\n\n  function _instanceof(left, right) { if (right != null && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\n  var computed = _ember['default'].computed;\n  var observer = _ember['default'].observer;\n  exports['default'] = _ember['default'].Mixin.create({\n    _mapContentItems: function _mapContentItems() {\n      var _this = this;\n\n      var content = this.get('content');\n      if (content) {\n        var mapped = content.filter(function (item) {\n          return !_ember['default'].isEmpty(item);\n        });\n        if (_instanceof(content, _emberData['default'].RecordArray)) {\n          mapped = mapped.map(function (item) {\n            var returnObj = item.getProperties(_this.get('displayKey'));\n            returnObj[_this.get('selectionKey')] = item;\n            return returnObj;\n          });\n        } else {\n          mapped = mapped.map(function (item) {\n            var returnObj = {};\n            returnObj[_this.get('displayKey')] = item;\n            return returnObj;\n          });\n        }\n        return mapped;\n      } else {\n        return [];\n      }\n    },\n\n    mappedContent: computed('content', function () {\n      return this._mapContentItems();\n    }),\n\n    contentChanged: observer('content.[]', function () {\n      var bloodhound = this.get('bloodhound');\n      if (bloodhound) {\n        bloodhound.clear();\n        bloodhound.add(this._mapContentItems());\n      }\n    }),\n\n    bloodhound: null,\n    displayKey: 'value',\n    selectionKey: 'value',\n    hint: true,\n    highlight: true,\n    lastHint: null,\n    limit: 500,\n    minlength: 1,\n    selectedItem: false,\n    inputElement: null,\n    typeAhead: null,\n    setOnBlur: true,\n    templates: null,\n    selectedAction: null,\n\n    _getSource: function _getSource() {\n      var typeAheadBloodhound = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.obj.whitespace(this.get('displayKey')),\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        local: this.get('mappedContent')\n      });\n      typeAheadBloodhound.initialize();\n      this.set('bloodhound', typeAheadBloodhound);\n      return typeAheadBloodhound.ttAdapter();\n    },\n\n    didInsertElement: function didInsertElement() {\n      var _this2 = this;\n\n      var $input = this.$('input');\n      this.set('inputElement', $input);\n      var $typeahead = $input.typeahead({\n        autoselect: true,\n        hint: this.get('hint'),\n        highlight: this.get('highlight'),\n        minLength: this.get('minlength')\n      }, {\n        displayKey: this.get('displayKey'),\n        limit: this.get('limit'),\n        source: this._getSource(),\n        templates: this.get('templates')\n      });\n      this.set('typeAhead', $typeahead);\n\n      $typeahead.on('typeahead:selected', function (event, item) {\n        _this2.itemSelected(item[_this2.get('selectionKey')]);\n      });\n\n      $typeahead.on('typeahead:autocompleted', function (event, item) {\n        _this2.itemSelected(item[_this2.get('selectionKey')]);\n      });\n\n      if (this.get('setOnBlur')) {\n        $input.on('keyup', function () {\n          var $hint = _this2.$('.tt-hint');\n          var hintValue = $hint.val();\n          _this2.set('lastHint', hintValue);\n          _this2.set('selectedItem', false);\n        });\n\n        $input.on('blur', function (event) {\n          var selection = _this2.get('selection');\n          var targetValue = event.target.value.trim();\n          if (!_ember['default'].isEmpty(selection)) {\n            if (selection.trim) {\n              selection = selection.trim();\n            }\n            _this2.set('selection', selection);\n          }\n          if (!_this2.get('selectedItem')) {\n            (function () {\n              var lastHint = _this2.get('lastHint');\n              var exactMatch = false;\n              if (_ember['default'].isEmpty(lastHint)) {\n                lastHint = targetValue;\n                exactMatch = true;\n              }\n              if (!_ember['default'].isEmpty(targetValue) && !_ember['default'].isEmpty(lastHint)) {\n                _this2.get('bloodhound').search(lastHint, function (suggestions) {\n                  if (suggestions.length > 0) {\n                    if (!exactMatch || lastHint.toLowerCase() === suggestions[0][_this2.get('displayKey')].toLowerCase()) {\n                      _this2.itemSelected(suggestions[0][_this2.get('selectionKey')]);\n                      event.target.value = suggestions[0][_this2.get('displayKey')];\n                      _this2.get('model').set(_this2.get('propertyName'), event.target.value);\n                    }\n                  } else if (targetValue !== selection) {\n                    _this2.itemSelected();\n                  }\n                });\n              } else if (_ember['default'].isEmpty(targetValue)) {\n                _this2.itemSelected();\n              }\n            })();\n          }\n        });\n      }\n    },\n\n    itemSelected: function itemSelected(itemSelection) {\n      this.set('selection', itemSelection);\n      this.set('selectedItem', true);\n      var selectedAction = this.get('selectedAction');\n      if (!_ember['default'].isEmpty(selectedAction)) {\n        this.sendAction('selectedAction', itemSelection);\n      }\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      this.get('inputElement').typeahead('destroy');\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/unit-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultUnitList: ['ampoule', 'bag', 'bottle', 'box', 'bundle', 'capsule', 'case', 'container', 'cream', 'each', 'gel', 'nebule', 'ointment', 'pack', 'pair', 'pallet', 'patch', 'pcs', 'pill', 'plastic', 'polyamp', 'roll', 'spray', 'suppository', 'suspension', 'set', 'syrup', 'tablet', 'tray', 'tube', 'vial'],\n\n    unitList: (function () {\n      var defaultUnitList = this.get('defaultUnitList');\n      var inventoryUnitList = this.get('inventoryUnitList');\n      if (_ember['default'].isEmpty(inventoryUnitList)) {\n        return defaultUnitList;\n      } else {\n        return inventoryUnitList;\n      }\n    }).property('inventoryUnitList', 'defaultUnitList'),\n\n    unitListForSelect: _ember['default'].computed.map('unitList', _hospitalrunUtilsSelectValues['default'].selectValuesMap)\n  });\n});","define('hospitalrun/tests/mixins/unit-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/unit-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/unit-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/user-roles', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var PREDEFINED_USER_ROLES = [{ name: 'Data Entry', roles: ['Data Entry', 'user'], defaultRoute: 'patients.index' }, { name: 'Doctor', roles: ['Doctor', 'user'], defaultRoute: 'patients.index' }, { name: 'Finance', roles: ['Finance', 'user'], defaultRoute: 'invoices.index' }, { name: 'Finance Manager', roles: ['Finance Manager', 'user'], defaultRoute: 'invoices.index' }, { name: 'Hospital Administrator', roles: ['Hospital Administrator', 'user'], defaultRoute: 'invoices.index' }, { name: 'Inventory Manager', roles: ['Inventory Manager', 'user'], defaultRoute: 'inventory.index' }, { name: 'Imaging Technician', roles: ['Imaging Technician', 'user'], defaultRoute: 'imaging.index' }, { name: 'Lab Technician', roles: ['Lab Technician', 'user'], defaultRoute: 'labs.index' }, { name: 'Medical Records Officer', roles: ['Medical Records Officer', 'user'], defaultRoute: 'patients.index' }, { name: 'Nurse', roles: ['Nurse', 'user'], defaultRoute: 'patients.index' }, { name: 'Nurse Manager', roles: ['Nurse Manager', 'user'], defaultRoute: 'patients.index' }, { name: 'Patient Administration', roles: ['Patient Administration', 'user'], defaultRoute: 'patients.index' }, { name: 'Pharmacist', roles: ['Pharmacist', 'user'], defaultRoute: 'medication.index' }, { name: 'Social Worker', roles: ['Social Worker', 'user'], defaultRoute: 'patients.index' }, { name: 'System Administrator', roles: ['System Administrator', 'admin', 'user'] }, { name: 'User Administrator', roles: ['User Administrator', 'admin', 'user'], defaultRoute: 'users' }, { name: 'Cashier', roles: ['Cashier', 'user'], defaultRoute: 'invoices.index' }];\n\n  exports.PREDEFINED_USER_ROLES = PREDEFINED_USER_ROLES;\n  exports['default'] = _ember['default'].Mixin.create({\n    userRoles: PREDEFINED_USER_ROLES,\n\n    findUserRole: function findUserRole(name) {\n      return this.userRoles.findBy('name', name);\n    }\n  });\n});","define('hospitalrun/tests/mixins/user-roles.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/user-roles.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/user-roles.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/user-session', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    session: _ember['default'].inject.service(),\n    defaultCapabilities: {\n      admin: ['User Administrator', 'System Administrator', 'Quality'],\n      add_allergy: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      appointments: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator', 'Cashier'],\n      add_appointment: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator', 'Cashier'],\n      add_charge: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_billing_diagnosis: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_diagnosis: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      add_medication: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],\n      add_operative_plan: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      add_operation_report: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      add_photo: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      add_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      add_pricing: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_pricing_profile: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_lab: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Lab Technician', 'System Administrator'],\n      add_imaging: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Imaging Technician', 'Medical Records Officer', 'System Administrator'],\n      add_inventory_request: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Nurse Manager', 'Pharmacist', 'System Administrator'],\n      add_inventory_item: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],\n      add_inventory_purchase: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],\n      add_invoice: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator', 'Cashier'],\n      add_payment: ['Hospital Administrator', 'Medical Records Officer', 'System Administrator', 'Cashier'],\n      add_procedure: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],\n      add_socialwork: ['Hospital Administrator', 'Medical Records Officer', 'Social Worker', 'System Administrator'],\n      add_user: ['User Administrator', 'System Administrator'],\n      add_visit: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      add_vitals: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'System Administrator'],\n      add_report: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'System Administrator'],\n      admit_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      adjust_inventory_location: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],\n      billing: ['Hospital Administrator', 'Finance', 'Finance Manager', 'System Administrator', 'Cashier'],\n      cashier: ['Cashier', 'System Administrator'],\n      complete_imaging: ['Imaging Technician', 'Medical Records Officer', 'System Administrator'],\n      complete_lab: ['Lab Technician', 'Medical Records Officer', 'System Administrator'],\n      delete_appointment: ['Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      delete_diagnosis: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      delete_inventory_item: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],\n      delete_imaging: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_invoice: ['Hospital Administrator', 'System Administrator'],\n      delete_lab: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_medication: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_photo: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      delete_patient: ['Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      delete_pricing: ['Finance', 'Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_pricing_profile: ['Finance', 'Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_procedure: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],\n      delete_socialwork: ['Hospital Administrator', 'Medical Records Officer', 'Social Worker', 'System Administrator'],\n      delete_vitals: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'System Administrator'],\n      delete_report: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'System Administrator'],\n      delete_visit: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      delete_user: ['User Administrator', 'System Administrator'],\n      discharge_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      edit_invoice: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      fulfill_inventory: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],\n      fulfill_medication: ['Medical Records Officer', 'Pharmacist', 'System Administrator'],\n      imaging: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Imaging Technician', 'Medical Records Officer', 'System Administrator'],\n      invoices: ['Hospital Administrator', 'Finance', 'Finance Manager', 'System Administrator', 'Cashier'],\n      labs: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Lab Technician', 'Medical Records Officer', 'System Administrator'],\n      list_paid_invoices: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      medication: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],\n      inventory: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Nurse Manager', 'Pharmacist', 'System Administrator'],\n      load_db: ['System Administrator'],\n      override_invoice: ['Hospital Administrator', 'System Administrator', 'Cashier'],\n      query_db: ['System Administrator'],\n      patients: ['Data Entry', 'Doctor', 'Finance', 'Finance Manager', 'Hospital Administrator', 'Imaging Technician', 'Lab Technician', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n\n      patient_reports: ['Hospital Administrator', 'Patient Administration', 'System Administrator'],\n\n      pricing: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      print_invoice: ['Cashier', 'System Adminstrator'],\n      review_invoice: ['Cashier', 'System Administrator'],\n      visits: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse Manager', 'Nurse', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      incident: ['Hospital Staff', 'User Administrator', 'Quality', 'System Administrator'],\n      add_incident: ['Hospital Staff', 'User Administrator', 'Quality', 'System Administrator'],\n      delete_incident: ['Quality', 'System Administrator'],\n      generate_incident_report: ['User Administrator', 'Quality', 'System Administrator'],\n      add_incident_category: ['User Administrator', 'Quality', 'System Administrator'],\n      delete_incident_category: ['Quality', 'System Administrator'],\n      manage_incidents: ['Quality', 'System Administrator'],\n      update_config: ['System Administrator'],\n      users: ['User Administrator', 'System Administrator', 'Quality'],\n      add_note: ['Doctor', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],\n      delete_note: ['Medical Records Officer', 'Nurse Manager', 'Patient Administration', 'System Administrator'],\n      'define_user_roles': ['System Administrator']\n    },\n\n    _getUserSessionVars: function _getUserSessionVars() {\n      var session = this.get('session');\n      if (!_ember['default'].isEmpty(session) && session.get('isAuthenticated')) {\n        return session.get('data.authenticated');\n      }\n    },\n\n    currentUserRole: function currentUserRole() {\n      var sessionVars = this._getUserSessionVars();\n      if (!_ember['default'].isEmpty(sessionVars) && !_ember['default'].isEmpty(sessionVars.role)) {\n        return sessionVars.role;\n      }\n      return null;\n    },\n\n    currentUserCan: function currentUserCan(capability) {\n      var sessionVars = this._getUserSessionVars();\n      if (!_ember['default'].isEmpty(sessionVars) && !_ember['default'].isEmpty(sessionVars.role)) {\n        var userCaps = this.get('session').get('data.authenticated.userCaps');\n        if (_ember['default'].isEmpty(userCaps)) {\n          var capabilities = this.get('defaultCapabilities');\n          var supportedRoles = capabilities[capability];\n          if (!_ember['default'].isEmpty(supportedRoles)) {\n            return supportedRoles.includes(sessionVars.role);\n          }\n        } else {\n          return userCaps.includes(capability.camelize()); // User defined capabilities are camelcased.\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Returns the display name of the user or the username if\n     * the display name is not set or if the username is explictly requested.\n     * @param {boolean} returnUserName if true, always return the username instead\n     * of the display name even if the display name is set.\n     */\n    getUserName: function getUserName(returnUserName) {\n      var returnName = undefined;\n      var sessionVars = this._getUserSessionVars();\n      if (!_ember['default'].isEmpty(sessionVars)) {\n        if (returnUserName) {\n          returnName = sessionVars.name;\n        } else if (!_ember['default'].isEmpty(sessionVars.displayName)) {\n          returnName = sessionVars.displayName;\n        } else if (!_ember['default'].isEmpty(sessionVars.name)) {\n          returnName = sessionVars.name;\n        }\n      }\n      return returnName;\n    }\n  });\n});","define('hospitalrun/tests/mixins/user-session.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/user-session.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/user-session.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/visit-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultVisitTypes: ['Admission', 'Clinic', 'Followup', 'Imaging', 'Lab', 'Pharmacy'],\n\n    _getVisitTypes: function _getVisitTypes(includeEmpty) {\n      var defaultVisitTypes = this.get('defaultVisitTypes');\n      var visitTypesList = this.get('visitTypesList');\n      var visitList = undefined;\n      if (_ember['default'].isEmpty(visitTypesList)) {\n        visitList = defaultVisitTypes;\n      } else {\n        visitList = visitTypesList.get('value');\n      }\n      visitList = _hospitalrunUtilsSelectValues['default'].selectValues(visitList, includeEmpty);\n      return visitList;\n    },\n\n    visitTypes: (function () {\n      return this._getVisitTypes();\n    }).property('visitTypesList', 'defaultVisitTypes').volatile(),\n\n    visitTypesWithEmpty: (function () {\n      return this._getVisitTypes(true);\n    }).property('visitTypesList', 'defaultVisitTypes').volatile()\n  });\n});","define('hospitalrun/tests/mixins/visit-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/visit-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/visit-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/abstract', ['exports', 'ember-data', 'ember', 'ember-validations', 'ember-pouch', 'hospitalrun/mixins/user-session'], function (exports, _emberData, _ember, _emberValidations, _emberPouch, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _emberPouch.Model.extend(_hospitalrunMixinsUserSession['default'], _emberValidations['default'], {\n    session: inject.service(),\n    archived: _emberData['default'].attr('boolean', { defaultValue: false }),\n    lastModified: _emberData['default'].attr('date'),\n    modifiedBy: _emberData['default'].attr(),\n    modifiedFields: _emberData['default'].attr(),\n\n    loadedCustomForms: null,\n\n    didLoad: function didLoad() {\n      var loadedCustomForms = this.get('customForms');\n      if (!isEmpty(loadedCustomForms)) {\n        loadedCustomForms = JSON.parse(JSON.stringify(loadedCustomForms));\n      }\n      this.set('loadedCustomForms', loadedCustomForms);\n    },\n\n    changedAttributes: function changedAttributes() {\n      var changedAttributes = this._super();\n      var currentCustomForms = this.get('customForms');\n      var loadedCustomForms = this.get('loadedCustomForms');\n      if (!isEmpty(currentCustomForms)) {\n        if (isEmpty(loadedCustomForms)) {\n          loadedCustomForms = {};\n        }\n        var newKeys = Object.keys(currentCustomForms);\n        newKeys.forEach(function (customFormId) {\n          var oldCustomForm = loadedCustomForms[customFormId];\n          var customFormPrefix = 'customForms.' + customFormId;\n          if (isEmpty(oldCustomForm)) {\n            oldCustomForm = {};\n          }\n          var newForm = get(currentCustomForms, customFormId);\n          var newFormKeys = Object.keys(newForm);\n          newFormKeys.forEach(function (newFormProperty) {\n            var oldValue = get(oldCustomForm, newFormProperty);\n            var newValue = get(newForm, newFormProperty);\n            if (oldValue != newValue) {\n              changedAttributes[customFormPrefix + '.' + newFormProperty] = [oldValue, newValue];\n            }\n          });\n        });\n      }\n      return changedAttributes;\n    },\n\n    /**\n    * Before saving the record, update the modifiedFields attribute to denote what fields were changed when.\n    * Also, if the save failed because of a conflict, reload the record and reapply the changed attributes and\n    * attempt to save again.\n    */\n    save: function save(options) {\n      var attribute = undefined;\n      var changedAttributes = this.changedAttributes();\n      var modifiedDate = new Date();\n      var modifiedFields = this.get('modifiedFields');\n      var session = this.get('session');\n\n      if (!session || !session.get('isAuthenticated')) {\n        return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n          _ember['default'].run(null, reject, 'ERROR you must be logged in to save');\n        });\n      }\n\n      if (this.get('hasDirtyAttributes') && !this.get('isDeleted')) {\n        if (isEmpty(modifiedFields)) {\n          modifiedFields = {};\n        }\n        this.set('lastModified', modifiedDate);\n        for (attribute in changedAttributes) {\n          modifiedFields[attribute] = modifiedDate;\n        }\n        this.set('modifiedFields', modifiedFields);\n        this.set('modifiedBy', this.getUserName());\n      }\n      return this._super(options)['catch']((function (error) {\n        if (!isEmpty(options) && options.retry) {\n          throw error;\n        } else {\n          if (error.name && error.name.indexOf && error.name.indexOf('conflict') > -1) {\n            // Conflict encountered, so rollback, reload and then save the record with the changed attributes.\n            this.rollbackAttributes();\n            return this.reload().then(function (record) {\n              for (var _attribute in changedAttributes) {\n                record.set(_attribute, changedAttributes[_attribute][1]);\n              }\n              if (_ember['default'].isEmpty(options)) {\n                options = {};\n              }\n              options.retry = true;\n              return record.save(options);\n            });\n          } else {\n            throw error;\n          }\n        }\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/models/abstract.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/abstract.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/abstract.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/add-diagnosis', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {\n  /**\n   * Stub model for adding new patient diagnoses; needed for validation.\n   */\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {\n    diagnosis: _emberData['default'].attr('string'),\n    validations: {\n      diagnosis: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/add-diagnosis.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/add-diagnosis.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/add-diagnosis.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/allergy', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    name: _emberData['default'].attr('string'),\n    icd9CMCode: _emberData['default'].attr('string'),\n    icd10Code: _emberData['default'].attr('string'),\n    // Associations\n    patient: _emberData['default'].belongsTo('patient'),\n\n    validations: {\n      name: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/allergy.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/allergy.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/allergy.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/appointment', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'moment', 'hospitalrun/utils/patient-validation'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _moment, _hospitalrunUtilsPatientValidation) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    allDay: _emberData['default'].attr(),\n    provider: _emberData['default'].attr('string'),\n    location: _emberData['default'].attr('string'),\n    appointmentType: _emberData['default'].attr('string'),\n    startDate: _emberData['default'].attr('date'),\n    endDate: _emberData['default'].attr('date'),\n    notes: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string', { defaultValue: 'Scheduled' }),\n\n    // Associations\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n    visits: _emberData['default'].hasMany('visit'),\n\n    // Formats\n    longDateFormat: 'l h:mm A',\n    shortDateFormat: 'l',\n    timeFormat: 'h:mm A',\n\n    _getDateSpan: function _getDateSpan(startDate, endDate, format) {\n      var formattedStart = startDate.format(format);\n      var formattedEnd = endDate.format(format);\n      return formattedStart + ' - ' + formattedEnd;\n    },\n\n    appointmentDate: (function () {\n      var startDate = this.get('startDate');\n      return startDate;\n    }).property('startDate'),\n\n    displayStatus: (function () {\n      var status = this.get('status');\n      if (_ember['default'].isEmpty(status)) {\n        status = 'Scheduled';\n      }\n      return status;\n    }).property('status'),\n\n    formattedAppointmentDate: (function () {\n      var allDay = this.get('allDay');\n      var endDate = (0, _moment['default'])(this.get('endDate'));\n      var dateFormat = '';\n      var formattedDate = '';\n      var startDate = (0, _moment['default'])(this.get('startDate'));\n\n      if (startDate.isSame(endDate, 'day')) {\n        formattedDate = startDate.format(this.get('shortDateFormat'));\n        if (!allDay) {\n          formattedDate += ' ';\n          formattedDate += this._getDateSpan(startDate, endDate, this.get('timeFormat'));\n        }\n      } else {\n        if (allDay) {\n          dateFormat = this.get('shortDateFormat');\n        } else {\n          dateFormat = this.get('longDateFormat');\n        }\n        formattedDate = this._getDateSpan(startDate, endDate, dateFormat);\n      }\n      return formattedDate;\n    }).property('startDate', 'endDate'),\n\n    validations: {\n      appointmentDate: {\n        presence: {\n          'if': function _if(object) {\n            var appointmentType = object.get('appointmentType');\n            return appointmentType !== 'Admission';\n          }\n        }\n      },\n\n      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,\n\n      patient: {\n        presence: true\n      },\n      appointmentType: {\n        presence: true\n      },\n      startDate: {\n        presence: true\n      },\n      endDate: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!object.get('hasDirtyAttributes')) {\n              return false;\n            }\n            var allDay = object.get('allDay');\n            var startDate = object.get('startDate');\n            var endDate = object.get('endDate');\n            if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {\n              // force validation to fail\n              return true;\n            } else {\n              if (allDay) {\n                if (endDate.getTime() < startDate.getTime()) {\n                  return true;\n                }\n              } else {\n                if (endDate.getTime() <= startDate.getTime()) {\n                  return true;\n                }\n              }\n            }\n            // patient is properly selected; don't do any further validation\n            return false;\n          },\n          message: 'Please select an end date later than the start date'\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/appointment.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/appointment.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/appointment.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/attachment', ['exports', 'hospitalrun/models/photo', 'ember-data'], function (exports, _hospitalrunModelsPhoto, _emberData) {\n  'use strict';\n\n  var attr = _emberData['default'].attr;\n  exports['default'] = _hospitalrunModelsPhoto['default'].extend({\n    addedBy: attr('string'),\n    addedByDisplayName: attr('string'),\n    dateAdded: attr('date'),\n    title: attr('string')\n  });\n});","define('hospitalrun/tests/models/attachment.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/attachment.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/attachment.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/billing-line-item', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/number-format'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsNumberFormat) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsNumberFormat['default'], {\n    // Attributes\n    amountOwed: _emberData['default'].attr('number'),\n    category: _emberData['default'].attr('string'),\n    description: _emberData['default'].attr('string'),\n    discount: _emberData['default'].attr('number'),\n    name: _emberData['default'].attr('string'),\n    nationalInsurance: _emberData['default'].attr('number'),\n    privateInsurance: _emberData['default'].attr('number'),\n    // Associations\n    /* The individual objects that make up this line item. */\n    details: _emberData['default'].hasMany('line-item-detail', { async: false }),\n\n    amountOwedChanged: (function () {\n      _ember['default'].run.debounce(this, function () {\n        var discount = this._getValidNumber(this.get('discount'));\n        var nationalInsurance = this._getValidNumber(this.get('nationalInsurance'));\n        var privateInsurance = this._getValidNumber(this.get('privateInsurance'));\n        var amountOwed = this._getValidNumber(this.get('total'));\n        amountOwed = amountOwed - discount - nationalInsurance - privateInsurance;\n        if (amountOwed < 0) {\n          amountOwed = 0;\n        }\n        if (!this.get('isDestroyed')) {\n          this.set('amountOwed', this._numberFormat(amountOwed, true));\n        }\n      }, 500);\n    }).observes('discount', 'nationalInsurance', 'privateInsurance', 'total'),\n\n    detailTotals: _ember['default'].computed.mapBy('details', 'amountOwed'),\n    total: _ember['default'].computed.sum('detailTotals'),\n\n    validations: {\n      category: {\n        presence: true\n      },\n      discount: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      nationalInsurance: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      name: {\n        presence: true\n      },\n      privateInsurance: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      total: {\n        numericality: {\n          allowBlank: true\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/billing-line-item.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/billing-line-item.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/billing-line-item.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/custom-field', ['exports', 'ember-validations', 'ember-data'], function (exports, _emberValidations, _emberData) {\n  'use strict';\n\n  exports['default'] = _emberData['default'].Model.extend(_emberValidations['default'], {\n    checkboxes: _emberData['default'].attr(),\n    classNames: _emberData['default'].attr('string'),\n    colSpan: _emberData['default'].attr('number'),\n    includeOtherOption: _emberData['default'].attr('boolean'),\n    label: _emberData['default'].attr('string'),\n    otherOptionLabel: _emberData['default'].attr('string'),\n    prompt: _emberData['default'].attr('string'),\n    property: _emberData['default'].attr('string'),\n    type: _emberData['default'].attr('string'),\n    values: _emberData['default'].attr('string'),\n    validations: {\n      colSpan: {\n        numericality: {\n          allowBlank: true,\n          onlyInteger: true\n        }\n      },\n      label: {\n        presence: true\n      },\n      type: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/custom-field.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/custom-field.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/custom-field.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/custom-form', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  function defaultFields() {\n    return [];\n  }\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    alwaysInclude: _emberData['default'].attr('boolean'),\n    columns: _emberData['default'].attr('number', { defaultValue: 1 }),\n    fields: _emberData['default'].attr('custom-fields', { defaultValue: defaultFields }),\n    formType: _emberData['default'].attr('string'),\n    name: _emberData['default'].attr('string'),\n\n    validations: {\n      formType: {\n        presence: true\n      },\n      name: {\n        presence: true\n      },\n      columns: {\n        numericality: {\n          allowBlank: true,\n          onlyInteger: true,\n          lessThanOrEqualTo: 12\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/custom-form.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/custom-form.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/custom-form.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/diagnosis', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    active: _emberData['default'].attr('boolean', { defaultValue: true }),\n    date: _emberData['default'].attr('date'),\n    diagnosis: _emberData['default'].attr('string'),\n    secondaryDiagnosis: _emberData['default'].attr('boolean', { defaultValue: false }),\n\n    validations: {\n      date: {\n        presence: true\n      },\n      diagnosis: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/diagnosis.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/diagnosis.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/diagnosis.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/family-info', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {\n  /**\n   * Model for social worker family info\n   */\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {\n    age: _emberData['default'].attr('number'),\n    civilStatus: _emberData['default'].attr('string'),\n    education: _emberData['default'].attr('string'),\n    income: _emberData['default'].attr('string'),\n    insurance: _emberData['default'].attr('string'),\n    name: _emberData['default'].attr('string'),\n    occupation: _emberData['default'].attr('string'),\n    relationship: _emberData['default'].attr('string'),\n    validations: {\n      age: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      name: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/family-info.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/family-info.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/family-info.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/imaging', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'hospitalrun/mixins/date-format', 'ember-data', 'ember', 'hospitalrun/utils/patient-validation', 'hospitalrun/mixins/result-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _hospitalrunMixinsDateFormat, _emberData, _ember, _hospitalrunUtilsPatientValidation, _hospitalrunMixinsResultValidation) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsResultValidation['default'], {\n    // Attributes\n    imagingDate: _emberData['default'].attr('date'),\n    notes: _emberData['default'].attr('string'),\n    radiologist: _emberData['default'].attr('string'),\n    requestedBy: _emberData['default'].attr('string'),\n    requestedDate: _emberData['default'].attr('date'),\n    result: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n    completedBy: _emberData['default'].attr('string'),\n\n    // Associations\n    charges: _emberData['default'].hasMany('proc-charge', { async: false }),\n    imagingType: _emberData['default'].belongsTo('pricing', { async: false }),\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n    visit: _emberData['default'].belongsTo('visit', { async: false }),\n\n    imagingDateAsTime: computed('imagingDate', function () {\n      return this.dateToTime(this.get('imagingDate'));\n    }),\n\n    requestedDateAsTime: computed('requestedDate', function () {\n      return this.dateToTime(this.get('requestedDate'));\n    }),\n\n    validations: {\n      imagingTypeName: {\n        presence: {\n          'if': function _if(object) {\n            if (object.get('isNew')) {\n              return true;\n            }\n          },\n          message: 'Please select an imaging type'\n        }\n      },\n      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,\n      patient: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/imaging.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/imaging.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/imaging.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inc-category', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    incidentCategoryName: _emberData['default'].attr('string'),\n    incidentCategoryItems: _emberData['default'].attr()\n\n  });\n});","define('hospitalrun/tests/models/inc-category.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inc-category.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inc-category.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/incident-note', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    givenBy: _emberData['default'].attr('string'),\n    givenByDisplayName: _emberData['default'].attr('string'),\n    description: _emberData['default'].attr('string'),\n    dateRecorded: _emberData['default'].attr('date')\n  });\n});","define('hospitalrun/tests/models/incident-note.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/incident-note.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/incident-note.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/incident', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/incident-statuses', 'moment', 'ember-validations'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsIncidentStatuses, _moment, _emberValidations) {\n  'use strict';\n\n  var attr = _emberData['default'].attr;\n  var belongsTo = _emberData['default'].belongsTo;\n  var hasMany = _emberData['default'].hasMany;\n  var computed = _ember['default'].computed;\n  var _get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var _set = _ember['default'].set;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsIncidentStatuses['default'], {\n    categoryItem: attr('string'),\n    categoryName: attr('string'),\n    customForms: _emberData['default'].attr('custom-forms'),\n    dateOfIncident: attr('date'),\n    department: attr('string'),\n    description: attr('string'),\n    friendlyId: attr('string'),\n    modifiedByDisplayName: _emberData['default'].attr('string'),\n    notificationSend: attr('boolean', { defaultValue: false }),\n    reportedBy: attr('string'),\n    reportedByDisplayName: attr('string'),\n    reportedDate: attr('date'),\n    reportedTo: attr('string'),\n    sentinelEvent: attr('boolean'),\n    status: attr('string', { defaultValue: _hospitalrunMixinsIncidentStatuses.REPORTED }),\n\n    incidentAttachments: hasMany('attachment', { async: true }),\n    notes: hasMany('incident-note', { async: true }),\n    patient: belongsTo('patient', { async: false }),\n\n    dateForFilter: computed('dateOfIncident', function () {\n      var dateOfIncident = _get(this, 'dateOfIncident');\n      return (0, _moment['default'])(dateOfIncident).startOf('day').toDate();\n    }),\n\n    localizedStatus: computed('status', function () {\n      var status = _get(this, 'status');\n      return this.getLocalizedStatus(status);\n    }),\n\n    patientTypeAhead: computed('patient', {\n      get: function get() {\n        var patient = _get(this, 'patient');\n        if (!isEmpty(patient)) {\n          return _get(patient, 'displayName') + ' - ' + _get(patient, 'displayPatientId');\n        } else {\n          return _get(this, 'typeAheadPatientName');\n        }\n      },\n      set: function set(key, value) {\n        _set(this, 'typeAheadPatientName', value);\n        return value;\n      }\n\n    }),\n\n    validations: {\n      categoryName: {\n        presence: true\n      },\n      dateOfIncident: {\n        presence: true\n      },\n      department: {\n        presence: true\n      },\n      description: {\n        presence: true\n      },\n      patientTypeAhead: {\n        inline: (0, _emberValidations.validator)(function () {\n          var patientTypeAhead = _get(this, 'patientTypeAhead');\n          var isValid = true;\n          if (isEmpty(patientTypeAhead)) {\n            return;\n          }\n          var patientName = _get(this, 'patient.displayName');\n          if (isEmpty(patientName)) {\n            isValid = false;\n          } else {\n            var typeAheadName = patientTypeAhead.substr(0, patientName.length).toLowerCase();\n            if (patientName.toLowerCase().indexOf(typeAheadName) !== 0) {\n              isValid = false;\n            }\n          }\n          if (!isValid) {\n            var i18n = _get(this, 'i18n');\n            return i18n.t('incident.messages.selectExistingPatient').toString();\n          }\n        })\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/incident.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/incident.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/incident.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inv-location', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/location-name'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsLocationName) {\n  'use strict';\n\n  /**\n   * Model to represent the location(s) of inventory items.\n   * File/model name is inv-location because using inv-location will cause location\n   * items to be shown as inventory items since the pouchdb adapter does a\n   * retrieve for keys starting with 'inventory' to fetch inventory items.\n   */\n  var InventoryLocation = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], {\n    quantity: _emberData['default'].attr('number'),\n    location: _emberData['default'].attr('string'),\n    aisleLocation: _emberData['default'].attr('string'),\n    i18n: _ember['default'].inject.service(),\n\n    locationNameWithQuantity: (function () {\n      var quantity = this.get('quantity');\n      var locationName = this.get('locationName');\n      return locationName + ' (' + this.get('i18n').t('inventory.labels.availableQuantity', { quantity: quantity }) + ')';\n    }).property('locationName', 'quantity'),\n\n    validations: {\n      adjustmentQuantity: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          }\n        },\n        acceptance: {\n          /**\n           * Validate that the adjustment quantity is a number and that if a deduction there are enough items to deduct\n           */\n          accept: true,\n          'if': function _if(object) {\n            var adjustmentQuantity = object.get('adjustmentQuantity');\n            var transactionType = object.get('transactionType');\n            var locationQuantity = object.get('quantity');\n            if (_ember['default'].isEmpty(adjustmentQuantity) || isNaN(adjustmentQuantity)) {\n              return true;\n            }\n            if (transactionType !== 'Adjustment (Add)' && adjustmentQuantity > locationQuantity) {\n              return true;\n            }\n            return false;\n          },\n          message: 'Invalid quantity'\n        }\n      },\n\n      dateCompleted: {\n        presence: {\n          message: 'Please provide a date'\n        }\n      },\n\n      transferLocation: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            var transferLocation = object.get('transferLocation');\n            var transferItem = object.get('transferItem');\n            // If we don't have a transfer item, then a transfer is not occurring.\n            if (!_ember['default'].isEmpty(transferItem) && _ember['default'].isEmpty(transferLocation)) {\n              return true;\n            }\n            return false;\n          },\n          message: 'Please select a location to transfer to'\n        }\n      }\n    }\n  });\n\n  exports['default'] = InventoryLocation;\n});","define('hospitalrun/tests/models/inv-location.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inv-location.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inv-location.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inv-purchase', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/location-name', 'hospitalrun/mixins/number-format'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsLocationName, _hospitalrunMixinsNumberFormat) {\n  'use strict';\n\n  function defaultQuantityGroups() {\n    return [];\n  }\n\n  /**\n   * Model to represent a purchase within an inventory item.\n   * File/model name is inv-purchase because using inventory-purchase will cause purchase\n   * items to be shown as inventory items since the pouchdb adapter does a\n   * retrieve for keys starting with 'inventory' to fetch inventory items.\n   */\n  var InventoryPurchaseItem = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], _hospitalrunMixinsNumberFormat['default'], {\n    purchaseCost: _emberData['default'].attr('number'),\n    lotNumber: _emberData['default'].attr('string'),\n    dateReceived: _emberData['default'].attr('date'),\n    costPerUnit: (function () {\n      var purchaseCost = this.get('purchaseCost');\n      var quantity = parseInt(this.get('originalQuantity'));\n      if (_ember['default'].isEmpty(purchaseCost) || _ember['default'].isEmpty(quantity) || purchaseCost === 0 || quantity === 0) {\n        return 0;\n      }\n      return this._numberFormat(purchaseCost / quantity, true);\n    }).property('purchaseCost', 'originalQuantity'),\n    originalQuantity: _emberData['default'].attr('number'),\n    currentQuantity: _emberData['default'].attr('number'),\n    expirationDate: _emberData['default'].attr('date'),\n    expired: _emberData['default'].attr('boolean'),\n    location: _emberData['default'].attr('string'),\n    aisleLocation: _emberData['default'].attr('string'),\n    giftInKind: _emberData['default'].attr('boolean'),\n    inventoryItem: _emberData['default'].attr('string'), // Currently just storing id instead of DS.belongsTo('inventory', { async: true }),\n    vendor: _emberData['default'].attr('string'),\n    vendorItemNo: _emberData['default'].attr('string'),\n    distributionUnit: _emberData['default'].attr('string'),\n    invoiceNo: _emberData['default'].attr('string'),\n    quantityGroups: _emberData['default'].attr({ defaultValue: defaultQuantityGroups }),\n    validations: {\n      purchaseCost: {\n        numericality: true\n      },\n      originalQuantity: {\n        numericality: {\n          greaterThanOrEqualTo: 0\n        }\n      },\n      vendor: {\n        presence: true\n      }\n    }\n  });\n\n  exports['default'] = InventoryPurchaseItem;\n});","define('hospitalrun/tests/models/inv-purchase.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inv-purchase.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inv-purchase.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inv-request', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/inventory-adjustment-types', 'ember-data', 'ember', 'hospitalrun/mixins/location-name'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsInventoryAdjustmentTypes, _emberData, _ember, _hospitalrunMixinsLocationName) {\n  'use strict';\n\n  /**\n   * Model to represent a request for inventory items.\n   */\n  var InventoryRequest = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsInventoryAdjustmentTypes['default'], _hospitalrunMixinsLocationName['default'], {\n    adjustPurchases: _emberData['default'].attr('boolean'),\n    completedBy: _emberData['default'].attr('string'),\n    costPerUnit: _emberData['default'].attr('number'),\n    dateCompleted: _emberData['default'].attr('date'),\n    dateRequested: _emberData['default'].attr('date'),\n    deliveryAisle: _emberData['default'].attr('string'),\n    deliveryLocation: _emberData['default'].attr('string'),\n    expenseAccount: _emberData['default'].attr('string'),\n    inventoryItem: _emberData['default'].belongsTo('inventory', { async: true }),\n    locationsAffected: _emberData['default'].attr(),\n    markAsConsumed: _emberData['default'].attr('boolean', { defaultValue: true }),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    purchasesAffected: _emberData['default'].attr(),\n    quantity: _emberData['default'].attr('number'),\n    quantityAtCompletion: _emberData['default'].attr('number'),\n    reason: _emberData['default'].attr('string'),\n    requestedBy: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n    transactionType: _emberData['default'].attr('string'),\n    visit: _emberData['default'].belongsTo('visit', {\n      async: false\n    }),\n\n    deliveryLocationName: (function () {\n      var aisle = this.get('deliveryAisle');\n      var location = this.get('deliveryLocation');\n      return this.formatLocationName(location, aisle);\n    }).property('deliveryAisle', 'deliveryLocation'),\n\n    deliveryDetails: (function () {\n      var locationName = this.get('deliveryLocationName');\n      var patient = this.get('patient');\n      if (_ember['default'].isEmpty(patient)) {\n        return locationName;\n      } else {\n        return patient.get('displayName');\n      }\n    }).property('deliveryAisle', 'deliveryLocation', 'patient'),\n\n    haveReason: (function () {\n      return !_ember['default'].isEmpty(this.get('reason'));\n    }).property('reason'),\n\n    isAdjustment: (function () {\n      var adjustmentTypes = this.get('adjustmentTypes');\n      var transactionType = this.get('transactionType');\n      var adjustmentType = adjustmentTypes.findBy('type', transactionType);\n      return !_ember['default'].isEmpty(adjustmentType);\n    }).property('transactionType'),\n\n    isFulfillment: (function () {\n      return this.get('transactionType') === 'Fulfillment';\n    }).property('transactionType'),\n\n    isTransfer: (function () {\n      return this.get('transactionType') === 'Transfer';\n    }).property('transactionType'),\n\n    validations: {\n      inventoryItemTypeAhead: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!object.get('hasDirtyAttributes')) {\n              return false;\n            }\n            var itemName = object.get('inventoryItem.name');\n            var itemTypeAhead = object.get('inventoryItemTypeAhead');\n            var requestedItems = object.get('requestedItems');\n            var status = object.get('status');\n            if (status === 'Requested') {\n              // Requested items don't show the type ahead and therefore don't need validation.\n              return false;\n            }\n            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {\n              // force validation to fail if fields are empty and requested items are empty\n              return _ember['default'].isEmpty(requestedItems);\n            } else {\n              var typeAheadName = itemTypeAhead.substr(0, itemName.length);\n              if (itemName !== typeAheadName) {\n                return true;\n              }\n            }\n            // Inventory item is properly selected; don't do any further validation\n            return false;\n          },\n          message: 'Please select a valid inventory item'\n        }\n      },\n      quantity: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          },\n          'if': function _if(object) {\n            var requestedItems = object.get('requestedItems');\n            return _ember['default'].isEmpty(requestedItems);\n          }\n        },\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            var isNew = object.get('isNew');\n            var requestQuantity = parseInt(object.get('quantity'));\n            var transactionType = object.get('transactionType');\n            var quantityToCompare = null;\n            if (transactionType === 'Return') {\n              // no validation needed for returns\n              return false;\n            } else if (isNew && transactionType === 'Request') {\n              quantityToCompare = object.get('inventoryItem.quantity');\n            } else {\n              quantityToCompare = object.get('inventoryLocation.quantity');\n            }\n            if (requestQuantity > quantityToCompare) {\n              // force validation to fail\n              return true;\n            } else {\n              // Diagnosis is properly set; don't do any further validation\n              return false;\n            }\n          },\n          message: 'The quantity must be less than or equal to the number of available items.'\n        }\n      }\n    }\n  });\n\n  exports['default'] = InventoryRequest;\n});","define('hospitalrun/tests/models/inv-request.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inv-request.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inv-request.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inventory-batch', ['exports', 'hospitalrun/models/abstract', 'ember'], function (exports, _hospitalrunModelsAbstract, _ember) {\n  'use strict';\n\n  /**\n   * Model to represent a request for inventory items.\n   */\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    haveInvoiceItems: function haveInvoiceItems() {\n      var invoiceItems = this.get('invoiceItems');\n      return !_ember['default'].isEmpty(invoiceItems);\n    },\n\n    validations: {\n      dateReceived: {\n        presence: true\n      },\n      inventoryItemTypeAhead: {\n        presence: {\n          unless: function unless(object) {\n            return object.haveInvoiceItems();\n          }\n        }\n      },\n      purchaseCost: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          },\n          unless: function unless(object) {\n            return object.haveInvoiceItems();\n          }\n        }\n      },\n      quantity: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          },\n          unless: function unless(object) {\n            return object.haveInvoiceItems();\n          }\n        }\n      },\n      vendor: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/inventory-batch.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inventory-batch.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inventory-batch.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inventory', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'ember-computed', 'hospitalrun/mixins/location-name', 'hospitalrun/utils/item-condition'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _emberComputed, _hospitalrunMixinsLocationName, _hospitalrunUtilsItemCondition) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n\n  var validateIfNewItem = {\n    'if': function validateNewItem(object) {\n      var skipSavePurchase = get(object, 'skipSavePurchase');\n      // Only validate on new items and only if we are saving a purchase.\n      return !skipSavePurchase && get(object, 'isNew');\n    }\n  };\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], {\n    // Attributes\n    crossReference: _emberData['default'].attr('string'),\n    description: _emberData['default'].attr('string'),\n    distributionUnit: _emberData['default'].attr('string'),\n    friendlyId: _emberData['default'].attr('string'),\n    inventoryType: _emberData['default'].attr('string'),\n    keywords: _emberData['default'].attr(),\n    name: _emberData['default'].attr('string'),\n    price: _emberData['default'].attr('number'),\n    quantity: _emberData['default'].attr('number'),\n    rank: _emberData['default'].attr('string'),\n    reorderPoint: _emberData['default'].attr('number'),\n\n    // Associations\n    locations: _emberData['default'].hasMany('inv-location', { async: false }),\n    purchases: _emberData['default'].hasMany('inv-purchase', { async: false }),\n\n    // TODO: this value should be server calcuated property on model!\n    estimatedDaysOfStock: 14,\n\n    availableLocations: (0, _emberComputed['default'])('locations.@each.quantity', function () {\n      var locations = get(this, 'locations').filter(function (location) {\n        return get(location, 'quantity') > 0;\n      });\n      return locations;\n    }),\n\n    displayLocations: (0, _emberComputed['default'])('availableLocations', function () {\n      var _this = this;\n\n      var locations = get(this, 'availableLocations');\n      var returnLocations = [];\n      locations.forEach(function (currentLocation) {\n        var aisleLocationName = get(currentLocation, 'aisleLocation');\n        var locationName = get(currentLocation, 'location');\n        var displayLocationName = _this.formatLocationName(locationName, aisleLocationName);\n        if (!_ember['default'].isEmpty(displayLocationName)) {\n          returnLocations.push(displayLocationName);\n        }\n      });\n      return returnLocations.toString();\n    }),\n\n    condition: (0, _emberComputed['default'])('rank', 'estimatedDaysOfStock', function () {\n      var estimatedDaysOfStock = get(this, 'estimatedDaysOfStock');\n      var multiplier = (0, _hospitalrunUtilsItemCondition.rankToMultiplier)(get(this, 'rank'));\n\n      return (0, _hospitalrunUtilsItemCondition.getCondition)(estimatedDaysOfStock, multiplier);\n    }),\n\n    validations: {\n      distributionUnit: {\n        presence: true\n      },\n      purchaseCost: {\n        numericality: validateIfNewItem\n      },\n      name: {\n        presence: true\n      },\n      quantity: {\n        numericality: {\n          validateIfNewItem: validateIfNewItem,\n          greaterThanOrEqualTo: 0\n        }\n      },\n      price: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      originalQuantity: {\n        presence: validateIfNewItem\n      },\n      reorderPoint: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      inventoryType: {\n        presence: true\n      },\n      vendor: {\n        presence: validateIfNewItem\n      }\n    },\n\n    updateQuantity: function updateQuantity() {\n      var purchases = get(this, 'purchases');\n      var newQuantity = purchases.reduce(function (previousItem, currentItem) {\n        var currentQuantity = 0;\n        if (!currentItem.get('expired')) {\n          currentQuantity = currentItem.get('currentQuantity');\n        }\n        return previousItem + currentQuantity;\n      }, 0);\n      set(this, 'quantity', newQuantity);\n    }\n  });\n});","define('hospitalrun/tests/models/inventory.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inventory.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inventory.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/invoice', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/date-format', 'ember-data', 'ember', 'hospitalrun/mixins/number-format', 'hospitalrun/utils/patient-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsDateFormat, _emberData, _ember, _hospitalrunMixinsNumberFormat, _hospitalrunUtilsPatientValidation) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsNumberFormat['default'], {\n    // Attributes\n    billDate: _emberData['default'].attr('date'),\n    externalInvoiceNumber: _emberData['default'].attr('string'),\n    paidTotal: _emberData['default'].attr('number'),\n    patientInfo: _emberData['default'].attr('string'), // Needed for searching\n    remarks: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n\n    // Associations\n    /* the individual line items of the invoice */\n    lineItems: _emberData['default'].hasMany('billing-line-item', { async: false }),\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n    paymentProfile: _emberData['default'].belongsTo('price-profile', { async: false }),\n    /* payments track the number of payment events attached to an invoice. */\n    payments: _emberData['default'].hasMany('payment', { async: false }),\n    visit: _emberData['default'].belongsTo('visit', { async: false }),\n\n    addPayment: function addPayment(payment) {\n      var payments = get(this, 'payments');\n      payments.addObject(payment);\n      this.paymentAmountChanged();\n    },\n\n    billDateAsTime: computed('billDate', function () {\n      return this.dateToTime(get(this, 'billDate'));\n    }),\n\n    discountTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'discount'),\n    discount: _ember['default'].computed.sum('discountTotals'),\n\n    nationalInsuranceTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'nationalInsurance'),\n    nationalInsurance: _ember['default'].computed.sum('nationalInsuranceTotals'),\n\n    paidFlag: computed('status', function () {\n      return get(this, 'status') === 'Paid';\n    }),\n\n    remainingBalance: computed('finalPatientResponsibility', 'paidTotal', function () {\n      var patientResponsibility = get(this, 'finalPatientResponsibility');\n      var paidTotal = get(this, 'paidTotal');\n      return this._numberFormat(patientResponsibility - paidTotal, true);\n    }),\n\n    privateInsuranceTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'privateInsurance'),\n    privateInsurance: _ember['default'].computed.sum('privateInsuranceTotals'),\n\n    lineTotals: _ember['default'].computed.mapBy('lineItems', 'total'),\n    total: _ember['default'].computed.sum('lineTotals'),\n\n    displayInvoiceNumber: computed('externalInvoiceNumber', 'id', function () {\n      var externalInvoiceNumber = get(this, 'externalInvoiceNumber');\n      var id = get(this, 'id');\n      return _ember['default'].isEmpty(externalInvoiceNumber) ? id : externalInvoiceNumber;\n    }),\n\n    lineItemsByCategory: computed('lineItems.@each.amountOwed', function () {\n      var lineItems = get(this, 'lineItems');\n      var byCategory = [];\n      lineItems.forEach((function (lineItem) {\n        var category = get(lineItem, 'category');\n        var categoryList = byCategory.findBy('category', category);\n        if (_ember['default'].isEmpty(categoryList)) {\n          categoryList = {\n            category: category,\n            items: []\n          };\n          byCategory.push(categoryList);\n        }\n        categoryList.items.push(lineItem);\n      }).bind(this));\n      byCategory.forEach((function (categoryList) {\n        categoryList.amountOwed = this._calculateTotal(categoryList.items, 'amountOwed');\n        categoryList.discount = this._calculateTotal(categoryList.items, 'discount');\n        categoryList.nationalInsurance = this._calculateTotal(categoryList.items, 'nationalInsurance');\n        categoryList.privateInsurance = this._calculateTotal(categoryList.items, 'privateInsurance');\n        categoryList.total = this._calculateTotal(categoryList.items, 'total');\n      }).bind(this));\n      return byCategory;\n    }),\n\n    patientIdChanged: (function () {\n      if (!_ember['default'].isEmpty(get(this, 'patient'))) {\n        var patientDisplayName = get(this, 'patient.displayName');\n        var patientDisplayId = get(this, 'patient.displayPatientId');\n        set(this, 'patientInfo', patientDisplayName + ' - ' + patientDisplayId);\n      }\n    }).observes('patient.displayName', 'patient.id', 'patient.displayPatientId'),\n\n    patientResponsibilityTotals: _ember['default'].computed.mapBy('lineItems', 'amountOwed'),\n    patientResponsibility: _ember['default'].computed.sum('patientResponsibilityTotals'),\n    finalPatientResponsibility: computed('patientResponsibility', 'paymentProfile', function () {\n      var setFee = this._getValidNumber(this.get('paymentProfile.setFee'));\n      var discountAmount = this._getValidNumber(this.get('paymentProfile.discountAmount'));\n      var patientResponsibility = this._getValidNumber(this.get('patientResponsibility'));\n      if (setFee > 0) {\n        if (setFee < patientResponsibility) {\n          return setFee;\n        } else {\n          return patientResponsibility;\n        }\n      } else if (discountAmount > 0) {\n        if (patientResponsibility - discountAmount > 0) {\n          return patientResponsibility - discountAmount;\n        } else {\n          return 0;\n        }\n      } else {\n        return patientResponsibility;\n      }\n    }),\n\n    paymentAmountChanged: (function () {\n      var payments = get(this, 'payments').filter(function (payment) {\n        return !get(payment, 'isNew');\n      });\n      if (payments.length === 0) {\n        return;\n      }\n      var paidTotal = payments.reduce((function (previousValue, payment) {\n        return previousValue += this._getValidNumber(payment.get('amount'));\n      }).bind(this), 0);\n      set(this, 'paidTotal', this._numberFormat(paidTotal, true));\n      var remainingBalance = get(this, 'remainingBalance');\n      if (remainingBalance <= 0) {\n        set(this, 'status', 'Paid');\n      }\n    }).observes('payments.[]', 'payments.@each.amount'),\n\n    validations: {\n      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,\n      patient: {\n        presence: true\n      },\n      visit: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/invoice.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/invoice.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/invoice.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/lab', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'hospitalrun/mixins/date-format', 'ember-data', 'ember', 'hospitalrun/utils/patient-validation', 'hospitalrun/mixins/result-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _hospitalrunMixinsDateFormat, _emberData, _ember, _hospitalrunUtilsPatientValidation, _hospitalrunMixinsResultValidation) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsResultValidation['default'], {\n    // Attributes\n    labDate: _emberData['default'].attr('date'),\n    notes: _emberData['default'].attr('string'),\n    requestedBy: _emberData['default'].attr('string'),\n    requestedDate: _emberData['default'].attr('date'),\n    result: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n\n    // Associations\n    charges: _emberData['default'].hasMany('proc-charge', { async: false }),\n    labType: _emberData['default'].belongsTo('pricing', { async: false }),\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n    visit: _emberData['default'].belongsTo('visit', { async: false }),\n\n    labDateAsTime: computed('labDate', function () {\n      return this.dateToTime(get(this, 'labDate'));\n    }),\n\n    requestedDateAsTime: computed('requestedDate', function () {\n      return this.dateToTime(get(this, 'requestedDate'));\n    }),\n\n    validations: {\n      labTypeName: {\n        presence: {\n          'if': function _if(object) {\n            if (object.get('isNew')) {\n              return true;\n            }\n          },\n          message: 'Please select a lab type'\n        }\n      },\n      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,\n      patient: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/lab.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/lab.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/lab.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/line-item-detail', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/number-format'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsNumberFormat) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsNumberFormat['default'], {\n    // Attributes\n    department: _emberData['default'].attr('string'),\n    expenseAccount: _emberData['default'].attr('string'),\n    name: _emberData['default'].attr('string'),\n    price: _emberData['default'].attr('number'),\n    quantity: _emberData['default'].attr('number'),\n    total: _emberData['default'].attr('number'),\n\n    // Associations\n    pricingItem: _emberData['default'].belongsTo('pricing', { async: false }),\n\n    amountOwed: computed('price', 'quantity', function () {\n      var price = get(this, 'price');\n      var quantity = get(this, 'quantity');\n      var total = 0;\n      if (this._validNumber(price) && this._validNumber(quantity)) {\n        total = this._numberFormat(price * quantity, true);\n      }\n      return total;\n    })\n  });\n});","define('hospitalrun/tests/models/line-item-detail.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/line-item-detail.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/line-item-detail.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/lookup', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {\n  'use strict';\n\n  var attr = _emberData['default'].attr;\n  exports['default'] = _emberPouch.Model.extend({\n    organizeByType: attr('boolean'),\n    userCanAdd: attr('boolean'),\n    value: attr('')\n  });\n});","define('hospitalrun/tests/models/lookup.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/lookup.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/lookup.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/medication', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'ember-data', 'hospitalrun/mixins/date-format', 'ember', 'hospitalrun/mixins/medication-details'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _emberData, _hospitalrunMixinsDateFormat, _ember, _hospitalrunMixinsMedicationDetails) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsMedicationDetails['default'], {\n    // Attributes\n    notes: _emberData['default'].attr('string'),\n    prescription: _emberData['default'].attr('string'),\n    prescriptionDate: _emberData['default'].attr('date'),\n    quantity: _emberData['default'].attr('number'),\n    refills: _emberData['default'].attr('number'),\n    requestedDate: _emberData['default'].attr('date'),\n    requestedBy: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n\n    // Associations\n    inventoryItem: _emberData['default'].belongsTo('inventory', { async: true }),\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n    visit: _emberData['default'].belongsTo('visit', { async: false }),\n\n    isRequested: computed('status', function () {\n      return get(this, 'status') === 'Requested';\n    }),\n\n    medicationName: computed('medicationTitle', 'inventoryItem', function () {\n      return this.getMedicationName('inventoryItem');\n    }),\n\n    medicationPrice: computed('priceOfMedication', 'inventoryItem', function () {\n      return this.getMedicationPrice('inventoryItem');\n    }),\n\n    prescriptionDateAsTime: computed('prescriptionDate', function () {\n      return this.dateToTime(get(this, 'prescriptionDate'));\n    }),\n\n    requestedDateAsTime: computed('requestedDate', function () {\n      return this.dateToTime(get(this, 'requestedDate'));\n    }),\n\n    validations: {\n      prescription: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!get(object, 'hasDirtyAttributes') || get(object, 'isFulfilling')) {\n              return false;\n            }\n            var prescription = get(object, 'prescription');\n            var quantity = get(object, 'quantity');\n            return _ember['default'].isEmpty(prescription) && _ember['default'].isEmpty(quantity);\n          },\n          message: 'Please enter a prescription or a quantity'\n        }\n      },\n\n      inventoryItemTypeAhead: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!get(object, 'hasDirtyAttributes') || !get(object, 'isNew')) {\n              return false;\n            }\n            var itemName = get(object, 'inventoryItem.name');\n            var itemTypeAhead = get(object, 'inventoryItemTypeAhead');\n            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {\n              // force validation to fail\n              return true;\n            } else {\n              var typeAheadName = itemTypeAhead.substr(0, itemName.length);\n              if (itemName !== typeAheadName) {\n                return true;\n              }\n            }\n            // Inventory item is properly selected; don't do any further validation\n            return false;\n          },\n          message: 'Please select a valid medication'\n        }\n      },\n\n      patientTypeAhead: {\n        presence: {\n          'if': function _if(object) {\n            return get(object, 'selectPatient');\n          }\n        }\n      },\n\n      quantity: {\n        numericality: {\n          allowBlank: true,\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          }\n        },\n        presence: {\n          'if': function _if(object) {\n            return get(object, 'isFulfilling');\n          }\n        },\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            var isFulfilling = get(object, 'isFulfilling');\n            var requestQuantity = parseInt(get(object, 'quantity'));\n            var quantityToCompare = null;\n\n            if (!isFulfilling) {\n              // no validation needed when not fulfilling\n              return false;\n            } else {\n              quantityToCompare = object.get('inventoryItem.quantity');\n            }\n\n            if (requestQuantity > quantityToCompare) {\n              // force validation to fail\n              return true;\n            } else {\n              // There is enough quantity on hand\n              return false;\n            }\n          },\n          message: 'The quantity must be less than or equal to the number of available medication.'\n        }\n      },\n\n      refills: {\n        numericality: {\n          allowBlank: true\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/medication.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/medication.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/medication.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/operation-report', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n\n  function defaultProcedures() {\n    return [];\n  }\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    additionalNotes: _emberData['default'].attr('string'),\n    caseComplexity: _emberData['default'].attr('number'),\n    customForms: _emberData['default'].attr('custom-forms'),\n    procedures: _emberData['default'].attr('operative-procedures', { defaultValue: defaultProcedures }),\n    operationDescription: _emberData['default'].attr('string'),\n    surgeon: _emberData['default'].attr('string'),\n    surgeryDate: _emberData['default'].attr('date'),\n\n    // Associations\n    preOpDiagnoses: _emberData['default'].hasMany('diagnosis'),\n    diagnoses: _emberData['default'].hasMany('diagnosis'), // Post op diagnosis\n    operativePlan: _emberData['default'].belongsTo('operative-plan', { async: true }),\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n\n    validations: {\n      caseComplexity: {\n        numericality: {\n          allowBlank: true,\n          onlyInteger: true\n        }\n      },\n      procedureDescription: {\n        presence: {\n          'if': function _if(object) {\n            return isEmpty(get(object, 'procedures'));\n          }\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/operation-report.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/operation-report.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/operation-report.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/operative-plan', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/operative-plan-statuses'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsOperativePlanStatuses) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var _get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n\n  function defaultProcedures() {\n    return [];\n  }\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    additionalNotes: _emberData['default'].attr('string'),\n    admissionInstructions: _emberData['default'].attr('string'),\n    caseComplexity: _emberData['default'].attr('number'),\n    customForms: _emberData['default'].attr('custom-forms'),\n    operationDescription: _emberData['default'].attr('string'),\n    procedures: _emberData['default'].attr('operative-procedures', { defaultValue: defaultProcedures }),\n    status: _emberData['default'].attr('string', { defaultValue: _hospitalrunMixinsOperativePlanStatuses.PLANNED_STATUS }),\n    surgeon: _emberData['default'].attr('string'),\n\n    // Associations\n    diagnoses: _emberData['default'].hasMany('diagnosis'),\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n\n    isPlanned: computed('status', {\n      get: function get() {\n        var status = _get(this, 'status');\n        return status === _hospitalrunMixinsOperativePlanStatuses.PLANNED_STATUS;\n      }\n    }),\n\n    validations: {\n      caseComplexity: {\n        numericality: {\n          allowBlank: true,\n          onlyInteger: true\n        }\n      },\n\n      procedureDescription: {\n        presence: {\n          'if': function _if(object) {\n            return isEmpty(_get(object, 'procedures'));\n          }\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/operative-plan.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/operative-plan.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/operative-plan.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/option', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend({\n    value: _emberData['default'].attr('')\n  });\n});","define('hospitalrun/tests/models/option.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/option.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/option.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/override-price', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    price: _emberData['default'].attr('number'),\n\n    // Associations\n    profile: _emberData['default'].belongsTo('price-profile', { async: false }),\n\n    validations: {\n      profile: {\n        presence: true\n      },\n      price: {\n        numericality: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/override-price.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/override-price.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/override-price.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/patient-note', ['exports', 'hospitalrun/models/abstract', 'ember', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _ember, _emberData) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    /*\n     * if the note was written by one person but dictated or\n     * given on behalf of another, otherwise, this and createdBy are the same.\n     */\n    attribution: _emberData['default'].attr('string'),\n\n    content: _emberData['default'].attr('string'),\n    createdBy: _emberData['default'].attr('string'),\n    date: _emberData['default'].attr('date'),\n    /* custom list of noteTypes of mixins/patient-note-types */\n    noteType: _emberData['default'].attr(),\n    /* who is this note about? */\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n    /* if this note is related to a visit, make sure it's noted. */\n    visit: _emberData['default'].belongsTo('visit', { async: false }),\n\n    authoredBy: computed('attribution', 'createdBy', function () {\n      if (!_ember['default'].isEmpty(this.get('attribution'))) {\n        var i18n = this.get('i18n');\n        return this.get('createdBy') + ' ' + i18n.t('patients.notes.onBehalfOfCopy') + ' ' + this.get('attribution');\n      } else {\n        return this.get('createdBy');\n      }\n    }),\n\n    validations: {\n      patient: {\n        presence: true\n      },\n      visit: {\n        presence: true\n      },\n      content: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/patient-note.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/patient-note.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/patient-note.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/patient', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/dob-days', 'hospitalrun/utils/email-validation', 'ember', 'ember-data', 'hospitalrun/mixins/patient-name'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsDobDays, _hospitalrunUtilsEmailValidation, _ember, _emberData, _hospitalrunMixinsPatientName) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsDobDays['default'], _hospitalrunMixinsPatientName['default'], {\n    // Attributes\n    admitted: _emberData['default'].attr('boolean', { defaultValue: false }),\n    additionalContacts: _emberData['default'].attr(),\n    address: _emberData['default'].attr('string'),\n    address2: _emberData['default'].attr('string'),\n    address3: _emberData['default'].attr('string'),\n    address4: _emberData['default'].attr('string'),\n    bloodType: _emberData['default'].attr('string'),\n    clinic: _emberData['default'].attr('string'),\n    country: _emberData['default'].attr('string'),\n    checkedIn: _emberData['default'].attr('boolean', { defaultValue: false }),\n    customForms: _emberData['default'].attr('custom-forms'),\n    dateOfBirth: _emberData['default'].attr('date'),\n    economicClassification: _emberData['default'].attr('string'),\n    email: _emberData['default'].attr('string'),\n    expenses: _emberData['default'].attr(),\n    externalPatientId: _emberData['default'].attr('string'),\n    familySupport1: _emberData['default'].attr('string'),\n    familySupport2: _emberData['default'].attr('string'),\n    familySupport3: _emberData['default'].attr('string'),\n    familySupport4: _emberData['default'].attr('string'),\n    familySupport5: _emberData['default'].attr('string'),\n    friendlyId: _emberData['default'].attr('string'),\n    familyInfo: _emberData['default'].attr(),\n    firstName: _emberData['default'].attr('string'),\n    sex: _emberData['default'].attr('string'),\n    occupation: _emberData['default'].attr('string'),\n    history: _emberData['default'].attr('string'), // No longer used\n    insurance: _emberData['default'].attr('string'),\n    lastName: _emberData['default'].attr('string'),\n    livingArrangement: _emberData['default'].attr('string'),\n    middleName: _emberData['default'].attr('string'),\n    notes: _emberData['default'].attr('string'),\n    otherIncome: _emberData['default'].attr('string'),\n    patientType: _emberData['default'].attr('string'),\n    parent: _emberData['default'].attr('string'),\n    phone: _emberData['default'].attr('string'),\n    placeOfBirth: _emberData['default'].attr('string'),\n    referredDate: _emberData['default'].attr('date'),\n    referredBy: _emberData['default'].attr('string'),\n    religion: _emberData['default'].attr('string'),\n    socialActionTaken: _emberData['default'].attr('string'),\n    socialRecommendation: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n    // Associations\n    allergies: _emberData['default'].hasMany('allergy', { async: true }),\n    diagnoses: _emberData['default'].hasMany('diagnosis', { async: false }),\n    operationReports: _emberData['default'].hasMany('operation-report', { async: true }),\n    operativePlans: _emberData['default'].hasMany('operative-plan', { async: true }),\n    payments: _emberData['default'].hasMany('payment', { async: true }),\n    paymentProfile: _emberData['default'].belongsTo('price-profile', { async: false }),\n\n    age: computed('dateOfBirth', function () {\n      var dob = get(this, 'dateOfBirth');\n      return this.convertDOBToText(dob);\n    }),\n\n    displayAddress: computed('address', 'address2', 'address3', 'address4', function () {\n      var addressFields = this.getProperties('address', 'address2', 'address3', 'address4');\n      var displayAddress = '';\n      for (var prop in addressFields) {\n        if (!_ember['default'].isEmpty(addressFields[prop])) {\n          if (!_ember['default'].isEmpty(displayAddress)) {\n            displayAddress += ', ';\n          }\n          displayAddress += addressFields[prop];\n        }\n      }\n      return displayAddress;\n    }),\n\n    displayName: computed('firstName', 'lastName', 'middleName', function () {\n      return this.getPatientDisplayName(this);\n    }),\n\n    displayPatientId: computed('id', 'externalPatientId', 'friendlyId', function () {\n      return this.getPatientDisplayId(this);\n    }),\n\n    shortAge: computed('dateOfBirth', function () {\n      var dob = get(this, 'dateOfBirth');\n      return this.convertDOBToText(dob, true);\n    }),\n\n    shortDisplayName: computed('firstName', 'lastName', function () {\n      return this.getPatientDisplayName(this, true);\n    }),\n\n    validations: {\n      email: {\n        format: {\n          'with': _hospitalrunUtilsEmailValidation['default'].emailRegex,\n          allowBlank: true,\n          message: 'please enter a valid email address'\n        }\n      },\n      firstName: {\n        presence: true\n      },\n      lastName: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/patient.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/patient.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/patient.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/payment', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    amount: _emberData['default'].attr('number'),\n    /* Is patient a charity case */\n    charityPatient: _emberData['default'].attr('boolean'),\n    datePaid: _emberData['default'].attr('date'),\n    expenseAccount: _emberData['default'].attr('string'),\n    notes: _emberData['default'].attr('string'),\n    paymentType: _emberData['default'].attr('string'),\n\n    // Associations\n    invoice: _emberData['default'].belongsTo('invoice', { async: false }),\n\n    canRemovePayment: computed('paymentType', function () {\n      return get(this, 'paymentType') === 'Deposit';\n    }),\n\n    validations: {\n      amount: {\n        numericality: true\n      },\n      datePaid: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/payment.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/payment.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/payment.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/photo', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember) {\n  'use strict';\n\n  var attr = _emberData['default'].attr;\n  var belongsTo = _emberData['default'].belongsTo;\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    /* Temporarily store file as attachment until it gets uploaded to the server */\n    caption: attr('string'),\n    coverImage: attr('boolean'),\n    files: attr('attachments', {\n      defaultValue: function defaultValue() {\n        return [];\n      }\n    }),\n    fileName: attr('string'),\n    isImage: _emberData['default'].attr('boolean', { defaultValue: false }),\n    localFile: _emberData['default'].attr('boolean', { defaultValue: false }),\n    url: attr('string'),\n\n    // Associations\n    patient: belongsTo('patient', { async: false }),\n\n    shortFileName: computed('fileName', function () {\n      var fileName = get(this, 'fileName');\n      if (!isEmpty(fileName)) {\n        fileName = fileName.substr(fileName.lastIndexOf('/') + 1);\n      }\n      return fileName;\n    })\n  });\n});","define('hospitalrun/tests/models/photo.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/photo.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/photo.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/price-profile', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    name: _emberData['default'].attr('string'),\n    discountAmount: _emberData['default'].attr('number'),\n    discountPercentage: _emberData['default'].attr('number'),\n    setFee: _emberData['default'].attr('number'),\n\n    validations: {\n      name: {\n        presence: true\n      },\n      discountAmount: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      discountPercentage: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      setFee: {\n        numericality: {\n          allowBlank: true\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/price-profile.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/price-profile.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/price-profile.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/pricing', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    category: _emberData['default'].attr('string'),\n    expenseAccount: _emberData['default'].attr('string'),\n    name: _emberData['default'].attr('string'),\n    price: _emberData['default'].attr('number'),\n    pricingType: _emberData['default'].attr('string'),\n\n    // Associations\n    pricingOverrides: _emberData['default'].hasMany('override-price', { async: false }),\n\n    validations: {\n      category: {\n        presence: true\n      },\n      name: {\n        presence: true\n      },\n      price: {\n        numericality: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/pricing.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/pricing.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/pricing.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/proc-charge', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/medication-details'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsMedicationDetails) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n\n  /**\n   * Procedure charges\n   */\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsMedicationDetails['default'], {\n    // Attributes\n    quantity: _emberData['default'].attr('number'),\n    dateCharged: _emberData['default'].attr('date'),\n\n    // Associations\n    medication: _emberData['default'].belongsTo('inventory', { async: false }),\n    pricingItem: _emberData['default'].belongsTo('pricing', { async: false }),\n\n    medicationCharge: computed('medication', 'newMedicationCharge', function () {\n      var medication = get(this, 'medication');\n      var newMedicationCharge = get(this, 'newMedicationCharge');\n      return !_ember['default'].isEmpty(medication) || !_ember['default'].isEmpty(newMedicationCharge);\n    }),\n\n    medicationName: computed('medication', function () {\n      return this.get('medication.name');\n    }),\n\n    medicationPrice: computed('medication', function () {\n      return this.get('medication.price');\n    }),\n\n    validations: {\n      itemName: {\n        presence: true,\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            var medicationCharge = get(object, 'medicationCharge');\n            if (!medicationCharge || !get(object, 'hasDirtyAttributes')) {\n              return false;\n            }\n            var itemName = get(object, 'inventoryItem.name');\n            var itemTypeAhead = get(object, 'itemName');\n            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {\n              // force validation to fail\n              return true;\n            } else {\n              var typeAheadName = itemTypeAhead.substr(0, itemName.length);\n              if (itemName !== typeAheadName) {\n                return true;\n              }\n            }\n            // Inventory item is properly selected; don't do any further validation\n            return false;\n          },\n          message: 'Please select a valid medication'\n        }\n\n      },\n\n      quantity: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          }\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/proc-charge.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/proc-charge.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/proc-charge.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/procedure', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    anesthesiaType: _emberData['default'].attr('string'),\n    anesthesiologist: _emberData['default'].attr('string'),\n    assistant: _emberData['default'].attr('string'),\n    description: _emberData['default'].attr('string'),\n    cptCode: _emberData['default'].attr('string'),\n    location: _emberData['default'].attr('string'),\n    notes: _emberData['default'].attr('string'),\n    physician: _emberData['default'].attr('string'),\n    procedureDate: _emberData['default'].attr('date'),\n    timeStarted: _emberData['default'].attr('string'),\n    timeEnded: _emberData['default'].attr('string'),\n\n    // Associations\n    charges: _emberData['default'].hasMany('proc-charge', { async: false }),\n    visit: _emberData['default'].belongsTo('visit', { async: false }),\n\n    validations: {\n      description: {\n        presence: true\n      },\n\n      oxygenHours: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      pacuHours: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      physician: {\n        presence: true\n      },\n      procedureDate: {\n        presence: true\n      },\n      display_procedureDate: {\n        presence: {\n          message: 'Please select a valid date'\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/procedure.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/procedure.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/procedure.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/report', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    reportDate: _emberData['default'].attr('date'),\n    customForms: _emberData['default'].attr('custom-forms'),\n    reportType: _emberData['default'].attr('string'),\n\n    // Associations\n    visit: _emberData['default'].belongsTo('visit', { async: false }),\n\n    validations: {\n      visit: {\n        presence: true\n      },\n\n      reportDate: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/report.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/report.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/report.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/sequence', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend({\n    // Attributes\n    prefix: _emberData['default'].attr('string'),\n    value: _emberData['default'].attr('number')\n  });\n});","define('hospitalrun/tests/models/sequence.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/sequence.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/sequence.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/social-expense', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {\n  /**\n   * Model for social worker family info\n   */\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {\n    // Attributes\n    category: _emberData['default'].attr('string'),\n    sources: _emberData['default'].attr('string'),\n    cost: _emberData['default'].attr(),\n\n    validations: {\n      category: {\n        presence: true\n      },\n      cost: {\n        numericality: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/social-expense.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/social-expense.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/social-expense.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/text-expansion', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {\n    from: _emberData['default'].attr('string'),\n    to: _emberData['default'].attr('string'),\n\n    validations: {\n      from: {\n        presence: true\n      },\n      to: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/text-expansion.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/text-expansion.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/text-expansion.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/user-role', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    name: _emberData['default'].attr('string'),\n    capabilities: _emberData['default'].attr(),\n    navRoute: _emberData['default'].attr()\n  });\n});","define('hospitalrun/tests/models/user-role.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/user-role.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user-role.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/user', ['exports', 'ember-data', 'hospitalrun/utils/email-validation', 'ember', 'ember-validations'], function (exports, _emberData, _hospitalrunUtilsEmailValidation, _ember, _emberValidations) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n\n  var User = _emberData['default'].Model.extend(_emberValidations['default'], {\n    // Attributes\n    derived_key: _emberData['default'].attr('string'),\n    deleted: _emberData['default'].attr('boolean'),\n    displayName: _emberData['default'].attr('string'),\n    email: _emberData['default'].attr('string'),\n    iterations: _emberData['default'].attr(),\n    name: _emberData['default'].attr('string'),\n    password: _emberData['default'].attr('string'),\n    password_scheme: _emberData['default'].attr('string'),\n    password_sha: _emberData['default'].attr('string'),\n    rev: _emberData['default'].attr('string'),\n    roles: _emberData['default'].attr(),\n    salt: _emberData['default'].attr('string'),\n    userPrefix: _emberData['default'].attr('string'),\n\n    displayRole: computed('roles', function () {\n      var roles = this.get('roles');\n      if (!_ember['default'].isEmpty(roles)) {\n        return roles[0];\n      }\n    }),\n\n    validations: {\n      email: {\n        format: {\n          'with': _hospitalrunUtilsEmailValidation['default'].emailRegex,\n          message: 'Please, enter a valid email address'\n        }\n      }\n    }\n  });\n\n  exports['default'] = User;\n});","define('hospitalrun/tests/models/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/visit', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'moment'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _moment) {\n  'use strict';\n\n  function dateAcceptance(object) {\n    if (!object.get('hasDirtyAttributes')) {\n      return false;\n    }\n    var startDate = object.get('startDate');\n    var endDate = object.get('endDate');\n    if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {\n      // Can't validate if empty\n      return false;\n    } else {\n      if (endDate.getTime() < startDate.getTime()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n\n  var PAYMENT_STATES = {\n    CLEAR: 'clear',\n    PENDING: 'pending'\n  };\n  var COMPLETED_STATUS = 'Completed';\n  var FULFILLED_STATUS = 'Fulfilled';\n  var REQUESTED_STATUS = 'Requested';\n  var STATUS_FIELD = 'status';\n\n  function paymentStateAcceptance(object) {\n    return !Object.keys(PAYMENT_STATES).some(function (state) {\n      return PAYMENT_STATES[state] === object.get('paymentState');\n    });\n  }\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    customForms: _emberData['default'].attr('custom-forms'),\n    dischargeInfo: _emberData['default'].attr('string'),\n    endDate: _emberData['default'].attr('date'), // if visit type is outpatient, startDate and endDate are equal\n    examiner: _emberData['default'].attr('string'),\n    hasAppointment: _emberData['default'].attr('boolean', { defaultValue: false }),\n    history: _emberData['default'].attr('string'), // No longer used\n    historySince: _emberData['default'].attr('string'), // History of the Present Illness -- no longer used\n    location: _emberData['default'].attr('string'),\n    notes: _emberData['default'].attr('string'), // this field is being deprecated in favor of patient-note\n    outPatient: _emberData['default'].attr('boolean'),\n    paymentState: _emberData['default'].attr('string', { defaultValue: PAYMENT_STATES.PENDING }),\n    primaryDiagnosis: _emberData['default'].attr('string'), // No longer used -- diagnoses are stored in diagnoses hasMany relationship\n    primaryBillingDiagnosis: _emberData['default'].attr('string'), // AKA final diagnosis\n    primaryBillingDiagnosisId: _emberData['default'].attr('string'),\n    reasonForVisit: _emberData['default'].attr('string'),\n    startDate: _emberData['default'].attr('date'),\n    status: _emberData['default'].attr('string'),\n    visitType: _emberData['default'].attr(),\n\n    // Associations\n    charges: _emberData['default'].hasMany('proc-charge', { async: false }),\n    diagnoses: _emberData['default'].hasMany('diagnosis', { async: false }),\n    imaging: _emberData['default'].hasMany('imaging', { async: true }),\n    labs: _emberData['default'].hasMany('lab', { async: true }),\n    medication: _emberData['default'].hasMany('medication', { async: true }),\n    patient: _emberData['default'].belongsTo('patient', { async: false }),\n    patientNotes: _emberData['default'].hasMany('patient-note', { async: true }),\n    procedures: _emberData['default'].hasMany('procedure', { async: true }),\n    vitals: _emberData['default'].hasMany('vital', { async: true }),\n    reports: _emberData['default'].hasMany('report', { async: true }),\n\n    diagnosisList: computed('diagnoses.[]', function () {\n      var diagnoses = get(this, 'diagnoses');\n      var diagnosisList = diagnoses.map(function (diagnosis) {\n        return diagnosis.get('diagnosis');\n      });\n      return diagnosisList;\n    }),\n\n    hasAppointmentLabel: computed('hasAppointment', function () {\n      var hasAppointment = get(this, 'hasAppointment');\n      var i18n = get(this, 'i18n');\n      if (hasAppointment === true) {\n        return i18n.t('visits.labels.haveAppointment');\n      } else {\n        return i18n.t('visits.labels.noAppointment');\n      }\n    }),\n\n    hasCompletedImaging: computed('imaging.@each.status', function () {\n      var imaging = get(this, 'imaging');\n      return imaging.isAny(STATUS_FIELD, COMPLETED_STATUS);\n    }),\n\n    hasCompletedLabs: computed('labs.@each.status', function () {\n      var labs = get(this, 'labs');\n      return labs.isAny(STATUS_FIELD, COMPLETED_STATUS);\n    }),\n\n    hasCompletedMedication: computed('medication.@each.status', function () {\n      var medication = get(this, 'medication');\n      return medication.isAny(STATUS_FIELD, FULFILLED_STATUS);\n    }),\n\n    hasDoneOrders: computed('imaging.@each.status', 'labs.@each.status', function () {\n      var i18n = get(this, 'i18n');\n      var imaging = get(this, 'imaging');\n      var labs = get(this, 'labs');\n      if (imaging.isAny(STATUS_FIELD, REQUESTED_STATUS) || labs.isAny(STATUS_FIELD, REQUESTED_STATUS)) {\n        return i18n.t('visits.labels.ordersNotDone');\n      } else {\n        return i18n.t('visits.labels.haveDoneOrders');\n      }\n    }),\n\n    primaryDiagnoses: computed('diagnoses.[].secondaryDiagnosis', function () {\n      var diagnoses = get(this, 'diagnoses');\n      var diagnosisList = diagnoses.filterBy('secondaryDiagnosis', false).map(function (diagnosis) {\n        return diagnosis.get('diagnosis');\n      });\n      return diagnosisList.join(', ');\n    }),\n\n    visitDate: computed('startDate', 'endDate', function () {\n      var endDate = get(this, 'endDate');\n      var startDate = (0, _moment['default'])(get(this, 'startDate'));\n      var visitDate = startDate.format('l');\n      if (!_ember['default'].isEmpty(endDate) && !startDate.isSame(endDate, 'day')) {\n        visitDate += ' - ' + (0, _moment['default'])(endDate).format('l');\n      }\n      return visitDate;\n    }),\n\n    visitDescription: computed('visitDate', 'visitType', function () {\n      var visitDate = get(this, 'visitDate');\n      var visitType = get(this, 'visitType');\n      return visitDate + ' (' + visitType + ')';\n    }),\n\n    validations: {\n      endDate: {\n        acceptance: {\n          accept: true,\n          'if': dateAcceptance,\n          message: 'Please select an end date later than the start date'\n        }\n      },\n      patientTypeAhead: {\n        presence: {\n          'if': function _if(object) {\n            return get(object, 'checkIn') && !get(object, 'hidePatientSelection');\n          }\n        }\n      },\n      paymentState: {\n        acceptance: {\n          accept: true,\n          'if': paymentStateAcceptance\n        },\n        presence: true\n      },\n      startDate: {\n        acceptance: {\n          accept: true,\n          'if': dateAcceptance,\n          message: 'Please select a start date earlier than the end date'\n        },\n        presence: true\n      },\n      visitType: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/visit.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/visit.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/visit.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/vital', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    // Attributes\n    dateRecorded: _emberData['default'].attr('date'),\n    dbp: _emberData['default'].attr('number'),\n    heartRate: _emberData['default'].attr('number'),\n    height: _emberData['default'].attr('string'),\n    respiratoryRate: _emberData['default'].attr('number'),\n    sbp: _emberData['default'].attr('number'),\n    temperature: _emberData['default'].attr('number'),\n    weight: _emberData['default'].attr('string'),\n\n    validations: {\n      temperature: {\n        numericality: true\n      },\n      sbp: {\n        numericality: true\n      },\n      dbp: {\n        numericality: true\n      },\n      heartRate: {\n        numericality: true\n      },\n      respiratoryRate: {\n        numericality: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/vital.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/vital.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/vital.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/add-contact/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'ember-i18n'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    patientsEdit: _ember['default'].inject.controller('patients/edit'),\n    editController: _ember['default'].computed.alias('patientsEdit'),\n    title: (0, _emberI18n.translationMacro)('patients.titles.addContact'),\n    updateButtonText: (0, _emberI18n.translationMacro)('buttons.add'),\n    updateButtonAction: 'add',\n    showUpdateButton: true,\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      add: function add() {\n        var newContact = this.getProperties('name', 'phone', 'email', 'relationship');\n        this.get('editController').send('addContact', newContact);\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/add-contact/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/add-contact/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/add-contact/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/admitted/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsIndexController['default'].extend({});\n});","define('hospitalrun/tests/patients/admitted/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/admitted/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/admitted/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/admitted/route', ['exports', 'ember-i18n', 'hospitalrun/patients/index/route'], function (exports, _emberI18n, _hospitalrunPatientsIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('patients.titles.admittedPatients'),\n\n    _modelQueryParams: function _modelQueryParams() {\n      return {\n        mapReduce: 'patient_by_admission'\n      };\n    }\n  });\n});","define('hospitalrun/tests/patients/admitted/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/admitted/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/admitted/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-visits', 'hospitalrun/mixins/patient-appointments', 'hospitalrun/mixins/patient-invoices', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog', 'ember', 'ember-i18n', 'ember-concurrency'], function (exports, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientVisits, _hospitalrunMixinsPatientAppointments, _hospitalrunMixinsPatientInvoices, _hospitalrunMixinsPouchdb, _hospitalrunMixinsProgressDialog, _ember, _emberI18n, _emberConcurrency) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientVisits['default'], _hospitalrunMixinsPatientInvoices['default'], _hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsProgressDialog['default'], _hospitalrunMixinsPatientAppointments['default'], {\n    title: (0, _emberI18n.translationMacro)('patients.titles.delete'),\n    progressTitle: (0, _emberI18n.translationMacro)('patients.titles.deletePatientRecord'),\n    progressMessage: (0, _emberI18n.translationMacro)('patients.messages.deletingPatient'),\n    deleting: (0, _emberConcurrency.taskGroup)(),\n\n    deleteMany: function deleteMany(manyArray) {\n      return this.get('deleteManyTask').perform(manyArray);\n    },\n\n    deleteManyTask: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(manyArray) {\n      var resolvedArray, deleteRecordTask, archivePromises;\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            if (manyArray) {\n              context$1$0.next = 2;\n              break;\n            }\n\n            return context$1$0.abrupt('return');\n\n          case 2:\n            context$1$0.next = 4;\n            return manyArray;\n\n          case 4:\n            resolvedArray = context$1$0.sent;\n\n            if (!_ember['default'].isEmpty(resolvedArray)) {\n              context$1$0.next = 7;\n              break;\n            }\n\n            return context$1$0.abrupt('return');\n\n          case 7:\n            deleteRecordTask = this.get('deleteRecordTask');\n            archivePromises = [];\n\n            resolvedArray.forEach(function (recordToDelete) {\n              archivePromises.push(deleteRecordTask.perform(recordToDelete));\n            });\n            context$1$0.next = 12;\n            return (0, _emberConcurrency.all)(archivePromises, 'async array deletion');\n\n          case 12:\n            return context$1$0.abrupt('return', context$1$0.sent);\n\n          case 13:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this);\n    })).group('deleting'),\n\n    deleteRecordTask: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(recordToDelete) {\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            recordToDelete.set('archived', true);\n            context$1$0.next = 3;\n            return recordToDelete.save();\n\n          case 3:\n            context$1$0.next = 5;\n            return recordToDelete.unloadRecord();\n\n          case 5:\n            return context$1$0.abrupt('return', context$1$0.sent);\n\n          case 6:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this);\n    })).group('deleting'),\n\n    // Override delete action on controller; we must delete\n    // all related records before deleting patient record\n    // otherwise errors will occur\n    deletePatient: function deletePatient() {\n      return this.get('deletePatientTask').perform();\n    },\n\n    deletePatientTask: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {\n      var patient, visits, invoices, appointments, payments;\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            patient = this.get('model');\n            context$1$0.next = 3;\n            return this.getPatientVisits(patient);\n\n          case 3:\n            visits = context$1$0.sent;\n            context$1$0.next = 6;\n            return this.getPatientInvoices(patient);\n\n          case 6:\n            invoices = context$1$0.sent;\n            context$1$0.next = 9;\n            return this.getPatientAppointments(patient);\n\n          case 9:\n            appointments = context$1$0.sent;\n            context$1$0.next = 12;\n            return patient.get('payments');\n\n          case 12:\n            payments = context$1$0.sent;\n            context$1$0.next = 15;\n            return (0, _emberConcurrency.all)([this.deleteVisits(visits), this.deleteInvoices(invoices), this.deleteMany(appointments), this.deleteMany(payments)]);\n\n          case 15:\n            context$1$0.next = 17;\n            return patient.destroyRecord();\n\n          case 17:\n            return context$1$0.abrupt('return', context$1$0.sent);\n\n          case 18:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this);\n    })).group('deleting'),\n\n    deleteVisits: function deleteVisits(visits) {\n      return this.get('deleteVisitsTask').perform(visits);\n    },\n\n    deleteVisitsTask: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(visits) {\n      var pendingTasks;\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        var _this = this;\n\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            pendingTasks = [];\n\n            visits.forEach(function (visit) {\n              var labs = visit.get('labs');\n              var procedures = visit.get('procedures');\n              var imaging = visit.get('imaging');\n              var procCharges = procedures.get('charges');\n              var labCharges = labs.get('charges');\n              var imagingCharges = imaging.get('charges');\n              var visitCharges = visit.get('charges');\n              pendingTasks.push(_this.deleteMany(labs));\n              pendingTasks.push(_this.deleteMany(labCharges));\n              pendingTasks.push(_this.deleteMany(visit.get('patientNotes')));\n              pendingTasks.push(_this.deleteMany(visit.get('vitals')));\n              pendingTasks.push(_this.deleteMany(procedures));\n              pendingTasks.push(_this.deleteMany(procCharges));\n              pendingTasks.push(_this.deleteMany(visit.get('medication')));\n              pendingTasks.push(_this.deleteMany(imaging));\n              pendingTasks.push(_this.deleteMany(imagingCharges));\n              pendingTasks.push(_this.deleteMany(visitCharges));\n            });\n            context$1$0.next = 4;\n            return (0, _emberConcurrency.all)(pendingTasks);\n\n          case 4:\n            context$1$0.next = 6;\n            return this.deleteMany(visits);\n\n          case 6:\n            return context$1$0.abrupt('return', context$1$0.sent);\n\n          case 7:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this);\n    })).group('deleting'),\n\n    deleteInvoices: function deleteInvoices(patientInvoices) {\n      return this.get('deleteInvoicesTask').perform(patientInvoices);\n    },\n\n    deleteInvoicesTask: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(patientInvoices) {\n      var invoices, lineItems, lineItemDetails;\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            context$1$0.next = 2;\n            return patientInvoices;\n\n          case 2:\n            invoices = context$1$0.sent;\n            context$1$0.next = 5;\n            return (0, _emberConcurrency.all)(invoices.mapBy('lineItems'));\n\n          case 5:\n            lineItems = context$1$0.sent;\n            context$1$0.next = 8;\n            return (0, _emberConcurrency.all)(lineItems.mapBy('details'));\n\n          case 8:\n            lineItemDetails = context$1$0.sent;\n            context$1$0.next = 11;\n            return (0, _emberConcurrency.all)([this.deleteMany(invoices), this.deleteMany(lineItems), this.deleteMany(lineItemDetails)]);\n\n          case 11:\n            return context$1$0.abrupt('return', context$1$0.sent);\n\n          case 12:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this);\n    })).group('deleting'),\n\n    deleteActionTask: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(patient) {\n      return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {\n        while (1) switch (context$1$0.prev = context$1$0.next) {\n          case 0:\n            // delete related records without modal dialogs\n            this.send('closeModal');\n            this.showProgressModal();\n            context$1$0.next = 4;\n            return this.deletePatient(patient);\n\n          case 4:\n            this.closeProgressModal();\n            this.send(this.get('afterDeleteAction'), patient);\n\n          case 6:\n          case 'end':\n            return context$1$0.stop();\n        }\n      }, callee$0$0, this);\n    })).drop(),\n\n    actions: {\n      'delete': function _delete(patient) {\n        this.get('deleteActionTask').perform(patient);\n      }\n    }\n  });\n});\n\n// empty array: no records to delete","define('hospitalrun/tests/patients/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/allergy-actions', 'hospitalrun/mixins/blood-types', 'hospitalrun/mixins/diagnosis-actions', 'ember', 'hospitalrun/mixins/patient-id', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/return-to', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/user-session', 'hospitalrun/utils/visit-statuses', 'hospitalrun/mixins/patient-visits'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsAllergyActions, _hospitalrunMixinsBloodTypes, _hospitalrunMixinsDiagnosisActions, _ember, _hospitalrunMixinsPatientId, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsReturnTo, _hospitalrunUtilsSelectValues, _hospitalrunMixinsUserSession, _hospitalrunUtilsVisitStatuses, _hospitalrunMixinsPatientVisits) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsAllergyActions['default'], _hospitalrunMixinsBloodTypes['default'], _hospitalrunMixinsDiagnosisActions['default'], _hospitalrunMixinsReturnTo['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsPatientId['default'], _hospitalrunMixinsPatientNotes['default'], _hospitalrunMixinsPatientVisits['default'], {\n\n    canAddAppointment: (function () {\n      return this.currentUserCan('add_appointment');\n    }).property(),\n\n    canAddContact: (function () {\n      return this.currentUserCan('add_patient');\n    }).property(),\n\n    canAddImaging: (function () {\n      return this.currentUserCan('add_imaging');\n    }).property(),\n\n    canAddLab: (function () {\n      return this.currentUserCan('add_lab');\n    }).property(),\n\n    canAddMedication: (function () {\n      return this.currentUserCan('add_medication');\n    }).property(),\n\n    canAddPhoto: (function () {\n      var isFileSystemEnabled = this.get('isFileSystemEnabled');\n      return this.currentUserCan('add_photo') && isFileSystemEnabled;\n    }).property(),\n\n    canAddSocialWork: (function () {\n      return this.currentUserCan('add_socialwork');\n    }).property(),\n\n    canAddVisit: (function () {\n      return this.currentUserCan('add_visit');\n    }).property(),\n\n    canDeleteAppointment: (function () {\n      return this.currentUserCan('delete_appointment');\n    }).property(),\n\n    canDeleteContact: (function () {\n      return this.currentUserCan('add_patient');\n    }).property(),\n\n    canDeleteImaging: (function () {\n      return this.currentUserCan('delete_imaging');\n    }).property(),\n\n    canDeleteLab: (function () {\n      return this.currentUserCan('delete_lab');\n    }).property(),\n\n    canDeleteMedication: (function () {\n      return this.currentUserCan('delete_medication');\n    }).property(),\n\n    canDeletePhoto: (function () {\n      return this.currentUserCan('delete_photo');\n    }).property(),\n\n    canDeleteSocialWork: (function () {\n      return this.currentUserCan('delete_socialwork');\n    }).property(),\n\n    canDeleteVisit: (function () {\n      return this.currentUserCan('delete_visit');\n    }).property(),\n\n    patientTypes: _ember['default'].computed(function () {\n      var i18n = get(this, 'i18n');\n      var types = ['Charity', 'Private'];\n      return types.map(function (type) {\n        return i18n.t('patients.labels.patientType' + type);\n      });\n    }),\n\n    config: _ember['default'].inject.service(),\n    filesystem: _ember['default'].inject.service(),\n    database: _ember['default'].inject.service(),\n    patientController: _ember['default'].inject.controller('patients'),\n\n    addressOptions: _ember['default'].computed.alias('patientController.addressOptions'),\n    address1Include: _ember['default'].computed.alias('patientController.addressOptions.value.address1Include'),\n    address1Label: _ember['default'].computed.alias('patientController.addressOptions.value.address1Label'),\n    address2Include: _ember['default'].computed.alias('patientController.addressOptions.value.address2Include'),\n    address2Label: _ember['default'].computed.alias('patientController.addressOptions.value.address2Label'),\n    address3Include: _ember['default'].computed.alias('patientController.addressOptions.value.address3Include'),\n    address3Label: _ember['default'].computed.alias('patientController.addressOptions.value.address3Label'),\n    address4Include: _ember['default'].computed.alias('patientController.addressOptions.value.address4Include'),\n    address4Label: _ember['default'].computed.alias('patientController.addressOptions.value.address4Label'),\n\n    clinicList: _ember['default'].computed.alias('patientController.clinicList'),\n    countryList: _ember['default'].computed.alias('patientController.countryList'),\n    diagnosisList: _ember['default'].computed.alias('patientController.diagnosisList'),\n    isFileSystemEnabled: _ember['default'].computed.alias('filesystem.isFileSystemEnabled'),\n    pricingProfiles: _ember['default'].computed.map('patientController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),\n    sexList: _ember['default'].computed.alias('patientController.sexList'),\n    statusList: _ember['default'].computed.alias('patientController.statusList'),\n\n    haveAdditionalContacts: (function () {\n      var additionalContacts = this.get('model.additionalContacts');\n      return !_ember['default'].isEmpty(additionalContacts);\n    }).property('model.additionalContacts'),\n\n    haveAddressOptions: (function () {\n      var addressOptions = this.get('addressOptions');\n      return !_ember['default'].isEmpty(addressOptions);\n    }).property('addressOptions'),\n\n    lookupListsToUpdate: [{\n      name: 'countryList',\n      property: 'model.country',\n      id: 'country_list'\n    }, {\n      name: 'clinicList',\n      property: 'model.clinic',\n      id: 'clinic_list'\n    }, {\n      name: 'sexList',\n      property: 'model.sex',\n      id: 'sex'\n    }, {\n      name: 'statusList',\n      property: 'model.status',\n      id: 'patient_status_list'\n    }],\n\n    patientImaging: (function () {\n      return this.getVisitCollection('imaging');\n    }).property('model.visits.[].imaging'),\n\n    patientLabs: (function () {\n      return this.getVisitCollection('labs');\n    }).property('model.visits.[].labs'),\n\n    patientMedications: (function () {\n      return this.getVisitCollection('medication');\n    }).property('model.visits.[].medication'),\n\n    patientProcedures: (function () {\n      var visits = this.get('model.visits');\n      var operationReports = get(this, 'model.operationReports');\n      return this._getPatientProcedures(operationReports, visits);\n    }).property('model.visits.[].procedures', 'model.operationReports.[].procedures'),\n\n    showExpenseTotal: (function () {\n      var expenses = this.get('model.expenses');\n      return !_ember['default'].isEmpty(expenses);\n    }).property('model.expenses.[]'),\n\n    totalExpenses: (function () {\n      var expenses = this.get('model.expenses');\n      if (!_ember['default'].isEmpty(expenses)) {\n        var total = expenses.reduce(function (previousValue, expense) {\n          if (!_ember['default'].isEmpty(expense.cost)) {\n            return previousValue + parseInt(expense.cost);\n          }\n        }, 0);\n        return total;\n      }\n    }).property('model.expenses.@each.cost'),\n\n    updateCapability: 'add_patient',\n\n    actions: {\n      addAllergy: function addAllergy(newAllergy) {\n        var patient = get(this, 'model');\n        this.savePatientAllergy(patient, newAllergy);\n      },\n\n      addContact: function addContact(newContact) {\n        var additionalContacts = this.getWithDefault('model.additionalContacts', []);\n        var model = this.get('model');\n        additionalContacts.addObject(newContact);\n        model.set('additionalContacts', additionalContacts);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      addDiagnosis: function addDiagnosis(newDiagnosis) {\n        var diagnoses = this.get('model.diagnoses');\n        diagnoses.addObject(newDiagnosis);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      returnToPatient: function returnToPatient() {\n        this.transitionToRoute('patients.index');\n      },\n      /**\n       * Add the specified photo to the patient's record.\n       */\n      addPhoto: function addPhoto(savedPhotoRecord) {\n        var photos = this.get('model.photos');\n        photos.addObject(savedPhotoRecord);\n        this.send('closeModal');\n      },\n\n      appointmentDeleted: function appointmentDeleted(deletedAppointment) {\n        var appointments = this.get('model.appointments');\n        appointments.removeObject(deletedAppointment);\n        this.send('closeModal');\n      },\n\n      deleteAllergy: function deleteAllergy(allergy) {\n        var patient = get(this, 'model');\n        this.deletePatientAllergy(patient, allergy);\n      },\n\n      deleteContact: function deleteContact(model) {\n        var contact = model.get('contactToDelete');\n        var additionalContacts = this.get('model.additionalContacts');\n        additionalContacts.removeObject(contact);\n        this.send('update', true);\n      },\n\n      deleteExpense: function deleteExpense(model) {\n        var expense = model.get('expenseToDelete');\n        var expenses = this.get('model.expenses');\n        expenses.removeObject(expense);\n        this.send('update', true);\n      },\n\n      deleteFamily: function deleteFamily(model) {\n        var family = model.get('familyToDelete');\n        var familyInfo = this.get('model.familyInfo');\n        familyInfo.removeObject(family);\n        this.send('update', true);\n      },\n\n      deletePhoto: function deletePhoto(model) {\n        var photo = model.get('photoToDelete');\n        var photoId = photo.get('id');\n        var photos = this.get('model.photos');\n        var filePath = photo.get('fileName');\n        photos.removeObject(photo);\n        photo.destroyRecord().then((function () {\n          var fileSystem = this.get('filesystem');\n          var isFileSystemEnabled = this.get('isFileSystemEnabled');\n          if (isFileSystemEnabled) {\n            var pouchDbId = this.get('database').getPouchId(photoId, 'photo');\n            fileSystem.deleteFile(filePath, pouchDbId);\n          }\n        }).bind(this));\n      },\n\n      editAppointment: function editAppointment(appointment) {\n        if (this.get('canAddAppointment')) {\n          appointment.set('returnToPatient', this.get('model.id'));\n          appointment.set('returnTo', null);\n          this.transitionToRoute('appointments.edit', appointment);\n        }\n      },\n\n      editImaging: function editImaging(imaging) {\n        if (this.get('canAddImaging')) {\n          if (imaging.get('canEdit')) {\n            imaging.set('returnToPatient', this.get('model.id'));\n            this.transitionToRoute('imaging.edit', imaging);\n          }\n        }\n      },\n\n      editLab: function editLab(lab) {\n        if (this.get('canAddLab')) {\n          if (lab.get('canEdit')) {\n            lab.setProperties('returnToPatient', this.get('model.id'));\n            this.transitionToRoute('labs.edit', lab);\n          }\n        }\n      },\n\n      editMedication: function editMedication(medication) {\n        if (this.get('canAddMedication')) {\n          if (medication.get('canEdit')) {\n            medication.set('returnToPatient', this.get('model.id'));\n            this.transitionToRoute('medication.edit', medication);\n          }\n        }\n      },\n\n      editOperativePlan: function editOperativePlan(operativePlan) {\n        var _this = this;\n\n        var model = operativePlan;\n        if (isEmpty(model)) {\n          this._addChildObject('patients.operative-plan', function (route) {\n            route.controller.getPatientDiagnoses(_this.get('model'), route.currentModel);\n          });\n        } else {\n          model.set('returnToVisit');\n          model.set('returnToPatient', this.get('model.id'));\n          this.transitionToRoute('patients.operative-plan', model);\n        }\n      },\n\n      editOperationReport: function editOperationReport(operationReport) {\n        operationReport.set('returnToPatient', this.get('model.id'));\n        this.transitionToRoute('patients.operation-report', operationReport);\n      },\n\n      editPhoto: function editPhoto(photo) {\n        this.send('openModal', 'patients.photo', photo);\n      },\n\n      editProcedure: function editProcedure(procedure) {\n        if (this.get('canAddVisit')) {\n          procedure.set('patient', this.get('model'));\n          procedure.set('returnToVisit');\n          procedure.set('returnToPatient', this.get('model.id'));\n          this.transitionToRoute('procedures.edit', procedure);\n        }\n      },\n\n      editVisit: function editVisit(visit) {\n        if (this.get('canAddVisit')) {\n          visit.set('returnToPatient', this.get('model.id'));\n          this.transitionToRoute('visits.edit', visit);\n        }\n      },\n\n      newAppointment: function newAppointment() {\n        this._addChildObject('appointments.edit');\n      },\n\n      newImaging: function newImaging() {\n        this._addChildObject('imaging.edit');\n      },\n\n      newLab: function newLab() {\n        this._addChildObject('labs.edit');\n      },\n\n      newMedication: function newMedication() {\n        this._addChildObject('medication.edit');\n      },\n\n      newSurgicalAppointment: function newSurgicalAppointment() {\n        var _this2 = this;\n\n        this.transitionToRoute('appointments.edit', 'newsurgery').then(function (newRoute) {\n          newRoute.currentModel.setProperties({\n            patient: _this2.get('model'),\n            returnToPatient: _this2.get('model.id'),\n            selectPatient: false\n          });\n        });\n      },\n\n      newVisit: function newVisit() {\n        var patient = this.get('model');\n        this.send('createNewVisit', patient, true);\n      },\n\n      showAddContact: function showAddContact() {\n        this.send('openModal', 'patients.add-contact', {});\n      },\n\n      showAddPhoto: function showAddPhoto() {\n        var newPatientPhoto = this.get('store').createRecord('photo', {\n          patient: this.get('model'),\n          saveToDir: this.get('model.id') + '/photos/'\n        });\n        this.send('openModal', 'patients.photo', newPatientPhoto);\n      },\n\n      showAddPatientNote: function showAddPatientNote(model) {\n        if (this.get('canAddNote')) {\n          if (_ember['default'].isEmpty(model)) {\n            model = this.get('store').createRecord('patient-note', {\n              patient: this.get('model'),\n              createdBy: this.getUserName()\n            });\n          }\n          this.send('openModal', 'patients.notes', model);\n        }\n      },\n\n      showDeleteAppointment: function showDeleteAppointment(appointment) {\n        appointment.set('deleteFromPatient', true);\n        this.send('openModal', 'appointments.delete', appointment);\n      },\n\n      showDeleteContact: function showDeleteContact(contact) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deleteContact',\n          title: this.get('i18n').t('patients.titles.deleteContact'),\n          message: this.get('i18n').t('patients.titles.deletePhoto', { object: 'contact' }),\n          contactToDelete: contact,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      showDeleteExpense: function showDeleteExpense(expense) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deleteExpense',\n          title: this.get('i18n').t('patients.titles.deleteExpense'),\n          message: this.get('i18n').t('patients.titles.deletePhoto', { object: 'expense' }),\n          expenseToDelete: expense,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      showDeleteFamily: function showDeleteFamily(familyInfo) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deleteFamily',\n          title: this.get('i18n').t('patients.titles.deleteFamilyMember'),\n          message: this.get('i18n').t('patients.titles.deletePhoto', { object: 'family member' }),\n          familyToDelete: familyInfo,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      showDeleteImaging: function showDeleteImaging(imaging) {\n        this.send('openModal', 'imaging.delete', imaging);\n      },\n\n      showDeleteLab: function showDeleteLab(lab) {\n        this.send('openModal', 'labs.delete', lab);\n      },\n\n      showDeleteMedication: function showDeleteMedication(medication) {\n        this.send('openModal', 'medication.delete', medication);\n      },\n\n      showDeletePhoto: function showDeletePhoto(photo) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deletePhoto',\n          title: this.get('i18n').t('patients.titles.deletePhoto'),\n          message: this.get('i18n').t('patients.titles.deletePhoto', { object: 'photo' }),\n          photoToDelete: photo,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      showDeleteVisit: function showDeleteVisit(visit) {\n        visit.set('deleteFromPatient', true);\n        this.send('openModal', 'visits.delete', visit);\n      },\n\n      showEditExpense: function showEditExpense(expenseInfo) {\n        this._showEditSocial(expenseInfo, 'social-expense', 'expense');\n      },\n\n      showEditFamily: function showEditFamily(familyInfo) {\n        this._showEditSocial(familyInfo, 'family-info', 'family-info');\n      },\n\n      updateExpense: function updateExpense(model) {\n        this._updateSocialRecord(model, 'expenses');\n      },\n\n      updateFamilyInfo: function updateFamilyInfo(model) {\n        this._updateSocialRecord(model, 'familyInfo');\n      },\n\n      visitDeleted: function visitDeleted(deletedVisit) {\n        var _this3 = this;\n\n        var visits = this.get('model.visits');\n        var patient = this.get('model');\n        var patientCheckedIn = patient.get('checkedIn');\n        var patientAdmitted = patient.get('admitted');\n        visits.removeObject(deletedVisit);\n        if (patientAdmitted || patientCheckedIn) {\n          var patientUpdate = false;\n          if (patientAdmitted && _ember['default'].isEmpty(visits.findBy('status', _hospitalrunUtilsVisitStatuses['default'].ADMITTED))) {\n            patient.set('admitted', false);\n            patientUpdate = true;\n          }\n          if (patientCheckedIn && _ember['default'].isEmpty(visits.findBy('status', _hospitalrunUtilsVisitStatuses['default'].CHECKED_IN))) {\n            patient.set('checkedIn', false);\n            patientUpdate = true;\n          }\n          if (patientUpdate === true) {\n            patient.save().then(function () {\n              return _this3.send('closeModal');\n            });\n          } else {\n            this.send('closeModal');\n          }\n        } else {\n          this.send('closeModal');\n        }\n      }\n\n    },\n\n    _addChildObject: function _addChildObject(route, afterTransition) {\n      var options = {\n        queryParams: {\n          forPatientId: this.get('model.id')\n        }\n      };\n      this.transitionToRoute(route, 'new', options).then(function (newRoute) {\n        if (afterTransition) {\n          afterTransition(newRoute);\n        }\n      });\n    },\n\n    _showEditSocial: function _showEditSocial(editAttributes, modelName, route) {\n      var model = undefined;\n      if (_ember['default'].isEmpty(editAttributes)) {\n        model = this.get('store').createRecord(modelName, {\n          newRecord: true\n        });\n      } else {\n        model = this.get('store').push({\n          data: {\n            id: _ember['default'].get(editAttributes, 'id'),\n            type: modelName,\n            attributes: editAttributes\n          }\n        });\n      }\n      this.send('openModal', 'patients.socialwork.' + route, model);\n    },\n\n    getVisitCollection: function getVisitCollection(name) {\n      var visits = this.get('model.visits');\n      return this._getVisitCollection(visits, name);\n    },\n\n    _updateSocialRecord: function _updateSocialRecord(recordToUpdate, name) {\n      var socialRecords = this.getWithDefault('model.' + name, []);\n      var isNew = recordToUpdate.get('isNew');\n      var patient = this.get('model');\n      var objectToUpdate = recordToUpdate.serialize();\n      objectToUpdate.id = recordToUpdate.get('id');\n      if (isNew) {\n        socialRecords.addObject(_ember['default'].Object.create(objectToUpdate));\n      } else {\n        var updateRecord = socialRecords.findBy('id', objectToUpdate.id);\n        _ember['default'].setProperties(updateRecord, objectToUpdate);\n      }\n      patient.set(name, socialRecords);\n      this.send('update', true);\n      this.send('closeModal');\n    },\n\n    _updateSequence: function _updateSequence(record) {\n      var _this4 = this;\n\n      var config = this.get('config');\n      var friendlyId = record.get('friendlyId');\n      return config.getPatientPrefix().then(function (prefix) {\n        var re = new RegExp('^' + prefix + '\\\\d{5}$');\n        if (!re.test(friendlyId)) {\n          return;\n        }\n        return _this4.store.find('sequence', 'patient').then(function (sequence) {\n          var sequenceNumber = sequence.get('value');\n          var patientNumber = parseInt(friendlyId.slice(prefix.length));\n          if (patientNumber > sequenceNumber) {\n            sequence.set('value', patientNumber);\n            return sequence.save();\n          }\n        });\n      });\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var _this5 = this;\n\n      if (!this.get('model.isNew')) {\n        return _ember['default'].RSVP.resolve();\n      }\n      return this.generateFriendlyId('patient').then(function (friendlyId) {\n        _this5.model.set('friendlyId', friendlyId);\n      });\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      var _this6 = this;\n\n      this._updateSequence(record).then(function () {\n        $('.message').show();\n        $('.message').text(_this6.get('i18n').t('patients.messages.savedPatient', record));\n        $('.message').delay(3000).fadeOut(100);\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/patients/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/patient-visits', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/pouchdb', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _hospitalrunMixinsPatientVisits, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsPouchdb, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsPatientVisits['default'], _hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsPatientNotes['default'], {\n    customForms: _ember['default'].inject.service(),\n    editTitle: (0, _emberI18n.translationMacro)('patients.titles.edit'),\n    modelName: 'patient',\n    newTitle: (0, _emberI18n.translationMacro)('patients.titles.new'),\n    photos: null,\n\n    actions: {\n      updateNote: function updateNote(note) {\n        note.get('visit').save().then(function () {\n          // noop\n        });\n      },\n      appointmentDeleted: function appointmentDeleted(model) {\n        this.controller.send('appointmentDeleted', model);\n      },\n      returnToPatient: function returnToPatient() {\n        this.controller.send('returnToPatient');\n      },\n      deleteContact: function deleteContact(model) {\n        this.controller.send('deleteContact', model);\n      },\n\n      deleteExpense: function deleteExpense(model) {\n        this.controller.send('deleteExpense', model);\n      },\n\n      deleteFamily: function deleteFamily(model) {\n        this.controller.send('deleteFamily', model);\n      },\n\n      deletePhoto: function deletePhoto(model) {\n        this.controller.send('deletePhoto', model);\n      },\n\n      updateExpense: function updateExpense(model) {\n        this.controller.send('updateExpense', model);\n      },\n\n      updateFamilyInfo: function updateFamilyInfo(model) {\n        this.controller.send('updateFamilyInfo', model);\n      },\n\n      visitDeleted: function visitDeleted(model) {\n        this.controller.send('visitDeleted', model);\n      }\n    },\n\n    getNewData: function getNewData() {\n      var customForms = this.get('customForms');\n      var newPatientData = {\n        customForms: _ember['default'].Object.create()\n      };\n      return customForms.setDefaultCustomForms(['patient', 'socialwork'], newPatientData);\n    },\n\n    setupController: function setupController(controller, model) {\n      // Load appointments, photos and visits asynchronously.\n      var friendlyId = model.get('friendlyId');\n      var externalId = model.get('externalPatientId');\n      var maxValue = this.get('maxValue');\n      var patientId = model.get('id');\n      if (_ember['default'].isEmpty(friendlyId) && !_ember['default'].isEmpty(externalId)) {\n        model.set('friendlyId', externalId);\n      }\n      this._super(controller, model);\n      this.getPatientVisits(model).then(function (visits) {\n        model.set('visits', visits);\n      });\n      this.store.query('appointment', {\n        options: {\n          startkey: [patientId, null, null, 'appointment_'],\n          endkey: [patientId, maxValue, maxValue, maxValue]\n        },\n        mapReduce: 'appointments_by_patient'\n      }).then(function (appointments) {\n        model.set('appointments', appointments);\n      });\n      this.store.query('photo', {\n        options: {\n          key: patientId\n        },\n        mapReduce: 'photo_by_patient'\n      }).then(function (photos) {\n        var patientPhotos = [];\n        patientPhotos.addObjects(photos);\n        model.set('photos', patientPhotos);\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/patients/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/patient-visits', 'hospitalrun/utils/visit-statuses'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsPatientVisits, _hospitalrunUtilsVisitStatuses) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsPatientVisits['default'], {\n    addPermission: 'add_patient',\n    deletePermission: 'delete_patient',\n    canAdmitPatient: (function () {\n      return this.currentUserCan('admit_patient');\n    }).property(),\n\n    canDischargePatient: (function () {\n      return this.currentUserCan('discharge_patient');\n    }).property(),\n\n    startKey: [],\n    actions: {\n      checkInPatient: function checkInPatient(patient) {\n        this.send('createNewVisit', patient);\n      },\n\n      checkoutPatient: function checkoutPatient(patient) {\n        this.editPatientVisitWithStatus(patient, _hospitalrunUtilsVisitStatuses['default'].CHECKED_IN);\n      },\n\n      dischargePatient: function dischargePatient(patient) {\n        this.editPatientVisitWithStatus(patient, _hospitalrunUtilsVisitStatuses['default'].ADMITTED);\n      }\n    },\n\n    editPatientVisitWithStatus: function editPatientVisitWithStatus(patient, status) {\n      var _this = this;\n\n      this.getPatientVisits(patient).then(function (visits) {\n        var visitToEdit = visits.findBy('status', status);\n        if (visitToEdit) {\n          visitToEdit.set('endDate', new Date());\n          _this.transitionToRoute('visits.edit', visitToEdit);\n        }\n      });\n    }\n  });\n});","define('hospitalrun/tests/patients/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'ember-i18n', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _emberI18n, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    modelName: 'patient',\n    newButtonAction: computed(function () {\n      if (this.currentUserCan('add_patient')) {\n        return 'newItem';\n      } else {\n        return null;\n      }\n    }),\n    newButtonText: (0, _emberI18n.translationMacro)('patients.buttons.newPatient'),\n    pageTitle: _ember['default'].computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('patients.titles.patientListing');\n    }),\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var displayPatientId = item.get('displayPatientId');\n      var id = this._getPouchIdFromItem(item);\n      return [displayPatientId, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      return {\n        mapReduce: 'patient_by_display_id'\n      };\n    }\n\n  });\n});","define('hospitalrun/tests/patients/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/notes/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/is-update-disabled', 'moment', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsIsUpdateDisabled, _moment, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsIsUpdateDisabled['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPatientNotes['default'], {\n    cancelAction: 'closeModal',\n    updateAction: 'updateNote',\n    moduleController: _ember['default'].inject.controller('patients'),\n    physicianList: _ember['default'].computed.alias('moduleController.physicianList'),\n    lookupListsToUpdate: [{\n      name: 'physicianList',\n      property: 'model.attribution',\n      id: 'physician_list'\n    }],\n    title: (function () {\n      if (this.get('model.isNew')) {\n        return this.get('i18n').t('patients.notes.newNote') + ' ' + this.get('model.patient.displayName');\n      } else {\n        return this.get('i18n').t('patients.notes.newNote') + ' ' + (0, _moment['default'])(this.get('model.date')).format('MM/DD/YYYY') + ' for ' + this.get('model.patient.displayName');\n      }\n    }).property('model.patient.displayName'),\n    updateCapability: 'add_note',\n    beforeUpdate: function beforeUpdate() {\n      this._setNoteType();\n      this.set('model.date', new Date());\n      this.set('model.createdBy', this.getUserName());\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n    afterUpdate: function afterUpdate() {\n      this.send(this.get('updateAction'), this.get('model'));\n      this.send(this.get('cancelAction'));\n    }\n  });\n});","define('hospitalrun/tests/patients/notes/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/notes/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/notes/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/operation-report/controller', ['exports', 'ember', 'hospitalrun/patients/operative-plan/controller'], function (exports, _ember, _hospitalrunPatientsOperativePlanController) {\n  'use strict';\n\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunPatientsOperativePlanController['default'].extend({\n    additionalButtons: null,\n    lookupListsToUpdate: [{\n      name: 'physicianList',\n      property: 'model.assistant',\n      id: 'physician_list'\n    }, {\n      name: 'physicianList',\n      property: 'model.surgeon',\n      id: 'physician_list'\n    }, {\n      name: 'procedureList',\n      property: 'modelProcedures',\n      id: 'procedure_list'\n    }],\n    updateCapability: 'add_operation_report',\n\n    diagnosisList: alias('patientController.diagnosisList'),\n\n    _finishAfterUpdate: function _finishAfterUpdate() {\n      var i18n = get(this, 'i18n');\n      var updateMessage = i18n.t('operationReport.messages.reportSaved');\n      var updateTitle = i18n.t('operationReport.titles.reportSaved');\n      this.displayAlert(updateTitle, updateMessage);\n    },\n\n    actions: {\n      addDiagnosis: function addDiagnosis(newDiagnosis) {\n        this.addDiagnosisToModelAndPatient(newDiagnosis);\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/patients/operation-report/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/operation-report/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/operation-report/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/operation-report/route', ['exports', 'hospitalrun/patients/operative-plan/route', 'ember-i18n'], function (exports, _hospitalrunPatientsOperativePlanRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsOperativePlanRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('operationReport.titles.editTitle'),\n    modelName: 'operation-report',\n    newTitle: (0, _emberI18n.translationMacro)('operationReport.titles.newTitle')\n  });\n});","define('hospitalrun/tests/patients/operation-report/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/operation-report/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/operation-report/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/operative-plan/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/components/operative-procedures', 'hospitalrun/mixins/operative-plan-statuses', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunComponentsOperativeProcedures, _hospitalrunMixinsOperativePlanStatuses, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var RSVP = _ember['default'].RSVP;\n  var set = _ember['default'].set;\n\n  // Properties to copy from plan to operative report\n  var PLAN_KEYS_TO_COPY = ['additionalNotes', 'caseComplexity', 'customForms', 'patient', 'procedures', 'operationDescription', 'surgeon'];\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsOperativePlanStatuses['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    completedPlan: false,\n    lookupListsToUpdate: [{\n      name: 'physicianList',\n      property: 'model.surgeon',\n      id: 'physician_list'\n    }, {\n      name: 'procedureList',\n      property: 'modelProcedures',\n      id: 'procedure_list'\n    }],\n    newPlan: false,\n    updateCapability: 'add_operative_plan',\n\n    patientsController: inject.controller('patients'),\n\n    physicianList: alias('patientsController.physicianList'),\n    procedureList: alias('patientsController.procedureList'),\n\n    additionalButtons: computed('model.{isNew,status}', function () {\n      var i18n = get(this, 'i18n');\n      var isNew = get(this, 'model.isNew');\n      var status = get(this, 'model.status');\n      if (!isNew && status !== _hospitalrunMixinsOperativePlanStatuses.COMPLETED_STATUS) {\n        return [{\n          'class': 'btn btn-primary on-white',\n          buttonAction: 'completePlan',\n          buttonIcon: 'octicon octicon-check',\n          buttonText: i18n.t('operativePlan.buttons.completePlan')\n        }];\n      }\n    }),\n\n    modelProcedures: computed.map('model.procedures', function (procedure) {\n      return get(procedure, 'description');\n    }),\n\n    afterUpdate: function afterUpdate() {\n      var _this = this;\n\n      var newPlan = get(this, 'newPlan');\n      if (newPlan) {\n        var patient = get(this, 'model.patient');\n        patient.save().then(this._finishAfterUpdate.bind(this)).then(function () {\n          var editTitle = get(_this, 'i18n').t('operativePlan.titles.editTitle');\n          var sectionDetails = {};\n          sectionDetails.currentScreenTitle = editTitle;\n          _this.send('setSectionHeader', sectionDetails);\n        });\n      } else {\n        this._finishAfterUpdate();\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var model = get(this, 'model');\n      var isNew = get(model, 'isNew');\n      var status = get(model, 'status');\n      (0, _hospitalrunComponentsOperativeProcedures.addProcedure)(model);\n      set(this, 'newPlan', isNew);\n      if (status === _hospitalrunMixinsOperativePlanStatuses.COMPLETED_STATUS) {\n        var changedAttributes = model.changedAttributes();\n        if (changedAttributes.status) {\n          set(this, 'completedPlan', true);\n        }\n      } else {\n        set(this, 'completedPlan', false);\n      }\n      if (isNew) {\n        return this.saveNewDiagnoses();\n      } else {\n        return RSVP.resolve();\n      }\n    },\n\n    _createOperationReport: function _createOperationReport() {\n      var _this2 = this;\n\n      var store = get(this, 'store');\n      var operativePlan = get(this, 'model');\n      var propertiesToCopy = operativePlan.getProperties.apply(operativePlan, PLAN_KEYS_TO_COPY);\n      var diagnoses = get(operativePlan, 'diagnoses');\n      var patient = get(operativePlan, 'patient');\n      set(propertiesToCopy, 'operativePlan', operativePlan);\n      set(propertiesToCopy, 'preOpDiagnosis', diagnoses);\n      set(propertiesToCopy, 'surgeryDate', new Date());\n      set(propertiesToCopy, 'returnToPatient', get(patient, 'id'));\n      var operationReport = store.createRecord('operation-report', propertiesToCopy);\n      this.getPatientDiagnoses(patient, operationReport);\n      operationReport.save().then(function (newReport) {\n        patient.save().then(function () {\n          var i18n = get(_this2, 'i18n');\n          var updateMessage = i18n.t('operativePlan.messages.planCompleted');\n          var updateTitle = i18n.t('operativePlan.titles.planCompleted');\n          _this2.displayAlert(updateTitle, updateMessage, 'showOperationReport', newReport, 'ok');\n        });\n      });\n    },\n\n    _finishAfterUpdate: function _finishAfterUpdate() {\n      var completedPlan = get(this, 'completedPlan');\n      if (completedPlan) {\n        this._createOperationReport();\n      } else {\n        var i18n = get(this, 'i18n');\n        var updateMessage = i18n.t('operativePlan.messages.planSaved');\n        var updateTitle = i18n.t('operativePlan.titles.planSaved');\n        this.displayAlert(updateTitle, updateMessage);\n      }\n    },\n\n    actions: {\n      completePlan: function completePlan() {\n        var model = get(this, 'model');\n        set(model, 'status', _hospitalrunMixinsOperativePlanStatuses.COMPLETED_STATUS);\n        this.send('update');\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/operative-plan/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/operative-plan/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/operative-plan/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/operative-plan/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/add-to-patient-route', 'ember', 'moment', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsAddToPatientRoute, _ember, _moment, _emberI18n) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsAddToPatientRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('operativePlan.titles.editTitle'),\n    modelName: 'operative-plan',\n    newTitle: (0, _emberI18n.translationMacro)('operativePlan.titles.newTitle'),\n\n    customForms: inject.service(),\n    database: inject.service(),\n\n    getNewData: function getNewData() {\n      var customForms = get(this, 'customForms');\n      var newData = {\n        customForms: _ember['default'].Object.create()\n      };\n      return customForms.setDefaultCustomForms(['operativePlan'], newData);\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      var database = get(this, 'database');\n      var maxApptId = database.getMaxPouchId('appointment');\n      var minApptId = database.getMinPouchId('appointment');\n      var patientId = get(model, 'patient.id');\n      var startDate = (0, _moment['default'])().toDate().getTime();\n      var endDate = (0, _moment['default'])().add(10, 'years').toDate().getTime();\n\n      this.store.query('appointment', {\n        options: {\n          startkey: [patientId, startDate, startDate, minApptId],\n          endkey: [patientId, endDate, endDate, maxApptId]\n        },\n        mapReduce: 'appointments_by_patient'\n      }).then(function (appointments) {\n        model.set('appointments', appointments);\n      });\n    },\n\n    actions: {\n      showOperationReport: function showOperationReport(report) {\n        this.transitionTo('patients.operation-report', report);\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/operative-plan/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/operative-plan/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/operative-plan/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/outpatient/controller', ['exports', 'ember', 'hospitalrun/mixins/filter-list', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/patient-visits', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/user-session', 'hospitalrun/utils/visit-statuses', 'hospitalrun/mixins/visit-types'], function (exports, _ember, _hospitalrunMixinsFilterList, _hospitalrunMixinsModalHelper, _hospitalrunMixinsPatientVisits, _hospitalrunUtilsSelectValues, _hospitalrunMixinsUserSession, _hospitalrunUtilsVisitStatuses, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsFilterList['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsPatientVisits['default'], _hospitalrunUtilsSelectValues['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsVisitTypes['default'], {\n    addPermission: 'add_patient',\n    deletePermission: 'delete_patient',\n    queryParams: ['visitDate', 'visitLocation'],\n    visitLocation: null,\n    visitDate: null,\n    canAddVisit: computed(function () {\n      return this.currentUserCan('add_visit');\n    }),\n    hasAppointmentLabels: computed(function () {\n      var i18n = this.get('i18n');\n      return [i18n.t('visits.labels.haveAppointment'), i18n.t('visits.labels.noAppointment')];\n    }),\n    doneOrdersValues: computed(function () {\n      var i18n = this.get('i18n');\n      return [i18n.t('visits.labels.ordersNotDone'), i18n.t('visits.labels.haveDoneOrders')];\n    }),\n    locationList: _ember['default'].computed.map('patientController.locationList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap).volatile(),\n    patientNames: computed.map('model', function (visit) {\n      return visit.get('patient.shortDisplayName');\n    }),\n    patientController: _ember['default'].inject.controller('patients'),\n    sexList: computed.alias('patientController.sexList.value'),\n    visitTypesList: computed.alias('patientController.visitTypesList'),\n    visitTypesValues: computed.map('visitTypes', function (visitType) {\n      return visitType.value;\n    }),\n\n    checkedInVisits: computed.filter('model.@each.status', function (visit) {\n      return visit.get('visitType') !== 'Admission' && visit.get('status') === _hospitalrunUtilsVisitStatuses['default'].CHECKED_IN;\n    }),\n\n    filteredVisits: computed('checkedInVisits', 'filterBy', 'filterValue', 'visitLocation', function () {\n      var filterBy = this.get('filterBy');\n      var filterValue = this.get('filterValue');\n      var filteredBy = this.get('filteredBy');\n      var visitLocation = this.get('visitLocation');\n      var visits = this.get('checkedInVisits');\n      if (isEmpty(visitLocation)) {\n        filteredBy['delete']('location');\n      } else {\n        filteredBy.set('location', visitLocation);\n      }\n      return this.filterList(visits, filterBy, filterValue);\n    }),\n\n    sortedVisits: computed('filteredVisits', 'sortByKey', 'sortByDesc', function () {\n      var filteredList = this.get('filteredVisits');\n      return this.sortFilteredList(filteredList);\n    }),\n\n    startKey: [],\n    actions: {\n      checkOut: function checkOut(visit) {\n        var i18n = this.get('i18n');\n        var patientDetails = { patientName: visit.get('patient.displayName') };\n        var confirmMessage = i18n.t('visits.messages.checkOut', patientDetails);\n        this.displayConfirm(i18n.t('visits.titles.checkOut'), confirmMessage, 'finishCheckOut', visit);\n      },\n\n      editVisit: function editVisit(visit) {\n        if (this.get('canAddVisit')) {\n          visit.set('returnTo', 'patients.outpatient');\n          this.transitionToRoute('visits.edit', visit);\n        }\n      },\n\n      finishCheckOut: function finishCheckOut(visit) {\n        this.checkoutVisit(visit, _hospitalrunUtilsVisitStatuses['default'].CHECKED_OUT);\n      },\n\n      search: function search() {\n        var visitDate = this.get('model.selectedVisitDate');\n        var visitLocation = this.get('model.selectedLocation');\n        if (!isEmpty(visitDate)) {\n          this.set('visitDate', visitDate.getTime());\n        }\n        if (isEmpty(visitLocation)) {\n          this.set('visitLocation', null);\n        } else {\n          this.set('visitLocation', visitLocation);\n        }\n      },\n\n      patientCheckIn: function patientCheckIn() {\n        this.transitionToRoute('visits.edit', 'checkin').then(function (newRoute) {\n          var visitProps = {\n            outPatient: true,\n            visitType: null,\n            returnTo: 'patients.outpatient'\n          };\n          newRoute.currentModel.setProperties(visitProps);\n        });\n      }\n\n    }\n  });\n});","define('hospitalrun/tests/patients/outpatient/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/outpatient/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/outpatient/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/outpatient/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/date-format', 'ember', 'moment', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsDateFormat, _ember, _moment, _emberI18n) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsDateFormat['default'], {\n    database: _ember['default'].inject.service(),\n    itemsPerPage: null, // Fetch all outpatient visits as one page\n    modelName: 'visit',\n    newButtonAction: 'patientCheckIn',\n    newButtonText: (0, _emberI18n.translationMacro)('patients.buttons.patientCheckIn'),\n    selectedVisitDate: null,\n    showingTodaysPatients: true,\n    pageTitle: computed('showingTodaysPatients', 'selectedVisitDate', function () {\n      var i18n = this.get('i18n');\n      var showingTodaysPatients = this.get('showingTodaysPatients');\n      if (showingTodaysPatients) {\n        return i18n.t('patients.titles.todaysOutpatients');\n      } else {\n        var selectedVisitDate = this._dateFormat(this.get('selectedVisitDate'));\n        return i18n.t('patients.titles.outpatientsForDate', { visitDate: selectedVisitDate });\n      }\n    }),\n\n    queryParams: {\n      visitDate: { refreshModel: true },\n      visitLocation: { refreshModel: false }\n    },\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var displayPatientId = item.get('displayPatientId');\n      return [displayPatientId, 'patient_' + item.get('id')];\n    },\n\n    _modelQueryParams: function _modelQueryParams(params) {\n      var database = this.get('database');\n      var maxId = database.getMaxPouchId('visit');\n      var minId = database.getMinPouchId('visit');\n      var visitDate = params.visitDate;\n\n      if (isEmpty(visitDate)) {\n        visitDate = (0, _moment['default'])();\n      } else {\n        visitDate = (0, _moment['default'])(parseInt(visitDate));\n      }\n      if (visitDate.isSame((0, _moment['default'])(), 'day')) {\n        this.set('showingTodaysPatients', true);\n      } else {\n        this.set('showingTodaysPatients', false);\n        this.set('selectedVisitDate', visitDate.toDate());\n      }\n      var endOfDay = visitDate.endOf('day').valueOf();\n      var startOfDay = visitDate.startOf('day').valueOf();\n      return {\n        mapReduce: 'visit_by_date',\n        options: {\n          endkey: [endOfDay, endOfDay, maxId],\n          startkey: [startOfDay, null, minId]\n        }\n      };\n    },\n\n    model: function model(params) {\n      var _this = this;\n\n      return this._super(params).then(function (model) {\n        var visitDate = new Date();\n        if (!isEmpty(params.visitDate)) {\n          visitDate.setTime(params.visitDate);\n        }\n        model.set('selectedVisitDate', visitDate);\n        model.set('display_selectedVisitDate', _this._dateFormat(visitDate));\n        model.set('selectedLocation', params.visitLocation);\n        return model;\n      });\n    },\n\n    actions: {\n      finishCheckOut: function finishCheckOut(visit) {\n        this.controller.send('finishCheckOut', visit);\n      },\n\n      patientCheckIn: function patientCheckIn() {\n        this.controller.send('patientCheckIn');\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/patients/outpatient/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/outpatient/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/outpatient/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/photo/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _emberI18n) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  var RSVP = _ember['default'].RSVP;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    addAction: 'addPhoto',\n    editTitle: (0, _emberI18n.translationMacro)('patients.titles.editPhoto'),\n    fileRequiredMessage: (0, _emberI18n.translationMacro)('patients.messages.photoFileRequired'),\n    modelName: 'photo',\n    newTitle: (0, _emberI18n.translationMacro)('patients.titles.addPhoto'),\n    newModel: false,\n    showFileRequired: false,\n    showUpdateButton: true,\n\n    database: inject.service(),\n    editController: inject.controller('patients/edit'),\n    filesystem: inject.service(),\n\n    photoFileNotSet: computed('model.photoFile', function () {\n      var model = get(this, 'model');\n      var isNew = get(model, 'isNew');\n      var photoFile = get(model, 'photoFile');\n      return isNew && isEmpty(photoFile);\n    }),\n\n    title: computed('model.isNew', function () {\n      var isNew = get(this, 'model.isNew');\n      if (isNew) {\n        return get(this, 'newTitle');\n      } else {\n        return get(this, 'editTitle');\n      }\n    }),\n\n    updateButtonAction: computed('photoFileNotSet', function () {\n      var photoFileNotSet = get(this, 'photoFileNotSet');\n      if (photoFileNotSet) {\n        return 'showFileRequired';\n      } else {\n        set(this, 'showFileRequired', false);\n        return 'update';\n      }\n    }),\n\n    updateButtonClass: computed('photoFileNotSet', function () {\n      var photoFileNotSet = get(this, 'photoFileNotSet');\n      if (photoFileNotSet) {\n        return 'disabled-btn';\n      }\n    }),\n\n    afterUpdate: function afterUpdate(model) {\n      var _this = this;\n\n      var isNew = get(this, 'newModel');\n      var editController = get(this, 'editController');\n      if (isNew) {\n        var photoFile = get(model, 'photoFile');\n        var saveToDir = get(model, 'saveToDir');\n        var fileSystem = get(this, 'filesystem');\n        var modelName = get(this, 'modelName');\n        var pouchDbId = get(this, 'database').getPouchId(get(model, 'id'), modelName);\n        fileSystem.addFile(photoFile, saveToDir, pouchDbId).then(function (fileEntry) {\n          model.setProperties({\n            localFile: true,\n            fileName: fileEntry.fullPath,\n            url: fileEntry.toURL()\n          });\n          model.save().then(function () {\n            editController.send(get(_this, 'addAction'), model);\n          })['catch'](function (err) {\n            throw err;\n          });\n        });\n      } else {\n        this.send('closeModal');\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var model = get(this, 'model');\n      var photoFile = get(model, 'photoFile');\n      var isImage = get(model, 'isImage');\n      var isNew = get(model, 'isNew');\n      set(this, 'newModel', isNew);\n      if (isNew) {\n        model.setProperties({\n          files: [_ember['default'].Object.create({\n            content_type: photoFile.type,\n            data: photoFile,\n            name: 'file'\n          })],\n          isImage: isImage\n        });\n      }\n      return RSVP.resolve();\n    },\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      showFileRequired: function showFileRequired() {\n        set(this, 'showFileRequired', true);\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/photo/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/photo/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/photo/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/quick-add/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-edit-controller', 'ember-i18n'], function (exports, _ember, _hospitalrunControllersAbstractEditController, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    sexList: _ember['default'].computed.alias('model.requestingController.sexList'),\n    title: (0, _emberI18n.translationMacro)('patients.titles.new'),\n\n    updateCapability: 'add_patient',\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      }\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      var requestingController = this.get('model.requestingController');\n      requestingController.send('addedNewPatient', record);\n    }\n  });\n});","define('hospitalrun/tests/patients/quick-add/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/quick-add/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/quick-add/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/reports/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-report-controller', 'moment', 'hospitalrun/mixins/patient-diagnosis', 'hospitalrun/mixins/patient-visits', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/visit-types'], function (exports, _ember, _hospitalrunControllersAbstractReportController, _moment, _hospitalrunMixinsPatientDiagnosis, _hospitalrunMixinsPatientVisits, _hospitalrunUtilsSelectValues, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractReportController['default'].extend(_hospitalrunMixinsPatientDiagnosis['default'], _hospitalrunMixinsPatientVisits['default'], _hospitalrunMixinsVisitTypes['default'], {\n    patientsController: _ember['default'].inject.controller('patients'),\n\n    clinicList: _ember['default'].computed.map('patientsController.clinicList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    diagnosisList: _ember['default'].computed.alias('patientsController.diagnosisList'),\n    physicianList: _ember['default'].computed.map('patientsController.physicianList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    locationList: _ember['default'].computed.map('patientsController.locationList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    statusList: _ember['default'].computed.map('patientsController.statusList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    visitTypesList: _ember['default'].computed.alias('patientsController.visitTypesList'),\n    reportType: 'detailedAdmissions',\n    patientDetails: {},\n\n    admissionReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        sex: {\n          label: i18n.t('labels.sex'),\n          include: true,\n          property: 'sex'\n        },\n        total: {\n          label: i18n.t('labels.total'),\n          include: true,\n          property: 'total',\n          format: '_numberFormat'\n        }\n      };\n    }),\n    admissionDetailReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'patientId'\n        },\n        name: {\n          label: i18n.t('labels.name'),\n          include: true,\n          property: 'patientName'\n        },\n        admissionDate: {\n          label: i18n.t('patients.labels.admissionDate'),\n          include: true,\n          property: 'admissionDate',\n          format: '_dateTimeFormat'\n        },\n        dischargeDate: {\n          label: i18n.t('patients.labels.dischargeDate'),\n          include: false,\n          property: 'dischargeDate',\n          format: '_dateTimeFormat'\n        },\n        patientDays: {\n          label: i18n.t('patients.labels.patientDays'),\n          include: false,\n          property: 'patientDays',\n          format: '_numberFormat'\n        }\n      };\n    }),\n    diagnosticReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        type: {\n          label: i18n.t('labels.type'),\n          include: true,\n          property: 'type'\n        },\n        total: {\n          label: i18n.t('labels.total'),\n          include: true,\n          property: 'total',\n          format: '_numberFormat'\n        }\n      };\n    }),\n    procedureDetailReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'patient.displayPatientId'\n        },\n        name: {\n          label: i18n.t('labels.name'),\n          include: true,\n          property: 'patient.displayName'\n        },\n        procedure: {\n          label: i18n.t('visits.labels.procedure'),\n          include: true,\n          property: 'procedure'\n        },\n        procedureDate: {\n          label: i18n.t('visits.labels.procedureDate'),\n          include: true,\n          property: 'procedureDate',\n          format: '_dateTimeFormat'\n        }\n      };\n    }),\n    reportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        visitDate: {\n          label: i18n.t('visits.labels.visitDate'),\n          include: true,\n          property: 'visitDate'\n        },\n        visitType: {\n          label: i18n.t('visits.labels.visitType'),\n          include: true,\n          property: 'visitType'\n        },\n        visitLocation: {\n          label: i18n.t('labels.location'),\n          include: false,\n          property: 'location'\n        },\n        examiner: {\n          label: i18n.t('visits.labels.examiner'),\n          include: true,\n          property: 'examiner'\n        },\n        name: {\n          label: i18n.t('labels.name'),\n          include: true,\n          property: 'patient.displayName'\n        },\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'patient.displayPatientId'\n        },\n        sex: {\n          label: i18n.t('patients.labels.sex'),\n          include: true,\n          property: 'patient.sex'\n        },\n        dateOfBirth: {\n          label: i18n.t('patients.labels.dateOfBirth'),\n          include: true,\n          property: 'patient.dateOfBirth',\n          format: '_dateFormat'\n        },\n        age: {\n          label: i18n.t('labels.age'),\n          include: false,\n          property: 'patient.age'\n        },\n        primaryDiagnosis: {\n          label: i18n.t('patients.labels.primaryDiagnosis'),\n          include: false,\n          property: 'primaryDiagnosis'\n        },\n        secondaryDiagnoses: {\n          label: i18n.t('patients.labels.secondaryDiagnosis'),\n          include: false,\n          property: 'additionalDiagnoses',\n          format: '_diagnosisListToString'\n        },\n        procedures: {\n          label: i18n.t('labels.procedures'),\n          include: false,\n          property: 'resolvedProcedures',\n          format: '_procedureListToString'\n        },\n        contacts: {\n          label: i18n.t('patients.labels.contacts'),\n          include: false,\n          property: 'patient',\n          format: '_contactListToString'\n        },\n        referredBy: {\n          label: i18n.t('patients.labels.referredBy'),\n          include: false,\n          property: 'patient.referredBy'\n        },\n        referredDate: {\n          label: i18n.t('patients.labels.referredDate'),\n          include: false,\n          property: 'patient.referredDate',\n          format: '_dateFormat'\n        }\n      };\n    }),\n    statusReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'patient.displayPatientId'\n        },\n        name: {\n          label: i18n.t('labels.name'),\n          include: true,\n          property: 'patient.displayName'\n        },\n        status: {\n          label: i18n.t('labels.status'),\n          include: true,\n          property: 'patient.status'\n        },\n        primaryDiagnosis: {\n          label: i18n.t('patients.labels.primaryDiagnosis'),\n          include: true,\n          property: 'patient',\n          format: '_formatPrimaryDiagnosis'\n        },\n        secondaryDiagnoses: {\n          label: i18n.t('patients.labels.secondaryDiagnosis'),\n          include: true,\n          property: 'patient',\n          format: '_formatSecondaryDiagnosis'\n        }\n      };\n    }),\n    reportTypes: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return [{\n        name: i18n.t('patients.titles.admissionsDetail'),\n        value: 'detailedAdmissions'\n      }, {\n        name: i18n.t('patients.titles.admissionsSummary'),\n        value: 'admissions'\n      }, {\n        name: i18n.t('patients.titles.diagnosticTesting'),\n        value: 'diagnostic'\n      }, {\n        name: i18n.t('patients.titles.dischargesDetail'),\n        value: 'detailedDischarges'\n      }, {\n        name: i18n.t('patients.titles.dischargesSummary'),\n        value: 'discharges'\n      }, {\n        name: i18n.t('patients.titles.proceduresDetail'),\n        value: 'detailedProcedures'\n      }, {\n        name: i18n.t('patients.titles.proceduresSummary'),\n        value: 'procedures'\n      }, {\n        name: i18n.t('patients.titles.patientStatus'),\n        value: 'status'\n      }, {\n        name: i18n.t('patients.titles.totalPatientDays'),\n        value: 'patientDays'\n      }, {\n        name: i18n.t('patients.titles.totalPatientDaysDetailed'),\n        value: 'detailedPatientDays'\n      }, {\n        name: i18n.t('patients.titles.visit'),\n        value: 'visit'\n      }];\n    }),\n\n    isDischargeReport: (function () {\n      var reportType = this.get('reportType');\n      return reportType.toLowerCase().indexOf('discharges') > -1;\n    }).property('reportType'),\n\n    isStatusReport: (function () {\n      var reportType = this.get('reportType');\n      return reportType === 'status';\n    }).property('reportType'),\n\n    isVisitReport: (function () {\n      var reportType = this.get('reportType');\n      return reportType === 'visit';\n    }).property('reportType'),\n\n    _addContactToList: function _addContactToList(phone, email, prefix, contactList) {\n      var contactArray = [];\n      if (!_ember['default'].isEmpty(email) || !_ember['default'].isEmpty(phone)) {\n        if (!_ember['default'].isEmpty(phone)) {\n          contactArray.push(phone);\n        }\n        if (!_ember['default'].isEmpty(email)) {\n          contactArray.push(email);\n        }\n        contactList.push(prefix + contactArray.join(', '));\n      }\n    },\n\n    _addReportRow: function _addReportRow(row, skipFormatting, reportColumns, rowAction) {\n      if (_ember['default'].isEmpty(rowAction) && !_ember['default'].isEmpty(row.patient)) {\n        var patientId = null;\n        if (row.get) {\n          patientId = row.get('patient.id');\n        } else {\n          patientId = row.patient.get('id');\n        }\n        if (!_ember['default'].isEmpty(patientId)) {\n          rowAction = {\n            action: 'viewPatient',\n            model: patientId\n          };\n        }\n      }\n      this._super(row, skipFormatting, reportColumns, rowAction);\n    },\n\n    /**\n     * Given a list of records, organize and total by them by type and then add them to the report.\n     * @param records {Array} list of records to total.\n     * @param typeField {String} the field in the records containing the type.\n     * @param totalLabel {String} the label for the grand total.\n     * @param reportColumns\n     */\n    _addRowsByType: function _addRowsByType(records, typeField, totalLabel, reportColumns) {\n      var types = this._totalByType(records, typeField, totalLabel);\n      types.forEach((function (type) {\n        this._addReportRow(type, true, reportColumns);\n      }).bind(this));\n    },\n\n    _addPatientProcedureRows: function _addPatientProcedureRows(procedureTotals, reportColumns) {\n      procedureTotals.forEach((function (procedureTotal) {\n        if (!_ember['default'].isEmpty(procedureTotal.records)) {\n          procedureTotal.records.forEach((function (patientProcedure, index) {\n            this._addReportRow({\n              patient: patientProcedure.get('patient'),\n              procedure: patientProcedure.get('description'),\n              procedureDate: patientProcedure.get('procedureDate')\n            }, false, reportColumns);\n            if (index + 1 === procedureTotal.records.length) {\n              this._addReportRow({\n                procedure: 'Total for ' + procedureTotal.type + ': ' + procedureTotal.total\n              }, true, reportColumns);\n            }\n          }).bind(this));\n        } else {\n          this._addReportRow({\n            procedure: 'Total for ' + procedureTotal.type + ': ' + procedureTotal.total\n          }, true, reportColumns);\n        }\n      }).bind(this));\n    },\n\n    _contactListToString: function _contactListToString(patient) {\n      var additionalContacts = patient.get('additionalContacts');\n      var contactDesc = undefined;\n      var contactList = [];\n      var email = patient.get('email');\n      var phone = patient.get('phone');\n      this._addContactToList(phone, email, 'Primary: ', contactList);\n      if (!_ember['default'].isEmpty(additionalContacts)) {\n        additionalContacts.forEach((function (contact) {\n          contactDesc = '';\n          if (!_ember['default'].isEmpty(contact.name) && !_ember['default'].isEmpty(contact.relationship)) {\n            if (!_ember['default'].isEmpty(contact.name)) {\n              contactDesc += contact.name;\n            }\n            if (!_ember['default'].isEmpty(contact.relationship)) {\n              if (!_ember['default'].isEmpty(contactDesc)) {\n                contactDesc += ' - ';\n              }\n              contactDesc += contact.relationship;\n            }\n            contactDesc += ': ';\n          }\n          this._addContactToList(contact.phone, contact.email, contactDesc, contactList);\n        }).bind(this));\n      }\n      return contactList.join(';\\n');\n    },\n\n    _dateTimeFormat: function _dateTimeFormat(value) {\n      return this._dateFormat(value, 'l h:mm A');\n    },\n\n    _diagnosisListToString: function _diagnosisListToString(diagnoses) {\n      return this._listToString(diagnoses, 'diagnosis', 'date');\n    },\n    /**\n       * Find diagnostics by the specified dates and the record's start and (optional) end dates.\n       */\n    _findDiagnosticsByDate: function _findDiagnosticsByDate() {\n      var filterEndDate = this.get('endDate');\n      var filterStartDate = this.get('startDate');\n      var findParams = {\n        options: {},\n        mapReduce: 'imaging_by_status'\n      };\n      var maxValue = this.get('maxValue');\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        findParams.options.startkey = ['Completed', null, filterStartDate.getTime(), null];\n\n        if (!_ember['default'].isEmpty(filterEndDate)) {\n          filterEndDate = (0, _moment['default'])(filterEndDate).endOf('day').toDate();\n          findParams.options.endkey = ['Completed', maxValue, filterEndDate.getTime(), maxValue];\n        }\n        this.store.query('imaging', findParams).then((function (imagingRecords) {\n          var returnRecords = {\n            imaging: imagingRecords\n          };\n          findParams.mapReduce = 'lab_by_status';\n          this.store.query('lab', findParams).then(function (labRecords) {\n            returnRecords.labs = labRecords;\n            resolve(returnRecords);\n          }, reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    /**\n     * Find procedures by the specified dates and the record's start and (optional) end dates.\n     */\n    _findPatientsByStatus: function _findPatientsByStatus() {\n      var status = this.get('status');\n      var findParams = {\n        options: {\n          key: status\n        },\n        mapReduce: 'patient_by_status'\n      };\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this.store.query('patient', findParams).then(resolve, reject);\n      }).bind(this));\n    },\n\n    /**\n     * Find procedures by the specified dates and the record's start and (optional) end dates.\n     */\n    _findProceduresByDate: function _findProceduresByDate() {\n      var filterEndDate = this.get('endDate');\n      var filterStartDate = this.get('startDate');\n      var findParams = {\n        options: {},\n        mapReduce: 'procedure_by_date'\n      };\n      var maxValue = this.get('maxValue');\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        findParams.options.startkey = [filterStartDate.getTime(), null];\n\n        if (!_ember['default'].isEmpty(filterEndDate)) {\n          filterEndDate = (0, _moment['default'])(filterEndDate).endOf('day').toDate();\n          findParams.options.endkey = [filterEndDate.getTime(), maxValue];\n        }\n        this.store.query('procedure', findParams).then(resolve, reject);\n      }).bind(this));\n    },\n\n    /**\n     * Find visits by the specified dates and the record's start and (optional) end dates.\n     * @param {String} reportType the type of report to find visits for.\n     */\n    _findVisitsByDate: function _findVisitsByDate() {\n      var filterEndDate = this.get('endDate');\n      var filterStartDate = this.get('startDate');\n      var findParams = {\n        options: {},\n        mapReduce: 'visit_by_date'\n      };\n      var isDischargeReport = this.get('isDischargeReport');\n      var maxValue = this.get('maxValue');\n      if (isDischargeReport) {\n        findParams.mapReduce = 'visit_by_discharge_date';\n      }\n\n      /**\n       * Admissions - start date between start and end date\n       * Discharge end date between start and end date\n       */\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var isDischargeReport = this.get('isDischargeReport');\n        findParams.options.startkey = [filterStartDate.getTime(), null];\n        if (!_ember['default'].isEmpty(filterEndDate)) {\n          filterEndDate = (0, _moment['default'])(filterEndDate).endOf('day').toDate();\n          if (isDischargeReport) {\n            findParams.options.endkey = [filterEndDate.getTime(), maxValue];\n          } else {\n            findParams.options.endkey = [filterEndDate.getTime(), maxValue, maxValue];\n          }\n        }\n        this.store.query('visit', findParams).then(resolve, reject);\n      }).bind(this));\n    },\n\n    _filterByLike: function _filterByLike(records, field, likeCondition) {\n      return records.filter(function (record) {\n        var fieldValue = record.get('field');\n        if (_ember['default'].isEmpty(fieldValue)) {\n          return false;\n        } else {\n          if (_ember['default'].isArray(fieldValue)) {\n            var foundValue = fieldValue.find((function (value) {\n              return this._haveLikeValue(value, likeCondition);\n            }).bind(this));\n            return !_ember['default'].isEmpty(foundValue);\n          } else {\n            return this._haveLikeValue(fieldValue, likeCondition);\n          }\n        }\n      });\n    },\n\n    _filterInPatientVisit: function _filterInPatientVisit(visit) {\n      var outPatient = visit.get('outPatient');\n      var status = visit.get('status');\n      return !outPatient && !_ember['default'].isEmpty(status);\n    },\n\n    _finishVisitReport: function _finishVisitReport(visits) {\n      var visitTypes = this._totalByType(visits, 'visitType', 'total');\n      visitTypes.forEach((function (visitType) {\n        if (visitType.type === 'total') {\n          this._addReportRow({\n            visitDate: 'Total visits: ' + visitType.total\n          });\n        } else {\n          visitType.records.forEach((function (visit) {\n            this._addReportRow(visit);\n          }).bind(this));\n          this._addReportRow({\n            visitDate: 'Total for ' + visitType.type + ': ' + visitType.total\n          });\n        }\n      }).bind(this));\n      this._finishReport();\n    },\n    _formatPrimaryDiagnosis: function _formatPrimaryDiagnosis(patient) {\n      var primaryDiagnoses = this.getDiagnoses(patient, true, false);\n      return this._diagnosisListToString(primaryDiagnoses);\n    },\n\n    _formatSecondaryDiagnosis: function _formatSecondaryDiagnosis(patient) {\n      var secondaryDiagnoses = this.getDiagnoses(patient, true, true);\n      return this._diagnosisListToString(secondaryDiagnoses);\n    },\n\n    _generateAdmissionOrDischargeReport: function _generateAdmissionOrDischargeReport(visits, reportType) {\n      var _this = this;\n\n      var detailedReport = false;\n      var reportColumns = undefined;\n      var patientBySex = {};\n      var sexNotEnteredLabel = this.get('i18n').t('patients.labels.sexNotEntered');\n\n      if (reportType.indexOf('detailed') > -1) {\n        detailedReport = true;\n        reportColumns = this.get('admissionDetailReportColumns');\n        reportColumns.patientDays.include = false;\n        if (reportType === 'detailedDischarges') {\n          reportColumns.dischargeDate.include = true;\n        } else {\n          reportColumns.dischargeDate.include = false;\n        }\n      } else {\n        reportColumns = this.get('admissionReportColumns');\n      }\n      visits = visits.filter(this._filterInPatientVisit);\n      visits.forEach((function (visit) {\n        if (!this.get('isDischargeReport') || !_ember['default'].isEmpty(visit.get('endDate'))) {\n          var reportRow = {\n            patient: visit.get('patient'),\n            patientId: visit.get('patient.displayPatientId'),\n            patientName: visit.get('patient.displayName'),\n            admissionDate: visit.get('startDate'),\n            dischargeDate: visit.get('endDate')\n          };\n          var sex = visit.get('patient.sex');\n          if (!sex) {\n            sex = sexNotEnteredLabel;\n          }\n          var sexGrouping = patientBySex[sex];\n          if (!sexGrouping) {\n            sexGrouping = {\n              count: 0,\n              rows: []\n            };\n            patientBySex[sex] = sexGrouping;\n          }\n          sexGrouping.count++;\n          sexGrouping.rows.push(reportRow);\n        }\n      }).bind(this));\n      var sexTotal = 0;\n      var addPatientBySexRows = function addPatientBySexRows(reportRow) {\n        _this._addReportRow(reportRow, false, reportColumns);\n      };\n      for (var sex in patientBySex) {\n        if (detailedReport) {\n          patientBySex[sex].rows.forEach(addPatientBySexRows);\n          this._addReportRow({ patientId: sex + ' Total: ' + patientBySex[sex].count }, true, reportColumns);\n        } else {\n          this._addReportRow({ sex: sex, total: patientBySex[sex].count }, true, reportColumns);\n        }\n        sexTotal += patientBySex[sex].count;\n      }\n      this._addReportRow({ patientId: 'Grand Total: ' + sexTotal }, true, reportColumns);\n      this._finishReport(reportColumns);\n    },\n\n    _generateDiagnosticReport: function _generateDiagnosticReport() {\n      this._findDiagnosticsByDate().then((function (diagnostics) {\n        var reportColumns = this.get('diagnosticReportColumns');\n        this._addRowsByType(diagnostics.imaging, 'imagingType.name', 'Total for imaging: ', reportColumns);\n        this._addRowsByType(diagnostics.labs, 'labType.name', 'Total for labs: ', reportColumns);\n        this._finishReport(reportColumns);\n      }).bind(this), (function (err) {\n        this._notifyReportError('Error in _generateDiagnosticReport: ' + err);\n      }).bind(this));\n    },\n\n    _generatePatientDaysReport: function _generatePatientDaysReport(visits, reportType) {\n      visits = visits.filter(this._filterInPatientVisit);\n      var detailed = reportType.indexOf('detailed') === 0;\n      var reportEndDate = this.get('endDate');\n      var reportColumns = undefined;\n      var reportStartDate = (0, _moment['default'])(this.get('startDate')).startOf('day');\n      if (detailed) {\n        reportColumns = this.get('admissionDetailReportColumns');\n        reportColumns.patientDays.include = true;\n        reportColumns.dischargeDate.include = true;\n      } else {\n        reportColumns = {\n          total: {\n            label: 'Total',\n            include: true,\n            property: 'total',\n            format: '_numberFormat'\n          }\n        };\n      }\n      if (_ember['default'].isEmpty(reportEndDate)) {\n        reportEndDate = (0, _moment['default'])().endOf('day');\n      } else {\n        reportEndDate = (0, _moment['default'])(reportEndDate).endOf('day');\n      }\n      var patientDays = visits.reduce((function (previousValue, visit) {\n        var calcEndDate = visit.get('endDate');\n        var calcStartDate = (0, _moment['default'])(visit.get('startDate')).startOf('day');\n        if (_ember['default'].isEmpty(calcEndDate)) {\n          calcEndDate = (0, _moment['default'])().endOf('day');\n        } else {\n          calcEndDate = (0, _moment['default'])(calcEndDate).endOf('day');\n        }\n        if (calcStartDate.isBefore(reportStartDate)) {\n          calcStartDate = reportStartDate;\n        }\n        if (calcEndDate.isAfter(reportEndDate)) {\n          calcEndDate = reportEndDate;\n        }\n        var daysDiff = calcEndDate.diff(calcStartDate, 'days', true);\n        if (detailed) {\n          this._addReportRow({\n            patient: visit.get('patient'),\n            patientId: visit.get('patient.displayPatientId'),\n            patientName: visit.get('patient.displayName'),\n            admissionDate: visit.get('startDate'),\n            dischargeDate: visit.get('endDate'),\n            patientDays: daysDiff\n          }, false, reportColumns);\n        }\n        return previousValue += daysDiff;\n      }).bind(this), 0);\n      if (detailed) {\n        this._addReportRow({ patientDays: 'Total: ' + this._numberFormat(patientDays) }, true, reportColumns);\n      } else {\n        this._addReportRow({ total: patientDays }, false, reportColumns);\n      }\n      this._finishReport(reportColumns);\n    },\n\n    _generateProcedureReport: function _generateProcedureReport(reportType) {\n      this._findProceduresByDate().then((function (procedures) {\n        var reportColumns = undefined;\n        procedures = procedures.filter(function (procedure) {\n          var visit = procedure.get('visit');\n          if (_ember['default'].isEmpty(visit) || _ember['default'].isEmpty(visit.get('patient.id')) || visit.get('patient.archived') === true) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        if (reportType.indexOf('detailed') === 0) {\n          reportColumns = this.get('procedureDetailReportColumns');\n          procedures.forEach(function (procedure) {\n            procedure.set('patient', procedure.get('visit.patient'));\n          });\n          var procedureTotals = this._totalByType(procedures, 'description', 'all procedures');\n          this._addPatientProcedureRows(procedureTotals, reportColumns);\n          this._finishReport(reportColumns);\n        } else {\n          reportColumns = this.get('diagnosticReportColumns');\n          this._addRowsByType(procedures, 'description', 'Total procedures: ', reportColumns);\n          this._finishReport(reportColumns);\n        }\n      }).bind(this), (function (err) {\n        this._notifyReportError('Error in _generateProcedureReport: ' + err);\n      }).bind(this));\n    },\n\n    _generateStatusReport: function _generateStatusReport() {\n      this._findPatientsByStatus().then((function (patients) {\n        var reportColumns = this.get('statusReportColumns');\n        var sortedPatients = patients.sortBy('lastName', 'firstName');\n        this._getPatientVisits(sortedPatients).then((function (resolvedPatients) {\n          resolvedPatients.forEach((function (patient) {\n            this._addReportRow({ patient: patient }, false, reportColumns);\n          }).bind(this));\n          this._finishReport(reportColumns);\n        }).bind(this))['catch']((function (err) {\n          this._notifyReportError('Error in _generateStatusReport: ' + err);\n        }).bind(this));\n      }).bind(this))['catch']((function (err) {\n        this._notifyReportError('Error in _generateStatusReport: ' + err);\n      }).bind(this));\n    },\n\n    _generateVisitReport: function _generateVisitReport(visits) {\n      var _this2 = this;\n\n      var reportColumns = this.get('reportColumns');\n      var visitFilters = this.getProperties('examiner', 'visitDate', 'visitType', 'location', 'clinic', 'primaryDiagnosis', 'secondaryDiagnosis');\n      for (var filter in visitFilters) {\n        if (!_ember['default'].isEmpty(visitFilters[filter])) {\n          switch (filter) {\n            case 'diagnosis':\n              {\n                visits = this._filterByLike(visits, 'diagnosisList', visitFilters[filter]);\n                break;\n              }\n            default:\n              {\n                visits = visits.filterBy(filter, visitFilters[filter]);\n                break;\n              }\n          }\n        }\n      }\n      if (reportColumns.procedures.include) {\n        (function () {\n          var promisesMap = {};\n          visits.forEach(function (visit) {\n            promisesMap[visit.get('id')] = visit.get('procedures');\n          });\n          _ember['default'].RSVP.hash(promisesMap).then((function (resolutionHash) {\n            visits.forEach(function (visit) {\n              visit.set('resolvedProcedures', resolutionHash[visit.get('id')]);\n            });\n            this._finishVisitReport(visits);\n          }).bind(_this2));\n        })();\n      } else {\n        this._finishVisitReport(visits);\n      }\n    },\n\n    _getPatientVisits: function _getPatientVisits(patients) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var visitHash = {};\n        patients.forEach((function (patient) {\n          visitHash[patient.get('id')] = this.getPatientVisits(patient);\n        }).bind(this));\n        _ember['default'].RSVP.hash(visitHash).then(function (resolvedHash) {\n          patients.forEach(function (patient) {\n            patient.set('visits', resolvedHash[patient.get('id')]);\n          });\n          resolve(patients);\n        }, reject);\n      }).bind(this));\n    },\n\n    _haveLikeValue: function _haveLikeValue(valueToCompare, likeCondition) {\n      return valueToCompare.toLowerCase().indexOf(likeCondition.toLowerCase()) > -1;\n    },\n\n    _listToString: function _listToString(items, descField, dateField) {\n      var itemList = [];\n      if (!_ember['default'].isEmpty(items)) {\n        itemList = items.map((function (item) {\n          return _ember['default'].get(item, descField) + ' ( ' + this._dateFormat(_ember['default'].get(item, dateField)) + ')';\n        }).bind(this));\n      }\n      return itemList.join(',\\n');\n    },\n\n    /**\n     * Given a list of records, total them by type and also add a grand total.\n     * @param records {Array} list of records to total.\n     * @param typeField {String} the field in the records containing the type.\n     * @param totalLabel {String} the label for the grand total.\n     * @param reportColumns\n     */\n    _totalByType: function _totalByType(records, typeField, totalLabel) {\n      var total = 0;\n      var types = [];\n      records.forEach(function (record) {\n        var type = record.get(typeField);\n        var typeObject = undefined;\n        if (!_ember['default'].isEmpty(type)) {\n          typeObject = types.find(function (item) {\n            var itemType = item.type;\n            return itemType.trim().toLowerCase() === type.toLowerCase();\n          });\n          if (_ember['default'].isEmpty(typeObject)) {\n            typeObject = {\n              type: type.trim(),\n              total: 0,\n              records: []\n            };\n            types.push(typeObject);\n          }\n          typeObject.total++;\n          typeObject.records.push(record);\n          total++;\n        }\n      });\n      types = types.sortBy('type');\n      types.push({ type: totalLabel, total: total });\n      return types;\n    },\n\n    _procedureListToString: function _procedureListToString(procedures) {\n      return this._listToString(procedures, 'description', 'procedureDate');\n    },\n\n    _validateDates: function _validateDates() {\n      var alertMessage = undefined;\n      var endDate = this.get('endDate');\n      var isValid = true;\n      var reportType = this.get('reportType');\n      var startDate = this.get('startDate');\n      if (reportType === 'status') {\n        return true;\n      }\n      if (_ember['default'].isEmpty(startDate)) {\n        alertMessage = 'Please enter a start date.';\n        isValid = false;\n      } else if (!_ember['default'].isEmpty(endDate) && endDate.getTime() < startDate.getTime()) {\n        alertMessage = 'Please enter an end date after the start date.';\n        isValid = false;\n      }\n      if (!isValid) {\n        this.displayAlert('Error Generating Report', alertMessage);\n      }\n      return isValid;\n    },\n\n    actions: {\n      generateReport: function generateReport() {\n        var _this3 = this;\n\n        if (this._validateDates()) {\n          (function () {\n            var reportRows = _this3.get('reportRows');\n            var reportType = _this3.get('reportType');\n            reportRows.clear();\n            _this3.showProgressModal();\n            switch (reportType) {\n              case 'diagnostic':\n                {\n                  _this3._generateDiagnosticReport();\n                  break;\n                }\n              case 'detailedProcedures':\n              case 'procedures':\n                {\n                  _this3._generateProcedureReport(reportType);\n                  break;\n                }\n              case 'admissions':\n              case 'discharges':\n              case 'detailedAdmissions':\n              case 'detailedDischarges':\n              case 'detailedPatientDays':\n              case 'patientDays':\n              case 'visit':\n                {\n                  _this3._findVisitsByDate().then((function (visits) {\n                    switch (reportType) {\n                      case 'admissions':\n                      case 'detailedAdmissions':\n                      case 'detailedDischarges':\n                      case 'discharges':\n                        {\n                          this._generateAdmissionOrDischargeReport(visits, reportType);\n                          break;\n                        }\n                      case 'detailedPatientDays':\n                      case 'patientDays':\n                        {\n                          this._generatePatientDaysReport(visits, reportType);\n                          break;\n                        }\n                      case 'visit':\n                        {\n                          this._generateVisitReport(visits);\n                          break;\n                        }\n                    }\n                  }).bind(_this3), (function (err) {\n                    this._notifyReportError('Error in _findVisitsByDate: ' + err);\n                  }).bind(_this3));\n                  break;\n                }\n              case 'status':\n                {\n                  _this3._generateStatusReport();\n                  break;\n                }\n            }\n          })();\n        }\n      },\n      viewPatient: function viewPatient(id) {\n        this.store.find('patient', id).then((function (item) {\n          item.set('returnTo', 'patients.reports');\n          this.transitionToRoute('patients.edit', item);\n        }).bind(this));\n      }\n\n    }\n  });\n});","define('hospitalrun/tests/patients/reports/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/reports/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/reports/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    pageTitle: _ember['default'].computed('i18n.locale', function () {\n      return (0, _emberI18n.translationMacro)('patients.titles.patientReport');\n    }),\n\n    // No model for reports; data gets retrieved when report is run.\n    model: function model() {\n      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));\n    }\n\n  });\n});","define('hospitalrun/tests/patients/reports/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/reports/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/reports/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/patient-id', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsPatientId, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsPatientId['default'], {\n    addCapability: 'add_patient',\n    additionalModels: [{\n      name: 'addressOptions',\n      findArgs: ['option', 'address_options']\n    }, {\n      name: 'clinicList',\n      findArgs: ['lookup', 'clinic_list']\n    }, {\n      name: 'countryList',\n      findArgs: ['lookup', 'country_list']\n    }, {\n      name: 'diagnosisList',\n      findArgs: ['lookup', 'diagnosis_list']\n    }, {\n      name: 'locationList',\n      findArgs: ['lookup', 'visit_location_list']\n    }, {\n      name: 'physicianList',\n      findArgs: ['lookup', 'physician_list']\n    }, {\n      name: 'pricingProfiles',\n      findArgs: ['price-profile']\n    }, {\n      name: 'procedureList',\n      findArgs: ['lookup', 'procedure_list']\n    }, {\n      name: 'sexList',\n      findArgs: ['lookup', 'sex']\n    }, {\n      name: 'socialCustomForms',\n      queryArgs: ['custom-form', {\n        options: {\n          key: 'socialwork'\n        },\n        mapReduce: 'custom_form_by_type'\n      }]\n    }, {\n      name: 'statusList',\n      findArgs: ['lookup', 'patient_status_list']\n    }, {\n      name: 'visitTypesList',\n      findArgs: ['lookup', 'visit_types']\n    }],\n\n    actions: {\n      createNewVisit: function createNewVisit(patient, requestedFromPatient) {\n        var typeOfNewVisit = 'checkin';\n        if (requestedFromPatient) {\n          typeOfNewVisit = 'new';\n        }\n        this.transitionTo('visits.edit', typeOfNewVisit).then(function (newRoute) {\n          if (requestedFromPatient) {\n            newRoute.currentModel.set('returnToPatient', patient.get('id'));\n          } else {\n            newRoute.currentModel.set('returnTo', 'patients');\n          }\n          newRoute.currentModel.set('patient', patient);\n          newRoute.currentModel.set('hidePatientSelection', true);\n          newRoute.controller.getPatientDiagnoses(patient, newRoute.currentModel);\n        });\n      }\n    },\n    newButtonText: (0, _emberI18n.translationMacro)('patients.buttons.newPatient'),\n    moduleName: 'patients'\n  });\n});","define('hospitalrun/tests/patients/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/search/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsIndexController['default'].extend();\n});","define('hospitalrun/tests/patients/search/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/search/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/search/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'patients',\n    searchKeys: [{\n      name: 'friendlyId',\n      type: 'contains'\n    }, {\n      name: 'externalPatientId',\n      type: 'contains'\n    }, {\n      name: 'firstName',\n      type: 'fuzzy'\n    }, {\n      name: 'lastName',\n      type: 'fuzzy'\n    }, {\n      name: 'phone',\n      type: 'contains'\n    }],\n    searchModel: 'patient'\n  });\n});","define('hospitalrun/tests/patients/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/socialwork/expense/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/utils/select-values', 'ember-i18n'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunUtilsSelectValues, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    patientsController: _ember['default'].inject.controller('patients'),\n\n    categoryTypes: ['Clothing', 'Education', 'Electricity', 'Food', 'Fuel', 'Other', 'Rent', 'Transportation', 'Water'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap),\n\n    editController: _ember['default'].computed.alias('patientsController'),\n    showUpdateButton: true,\n    title: (0, _emberI18n.translationMacro)('patients.titles.socialWork'),\n    updateButtonAction: 'update',\n\n    updateButtonText: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('buttons.add');\n      } else {\n        return this.get('i18n').t('buttons.update');\n      }\n    }).property('model.isNew'),\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        var model = this.get('model');\n        this.get('editController').send('updateExpense', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/socialwork/expense/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/socialwork/expense/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/socialwork/expense/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/socialwork/family-info/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'ember-i18n'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    patientsController: _ember['default'].inject.controller('patients'),\n\n    editController: _ember['default'].computed.alias('patientsController'),\n    showUpdateButton: true,\n    title: (0, _emberI18n.translationMacro)('patients.titles.familyInfo'),\n    updateButtonAction: 'update',\n\n    updateButtonText: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('buttons.add');\n      } else {\n        return this.get('i18n').t('buttons.update');\n      }\n    }).property('model.isNew'),\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        var model = this.get('model');\n        this.get('editController').send('updateFamilyInfo', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/socialwork/family-info/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/socialwork/family-info/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/socialwork/family-info/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: 'Delete Pricing Item'\n  });\n});","define('hospitalrun/tests/pricing/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/return-to', 'hospitalrun/utils/select-values'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsReturnTo, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var isEmpty = _ember['default'].isEmpty;\n\n  var IMAGING_PRICING_TYPE = 'Imaging Procedure';\n  var LAB_PRICING_TYPE = 'Lab Procedure';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsReturnTo['default'], {\n    pricingController: _ember['default'].inject.controller('pricing'),\n\n    actions: {\n      addOverride: function addOverride(override) {\n        var pricingOverrides = this.get('model.pricingOverrides');\n        pricingOverrides.addObject(override);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n      categoryChanged: function categoryChanged(category) {\n        var model = this.get('model');\n        var pricingType = model.get('pricingType');\n        model.set('category', category);\n        if (!isEmpty(category)) {\n          if (category === 'Imaging') {\n            model.set('pricingType', IMAGING_PRICING_TYPE);\n          } else if (category === 'Lab') {\n            model.set('pricingType', LAB_PRICING_TYPE);\n          } else {\n            var pricingTypeValues = this.get('pricingTypes.value');\n            if (isEmpty(pricingTypeValues) || !pricingTypeValues.includes(pricingType)) {\n              model.set('pricingType');\n            }\n          }\n        }\n      },\n      deleteOverride: function deleteOverride(model) {\n        var overrideToDelete = model.overrideToDelete;\n\n        var pricingOverrides = this.get('model.pricingOverrides');\n        pricingOverrides.removeObject(overrideToDelete);\n        overrideToDelete.destroyRecord().then((function () {\n          this.send('update', true);\n          this.send('closeModal');\n        }).bind(this));\n      },\n      editOverride: function editOverride(overrideToEdit) {\n        if (isEmpty(overrideToEdit)) {\n          overrideToEdit = this.store.createRecord('override-price');\n        }\n        this.send('openModal', 'pricing.override', overrideToEdit);\n      },\n      showDeleteOverride: function showDeleteOverride(overrideToDelete) {\n        var message = 'Are you sure you want to delete this override?';\n        var model = _ember['default'].Object.create({\n          overrideToDelete: overrideToDelete\n        });\n        var title = 'Delete Override';\n        this.displayConfirm(title, message, 'deleteOverride', model);\n      }\n    },\n\n    categories: ['Imaging', 'Lab', 'Procedure', 'Ward'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    expenseAccountList: computed.alias('pricingController.expenseAccountList'),\n    procedurePricingTypes: computed.alias('pricingController.procedurePricingTypes'),\n    wardPricingTypes: computed.alias('pricingController.wardPricingTypes'),\n\n    lookupListsToUpdate: computed('model.category', function () {\n      var category = this.get('model.category').toLowerCase();\n      var listsToUpdate = [{\n        name: 'expenseAccountList',\n        property: 'model.expenseAccount',\n        id: 'expense_account_list'\n      }];\n      var showPricingType = this.get('showPricingType');\n      if (showPricingType) {\n        listsToUpdate.push({\n          name: category + 'PricingTypes',\n          property: 'model.pricingType',\n          id: category + '_pricing_types'\n        });\n      }\n      return listsToUpdate;\n    }),\n\n    pricingTypes: computed('model.category', function () {\n      var category = this.get('model.category');\n      if (!isEmpty(category)) {\n        var typesList = this.get(category.toLowerCase() + 'PricingTypes');\n        return typesList;\n      }\n    }),\n\n    showPricingType: computed('model.category', function () {\n      var model = this.get('model');\n      var category = model.get('category');\n      if (category === 'Imaging' || category === 'Lab') {\n        return false;\n      } else {\n        return true;\n      }\n    }),\n\n    updateCapability: 'add_pricing',\n\n    afterUpdate: function afterUpdate(record) {\n      var message = 'The pricing record for ' + record.get('name') + ' has been saved.';\n      this.displayAlert('Pricing Item Saved', message);\n    }\n  });\n});","define('hospitalrun/tests/pricing/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: 'Edit Pricing Item',\n    modelName: 'pricing',\n    newTitle: 'New Pricing Item',\n\n    actions: {\n      deleteOverride: function deleteOverride(overrideToDelete) {\n        this.controller.send('deleteOverride', overrideToDelete);\n      }\n    },\n\n    getNewData: function getNewData(params) {\n      var newCategory = params.pricing_id.substr(3);\n      if (_ember['default'].isEmpty(newCategory)) {\n        newCategory = 'Imaging';\n      }\n      return _ember['default'].RSVP.resolve({\n        category: newCategory\n      });\n    },\n\n    model: function model(params) {\n      var idParam = this.get('idParam');\n      if (!_ember['default'].isEmpty(idParam) && params[idParam].indexOf('new') === 0) {\n        return this._createNewRecord(params);\n      } else {\n        return this._super(params);\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/pricing/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/imaging/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/imaging/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/imaging/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/imaging/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/imaging/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({\n    category: 'Imaging',\n    pageTitle: 'Imaging Pricing',\n\n    actions: {\n      editItem: function editItem(item) {\n        item.set('returnTo', 'pricing.imaging');\n        this.transitionTo('pricing.edit', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/imaging/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/imaging/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/imaging/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    addPermission: 'add_pricing',\n    deletePermission: 'delete_pricing',\n    showCategory: true,\n    startKey: []\n  });\n});","define('hospitalrun/tests/pricing/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    category: null,\n    modelName: 'pricing',\n    pageTitle: 'All Pricing Items',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var category = item.get('category');\n      var id = this._getPouchIdFromItem(item);\n      var name = item.get('name');\n      var pricingType = item.get('pricingType');\n      return [category, name, pricingType, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var category = this.get('category');\n      var maxId = this._getMaxPouchId();\n      var queryParams = {\n        mapReduce: 'pricing_by_category'\n      };\n      if (!_ember['default'].isEmpty(category)) {\n        queryParams.options = {\n          startkey: [category, null, null, null],\n          endkey: [category, {}, {}, maxId]\n        };\n      }\n      return queryParams;\n    },\n\n    actions: {\n      newItem: function newItem() {\n        if (this.currentUserCan('add_pricing')) {\n          var routeId = 'new';\n          var routeParts = this.routeName.split('.');\n          if (routeParts.length === 2 && routeParts[1] !== 'index') {\n            routeId += routeParts[1].capitalize();\n          }\n          this.transitionTo('pricing.edit', routeId);\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/lab/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/lab/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/lab/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/lab/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/lab/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({\n    category: 'Lab',\n    pageTitle: 'Lab Pricing',\n\n    actions: {\n      editItem: function editItem(item) {\n        item.set('returnTo', 'pricing.lab');\n        this.transitionTo('pricing.edit', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/lab/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/lab/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/lab/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/override/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    pricingController: _ember['default'].inject.controller('pricing'),\n\n    actions: {\n      cancel: function cancel() {\n        this.get('model').rollbackAttributes();\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        var isNew = this.get('model.isNew');\n        var override = this.get('model');\n        override.save().then((function () {\n          if (isNew) {\n            this.get('editController').send('addOverride', override);\n          } else {\n            this.send('closeModal');\n          }\n        }).bind(this));\n      }\n    },\n\n    editController: _ember['default'].inject.controller('pricing/edit'),\n    pricingProfiles: _ember['default'].computed.map('pricingController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),\n    showUpdateButton: true,\n\n    title: (function () {\n      if (this.get('model.isNew')) {\n        return 'Add Override';\n      } else {\n        return 'Edit Override';\n      }\n    }).property('model.isNew'),\n\n    updateButtonAction: 'update',\n    updateButtonText: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return 'Add';\n      } else {\n        return 'Update';\n      }\n    }).property('model.isNew')\n\n  });\n});","define('hospitalrun/tests/pricing/override/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/override/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/override/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/procedure/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/procedure/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/procedure/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/procedure/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/procedure/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({\n    category: 'Procedure',\n    pageTitle: 'Procedure Pricing',\n\n    actions: {\n      editItem: function editItem(item) {\n        item.set('returnTo', 'pricing.procedure');\n        this.transitionTo('pricing.edit', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/procedure/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/procedure/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/procedure/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/profiles/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    addPermission: 'add_pricing_profile',\n    deletePermission: 'delete_pricing_profile'\n  });\n});","define('hospitalrun/tests/pricing/profiles/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/profiles/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/profiles/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/profiles/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      }\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      var message = 'The pricing profile ' + record.get('name') + ' has been saved.';\n      this.displayAlert('Pricing Profile Saved', message, 'refreshProfiles');\n    },\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return 'New Pricing Profile';\n      } else {\n        return 'Edit Pricing Profile';\n      }\n    }).property('model.isNew')\n  });\n});","define('hospitalrun/tests/pricing/profiles/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/profiles/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/profiles/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/profiles/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'hospitalrun/mixins/modal-helper'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _hospitalrunMixinsModalHelper) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsModalHelper['default'], {\n    category: null,\n    modelName: 'price-profile',\n    pageTitle: 'Pricing Profiles',\n\n    actions: {\n      editItem: function editItem(item) {\n        this.send('openModal', 'pricing.profiles.edit', item);\n      },\n\n      deleteItem: function deleteItem(item) {\n        var message = 'Are you sure you want to delete this profile?';\n        var model = _ember['default'].Object.create({\n          itemToDelete: item\n        });\n        var title = 'Delete Profile';\n        this.displayConfirm(title, message, 'deletePricingProfile', model);\n      },\n\n      deletePricingProfile: function deletePricingProfile(model) {\n        model.itemToDelete.set('archived', true);\n        model.itemToDelete.save().then(function () {\n          model.itemToDelete.unloadRecord();\n        });\n      },\n\n      newItem: function newItem() {\n        var newItem = this.store.createRecord('price-profile');\n        this.send('openModal', 'pricing.profiles.edit', newItem);\n      },\n\n      refreshProfiles: function refreshProfiles() {\n        this.refresh();\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/profiles/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/profiles/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/profiles/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_pricing',\n    additionalModels: [{\n      name: 'expenseAccountList',\n      findArgs: ['lookup', 'expense_account_list']\n    }, {\n      name: 'procedurePricingTypes',\n      findArgs: ['lookup', 'procedure_pricing_types']\n    }, {\n      name: 'pricingProfiles',\n      findArgs: ['price-profile']\n    }, {\n      name: 'wardPricingTypes',\n      findArgs: ['lookup', 'ward_pricing_types']\n    }],\n    allowSearch: true,\n    moduleName: 'pricing',\n    newButtonText: '+ new item',\n    sectionTitle: 'Pricing',\n    subActions: [{\n      text: 'All Pricing Items',\n      linkTo: 'pricing.index'\n    }, {\n      text: 'Imaging Pricing',\n      linkTo: 'pricing.imaging'\n    }, {\n      text: 'Lab Pricing',\n      linkTo: 'pricing.lab'\n    }, {\n      text: 'Procedure Pricing',\n      linkTo: 'pricing.procedure'\n    }, {\n      text: 'Ward Pricing',\n      linkTo: 'pricing.ward'\n    }, {\n      text: 'Pricing Profiles',\n      linkTo: 'pricing.profiles'\n    }]\n  });\n});","define('hospitalrun/tests/pricing/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/search/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/search/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/search/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/search/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'pricing',\n    searchKeys: [{\n      'name': 'fuzzy'\n    }],\n    searchModel: 'pricing'\n  });\n});","define('hospitalrun/tests/pricing/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/ward/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/ward/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/ward/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/ward/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/ward/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({\n    category: 'Ward',\n    pageTitle: 'Ward Pricing',\n\n    actions: {\n      editItem: function editItem(item) {\n        item.set('returnTo', 'pricing.ward');\n        this.transitionTo('pricing.edit', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/ward/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/ward/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/ward/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/print/invoice/controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var alias = _ember['default'].computed.alias;\n  exports['default'] = _ember['default'].Controller.extend({\n\n    invoicesController: _ember['default'].inject.controller('invoices'),\n\n    logoURL: alias('invoicesController.printHeader.value.logoURL'),\n    facilityName: alias('invoicesController.printHeader.value.facilityName'),\n    headerLine1: alias('invoicesController.printHeader.value.headerLine1'),\n    headerLine2: alias('invoicesController.printHeader.value.headerLine2'),\n    headerLine3: alias('invoicesController.printHeader.value.headerLine3'),\n\n    actions: {\n      returnToInvoice: function returnToInvoice() {\n        console.log(this.get('model'));\n        this.transitionTo('invoices.edit', this.get('model'));\n      }\n    }\n  });\n});","define('hospitalrun/tests/print/invoice/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - print/invoice/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'print/invoice/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/procedures/charge/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    cancelAction: 'closeModal',\n    newCharge: false,\n    newPricingItem: false,\n    requestingController: _ember['default'].inject.controller('procedures/edit'),\n    database: _ember['default'].inject.service(),\n    pricingList: _ember['default'].computed.alias('requestingController.pricingList'),\n    selectedItem: null,\n    updateCapability: 'add_charge',\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('procedures.titles.addChargeItem');\n      }\n      return this.get('i18n').t('procedures.titles.editChargeItem');\n    }).property('model.isNew'),\n\n    beforeUpdate: function beforeUpdate() {\n      var _this = this;\n\n      this.set('newCharge', this.get('model.isNew'));\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var model = _this.get('model');\n        var pricingItem = model.get('pricingItem');\n        var selectedItem = _this.get('selectedItem');\n        if (!_ember['default'].isEmpty(selectedItem) && (_ember['default'].isEmpty(pricingItem) || selectedItem.id !== pricingItem.get('id'))) {\n          _this.store.find('pricing', selectedItem.id).then(function (item) {\n            model.set('pricingItem', item);\n            resolve();\n          });\n        } else {\n          (function () {\n            var newItem = false;\n            var saveItem = false;\n            if (_ember['default'].isEmpty(pricingItem)) {\n              pricingItem = _this.store.createRecord('pricing', {\n                name: model.get('itemName'),\n                category: model.get('pricingCategory')\n              });\n              newItem = true;\n              saveItem = true;\n            } else {\n              if (pricingItem.get('name') !== model.get('itemName')) {\n                pricingItem.set('name', model.get('itemName'));\n                saveItem = true;\n              }\n            }\n            if (saveItem) {\n              pricingItem.save().then(function () {\n                var pricingList = _this.get('pricingList');\n                if (newItem) {\n                  pricingList.addObject({\n                    id: pricingItem.get('id'),\n                    name: pricingItem.get('name')\n                  });\n                  model.set('pricingItem', pricingItem);\n                } else {\n                  var itemToUpdate = pricingList.findBy('id', pricingItem.get('id'));\n                  itemToUpdate.name = pricingItem.get('name');\n                }\n                resolve();\n              }, reject);\n            } else {\n              resolve();\n            }\n          })();\n        }\n      });\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      if (this.get('newCharge') === true) {\n        this.get('requestingController').send('addCharge', record);\n      } else {\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/procedures/charge/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - procedures/charge/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'procedures/charge/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/procedures/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    visitsController: _ember['default'].inject.controller('visits'),\n\n    chargePricingCategory: 'Procedure',\n    chargeRoute: 'procedures.charge',\n\n    anesthesiaTypes: _ember['default'].computed.alias('visitsController.anesthesiaTypes'),\n    anesthesiologistList: _ember['default'].computed.alias('visitsController.anesthesiologistList'),\n    cptCodeList: _ember['default'].computed.alias('visitsController.cptCodeList'),\n    medicationList: null,\n    physicianList: _ember['default'].computed.alias('visitsController.physicianList'),\n    procedureList: _ember['default'].computed.alias('visitsController.procedureList'),\n    procedureLocations: _ember['default'].computed.alias('visitsController.procedureLocations'),\n    lookupListsToUpdate: [{\n      name: 'anesthesiaTypes',\n      property: 'model.anesthesiaType',\n      id: 'anesthesia_types'\n    }, {\n      name: 'anesthesiologistList',\n      property: 'model.anesthesiologist',\n      id: 'anesthesiologists'\n    }, {\n      name: 'cptCodeList',\n      property: 'model.cptCode',\n      id: 'cpt_code_list'\n    }, {\n      name: 'physicianList',\n      property: 'model.assistant',\n      id: 'physician_list'\n    }, {\n      name: 'physicianList',\n      property: 'model.physician',\n      id: 'physician_list'\n    }, {\n      name: 'procedureList',\n      property: 'model.description',\n      id: 'procedure_list'\n    }, {\n      name: 'procedureLocations',\n      property: 'model.location',\n      id: 'procedure_locations'\n    }],\n\n    editController: _ember['default'].inject.controller('visits/edit'),\n    pricingList: null, // This gets filled in by the route\n    pricingTypes: _ember['default'].computed.alias('visitsController.procedurePricingTypes'),\n    newProcedure: false,\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('procedures.titles.add');\n      }\n      return this.get('i18n').t('procedures.titles.edit');\n    }).property('model.isNew'),\n\n    updateCapability: 'add_procedure',\n\n    actions: {\n      showAddMedication: function showAddMedication() {\n        var newCharge = this.get('store').createRecord('proc-charge', {\n          dateCharged: new Date(),\n          newMedicationCharge: true,\n          quantity: 1\n        });\n        this.send('openModal', 'procedures.medication', newCharge);\n      },\n\n      showEditMedication: function showEditMedication(charge) {\n        var medicationList = this.get('medicationList');\n        var selectedMedication = medicationList.findBy('id', charge.get('medication.id'));\n        charge.set('itemName', selectedMedication.name);\n        this.send('openModal', 'procedures.medication', charge);\n      },\n\n      showDeleteMedication: function showDeleteMedication(charge) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          closeModalOnConfirm: false,\n          confirmAction: 'deleteCharge',\n          title: this.get('i18n').t('procedures.titles.deleteMedicationUsed'),\n          name: this.get('i18n').t('models.medication.names.singular'),\n          message: this.get('i18n').t('messages.delete_singular', { name: this.name }),\n          chargeToDelete: charge,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this.updateCharges().then((function () {\n          if (this.get('model.isNew')) {\n            this.addChildToVisit(this.get('model'), 'procedures').then(resolve, reject);\n          } else {\n            resolve();\n          }\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    afterUpdate: function afterUpdate() {\n      var alertTitle = this.get('i18n').t('procedures.titles.saved');\n      var alertMessage = this.get('i18n').t('procedures.messages.saved');\n      this.saveVisitIfNeeded(alertTitle, alertMessage);\n    }\n  });\n});","define('hospitalrun/tests/procedures/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - procedures/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'procedures/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/procedures/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/add-to-patient-route', 'hospitalrun/mixins/charge-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsAddToPatientRoute, _hospitalrunMixinsChargeRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsAddToPatientRoute['default'], _hospitalrunMixinsChargeRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('procedures.titles.edit'),\n    modelName: 'procedure',\n    newTitle: (0, _emberI18n.translationMacro)('procedures.titles.new'),\n    pricingCategory: 'Procedure',\n    database: _ember['default'].inject.service(),\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        procedureDate: new Date()\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      var medicationQuery = {\n        key: 'Medication',\n        include_docs: true\n      };\n      this.get('database').queryMainDB(medicationQuery, 'inventory_by_type').then(function (result) {\n        var medicationList = result.rows.map(function (medication) {\n          return medication.doc;\n        });\n        controller.set('medicationList', medicationList);\n      });\n    }\n  });\n});","define('hospitalrun/tests/procedures/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - procedures/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'procedures/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/procedures/medication/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    cancelAction: 'closeModal',\n    newCharge: false,\n    requestingController: _ember['default'].inject.controller('procedures/edit'),\n    medicationList: _ember['default'].computed.alias('requestingController.medicationList'),\n\n    updateCapability: 'add_charge',\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('procedures.titles.addMedicationUsed');\n      }\n      return this.get('i18n').t('procedures.titles.editMedicationUsed');\n    }).property('model.isNew'),\n\n    beforeUpdate: function beforeUpdate() {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        this.set('newCharge', true);\n        var model = this.get('model');\n        var inventoryItem = model.get('inventoryItem');\n        model.set('medication', inventoryItem);\n        model.set('medicationTitle', inventoryItem.get('name'));\n        model.set('priceOfMedication', inventoryItem.get('price'));\n      }\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      if (this.get('newCharge')) {\n        this.get('requestingController').send('addCharge', record);\n      } else {\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/procedures/medication/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - procedures/medication/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'procedures/medication/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {\n  'use strict';\n\n  exports['default'] = _emberResolver['default'];\n});","define('hospitalrun/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/router', ['exports', 'ember', 'hospitalrun/tests/config/environment'], function (exports, _ember, _hospitalrunTestsConfigEnvironment) {\n  'use strict';\n\n  var Router = _ember['default'].Router.extend({\n    location: _hospitalrunTestsConfigEnvironment['default'].locationType,\n    rootURL: _hospitalrunTestsConfigEnvironment['default'].rootURL\n  });\n\n  Router.map(function () {\n    this.route('admin', function () {\n      this.route('address');\n      this.route('print-header');\n      this.route('custom-forms', function () {\n        this.route('edit', { path: '/edit/:custom-form_id' });\n      });\n      this.route('loaddb');\n      this.route('inc-category', {\n        resetNamespace: true\n      }, function () {\n        this.route('edit', { path: '/edit/:inc-category_id' });\n      });\n      this.route('lookup', { path: '/' });\n      this.route('textreplace');\n      this.route('users', {\n        resetNamespace: true\n      }, function () {\n        this.route('edit', { path: '/edit/:user_id' });\n      });\n      this.route('roles');\n      this.route('query');\n      this.route('visit-forms');\n      this.route('workflow');\n    });\n\n    this.route('appointments', function () {\n      this.route('edit', { path: '/edit/:appointment_id' });\n      this.route('search');\n      this.route('today');\n      this.route('calendar');\n      this.route('theater');\n    });\n\n    this.route('finishgauth', { path: '/finishgauth/:s1/:s2/:k/:t/:i/:p' });\n\n    this.route('index', { path: '/' });\n\n    this.route('imaging', function () {\n      this.route('completed');\n      this.route('edit', { path: '/edit/:imaging_id' });\n    });\n\n    this.route('inventory', function () {\n      this.route('barcode', { path: '/barcode/:inventory_id' });\n      this.route('edit', { path: '/edit/:inventory_id' });\n      this.route('batch', { path: '/batch/:inventory-batch_id' });\n      this.route('listing');\n      this.route('reports');\n      this.route('request', { path: '/request/:inv-request_id' });\n      this.route('search', { path: '/search/:search_text' });\n    });\n\n    this.route('incident', function () {\n      this.route('completed');\n      this.route('edit', { path: '/edit/:incident_id' });\n      this.route('reports');\n    });\n\n    this.route('invoices', function () {\n      this.route('review', { path: '/review/:invoice_id' });\n      this.route('edit', { path: '/edit/:invoice_id' });\n      this.route('search', { path: '/search/:search_text' });\n    });\n\n    this.route('labs', function () {\n      this.route('completed');\n      this.route('edit', { path: '/edit/:lab_id' });\n    });\n\n    this.route('login');\n\n    this.route('medication', function () {\n      this.route('completed');\n      this.route('edit', { path: '/edit/:medication_id' });\n      this.route('return', { path: '/return/:inv-request_id' });\n      this.route('search', { path: '/search/:search_text' });\n    });\n\n    this.route('patients', function () {\n      this.route('edit', { path: '/edit/:patient_id' });\n      this.route('reports');\n      this.route('admitted');\n      this.route('search', { path: '/search/:search_text' });\n      this.route('operative-plan', { path: '/operative-plan/:operative-plan_id' });\n      this.route('operation-report', { path: '/operation-report/:operation-report_id' });\n      this.route('outpatient');\n    });\n\n    this.route('pricing', function () {\n      this.route('imaging');\n      this.route('lab');\n      this.route('procedure');\n      this.route('ward');\n      this.route('edit', { path: '/edit/:pricing_id' });\n      this.route('search', { path: '/search/:search_text' });\n      this.route('profiles');\n    });\n\n    this.route('print', function () {\n      this.route('invoice', { path: '/invoice/:invoice_id' });\n    });\n\n    this.route('visits', function () {\n      this.route('edit', { path: '/edit/:visit_id' });\n      this.route('procedures', {\n        resetNamespace: true\n      }, function () {\n        this.route('edit', { path: '/edit/:procedure_id' });\n      });\n      this.route('reports', function () {\n        this.route('edit', { path: '/edit/:report_id' });\n      });\n    });\n  });\n\n  exports['default'] = Router;\n});","define('hospitalrun/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/abstract-edit-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    editTitle: null,\n    hideNewButton: false,\n    modelName: null,\n    newTitle: null,\n\n    _createNewRecord: function _createNewRecord(params) {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        this.generateId().then((function (newId) {\n          this.getNewData(params).then((function (data) {\n            var modelName = get(this, 'modelName');\n            if (newId) {\n              data.id = newId;\n            }\n            if (newId && this.store.hasRecordForId(modelName, newId)) {\n              resolve(this.store.push(this.store.normalize(modelName, data)));\n            } else {\n              resolve(this.store.createRecord(modelName, data));\n            }\n          }).bind(this));\n        }).bind(this));\n      }).bind(this));\n    },\n\n    idParam: (function () {\n      var modelName = get(this, 'modelName');\n      return modelName + '_id';\n    }).property('modelName'),\n\n    /**\n     * Override this function to generate an id for a new record\n     * @return a promise that will resolved to a generated id;default is null which means that an\n     * id will be automatically generated via Ember data.\n     */\n    generateId: function generateId() {\n      return _ember['default'].RSVP.resolve(null);\n    },\n\n    /**\n     * Override this function to define what data a new model should be instantiated with.\n     * @return a promise that will resolve with the data for a new record; defaults to empty object.\n     */\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({});\n    },\n\n    getScreenTitle: function getScreenTitle(model) {\n      if (get(model, 'isNew')) {\n        return get(this, 'newTitle');\n      } else {\n        return get(this, 'editTitle');\n      }\n    },\n\n    model: function model(params) {\n      var idParam = get(this, 'idParam');\n      if (!_ember['default'].isEmpty(idParam) && params[idParam] === 'new') {\n        return this._createNewRecord(params);\n      } else {\n        return this._super(params);\n      }\n    },\n\n    setupController: function setupController(controller, model) {\n      var sectionDetails = {};\n      sectionDetails.currentScreenTitle = this.getScreenTitle(model);\n      if (get(this, 'hideNewButton')) {\n        sectionDetails.newButtonAction = null;\n      }\n      this.send('setSectionHeader', sectionDetails);\n      this._super(controller, model);\n    }\n  });\n});","define('hospitalrun/tests/routes/abstract-edit-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/abstract-edit-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/abstract-edit-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/abstract-index-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsPouchdb, _hospitalrunMixinsProgressDialog) {\n  'use strict';\n\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsProgressDialog['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    database: _ember['default'].inject.service(),\n    filterParams: null,\n    firstKey: null,\n    hideNewButton: false,\n    itemsPerPage: 25,\n    modelName: null,\n    newButtonAction: null,\n    newButtonText: null,\n    nextStartKey: null,\n    pageTitle: null,\n\n    _getFilterParams: function _getFilterParams(params) {\n      var filterByList = [];\n      var filterParams = this.get('filterParams');\n      if (!isEmpty(filterParams)) {\n        filterParams.forEach(function (paramName) {\n          if (!isEmpty(params[paramName])) {\n            filterByList.push({\n              name: paramName,\n              value: params[paramName]\n            });\n          }\n        });\n      }\n      return filterByList;\n    },\n\n    _getMaxPouchId: function _getMaxPouchId() {\n      return this.get('database').getMaxPouchId(this.get('modelName').camelize());\n    },\n\n    _getMinPouchId: function _getMinPouchId() {\n      return this.get('database').getMinPouchId(this.get('modelName').camelize());\n    },\n\n    _getPouchIdFromItem: function _getPouchIdFromItem(item) {\n      return this.get('database').getPouchId(item.get('id'), this.get('modelName').camelize());\n    },\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      return item.get('id');\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      return {};\n    },\n\n    model: function model(params) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var filterParams = this._getFilterParams(params);\n        var modelName = this.get('modelName');\n        var itemsPerPage = this.get('itemsPerPage');\n        var queryParams = this._modelQueryParams(params);\n        if (!isEmpty(params.sortKey)) {\n          queryParams.sortKey = params.sortKey;\n          if (!isEmpty(params.sortDesc)) {\n            queryParams.sortDesc = params.sortDesc;\n          }\n        }\n        if (!isEmpty(filterParams)) {\n          queryParams.filterBy = filterParams;\n        }\n        if (isEmpty(queryParams.options)) {\n          queryParams.options = {};\n        }\n        if (!isEmpty(itemsPerPage)) {\n          queryParams.options.limit = itemsPerPage + 1;\n        }\n        if (!isEmpty(params.startKey)) {\n          queryParams.options.startkey = params.startKey;\n        }\n        this.store.query(modelName, queryParams).then((function (model) {\n          if (!isEmpty(itemsPerPage)) {\n            if (model.get('length') > 0) {\n              this.set('firstKey', this._getStartKeyFromItem(model.get('firstObject')));\n            }\n            if (model.get('length') > itemsPerPage) {\n              var lastItem = model.popObject();\n              this.set('nextStartKey', this._getStartKeyFromItem(lastItem));\n            } else {\n              this.set('nextStartKey');\n            }\n          }\n          resolve(model);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    queryParams: {\n      sortDesc: { refreshModel: true },\n      sortKey: { refreshModel: true },\n      startKey: { refreshModel: true }\n    },\n\n    setupController: function setupController(controller, model) {\n      var props = this.getProperties('firstKey', 'nextStartKey');\n      controller.setProperties(props);\n      var sectionDetails = {\n        currentScreenTitle: this.get('pageTitle')\n      };\n      if (this.get('hideNewButton')) {\n        sectionDetails.newButtonAction = null;\n      } else if (!isEmpty(this.get('newButtonAction'))) {\n        sectionDetails.newButtonAction = this.get('newButtonAction');\n      }\n      if (!isEmpty(this.get('newButtonText'))) {\n        sectionDetails.newButtonText = this.get('newButtonText');\n      }\n      this.send('setSectionHeader', sectionDetails);\n      this.closeProgressModal();\n      this._super(controller, model);\n    }\n  });\n});","define('hospitalrun/tests/routes/abstract-index-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/abstract-index-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/abstract-index-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/abstract-module-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n  /**\n   * Abstract route for top level modules (eg patients, inventory, users)\n   */\n  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsUserSession['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    addCapability: null,\n    additionalModels: null,\n    allowSearch: true,\n    currentScreenTitle: null,\n    moduleName: null,\n    newButtonText: null,\n    sectionTitle: null,\n    subActions: null,\n\n    editPath: (function () {\n      var module = this.get('moduleName');\n      return module + '.edit';\n    }).property('moduleName'),\n\n    deletePath: (function () {\n      var module = this.get('moduleName');\n      return module + '.delete';\n    }).property('moduleName'),\n\n    newButtonAction: (function () {\n      if (this.currentUserCan(this.get('addCapability'))) {\n        return 'newItem';\n      } else {\n        return null;\n      }\n    }).property(),\n\n    searchRoute: (function () {\n      var module = this.get('moduleName');\n      return '/' + module + '/search';\n    }).property('moduleName'),\n\n    actions: {\n      allItems: function allItems() {\n        this.transitionTo(this.get('moduleName') + '.index');\n      },\n      deleteItem: function deleteItem(item) {\n        var deletePath = this.get('deletePath');\n        this.send('openModal', deletePath, item);\n      },\n      editItem: function editItem(item) {\n        this.transitionTo(this.get('editPath'), item);\n      },\n      newItem: function newItem() {\n        if (this.currentUserCan(this.get('addCapability'))) {\n          this.transitionTo(this.get('editPath'), 'new');\n        }\n      },\n\n      /**\n       * Action to set items in the section header.\n       * @param details an object containing details to set on the section header.\n       * The following parameters are supported:\n       * - currentScreenTitle - The current screen title.\n       * - newButtonText - The text to display for the \"new\" button.\n       * - newButtonAction - The action to fire for the \"new\" button.\n       */\n      setSectionHeader: function setSectionHeader(details) {\n        var currentController = this.controllerFor(this.get('moduleName'));\n        currentController.setProperties(details);\n      }\n\n    },\n\n    /**\n     * Make sure the user has permissions to the module; if not reroute to index.\n     */\n    beforeModel: function beforeModel(transition) {\n      var moduleName = this.get('moduleName');\n      if (this.currentUserCan(moduleName)) {\n        return this._super(transition);\n      } else {\n        this.transitionTo('index');\n        return _ember['default'].RSVP.reject('Not available');\n      }\n    },\n\n    model: function model() {\n      if (!_ember['default'].isEmpty(this.additionalModels)) {\n        return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n          var promises = this.additionalModels.map((function (modelMap) {\n\n            if (modelMap.queryArgs) {\n              var _store;\n\n              return (_store = this.store).query.apply(_store, _toConsumableArray(modelMap.queryArgs));\n            } else if (modelMap.findArgs.length === 1) {\n              var _store2;\n\n              return (_store2 = this.store).findAll.apply(_store2, _toConsumableArray(modelMap.findArgs));\n            } else {\n              var _store3;\n\n              return (_store3 = this.store).find.apply(_store3, _toConsumableArray(modelMap.findArgs));\n            }\n          }).bind(this));\n          _ember['default'].RSVP.allSettled(promises, 'All additional Models for ' + this.get('moduleName')).then((function (array) {\n            array.forEach((function (item, index) {\n              if (item.state === 'fulfilled') {\n                this.set(this.additionalModels[index].name, item.value);\n              }\n            }).bind(this));\n            resolve();\n          }).bind(this), reject);\n        }).bind(this), 'Additional Models for ' + this.get('moduleName'));\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    renderTemplate: function renderTemplate() {\n      this.render('section');\n    },\n\n    setupController: function setupController(controller, model) {\n      var navigationController = this.controllerFor('navigation');\n      if (this.get('allowSearch') === true) {\n        navigationController.set('allowSearch', true);\n        navigationController.set('searchRoute', this.get('searchRoute'));\n      } else {\n        navigationController.set('allowSearch', false);\n      }\n      var currentController = this.controllerFor(this.get('moduleName'));\n      var propsToSet = this.getProperties('additionalButtons', 'currentScreenTitle', 'newButtonAction', 'newButtonText', 'sectionTitle', 'subActions');\n      currentController.setProperties(propsToSet);\n      if (!_ember['default'].isEmpty(this.additionalModels)) {\n        this.additionalModels.forEach((function (item) {\n          controller.set(item.name, this.get(item.name));\n        }).bind(this));\n      }\n      this._super(controller, model);\n    }\n\n  });\n});","define('hospitalrun/tests/routes/abstract-module-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/abstract-module-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/abstract-module-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/abstract-search-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember-data', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _emberData, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    searchKeys: null,\n    searchModel: null,\n    searchText: null,\n\n    _findByContains: function _findByContains(searchText) {\n      var searchKeys = this.get('searchKeys');\n      var searchModel = this.get('searchModel');\n      var queryParams = {\n        containsValue: {\n          value: searchText,\n          keys: searchKeys\n        }\n      };\n      return this.store.query(searchModel, queryParams);\n    },\n\n    model: function model(params) {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        var searchText = params.search_text;\n        this.controllerFor('navigation').set('currentSearchText', searchText);\n        this.set('searchText', searchText);\n        this._findByContains(searchText).then(resolve, (function (err) {\n          resolve(new _emberData['default'].AdapterPopulatedRecordArray());\n          throw new Error(err);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      if (!_ember['default'].isEmpty(model)) {\n        controller.set('hasRecords', model.get('length') > 0);\n      } else {\n        controller.set('hasRecords', false);\n      }\n      controller.set('searchText', this.get('searchText'));\n      this.controllerFor('navigation').closeProgressModal();\n      var parentController = this.controllerFor(this.get('moduleName'));\n      var searchTitle = 'Search Results for <i>' + _ember['default'].Handlebars.Utils.escapeExpression(this.get('searchText')) + '</i>';\n      parentController.set('currentScreenTitle', searchTitle.htmlSafe());\n    }\n\n  });\n});","define('hospitalrun/tests/routes/abstract-search-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/abstract-search-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/abstract-search-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/application', ['exports', 'ember-simple-auth/mixins/application-route-mixin', 'ember', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/setup-user-role', 'hospitalrun/utils/unauthorized-error'], function (exports, _emberSimpleAuthMixinsApplicationRouteMixin, _ember, _hospitalrunMixinsModalHelper, _hospitalrunMixinsSetupUserRole, _hospitalrunUtilsUnauthorizedError) {\n  'use strict';\n\n  function _instanceof(left, right) { if (right != null && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  var Route = _ember['default'].Route;\n  var set = _ember['default'].set;\n\n  var TRANSITION_AFTER_LOGIN = 'transitionAfterLogin';\n\n  var ApplicationRoute = Route.extend(_emberSimpleAuthMixinsApplicationRouteMixin['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsSetupUserRole['default'], {\n    database: inject.service(),\n    config: inject.service(),\n    session: inject.service(),\n    shouldSetupUserRole: true,\n\n    actions: {\n      closeModal: function closeModal() {\n        this.render('empty', {\n          outlet: 'modal',\n          into: 'application'\n        });\n      },\n\n      error: function error(reason, transition) {\n        var _this = this;\n\n        if (_instanceof(reason, _hospitalrunUtilsUnauthorizedError['default'])) {\n          (function () {\n            var i18n = _this.get('i18n');\n            var message = i18n.t('application.messages.sessionExpired');\n            var session = get(_this, 'session');\n            var title = i18n.t('application.titles.sessionExpired');\n            if (!isEmpty(transition)) {\n              var sessionStore = session.get('store');\n              var sessionData = session.get('data');\n              var transitionName = undefined;\n              if (transition.targetName) {\n                transitionName = transition.targetName;\n              } else {\n                transitionName = transition;\n              }\n              set(sessionData, TRANSITION_AFTER_LOGIN, transitionName);\n              sessionStore.persist(sessionData).then(function () {\n                _this.displayAlert(title, message, 'unauthorizeSession');\n              });\n            } else {\n              _this.displayAlert(title, message, 'unauthorizeSession');\n            }\n          })();\n        } else {\n          this._super(reason);\n        }\n      },\n\n      /**\n       * Render a modal using the specifed path and optionally set a model.\n       * @param modalPath the path to use for the controller and template.\n       * @param model (optional) the model to set on the controller for the modal.\n       */\n      openModal: function openModal(modalPath, model) {\n        if (model) {\n          set(this.controllerFor(modalPath), 'model', model);\n        }\n        this.renderModal(modalPath);\n      },\n\n      unauthorizeSession: function unauthorizeSession() {\n        var session = get(this, 'session');\n        if (get(session, 'isAuthenticated')) {\n          session.invalidate();\n        }\n      },\n\n      /**\n       * Update an open modal using the specifed model.\n       * @param modalPath the path to use for the controller and template.\n       * @param model (optional) the model to set on the controller for the modal.\n       */\n      updateModal: function updateModal(modalPath, model) {\n        set(this.controllerFor(modalPath), 'model', model);\n      }\n    },\n\n    model: function model(params, transition) {\n      var _this2 = this;\n\n      var session = get(this, 'session');\n      var isAuthenticated = session && get(session, 'isAuthenticated');\n      var config = get(this, 'config');\n      var database = get(this, 'database');\n\n      return config.setup().then(function () {\n        var standAlone = config.get('standAlone');\n        if (transition.targetName !== 'finishgauth' && transition.targetName !== 'login') {\n          set(_this2, 'shouldSetupUserRole', true);\n          if (isAuthenticated || standAlone) {\n            return database.setup()['catch'](function () {\n              // Error thrown indicates missing auth, so invalidate session.\n              session.invalidate();\n            });\n          }\n        } else if (transition.targetName === 'login' && standAlone) {\n          return database.createUsersDB();\n        } else if (transition.targetName === 'finishgauth') {\n          set(_this2, 'shouldSetupUserRole', false);\n        }\n      });\n    },\n\n    afterModel: function afterModel() {\n      var _this3 = this;\n\n      set(this.controllerFor('navigation'), 'allowSearch', false);\n      $('#apploading').remove();\n      this.get('config.configDB').get('current_user').then(function (user) {\n        var language = user.i18n || 'en';\n        _this3.set('i18n.locale', language);\n      });\n    },\n\n    renderModal: function renderModal(template) {\n      this.render(template, {\n        into: 'application',\n        outlet: 'modal'\n      });\n    },\n\n    sessionAuthenticated: function sessionAuthenticated() {\n      var _this4 = this;\n\n      if (get(this, 'shouldSetupUserRole') === true) {\n        this.setupUserRole();\n      }\n      var session = get(this, 'session');\n      var sessionData = session.get('data');\n      var transitionAfterLogin = get(sessionData, TRANSITION_AFTER_LOGIN);\n      if (!isEmpty(transitionAfterLogin)) {\n        var sessionStore = session.get('store');\n        set(sessionData, 'transitionAfterLogin', null);\n        sessionStore.persist(sessionData).then(function () {\n          _this4.transitionTo(transitionAfterLogin);\n        });\n      } else {\n        this._super();\n      }\n    }\n  });\n  exports['default'] = ApplicationRoute;\n});","define('hospitalrun/tests/routes/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/index', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'hospitalrun/mixins/navigation', 'hospitalrun/mixins/user-roles', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _hospitalrunMixinsNavigation, _hospitalrunMixinsUserRoles, _ember) {\n  'use strict';\n\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], _hospitalrunMixinsNavigation['default'], _hospitalrunMixinsUserRoles['default'], {\n    session: inject.service(),\n    beforeModel: function beforeModel() {\n      var session = this.get('session');\n      if (!isEmpty(session)) {\n        var role = session.get('data.authenticated.role');\n        if (!isEmpty(role)) {\n          var userRole = this.findUserRole(role);\n          if (!isEmpty(userRole) && !isEmpty(userRole.defaultRoute)) {\n            var navelement = this.findNavItemByRoute(userRole.defaultRoute);\n            // validate that there really is a navigation element that matches that route.\n            if (!isEmpty(navelement)) {\n              return this.transitionTo(navelement.route);\n            }\n          }\n        }\n      }\n      return this._super.apply(this, arguments);\n    },\n\n    afterModel: function afterModel() {\n      this.controllerFor('navigation').set('allowSearch', false);\n    },\n\n    actions: {\n      createNewUser: function createNewUser() {\n        return this.transitionTo('users.edit', 'new');\n      }\n    }\n  });\n});","define('hospitalrun/tests/routes/index.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/index.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/login', ['exports', 'ember', 'ember-simple-auth/mixins/unauthenticated-route-mixin'], function (exports, _ember, _emberSimpleAuthMixinsUnauthenticatedRouteMixin) {\n  'use strict';\n\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var Route = _ember['default'].Route;\n  exports['default'] = Route.extend(_emberSimpleAuthMixinsUnauthenticatedRouteMixin['default'], {\n    config: inject.service(),\n    database: inject.service(),\n\n    requireLogin: alias('database.requireLogin'),\n    standAlone: alias('config.standAlone'),\n\n    beforeModel: function beforeModel(transition) {\n      var session = get(this, 'session');\n      if (get(session, 'isAuthenticated')) {\n        this._super(transition);\n      } else {\n        var requireLogin = get(this, 'requireLogin');\n        var standAlone = get(this, 'standAlone');\n        if (standAlone === true && requireLogin === false) {\n          return this.get('session').authenticate('authenticator:custom', {\n            identification: 'hradmin',\n            password: 'test'\n          });\n        } else {\n          return get(this, 'config').useGoogleAuth().then(function (useGoogleAuth) {\n            if (useGoogleAuth) {\n              window.location.replace('/auth/google');\n            }\n          });\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/routes/login.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/login.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/serializers/application', ['exports', 'ember-pouch'], function (exports, _emberPouch) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Serializer.extend();\n});","define('hospitalrun/tests/serializers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/serializers/user', ['exports', 'ember-data'], function (exports, _emberData) {\n  'use strict';\n\n  var couchSerializer = _emberData['default'].JSONSerializer.extend({\n    attrs: {\n      rev: '_rev'\n    },\n    primaryKey: '_id',\n\n    isNewSerializerAPI: true,\n\n    normalizeArrayResponse: function normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {\n      var newPayload = payload.rows.map((function (row) {\n        return row.doc;\n      }).bind(this));\n      return this._super(store, primaryModelClass, newPayload, id, requestType);\n    },\n\n    normalizeSaveResponse: function normalizeSaveResponse(store, primaryModelClass, payload) {\n      return {\n        data: {\n          id: payload.id,\n          type: 'user',\n          attrs: {\n            rev: payload.rev\n          }\n        }\n      };\n    }\n\n  });\n\n  exports['default'] = couchSerializer;\n});","define('hospitalrun/tests/serializers/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/user.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/services/config', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var RSVP = _ember['default'].RSVP;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var run = _ember['default'].run;\n  var set = _ember['default'].set;\n  exports['default'] = _ember['default'].Service.extend({\n    configDB: null,\n    database: inject.service(),\n    session: inject.service(),\n    sessionData: _ember['default'].computed.alias('session.data'),\n    standAlone: false,\n    needsUserSetup: false,\n    markUserSetupComplete: function markUserSetupComplete() {\n      var _this = this;\n\n      if (get(this, 'needsUserSetup') === true) {\n        var _ret = (function () {\n          set(_this, 'needsUserSetup', false);\n          var config = _this.get('configDB');\n          return {\n            v: new RSVP.Promise(function (resolve, reject) {\n              config.put({ _id: 'config_user_setup_flag', value: false }, function (err, doc) {\n                if (err) {\n                  reject(err);\n                }\n                resolve(doc);\n              });\n            })\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      } else {\n        return RSVP.resolve(true);\n      }\n    },\n    setup: function setup() {\n      var replicateConfigDB = this.replicateConfigDB.bind(this);\n      var loadConfig = this.loadConfig.bind(this);\n      var db = this.createDB();\n      this.set('configDB', db);\n      this.setCurrentUser();\n      if (window.ELECTRON) {\n        this.set('standAlone', true);\n      }\n      if (this.get('standAlone') === false) {\n        return replicateConfigDB(db).then(loadConfig);\n      } else {\n        return loadConfig();\n      }\n    },\n    createDB: function createDB() {\n      return new PouchDB('config');\n    },\n    replicateConfigDB: function replicateConfigDB(db) {\n      var promise = new RSVP.Promise(function (resolve) {\n        var url = document.location.protocol + '//' + document.location.host + '/db/config';\n        db.replicate.from(url).then(resolve)['catch'](resolve);\n      });\n      return promise;\n    },\n    loadConfig: function loadConfig() {\n      var config = this.get('configDB');\n      var options = {\n        include_docs: true,\n        keys: ['config_consumer_key', 'config_consumer_secret', 'config_disable_offline_sync', 'config_external_search', 'config_oauth_token', 'config_token_secret', 'config_use_google_auth']\n      };\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        config.allDocs(options, function (err, response) {\n          if (err) {\n            console.log('Could not get configDB configs:', err);\n            reject(err);\n          }\n          var configObj = {};\n          for (var i = 0; i < response.rows.length; i++) {\n            if (!response.rows[i].error && response.rows[i].doc) {\n              configObj[response.rows[i].id] = response.rows[i].doc.value;\n            }\n          }\n          resolve(configObj);\n        });\n      }, 'getting configuration from the database');\n    },\n    getFileLink: function getFileLink(id) {\n      var config = this.get('configDB');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        config.get('file-link_' + id, function (err, doc) {\n          if (err) {\n            reject(err);\n          }\n          resolve(doc);\n        });\n      });\n    },\n    removeFileLink: function removeFileLink(id) {\n      var config = this.get('configDB');\n      return this.getFileLink(id).then(function (fileLink) {\n        config.remove(fileLink);\n      });\n    },\n    saveFileLink: function saveFileLink(fileName, id) {\n      var config = this.get('configDB');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        config.put({ fileName: fileName, _id: 'file-link_' + id }, function (err, doc) {\n          if (err) {\n            reject(err);\n          }\n          resolve(doc);\n        });\n      });\n    },\n    saveOauthConfigs: function saveOauthConfigs(configs) {\n      var configDB = this.get('configDB');\n      var configKeys = Object.keys(configs);\n      var savePromises = [];\n      return this._getOauthConfigs(configKeys).then(function (records) {\n        configKeys.forEach(function (key) {\n          var configRecord = records.rows.findBy('key', key);\n          if (!configRecord || !configRecord.doc) {\n            configRecord = {\n              _id: key,\n              value: configs[key]\n            };\n          } else {\n            configRecord = configRecord.doc;\n            configRecord.value = configs[key];\n          }\n          savePromises.push(configDB.put(configRecord));\n        });\n        return _ember['default'].RSVP.all(savePromises);\n      });\n    },\n    useGoogleAuth: function useGoogleAuth() {\n      return this.getConfigValue('use_google_auth', false);\n    },\n\n    getPatientPrefix: function getPatientPrefix() {\n      return this.getConfigValue('patient_id_prefix', 'P');\n    },\n\n    getConfigDB: function getConfigDB() {\n      return this.get('configDB');\n    },\n\n    getConfigValue: function getConfigValue(id, defaultValue) {\n      var configDB = this.get('configDB');\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        configDB.get('config_' + id).then(function (doc) {\n          run(null, resolve, doc.value);\n        })['catch'](function () {\n          run(null, resolve, defaultValue);\n        });\n      }, 'get ' + id + ' from config database');\n    },\n\n    _getOauthConfigs: function _getOauthConfigs(configKeys) {\n      var configDB = this.get('configDB');\n      var options = {\n        include_docs: true,\n        keys: configKeys\n      };\n      return configDB.allDocs(options);\n    },\n\n    setCurrentUser: function setCurrentUser(userName) {\n      var config = this.get('configDB');\n      var sessionData = this.get('sessionData');\n      if (!userName && sessionData.authenticated) {\n        userName = sessionData.authenticated.name;\n      }\n      config.get('current_user').then(function (doc) {\n        doc.value = userName;\n        config.put(doc);\n      })['catch'](function () {\n        config.put({\n          _id: 'current_user',\n          value: userName\n        });\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/services/config.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/config.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/config.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/services/custom-forms', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var Service = _ember['default'].Service;\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  var set = _ember['default'].set;\n  exports['default'] = Service.extend({\n    currentModel: null,\n    customForms: {},\n    formsForType: null,\n    store: inject.service(),\n\n    formsForSelect: computed('formsForType', 'usedForms', function () {\n      var formsForType = get(this, 'formsForType');\n      var usedForms = get(this, 'usedForms');\n      if (!isEmpty(formsForType)) {\n        var formsForSelect = formsForType.filter(function (customForm) {\n          return !usedForms.includes(get(customForm, 'id'));\n        });\n        formsForSelect = formsForSelect.map(function (customForm) {\n          return {\n            id: get(customForm, 'id'),\n            value: get(customForm, 'name')\n          };\n        });\n        return formsForSelect;\n      }\n    }),\n\n    formsToDisplay: computed('formsForType', 'currentModel.customForms', function () {\n      var formsForType = get(this, 'formsForType');\n      var modelForms = get(this, 'currentModel.customForms');\n      if (!isEmpty(modelForms) && !isEmpty(formsForType)) {\n        return Object.keys(modelForms).map(function (formId) {\n          return {\n            form: formsForType.findBy('id', formId),\n            propertyPrefix: 'customForms.' + formId + '.'\n          };\n        });\n      }\n    }),\n\n    showAddButton: computed('formsForSelect', function () {\n      var formsForSelect = get(this, 'formsForSelect');\n      return !isEmpty(formsForSelect);\n    }),\n\n    usedForms: computed('currentModel.customForms', function () {\n      var modelForms = get(this, 'currentModel.customForms');\n      if (isEmpty(modelForms)) {\n        return [];\n      } else {\n        return Object.keys(modelForms);\n      }\n    }),\n\n    getCustomForms: function getCustomForms(formTypes) {\n      var _this = this;\n\n      var customForms = get(this, 'customForms');\n      var store = get(this, 'store');\n      var formTypesToQuery = formTypes.filter(function (formType) {\n        if (isEmpty(customForms[formType])) {\n          return true;\n        }\n      });\n      if (isEmpty(formTypesToQuery)) {\n        return _ember['default'].RSVP.resolve(this._getCustomFormsFromCache(formTypes));\n      } else {\n        return store.query('custom-form', {\n          options: {\n            keys: formTypesToQuery\n          },\n          mapReduce: 'custom_form_by_type'\n        }).then(function (forms) {\n          formTypesToQuery.forEach(function (formType) {\n            customForms[formType] = forms.filterBy('formType', formType);\n          });\n          return _this._getCustomFormsFromCache(formTypes);\n        });\n      }\n    },\n\n    resetCustomFormByType: function resetCustomFormByType(formType) {\n      var customForms = get(this, 'customForms');\n      delete customForms[formType];\n    },\n\n    setDefaultCustomForms: function setDefaultCustomForms(customFormNames, model) {\n      return this.getCustomForms(customFormNames).then(function (customForms) {\n        if (!isEmpty(customForms)) {\n          customForms.forEach(function (customForm) {\n            if (get(customForm, 'alwaysInclude')) {\n              set(model, 'customForms.' + get(customForm, 'id'), _ember['default'].Object.create());\n            }\n          });\n        }\n        return model;\n      });\n    },\n\n    setupForms: function setupForms(formType, model) {\n      var _this2 = this;\n\n      this.getCustomForms([formType]).then(function (forms) {\n        set(_this2, 'currentModel', model);\n        set(_this2, 'formsForType', forms);\n      });\n    },\n\n    _getCustomFormsFromCache: function _getCustomFormsFromCache(formTypes) {\n      var customForms = get(this, 'customForms');\n      var returnForms = [];\n      formTypes.forEach(function (formType) {\n        returnForms.addObjects(customForms[formType]);\n      });\n      return returnForms;\n    }\n\n  });\n});","define('hospitalrun/tests/services/custom-forms.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/custom-forms.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/custom-forms.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/services/database', ['exports', 'ember', 'hospitalrun/utils/pouch-views', 'npm:pouchdb-list', 'hospitalrun/mixins/oauth-headers', 'npm:pouchdb-adapter-memory', 'hospitalrun/mixins/pouch-find-indexes', 'npm:pouchdb-users', 'npm:worker-pouch/client', 'hospitalrun/utils/unauthorized-error'], function (exports, _ember, _hospitalrunUtilsPouchViews, _npmPouchdbList, _hospitalrunMixinsOauthHeaders, _npmPouchdbAdapterMemory, _hospitalrunMixinsPouchFindIndexes, _npmPouchdbUsers, _npmWorkerPouchClient, _hospitalrunUtilsUnauthorizedError) {\n  'use strict';\n\n  var alias = _ember['default'].computed.alias;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  var RSVP = _ember['default'].RSVP;\n  var Service = _ember['default'].Service;\n  var set = _ember['default'].set;\n  exports['default'] = Service.extend(_hospitalrunMixinsOauthHeaders['default'], _hospitalrunMixinsPouchFindIndexes['default'], {\n    mainDB: null, // Server DB\n    oauthHeaders: null,\n    requireLogin: true,\n    setMainDB: false,\n    usePouchFind: false,\n    usersDB: null, // local users database for standAlone mode\n\n    config: inject.service(),\n    standAlone: alias('config.standAlone'),\n\n    createDB: function createDB(configs) {\n      var standAlone = get(this, 'standAlone');\n      if (standAlone || !configs.config_external_search) {\n        set(this, 'usePouchFind', true);\n      }\n      if (standAlone) {\n        var localDb = this._createLocalDB();\n        return RSVP.resolve(localDb);\n      }\n      return this._createMainDB(configs);\n    },\n\n    getDBInfo: function getDBInfo() {\n      var mainDB = get(this, 'mainDB');\n      return mainDB.info();\n    },\n\n    getDocFromMainDB: function getDocFromMainDB(docId) {\n      var _this = this;\n\n      return new RSVP.Promise(function (resolve, reject) {\n        var mainDB = get(_this, 'mainDB');\n        mainDB.get(docId, function (err, doc) {\n          if (err) {\n            reject(_this.handleErrorResponse(err));\n          } else {\n            resolve(doc);\n          }\n        });\n      }, 'getDocFromMainDB ' + docId);\n    },\n\n    /**\n    * Given an pouchDB doc id, return the corresponding ember record id.\n    * @param {String} docId the pouchDB doc id.\n    * @returns {String} the corresponding Ember id.\n    */\n    getEmberId: function getEmberId(docId) {\n      var parsedId = get(this, 'mainDB').rel.parseDocID(docId);\n      if (!isEmpty(parsedId.id)) {\n        return parsedId.id;\n      }\n    },\n\n    /**\n     * Given an record type, return back the maximum pouchdb id.  Useful for endkeys.\n     * @param {String} type the record type.\n     * @returns {String} the max pouch id for the type.\n     */\n    getMaxPouchId: function getMaxPouchId(type) {\n      return this.getPouchId({}, type);\n    },\n\n    /**\n    * Given an record type, return back the minimum pouchdb id.  Useful for startkeys.\n    * @param {String} type the record type.\n    * @returns {String} the min pouch id for the type.\n    */\n    getMinPouchId: function getMinPouchId(type) {\n      return this.getPouchId(null, type);\n    },\n\n    /**\n    * Given an Ember record id and type, return back the corresponding pouchDB id.\n    * @param {String} emberId the ember record id.\n    * @param {String} type the record type.\n    * @returns {String} the corresponding pouch id.\n    */\n    getPouchId: function getPouchId(emberId, type) {\n      var idInfo = {\n        type: type\n      };\n      if (!isEmpty(emberId)) {\n        idInfo.id = emberId;\n      }\n      return get(this, 'mainDB').rel.makeDocID(idInfo);\n    },\n\n    getRemoteDBUrl: function getRemoteDBUrl() {\n      return document.location.protocol + '//' + document.location.host + '/db/main';\n    },\n\n    handleErrorResponse: function handleErrorResponse(err) {\n      if (!err.status) {\n        if (err.errors && err.errors.length > 0) {\n          err.status = parseInt(err.errors[0].status);\n        }\n      }\n      if (err.status === 401 || err.status === 403) {\n        var detailedMessage = JSON.stringify(err, null, 2);\n        return new _hospitalrunUtilsUnauthorizedError['default'](err, detailedMessage);\n      } else {\n        return err;\n      }\n    },\n\n    /**\n     * Load the specified db dump into the database.\n     * @param {String} dbDump A couchdb dump string produced by pouchdb-dump-cli.\n     * @returns {Promise} A promise that resolves once the dump has been loaded.\n     */\n    loadDBFromDump: function loadDBFromDump(dbDump) {\n      var _this2 = this;\n\n      return new RSVP.Promise(function (resolve, reject) {\n        PouchDB.plugin(_npmPouchdbAdapterMemory['default']);\n        var db = new PouchDB('dbdump', {\n          adapter: 'memory'\n        });\n        db.load(dbDump).then(function () {\n          var mainDB = get(_this2, 'mainDB');\n          db.replicate.to(mainDB).on('complete', function (info) {\n            resolve(info);\n          }).on('error', function (err) {\n            reject(err);\n          });\n        }, reject);\n      }, 'loadDBFromDump');\n    },\n\n    queryMainDB: function queryMainDB(queryParams, mapReduce) {\n      var _this3 = this;\n\n      return new RSVP.Promise(function (resolve, reject) {\n        var mainDB = get(_this3, 'mainDB');\n        if (mapReduce) {\n          mainDB.query(mapReduce, queryParams, function (err, response) {\n            if (err) {\n              reject(_this3.handleErrorResponse(err));\n            } else {\n              response.rows = _this3._mapPouchData(response.rows);\n              resolve(response);\n            }\n          });\n        } else {\n          mainDB.allDocs(queryParams, function (err, response) {\n            if (err) {\n              reject(_this3.handleErrorResponse(err));\n            } else {\n              response.rows = _this3._mapPouchData(response.rows);\n              resolve(response);\n            }\n          });\n        }\n      }, 'queryMainDB');\n    },\n\n    setup: function setup() {\n      var _this4 = this;\n\n      PouchDB.plugin(_npmPouchdbList['default']);\n      var config = get(this, 'config');\n      return config.loadConfig().then(function (configs) {\n        return _this4.createDB(configs).then(function (db) {\n          set(_this4, 'mainDB', db);\n          set(_this4, 'setMainDB', true);\n          if (get(_this4, 'standAlone')) {\n            return _this4.createUsersDB();\n          } else {\n            _this4.setupSubscription(configs);\n          }\n        });\n      });\n    },\n\n    setupSubscription: function setupSubscription(configs) {\n      var _this5 = this;\n\n      if (!configs.config_disable_offline_sync && navigator.serviceWorker) {\n        var _ret = (function () {\n          var config = get(_this5, 'config');\n          var localDB = _this5._createLocalDB();\n          return {\n            v: config.getConfigValue('push_subscription').then(function (pushSub) {\n              if (isEmpty(pushSub)) {\n                return localDB.id().then(function (dbId) {\n                  var dbInfo = {\n                    id: dbId,\n                    remoteSeq: 0\n                  };\n                  return _this5._getPermissionAndSubscribe(dbInfo);\n                }).then(function () {\n                  return _this5._requestSync();\n                });\n              } else {\n                return _this5._requestSync();\n              }\n            })\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n    },\n\n    _askPermission: function _askPermission() {\n      return new RSVP.Promise(function (resolve, reject) {\n        var permissionResult = Notification.requestPermission(function (result) {\n          resolve(result);\n        });\n\n        if (permissionResult) {\n          permissionResult.then(resolve, reject);\n        }\n      }).then(function (permissionResult) {\n        if (permissionResult !== 'granted') {\n          throw new Error('We weren\\'t granted permission.');\n        }\n        return permissionResult;\n      }, 'Ask for notification permisson');\n    },\n\n    _createLocalDB: function _createLocalDB(pouchOptions) {\n      var localDB = new PouchDB('localMainDB', pouchOptions);\n      (0, _hospitalrunUtilsPouchViews['default'])(localDB);\n      this.buildPouchFindIndexes(localDB);\n      return localDB;\n    },\n\n    _createMainDB: function _createMainDB(configs) {\n      var _this6 = this;\n\n      this._setOAuthHeaders(configs);\n      if (!configs.config_disable_offline_sync && navigator.serviceWorker) {\n        // Use pouch-worker to run the DB in the service worker\n        return navigator.serviceWorker.ready.then(function () {\n          if (navigator.serviceWorker.controller && navigator.serviceWorker.controller.postMessage) {\n            PouchDB.adapter('worker', _npmWorkerPouchClient['default']);\n            var localDB = _this6._createLocalDB({\n              adapter: 'worker',\n              worker: function worker() {\n                return navigator.serviceWorker;\n              }\n            });\n            return localDB;\n          } else {\n            return _this6._createRemoteDB(configs);\n          }\n        });\n      } else {\n        return this._createRemoteDB(configs);\n      }\n    },\n\n    _createRemoteDB: function _createRemoteDB(configs) {\n      var remoteUrl = this.getRemoteDBUrl();\n      var pouchOptions = this._getOptions(configs);\n      var remoteDB = new PouchDB(remoteUrl, pouchOptions);\n      return remoteDB.info().then(function () {\n        (0, _hospitalrunUtilsPouchViews['default'])(remoteDB);\n        return remoteDB;\n      })['catch'](function (err) {\n        console.log('error with remote db:', JSON.stringify(err, null, 2));\n        throw err;\n      });\n    },\n\n    _getNotificationPermissionState: function _getNotificationPermissionState() {\n      if (navigator.permissions) {\n        return navigator.permissions.query({ name: 'notifications' }).then(function (result) {\n          return result.state;\n        });\n      }\n      return RSVP.resolve(Notification.permission);\n    },\n\n    _getPermissionAndSubscribe: function _getPermissionAndSubscribe(dbInfo) {\n      var _this7 = this;\n\n      return new RSVP.Promise(function (resolve, reject) {\n        navigator.serviceWorker.ready.then(function (registration) {\n          return _this7._getNotificationPermissionState().then(function (permission) {\n            if (permission !== 'granted') {\n              return _this7._askPermission().then(function () {\n                return _this7._subscribeUserToPush(registration, dbInfo).then(resolve, reject);\n              });\n            } else {\n              return _this7._subscribeUserToPush(registration, dbInfo).then(resolve, reject);\n            }\n          });\n        });\n      }, 'Get notification permission and subscribe to push');\n    },\n\n    _urlBase64ToUint8Array: function _urlBase64ToUint8Array(base64String) {\n      var padding = '='.repeat((4 - base64String.length % 4) % 4);\n      var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n\n      var rawData = window.atob(base64);\n      var outputArray = new Uint8Array(rawData.length);\n\n      for (var i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n      }\n      return outputArray;\n    },\n\n    _sendSubscriptionToServer: function _sendSubscriptionToServer(subscription, dbInfo) {\n      return new RSVP.Promise(function (resolve, reject) {\n        return fetch('/save-subscription/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            dbInfo: dbInfo,\n            subscription: subscription\n          })\n        }).then(function (response) {\n          if (!response.ok) {\n            throw new Error('Bad status code from server.');\n          }\n          return response.json();\n        }).then(function (responseData) {\n          if (responseData.ok !== true) {\n            throw new Error('There was a bad response from server.', JSON.stringify(responseData, null, 2));\n          }\n          resolve(responseData);\n        })['catch'](reject);\n      }, 'Send push subscription to server');\n    },\n\n    _subscribeUserToPush: function _subscribeUserToPush(registration, dbInfo) {\n      var _this8 = this;\n\n      var config = get(this, 'config');\n      return config.getConfigValue('push_public_key').then(function (serverKey) {\n        if (!serverKey) {\n          return;\n        }\n        var subscribeOptions = {\n          userVisibleOnly: true,\n          applicationServerKey: _this8._urlBase64ToUint8Array(serverKey)\n        };\n        return new RSVP.Promise(function (resolve, reject) {\n          return registration.pushManager.subscribe(subscribeOptions).then(function (pushSubscription) {\n            var subInfo = JSON.stringify(pushSubscription);\n            subInfo = JSON.parse(subInfo);\n            return _this8._sendSubscriptionToServer(subInfo, dbInfo);\n          }).then(function (savedSubscription) {\n            var configDB = config.getConfigDB();\n            return configDB.put({\n              _id: 'config_push_subscription',\n              value: savedSubscription.id\n            }).then(resolve, reject);\n          })['catch'](reject);\n        });\n      }, 'Subscribe user to push service.');\n    },\n\n    _requestSync: function _requestSync() {\n      return new RSVP.Promise(function (resolve, reject) {\n        var messageChannel = new MessageChannel();\n        messageChannel.port1.onmessage = function (event) {\n          if (event.data.error) {\n            reject(event.data.error);\n          } else {\n            resolve(event.data);\n          }\n        };\n        navigator.serviceWorker.controller.postMessage('remotesync', [messageChannel.port2]);\n      }, 'Request offline sync');\n    },\n\n    createUsersDB: function createUsersDB() {\n      var _this9 = this;\n\n      PouchDB.plugin(_npmPouchdbUsers['default']);\n      var usersDB = new PouchDB('_users');\n      return usersDB.installUsersBehavior().then(function () {\n        set(_this9, 'usersDB', usersDB);\n        return usersDB.allDocs().then(function (results) {\n          if (results.total_rows < 2) {\n            set(_this9, 'requireLogin', false);\n            if (results.total_rows === 0) {\n\n              return usersDB.put({\n                _id: 'org.couchdb.user:hradmin',\n                type: 'user',\n                name: 'hradmin',\n                password: 'test',\n                roles: ['System Administrator', 'admin', 'user'],\n                userPrefix: 'p1'\n              });\n            }\n          }\n        });\n      });\n    },\n\n    _getOptions: function _getOptions(configs) {\n      var pouchOptions = {};\n      if (configs) {\n        pouchOptions.ajax = {\n          timeout: 30000\n        };\n        // If we don't have the proper credentials, throw error to force login.\n        if (isEmpty(configs.config_consumer_key) || isEmpty(configs.config_consumer_secret) || isEmpty(configs.config_oauth_token) || isEmpty(configs.config_token_secret)) {\n          throw Error('login required');\n        } else {\n          var headers = get(this, 'oauthHeaders');\n          pouchOptions.ajax.headers = headers;\n        }\n      }\n      return pouchOptions;\n    },\n\n    _mapPouchData: function _mapPouchData(rows) {\n      var _this10 = this;\n\n      var mappedRows = [];\n      if (rows) {\n        mappedRows = rows.map(function (row) {\n          if (row.doc) {\n            var rowValues = {\n              doc: row.doc.data\n            };\n            rowValues.doc.id = _this10.getEmberId(row.id);\n            return rowValues;\n          } else {\n            return row;\n          }\n        });\n      }\n      return mappedRows;\n    },\n\n    _setOAuthHeaders: function _setOAuthHeaders(configs) {\n      var headers = this.getOAuthHeaders(configs);\n      set(this, 'oauthHeaders', headers);\n    }\n\n  });\n});","define('hospitalrun/tests/services/database.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/database.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/database.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/services/filesystem', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Service.extend({\n    config: _ember['default'].inject.service(),\n\n    filer: null, // Injected via initializer\n    fileSystemSize: 1024 * 1024 * 1024 * 8, // 8GB max size for local filesystem;chrome only,\n\n    _onError: function _onError(e) {\n      console.log('Filer filesystem error: ' + e);\n    },\n\n    _downloadFiles: function _downloadFiles() {\n      this.store.find('photo').then((function (photos) {\n        photos.forEach((function (photo) {\n          this.downloadIfNeeded(photo);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    /**\n     * Downloads the file from the server and saves it to the local filesystem.\n     * @param {Object} fileRecord Record to use to download the file.\n     */\n    _downloadFileFromServer: function _downloadFileFromServer(fileRecord) {\n      var fileName = _ember['default'].get(fileRecord, 'fileName');\n      var pouchDbId = _ember['default'].get(fileRecord, 'id');\n      var url = _ember['default'].get(fileRecord, 'url');\n      var xhr = new XMLHttpRequest();\n      if (!_ember['default'].isEmpty(url)) {\n        xhr.open('GET', url, true);\n        xhr.responseType = 'blob';\n        xhr.onload = (function () {\n          var file = new Blob([xhr.response]);\n          this.addFile(file, fileName, pouchDbId);\n        }).bind(this);\n        xhr.send();\n      }\n    },\n\n    setup: function setup() {\n      var size = this.get('fileSystemSize');\n      var filer = new Filer();\n      filer.init({ persistent: true, size: size }, (function () {\n        try {\n          this.set('filer', filer);\n        } catch (ignored) {\n          // Exception may happen during testing an can be ignored.\n        }\n      }).bind(this));\n    },\n\n    /**\n     * Add the specified file to the local filesystem\n     * @param {File} file the file to save.\n     * @param {String} path the file path to save the file to.\n     * @param {String} pouchDbId database id that the file is associated with.\n     * The pouch DB ids are prefixed with the type of record (eg patient record is\n     * prefixed by 'patient_'.\n     * @returns {Promise} returns a Promise that resolves once the file is saved.\n     */\n    addFile: function addFile(file, path, pouchDbId) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var currentDate = new Date();\n        var filer = this.get('filer');\n        var fileName = file.name || currentDate.getTime();\n        var newFileName = path + fileName;\n        var config = this.get('config');\n        if (path.indexOf('.') > -1) {\n          newFileName = path;\n          // If a full file path was provided, figure out the path and file name.\n          var pathParts = path.split('/');\n          fileName = pathParts.pop();\n          path = pathParts.join('/');\n          path += '/';\n        }\n\n        if (newFileName.indexOf('.') === -1) {\n          if (file.type) {\n            var typeParts = file.type.split('/');\n            newFileName += '.' + typeParts.pop();\n          } else {\n            // Default to png extension\n            newFileName += '.png';\n          }\n        }\n\n        this.fileExists(newFileName).then((function (exists) {\n          if (exists) {\n            // Make sure a unique name is used.\n            newFileName = path + currentDate.getTime() + fileName;\n          }\n          if (_ember['default'].isEmpty(filer)) {\n            reject('Local filesystem unavailable, please use Google Chrome browser');\n          }\n          if (_ember['default'].isEmpty(fileName) && !_ember['default'].isEmpty(file.type)) {\n            var typeParts = file.type.split('/');\n            if (typeParts.length > 1) {\n              newFileName += '.' + typeParts[1];\n            }\n          }\n          filer.mkdir(path, false, function () {\n            filer.write(newFileName, { data: file, type: file.type }, function (fileEntry) {\n              config.saveFileLink(newFileName, pouchDbId);\n              resolve(fileEntry);\n            }, function (e) {\n              reject(e);\n            });\n          }, function (e) {\n            reject(e);\n          });\n        }).bind(this));\n      }).bind(this));\n    },\n\n    /**\n     * Delete the specified file\n     * @param {String} filePath path of file to delete.\n     * @param {String} pouchId database id that the file is associated with.\n     * The pouch DB ids are prefixed with the type of record (eg patient record is\n     * prefixed by 'patient_'.\n     * @returns {Promise} returns a Promise that resolves once the file is deleted.\n     */\n    deleteFile: function deleteFile(filePath, pouchDbId) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var filer = this.get('filer');\n        var config = this.get('config');\n        try {\n          filer.ls(filePath, function () {\n            filer.rm(filePath, function () {\n              config.removeFileLink(pouchDbId);\n              resolve();\n            }, reject);\n          }, function (err) {\n            if (err.name === 'NotFoundError') {\n              resolve();\n            } else {\n              reject(err);\n            }\n          });\n        } catch (ex) {\n          reject(ex);\n        }\n      }).bind(this));\n    },\n\n    downloadIfNeeded: function downloadIfNeeded(fileRecord) {\n      var fileName = _ember['default'].get(fileRecord, 'fileName');\n      this.fileExists(fileName).then((function (exists) {\n        if (!exists) {\n          this._downloadFileFromServer(fileRecord);\n        }\n      }).bind(this));\n    },\n\n    /**\n     * Determine if specified file exists\n     * @param {String} the path of the file to determine if it exists.\n     * @returns {Promise} returns a Promise that resolves with a boolean indicating\n     * if the file exists.\n     */\n    fileExists: function fileExists(filePath) {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        var filer = this.get('filer');\n        filer.fs.root.getFile(filePath, {}, function () {\n          resolve(true);\n        }, function () {\n          // if ls errs, file doesn't exist.\n          resolve(false);\n        });\n      }).bind(this));\n    },\n\n    /**\n     * Convert specified file to a data url\n     * @param {File} file to convert\n     * @returns {Promise} returns a Promise that resolves with the data url\n     * for the file.\n     */\n    fileToDataURL: function fileToDataURL(file) {\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var reader = new FileReader();\n        reader.onloadend = function (e) {\n          resolve(e.target.result);\n        };\n        reader.readAsDataURL(file);\n      });\n    },\n\n    /**\n     * Read the specified file into a string\n     * @param {File} file to read\n     * @returns {Promise} returns a Promise that resolves with the data url\n     * for the file.\n     */\n    fileToString: function fileToString(file) {\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var reader = new FileReader();\n        reader.onloadend = function (e) {\n          resolve(e.target.result);\n        };\n        reader.readAsText(file);\n      });\n    },\n\n    /**\n     * Property to determine if file system API is available.\n     */\n    isFileSystemEnabled: (function () {\n      var filer = this.get('filer');\n      return !_ember['default'].isEmpty(filer);\n    }).property('filer'),\n\n    /**\n     * Get filesystem url from specified path.\n     * @param {String} the path of the file to get the url for.\n     * @returns {Promise} returns a Promise that resolves with the file system\n     * url or null if the file doesn't exist.\n     */\n    pathToFileSystemURL: function pathToFileSystemURL(path) {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        var filer = this.get('filer');\n        filer.fs.root.getFile(path, {}, function (fileEntry) {\n          resolve(fileEntry.toURL());\n        }, function () {\n          // if ls errs, just return empty, file doesn't exist.\n          resolve();\n        });\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/services/filesystem.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/filesystem.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/filesystem.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/services/lookup-lists', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var Service = _ember['default'].Service;\n  var get = _ember['default'].get;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  var RSVP = _ember['default'].RSVP;\n  exports['default'] = Service.extend({\n    lookupLists: {},\n    store: inject.service(),\n\n    /*\n     * Get a lookup list by name\n     * @param listName String containing the name of the lookup list to retrieve.\n     * Usually the id of a lookup object, but the special value of 'incidentCategories'\n     * will retrieve incident categories\n     */\n    getLookupList: function getLookupList(listName) {\n      return this.getLookupLists([listName]).then(function (lists) {\n        return lists[listName];\n      });\n    },\n\n    /*\n     * Given a list of lookup names, return the specified lists.\n     * @param listName Array containg the names of the lookup lists to retrieve.\n     * Can be the ids of lookup objects, and/or the special value of 'incidentCategories'\n     * will retrieve incident categories.\n     */\n    getLookupLists: function getLookupLists(listNames) {\n      var _this = this;\n\n      var lookupLists = get(this, 'lookupLists');\n      var store = get(this, 'store');\n      var listsToQuery = listNames.filter(function (listName) {\n        if (isEmpty(lookupLists[listName])) {\n          return true;\n        }\n      });\n      if (isEmpty(listsToQuery)) {\n        return _ember['default'].RSVP.resolve(this._getLookupListsFromCache(listNames));\n      } else {\n        var queryHash = {};\n        if (listsToQuery.includes('incidentCategories')) {\n          queryHash.incidentCategories = store.findAll('inc-category');\n          listsToQuery.removeObject('incidentCategories');\n        }\n        if (!isEmpty(listsToQuery)) {\n          queryHash.lookup = store.query('lookup', {\n            options: {\n              keys: listsToQuery\n            }\n          });\n        }\n        return RSVP.hash(queryHash).then(function (hash) {\n          if (!isEmpty(hash.incidentCategories)) {\n            lookupLists.incidentCategories = hash.incidentCategories.filterBy('archived', false);\n          }\n          if (!isEmpty(hash.lookup)) {\n            listsToQuery.forEach(function (list) {\n              lookupLists[list] = hash.lookup.findBy('id', list);\n            });\n          }\n          return _this._getLookupListsFromCache(listNames);\n        });\n      }\n    },\n\n    resetLookupList: function resetLookupList(listName) {\n      var lookupLists = get(this, 'lookupLists');\n      delete lookupLists[listName];\n    },\n\n    _getIncidentCategories: function _getIncidentCategories() {\n      var store = get(this, 'store');\n      return store.findAll('inc-category');\n    },\n\n    _getLookupListsFromCache: function _getLookupListsFromCache(listNames) {\n      var lookupLists = get(this, 'lookupLists');\n      var returnLists = {};\n      listNames.forEach(function (listName) {\n        if (!isEmpty(lookupLists[listName])) {\n          returnLists[listName] = lookupLists[listName];\n        }\n      });\n      return returnLists;\n    }\n  });\n});","define('hospitalrun/tests/services/lookup-lists.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/lookup-lists.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/lookup-lists.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/serviceworkers/pouchdb-sync', ['exports'], function (exports) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n  function _typeof(obj) { return obj && obj.constructor === Symbol ? 'symbol' : typeof obj; }\n\n  var allChanges = {};\n  var configs = false;\n  var syncingRemote = false;\n  var configDB = new PouchDB('config');\n  var localMainDB = new PouchDB('localMainDB');\n  var lastServerSeq = undefined;\n\n  function PouchError(opts) {\n    Error.call(opts.reason);\n    this.status = opts.status;\n    this.name = opts.error;\n    this.message = opts.reason;\n    this.error = true;\n  }\n\n  function createError(err) {\n    var status = err.status || 500;\n\n    // last argument is optional\n    if (err.name && err.message) {\n      if (err.name === 'Error' || err.name === 'TypeError') {\n        if (err.message.indexOf('Bad special document member') !== -1) {\n          err.name = 'doc_validation';\n          // add more clauses here if the error name is too general\n        } else {\n            err.name = 'bad_request';\n          }\n      }\n      err = {\n        error: err.name,\n        name: err.name,\n        reason: err.message,\n        message: err.message,\n        status: status\n      };\n    }\n    return err;\n  }\n\n  function safeEval(str) {\n    var target = {};\n    /* jshint evil: true */\n    eval('target.target = (' + str + ');');\n    return target.target;\n  }\n\n  function decodeArgs(args) {\n    var funcArgs = ['filter', 'map', 'reduce'];\n    args.forEach(function (arg) {\n      if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null && !Array.isArray(arg)) {\n        funcArgs.forEach(function (funcArg) {\n          if (!(funcArg in arg) || arg[funcArg] === null) {\n            delete arg[funcArg];\n          } else if (arg[funcArg].type === 'func' && arg[funcArg].func) {\n            arg[funcArg] = safeEval(arg[funcArg].func);\n          }\n        });\n      }\n    });\n    return args;\n  }\n\n  function postMessage(msg, event) {\n    event.ports[0].postMessage(msg);\n  }\n\n  function sendError(clientId, messageId, data, event) {\n    logDebug(' -> sendError', clientId, messageId, data);\n    postMessage({\n      type: 'error',\n      id: clientId,\n      messageId: messageId,\n      content: createError(data)\n    }, event);\n  }\n\n  function sendSuccess(clientId, messageId, data, event) {\n    logDebug(' -> sendSuccess', clientId, messageId);\n    postMessage({\n      type: 'success',\n      id: clientId,\n      messageId: messageId,\n      content: data\n    }, event);\n  }\n\n  function sendUpdate(clientId, messageId, data, event) {\n    logDebug(' -> sendUpdate', clientId, messageId);\n    postMessage({\n      type: 'update',\n      id: clientId,\n      messageId: messageId,\n      content: data\n    }, event);\n  }\n\n  function getCurrentDB(clientId) {\n    switch (clientId) {\n      case 'localMainDB':\n        {\n          return Promise.resolve(localMainDB);\n        }\n      case 'hospitalrun-test-database':\n        {\n          return Promise.resolve(new PouchDB('hospitalrun-test-database', {\n            adapter: 'memory'\n          }));\n        }\n      default:\n        {\n          return getRemoteDB();\n        }\n    }\n  }\n\n  function dbMethod(clientId, methodName, messageId, args, event) {\n    var dbAdapter = undefined;\n    return getCurrentDB(clientId).then(function (db) {\n      if (!db) {\n        return sendError(clientId, messageId, { error: 'db not found' }, event);\n      }\n      dbAdapter = db.adapter;\n      return db[methodName].apply(db, _toConsumableArray(args));\n    }).then(function (res) {\n      sendSuccess(clientId, messageId, res, event);\n      switch (methodName) {\n        case 'put':\n        case 'bulkDocs':\n        case 'post':\n        case 'remove':\n        case 'removeAttachment':\n        case 'putAttachment':\n          remoteSync();\n      }\n    })['catch'](function (err) {\n      if (dbAdapter === 'http') {\n        // If the failure was on http, retry with local db.\n        return dbMethod('localMainDB', methodName, messageId, args, event);\n      } else {\n        sendError(clientId, messageId, err, event);\n      }\n    });\n  }\n\n  function changes(clientId, messageId, args, event) {\n    var _args = _slicedToArray(args, 1);\n\n    var opts = _args[0];\n\n    if (opts && (typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) === 'object') {\n      // just send all the docs anyway because we need to emit change events\n      // TODO: be smarter about emitting changes without building up an array\n      opts.returnDocs = true;\n      opts.return_docs = true;\n    }\n    dbMethod(clientId, 'changes', messageId, args, event);\n  }\n\n  function createDatabase(clientId, messageId, args, event) {\n    return sendSuccess(clientId, messageId, { ok: true, exists: true }, event);\n  }\n\n  function getAttachment(clientId, messageId, args, event) {\n    return getCurrentDB(clientId).then(function (db) {\n      if (!db) {\n        return sendError(clientId, messageId, { error: 'db not found' }, event);\n      }\n\n      var _args2 = _slicedToArray(args, 3);\n\n      var docId = _args2[0];\n      var attId = _args2[1];\n      var opts = _args2[2];\n\n      if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object') {\n        opts = {};\n      }\n      return db.get(docId, opts).then(function (doc) {\n        if (!doc._attachments || !doc._attachments[attId]) {\n          throw new PouchError({\n            status: 404,\n            error: 'not_found',\n            reason: 'missing'\n          });\n        }\n        return db.getAttachment.apply(db, _toConsumableArray(args)).then(function (buff) {\n          sendSuccess(clientId, messageId, buff, event);\n        });\n      });\n    })['catch'](function (err) {\n      sendError(clientId, messageId, err, event);\n    });\n  }\n\n  function destroy(clientId, messageId, args, event) {\n    if (clientId === 'hospitalrun-test-database') {\n      getCurrentDB(clientId).then(function (db) {\n        if (!db) {\n          return sendError(clientId, messageId, { error: 'db not found' }, event);\n        }\n        Promise.resolve().then(function () {\n          return db.destroy.apply(db, _toConsumableArray(args));\n        }).then(function (res) {\n          sendSuccess(clientId, messageId, res, event);\n        })['catch'](function (err) {\n          sendError(clientId, messageId, err, event);\n        });\n      });\n    } else {\n      return sendError(clientId, messageId, { error: 'permission denied' }, event);\n    }\n  }\n\n  function liveChanges(clientId, messageId, args, event) {\n    getCurrentDB(clientId).then(function (db) {\n      if (!db) {\n        return sendError(clientId, messageId, { error: 'db not found' }, event);\n      }\n      var changes = db.changes(args[0]);\n      allChanges[messageId] = changes;\n      changes.on('change', function (change) {\n        sendUpdate(clientId, messageId, change, event);\n      }).on('complete', function (change) {\n        changes.removeAllListeners();\n        delete allChanges[messageId];\n        sendSuccess(clientId, messageId, change, event);\n      }).on('error', function (change) {\n        changes.removeAllListeners();\n        delete allChanges[messageId];\n        sendError(clientId, messageId, change, event);\n      });\n    });\n  }\n\n  function cancelChanges(messageId) {\n    var changes = allChanges[messageId];\n    if (changes) {\n      changes.cancel();\n    }\n  }\n\n  function onReceiveMessage(clientId, type, messageId, args, event) {\n    switch (type) {\n      case 'createDatabase':\n        return createDatabase(clientId, messageId, args, event);\n      case 'id':\n        sendSuccess(clientId, messageId, clientId, event);\n        return;\n      case 'info':\n      case 'put':\n      case 'allDocs':\n      case 'bulkDocs':\n      case 'post':\n      case 'get':\n      case 'remove':\n      case 'revsDiff':\n      case 'compact':\n      case 'viewCleanup':\n      case 'removeAttachment':\n      case 'putAttachment':\n      case 'query':\n        return dbMethod(clientId, type, messageId, args, event);\n      case 'changes':\n        return changes(clientId, messageId, args, event);\n      case 'getAttachment':\n        return getAttachment(clientId, messageId, args, event);\n      case 'liveChanges':\n        return liveChanges(clientId, messageId, args, event);\n      case 'cancelChanges':\n        return cancelChanges(messageId);\n      case 'destroy':\n        return destroy(clientId, messageId, args, event);\n      default:\n        return sendError(clientId, messageId, { error: 'unknown API method: ' + type }, event);\n    }\n  }\n\n  function handleMessage(message, clientId, event) {\n    var type = message.type;\n    var messageId = message.messageId;\n\n    var args = decodeArgs(message.args);\n    onReceiveMessage(clientId, type, messageId, args, event);\n  }\n\n  self.addEventListener('push', function (event) {\n    if (event.data) {\n      var pushData = event.data.json();\n      if (pushData.type === 'couchDBChange') {\n        logDebug('Got couchDBChange pushed, attempting to sync to: ' + pushData.seq);\n        event.waitUntil(remoteSync(pushData.seq).then(function (resp) {\n          logDebug('Response from sync ' + JSON.stringify(resp, null, 2));\n        }));\n      } else {\n        logDebug('Unknown push event has data and here it is: ', pushData);\n      }\n    }\n  });\n\n  self.addEventListener('message', function (event) {\n    logDebug('got message', event);\n    if (event.data === 'remotesync') {\n      remoteSync();\n      return;\n    }\n    if (!event.data || !event.data.id || !event.data.args || !event.data.type || !event.data.messageId) {\n      // assume this is not a message from worker-pouch\n      // (e.g. the user is using the custom API instead)\n      return;\n    }\n    var clientId = event.data.id;\n    if (event.data.type === 'close') {\n      // logDebug('closing worker', clientId);\n    } else {\n        handleMessage(event.data, clientId, event);\n      }\n  });\n\n  self.addEventListener('sync', function (event) {\n    if (event.tag === 'remoteSync') {\n      event.waitUntil(remoteSync(null, true)['catch'](function (err) {\n        if (event.lastChance) {\n          logDebug('Sync failed for the last time, so give up for now.', err);\n        } else {\n          logDebug('Sync failed, will try again later', err);\n        }\n      }));\n    }\n  });\n\n  function getRemoteDB() {\n    return setupConfigs().then(function () {\n      var pouchOptions = {\n        ajax: {\n          headers: {},\n          timeout: 30000\n        }\n      };\n      if (configs.config_consumer_secret && configs.config_token_secret && configs.config_consumer_key && configs.config_oauth_token) {\n        pouchOptions.ajax.headers['x-oauth-consumer-secret'] = configs.config_consumer_secret;\n        pouchOptions.ajax.headers['x-oauth-consumer-key'] = configs.config_consumer_key;\n        pouchOptions.ajax.headers['x-oauth-token-secret'] = configs.config_token_secret;\n        pouchOptions.ajax.headers['x-oauth-token'] = configs.config_oauth_token;\n      }\n      var remoteURL = self.location.protocol + '//' + self.location.host + '/db/main';\n      return new PouchDB(remoteURL, pouchOptions);\n    });\n  }\n\n  function remoteSync(remoteSequence, retryingSync) {\n    lastServerSeq = remoteSequence;\n    if (!syncingRemote && configs.config_disable_offline_sync !== true) {\n      logDebug('Synching local db to remoteSequence: ' + remoteSequence + ' at: ' + new Date());\n      syncingRemote = true;\n      return getRemoteDB().then(function (remoteDB) {\n        return localMainDB.sync(remoteDB);\n      }).then(function (info) {\n        syncingRemote = false;\n        logDebug('local sync complete:', info, configs);\n\n        // Update push subscription with latest sync info\n        fetch('/update-subscription/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            subscriptionId: configs.config_push_subscription,\n            remoteSeq: info.pull.last_seq\n          })\n        });\n        // handle complete\n        if (info.pull.last_seq < lastServerSeq) {\n          return remoteSync(lastServerSeq);\n        } else {\n\n          return true;\n        }\n      })['catch'](function (err) {\n        syncingRemote = false;\n        logDebug('local sync error, register remote sync: ' + new Date(), err);\n        if (retryingSync) {\n          throw err;\n        } else {\n          self.registration.sync.register('remoteSync');\n        }\n      });\n    } else {\n      if (syncingRemote) {\n        logDebug('Skipping sync to: ' + remoteSequence + ' because sync is in process');\n      }\n      return Promise.resolve(false);\n    }\n  }\n\n  function setupConfigs() {\n    return new Promise(function (resolve, reject) {\n      if (configs) {\n        resolve();\n      } else {\n        configDB.allDocs({\n          include_docs: true\n        }).then(function (result) {\n          configs = {};\n          result.rows.forEach(function (row) {\n            configs[row.id] = row.doc.value;\n          });\n          resolve();\n        }, reject);\n      }\n    });\n  }\n});","define('hospitalrun/tests/serviceworkers/pouchdb-sync.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serviceworkers/pouchdb-sync.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serviceworkers/pouchdb-sync.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/styles/_base.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_base.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_bootstrap.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_bootstrap.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_layout.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_layout.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_print.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_print.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_typography.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_typography.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_variables_mixins.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_variables_mixins.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/app.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/app.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_align.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_align.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_border.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_border.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_flexbox.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_flexbox.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_hide.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_hide.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_layout.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_layout.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_margin.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_margin.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_padding.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_padding.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_position.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_position.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_type-scale.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_type-scale.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/_typography.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/_typography.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/grid/_index.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/grid/_index.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/grid/lib/_grid.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/grid/lib/_grid.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/grid/lib/_lg-grid.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/grid/lib/_lg-grid.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/grid/lib/_md-grid.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/grid/lib/_md-grid.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/basscss/grid/lib/_sm-grid.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/basscss/grid/lib/_sm-grid.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_alert.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_alert.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_buttons.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_buttons.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_calendar.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_calendar.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_dropdown.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_dropdown.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_form_styles.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_form_styles.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_imaging.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_imaging.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_labs.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_labs.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_loading_notice.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_loading_notice.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_pagination.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_pagination.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_panel.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_panel.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_patient_history.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_patient_history.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_patient_summary.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_patient_summary.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_progress-bar.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_progress-bar.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_sidebar_nav.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_sidebar_nav.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_tab_content.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_tab_content.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_tab_nav.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_tab_nav.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_tables.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_tables.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_typeahead.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_typeahead.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/views/_sign_in_screen.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/views/_sign_in_screen.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define(\"hospitalrun/tests/template-deprecations-test\", [\"exports\"], function (exports) {\n  \"use strict\";\n});","define('hospitalrun/tests/test-helper', ['exports', 'hospitalrun/tests/helpers/resolver', 'ember-qunit'], function (exports, _hospitalrunTestsHelpersResolver, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_hospitalrunTestsHelpersResolver['default']);\n});","define('hospitalrun/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/transforms/custom-fields', ['exports', 'ember-data', 'ember', 'npm:uuid'], function (exports, _emberData, _ember, _npmUuid) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _emberData['default'].Transform.extend({\n    store: _ember['default'].inject.service(),\n\n    deserialize: function deserialize(serialized) {\n      var _this = this;\n\n      if (isEmpty(serialized)) {\n        return serialized;\n      }\n      return serialized.map(function (customField) {\n        var store = _this.get('store');\n        var record = store.push({\n          data: {\n            id: _npmUuid['default'].v4(),\n            type: 'custom-field',\n            attributes: customField\n          }\n        });\n        return record;\n      });\n    },\n\n    serialize: function serialize(deserialized) {\n      if (isEmpty(deserialized)) {\n        return deserialized;\n      }\n      var serializedField = deserialized.map(function (customField) {\n        var serializedValue = customField.serialize();\n        var deserializedValues = customField.get('values');\n        if (!isEmpty(deserializedValues)) {\n          var serializedValues = deserializedValues.map(function (value) {\n            var property = get(value, 'property');\n            var serializedValue = {\n              label: get(value, 'label')\n            };\n            if (!isEmpty(property)) {\n              serializedValue.property = property;\n            }\n            return serializedValue;\n          });\n          serializedValue.values = serializedValues;\n        }\n        return serializedValue;\n      });\n      return serializedField;\n    }\n  });\n});","define('hospitalrun/tests/transforms/custom-fields.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - transforms/custom-fields.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/custom-fields.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/transforms/custom-forms', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {\n  'use strict';\n\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _emberData['default'].Transform.extend({\n    store: _ember['default'].inject.service(),\n\n    deserialize: function deserialize(serialized) {\n      if (isEmpty(serialized)) {\n        return serialized;\n      }\n      var customFormKeys = Object.keys(serialized);\n      var deserialized = _ember['default'].Object.create();\n      customFormKeys.forEach(function (customFormId) {\n        deserialized.set(customFormId, _ember['default'].Object.create(serialized[customFormId]));\n      });\n      return deserialized;\n    },\n\n    serialize: function serialize(deserialized) {\n      return deserialized;\n    }\n  });\n});","define('hospitalrun/tests/transforms/custom-forms.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - transforms/custom-forms.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/custom-forms.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/transforms/operative-procedures', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _emberData['default'].Transform.extend({\n\n    deserialize: function deserialize(serialized) {\n      if (isEmpty(serialized)) {\n        return [];\n      }\n      return serialized.map(function (description) {\n        return {\n          description: description\n        };\n      });\n    },\n\n    serialize: function serialize(deserialized) {\n      if (isEmpty(deserialized)) {\n        return [];\n      }\n      return deserialized.map(function (procedure) {\n        return get(procedure, 'description');\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/transforms/operative-procedures.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - transforms/operative-procedures.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/operative-procedures.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/components/nav-menu-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('nav-menu', 'NavMenuComponent', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    assert.expect(2);\n\n    var startingMenu = {\n      title: 'Inventory',\n      iconClass: 'octicon-package',\n      route: 'inventory',\n      capability: 'inventory',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.index',\n        capability: 'add_inventory_request'\n      }, {\n        title: 'Items',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.listing',\n        capability: 'inventory'\n      }]\n    };\n\n    // creates the component instance\n    var navMenuProperties = { nav: startingMenu };\n    var navMenu = this.subject(navMenuProperties);\n    assert.equal(navMenu._state, 'preRender');\n\n    // appends the navMenu to the page\n    this.render();\n    assert.equal(navMenu._state, 'inDOM');\n  });\n});","define('hospitalrun/tests/unit/components/nav-menu-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/components/nav-menu-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/nav-menu-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/controllers/abstract-delete-controller-test', ['exports', 'ember-qunit', 'ember-sinon-qunit/test-support/test', 'ember', 'ember-data'], function (exports, _emberQunit, _emberSinonQunitTestSupportTest, _ember, _emberData) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:abstract-delete-controller', 'Unit | Controller | abstract-delete-controller', {\n    unit: true,\n    testModel: function testModel(attrs) {\n      var _this = this;\n\n      return _ember['default'].run(function () {\n        _this.register('model:test', _emberData['default'].Model);\n        return _this.store().createRecord('test', attrs);\n      });\n    },\n    store: function store() {\n      return this.container.lookup('service:store');\n    },\n    sendStub: function sendStub(controller) {\n      var once = false;\n      var originalSend = controller.send.bind(controller);\n      return function (arg) {\n        if (once) {\n          return;\n        }\n\n        once = true;\n        originalSend(arg);\n      };\n    }\n  });\n\n  (0, _emberSinonQunitTestSupportTest['default'])('actions.cancel', function (assert) {\n    var controller = this.subject();\n    var send = this.stub(controller, 'send', this.sendStub(controller));\n\n    controller.send('cancel');\n\n    assert.equal(send.getCall(0).args[0], 'cancel');\n    assert.equal(send.getCall(1).args[0], 'closeModal', 'Should close modal');\n  });\n\n  (0, _emberSinonQunitTestSupportTest['default'])('actions.delete', function (assert) {\n    var controller = this.subject({\n      model: this.testModel({\n        save: function save() {},\n        unloadRecord: function unloadRecord() {}\n      })\n    });\n    var send = this.stub(controller, 'send', this.sendStub(controller));\n    var save = this.stub(controller.get('model'), 'save', function () {\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        return resolve();\n      });\n    });\n    var unloadRecord = this.stub(controller.get('model'), 'unloadRecord');\n\n    _ember['default'].run(function () {\n      return controller.send('delete');\n    });\n\n    assert.equal(send.getCall(0).args[0], 'delete');\n    assert.ok(save.calledOnce, 'Should save model');\n    assert.strictEqual(controller.get('model.archived'), true, 'Should archive model');\n    assert.ok(unloadRecord.calledOnce, 'Should unload record of model');\n    assert.equal(send.getCall(1).args[0], 'closeModal', 'Should close modal');\n  });\n});","define('hospitalrun/tests/unit/controllers/abstract-delete-controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/controllers/abstract-delete-controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/abstract-delete-controller-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/controllers/abstract-edit-controller-test', ['exports', 'ember-qunit', 'ember', 'ember-i18n/helper', 'ember-i18n/config/en'], function (exports, _emberQunit, _ember, _emberI18nHelper, _emberI18nConfigEn) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:abstract-edit-controller', 'Unit | Controller | abstract-edit-controller', {\n    needs: ['service:i18n', 'locale:en/translations', 'locale:en/config', 'util:i18n/missing-message', 'util:i18n/compile-template', 'config:environment'],\n    beforeEach: function beforeEach() {\n      // set the locale and the config\n      this.container.lookup('service:i18n').set('locale', 'en');\n      this.registry.register('locale:en/config', _emberI18nConfigEn['default']);\n\n      // manually inject the i18n service as initialzer does not run\n      // in unit test\n      _ember['default'].getOwner(this).inject('controller', 'i18n', 'service:i18n');\n\n      // register t helper\n      this.registry.register('helper:t', _emberI18nHelper['default']);\n    }\n  });\n\n  (0, _emberQunit.test)('cancelButtonText', function (assert) {\n    assert.equal(this.subject().get('cancelButtonText'), 'Return');\n  });\n\n  (0, _emberQunit.test)('cancelButtonText hasDirtyAttributes', function (assert) {\n    var controller = this.subject({\n      model: {\n        hasDirtyAttributes: true\n      }\n    });\n\n    assert.equal(controller.get('cancelButtonText'), 'Cancel');\n  });\n\n  (0, _emberQunit.test)('disabledAction', function (assert) {\n    assert.equal(this.subject({\n      model: _ember['default'].Object.create()\n    }).get('disabledAction'), 'showDisabledDialog');\n  });\n\n  (0, _emberQunit.test)('disabledAction invalid', function (assert) {\n    var controller = this.subject({\n      model: _ember['default'].Object.create({\n        isValid: true\n      })\n    });\n\n    assert.strictEqual(controller.get('disabledAction'), undefined);\n  });\n\n  (0, _emberQunit.test)('isNewOrDeleted', function (assert) {\n    assert.strictEqual(this.subject().get('isNewOrDeleted'), undefined);\n  });\n\n  (0, _emberQunit.test)('isNewOrDeleted new', function (assert) {\n    var controller = this.subject({\n      model: {\n        isNew: true,\n        isDeleted: false\n      }\n    });\n\n    assert.strictEqual(controller.get('isNewOrDeleted'), true);\n  });\n\n  (0, _emberQunit.test)('isNewOrDeleted deleted', function (assert) {\n    var controller = this.subject({\n      model: {\n        isNew: false,\n        isDeleted: true\n      }\n    });\n\n    assert.strictEqual(controller.get('isNewOrDeleted'), true);\n  });\n\n  (0, _emberQunit.test)('updateButtonText', function (assert) {\n    assert.equal(this.subject().get('updateButtonText'), 'Update');\n  });\n\n  (0, _emberQunit.test)('updateButtonText isNew', function (assert) {\n    var controller = this.subject({\n      model: {\n        isNew: true\n      }\n    });\n\n    assert.equal(controller.get('updateButtonText'), 'Add');\n  });\n\n  (0, _emberQunit.test)('actions.showDisabledDialog message', function (assert) {\n    var alertMessage = undefined,\n        alertTitle = undefined;\n    var controller = this.subject();\n\n    controller.displayAlert = function stub(title, message) {\n      alertTitle = title;\n      alertMessage = message;\n    };\n\n    controller.send('showDisabledDialog');\n\n    assert.equal(alertTitle, 'Warning!!!!');\n    assert.equal(alertMessage, 'Please fill in required fields (marked with *) and correct the errors before saving.');\n  });\n\n  (0, _emberQunit.test)('actions.update exception message', function (assert) {\n    var alertMessage = undefined,\n        alertTitle = undefined;\n    var controller = this.subject();\n\n    controller.beforeUpdate = function () {\n      throw new Error('Test');\n    };\n    controller.displayAlert = function stub(title, message) {\n      alertTitle = title.toString();\n      alertMessage = message.toString();\n      assert.equal(alertTitle, 'Error!!!!');\n      assert.equal(alertMessage, 'An error occurred while attempting to save: Test');\n    };\n\n    _ember['default'].run(function () {\n      controller.send('update');\n    });\n  });\n});","define('hospitalrun/tests/unit/controllers/abstract-edit-controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/controllers/abstract-edit-controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/abstract-edit-controller-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/controllers/abstract-paged-controller-test', ['exports', 'ember-qunit', 'ember-sinon-qunit/test-support/test', 'ember', 'ember-data'], function (exports, _emberQunit, _emberSinonQunitTestSupportTest, _ember, _emberData) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:abstract-paged-controller', 'Unit | Controller | abstract-paged-controller', {\n    unit: true,\n    testModel: function testModel(attrs) {\n      var _this = this;\n\n      return _ember['default'].run(function () {\n        _this.register('model:test', _emberData['default'].Model);\n        return _this.store().createRecord('test', attrs);\n      });\n    },\n    store: function store() {\n      return this.container.lookup('service:store');\n    }\n  });\n\n  (0, _emberQunit.test)('showActions', function (assert) {\n    var controller = this.subject({\n      canAdd: false,\n      canEdit: true,\n      canDelete: false\n    });\n\n    assert.strictEqual(controller.get('showActions'), true);\n  });\n\n  (0, _emberQunit.test)('disablePreviousPage', function (assert) {\n    var controller = this.subject();\n\n    assert.strictEqual(controller.get('disablePreviousPage'), true);\n  });\n\n  (0, _emberQunit.test)('disablePreviousPage false', function (assert) {\n    var controller = this.subject({\n      previousStartKey: 'test'\n    });\n\n    assert.strictEqual(controller.get('disablePreviousPage'), false);\n  });\n\n  (0, _emberQunit.test)('disableNextPage', function (assert) {\n    var controller = this.subject();\n\n    assert.strictEqual(controller.get('disableNextPage'), true);\n  });\n\n  (0, _emberQunit.test)('disableNextPage false', function (assert) {\n    var controller = this.subject({\n      nextStartKey: 'test'\n    });\n\n    assert.strictEqual(controller.get('disableNextPage'), false);\n  });\n\n  (0, _emberQunit.test)('showPagination', function (assert) {\n    var controller = this.subject({\n      previousStartKey: 'test'\n    });\n\n    assert.strictEqual(controller.get('showPagination'), true);\n  });\n\n  (0, _emberQunit.test)('showPagination false', function (assert) {\n    var controller = this.subject();\n\n    assert.strictEqual(controller.get('showPagination'), false);\n  });\n\n  (0, _emberQunit.test)('hasRecords', function (assert) {\n    var controller = this.subject({\n      model: this.testModel({\n        length: 1\n      })\n    });\n\n    assert.strictEqual(controller.get('hasRecords'), true);\n  });\n\n  (0, _emberQunit.test)('hasRecords false', function (assert) {\n    var controller = this.subject({\n      model: this.testModel({\n        length: 0\n      })\n    });\n\n    assert.strictEqual(controller.get('hasRecords'), false);\n  });\n\n  (0, _emberQunit.test)('hasRecords false empty', function (assert) {\n    assert.strictEqual(this.subject().get('hasRecords'), false);\n  });\n\n  (0, _emberSinonQunitTestSupportTest['default'])('actions.nextPage', function (assert) {\n    var controller = this.subject({\n      nextStartKey: 'next',\n      previousStartKeys: ['prev1', 'prev2'],\n      firstKey: 'first'\n    });\n    var showProgressModal = this.stub(controller, 'showProgressModal');\n\n    controller.send('nextPage');\n\n    assert.strictEqual(controller.get('previousStartKey'), 'first', 'Should set previousStartKey');\n    assert.deepEqual(controller.get('previousStartKeys'), ['prev1', 'prev2', 'first'], 'Should set previousStartKeys');\n    assert.strictEqual(controller.get('startKey'), 'next', 'Should set startKey');\n    assert.ok(showProgressModal.calledOnce, 'Should show progress modal');\n  });\n\n  (0, _emberSinonQunitTestSupportTest['default'])('actions.previousPage', function (assert) {\n    var controller = this.subject({\n      previousStartKey: 'prev',\n      previousStartKeys: ['prev1', 'prev2', 'prev3']\n    });\n    var showProgressModal = this.stub(controller, 'showProgressModal');\n\n    controller.send('previousPage');\n\n    assert.strictEqual(controller.get('startKey'), 'prev', 'Should set startKey');\n    assert.strictEqual(controller.get('previousStartKey'), 'prev2', 'Should set previousStartKey');\n    assert.deepEqual(controller.get('previousStartKeys'), ['prev1'], 'Should set previousStartKey');\n    assert.ok(showProgressModal.calledOnce, 'Should show progress modal');\n  });\n\n  (0, _emberSinonQunitTestSupportTest['default'])('actions.sortByKey', function (assert) {\n    var controller = this.subject({\n      nextStartKey: 'next',\n      previousStartKey: 'prev',\n      previousStartKeys: ['prev1', 'prev2'],\n      firstKey: 'first',\n      startKey: 'start'\n    });\n    var showProgressModal = this.stub(controller, 'showProgressModal');\n\n    controller.send('sortByKey', 'sort', 'desc');\n\n    assert.strictEqual(controller.get('nextStartKey'), null, 'Should clear nextStartKey');\n    assert.strictEqual(controller.get('firstKey'), null, 'Should clear firstKey');\n    assert.strictEqual(controller.get('startKey'), null, 'Should clear startKey');\n    assert.deepEqual(controller.get('previousStartKeys'), [], 'Should clear previousStartKeys');\n    assert.strictEqual(controller.get('previousStartKey'), null, 'Should clear previousStartKey');\n\n    assert.strictEqual(controller.get('sortDesc'), 'desc', 'Should set sortDesc');\n    assert.strictEqual(controller.get('sortKey'), 'sort', 'Should set sortKey');\n\n    assert.ok(showProgressModal.calledOnce, 'Should show progress modal');\n  });\n});","define('hospitalrun/tests/unit/controllers/abstract-paged-controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/controllers/abstract-paged-controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/abstract-paged-controller-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/controllers/abstract-report-controller-test', ['exports', 'ember', 'ember-i18n/config/en', 'moment', 'ember-sinon-qunit/test-support/test', 'ember-i18n/helper', 'ember-qunit'], function (exports, _ember, _emberI18nConfigEn, _moment, _emberSinonQunitTestSupportTest, _emberI18nHelper, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:abstract-report-controller', 'Unit | Controller | abstract-report-controller', {\n    needs: ['service:i18n', 'locale:en/translations', 'locale:en/config', 'util:i18n/missing-message', 'util:i18n/compile-template', 'config:environment'],\n    beforeEach: function beforeEach() {\n      // set the locale and the config\n      this.container.lookup('service:i18n').set('locale', 'en');\n      this.registry.register('locale:en/config', _emberI18nConfigEn['default']);\n\n      // manually inject the i18n service as initialzer does not run\n      // in unit test\n      _ember['default'].getOwner(this).inject('controller', 'i18n', 'service:i18n');\n\n      // register t helper\n      this.registry.register('helper:t', _emberI18nHelper['default']);\n    }\n  });\n\n  (0, _emberSinonQunitTestSupportTest['default'])('_notifyReportError', function (assert) {\n    var controller = this.subject();\n    var closeProgressModal = this.stub(controller, 'closeProgressModal');\n    var displayAlert = this.stub(controller, 'displayAlert');\n\n    assert.throws(function () {\n      controller._notifyReportError('error message');\n    }, new Error('error message'), 'Should throw error');\n\n    assert.equal(displayAlert.getCall(0).args[0], 'Error Generating Report', 'Should set alert title');\n    assert.equal(displayAlert.getCall(0).args[1], 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.', 'Should set alert message');\n    assert.ok(closeProgressModal.calledOnce, 'Should close progress modal');\n  });\n\n  (0, _emberSinonQunitTestSupportTest['default'])('_setReportTitle', function (assert) {\n    var endDate = new Date(1482269979422);\n    var startDate = new Date(1472269979422);\n    var controller = this.subject({\n      endDate: endDate,\n      startDate: startDate,\n      reportTypes: [_ember['default'].Object.create({\n        value: 'one',\n        name: 'Number One'\n      }), _ember['default'].Object.create({\n        value: 'two',\n        name: 'Number Two'\n      })],\n      reportType: 'two'\n    });\n    controller._setReportTitle();\n\n    assert.equal(controller.get('reportTitle').toString(), 'Number Two Report ' + (0, _moment['default'])(startDate).format('l') + ' - ' + (0, _moment['default'])(endDate).format('l'));\n  });\n\n  (0, _emberSinonQunitTestSupportTest['default'])('_setReportTitle single date', function (assert) {\n    var endDate = new Date(1472269979422);\n    var controller = this.subject({\n      endDate: endDate,\n      reportTypes: [_ember['default'].Object.create({\n        value: 'one',\n        name: 'Number One'\n      }), _ember['default'].Object.create({\n        value: 'two',\n        name: 'Number Two'\n      })],\n      reportType: 'one'\n    });\n\n    this.stub(window, 'moment', function () {\n      return {\n        format: function format() {\n          return 'April 3rd, 2015';\n        }\n      };\n    });\n\n    controller._setReportTitle();\n\n    assert.equal(controller.get('reportTitle').toString(), 'Number One Report ' + (0, _moment['default'])(endDate).format('l'));\n  });\n\n  (0, _emberQunit.test)('actions.firstPage', function (assert) {\n    var controller = this.subject();\n\n    controller.send('firstPage');\n\n    assert.strictEqual(controller.get('offset'), 0);\n  });\n\n  (0, _emberQunit.test)('actions.nextPage', function (assert) {\n    var controller = this.subject({\n      offset: 8,\n      limit: 4\n    });\n\n    controller.send('nextPage');\n\n    assert.strictEqual(controller.get('offset'), 12);\n  });\n\n  (0, _emberQunit.test)('actions.previousPage', function (assert) {\n    var controller = this.subject({\n      offset: 8,\n      limit: 2\n    });\n\n    controller.send('previousPage');\n\n    assert.strictEqual(controller.get('offset'), 6);\n  });\n\n  (0, _emberQunit.test)('actions.lastPage', function (assert) {\n    var controller = this.subject({\n      limit: 1,\n      offset: 0,\n      reportRows: ['one', 'two', 'three']\n    });\n\n    controller.send('lastPage');\n\n    assert.strictEqual(controller.get('offset'), 3);\n  });\n\n  (0, _emberQunit.test)('currentReportRows', function (assert) {\n    var controller = this.subject({\n      limit: 2,\n      offset: 1,\n      reportRows: ['one', 'two', 'three', 'four']\n    });\n\n    assert.deepEqual(controller.get('currentReportRows'), ['two', 'three']);\n  });\n\n  (0, _emberQunit.test)('disablePreviousPage', function (assert) {\n    var controller = this.subject({\n      offset: 0\n    });\n\n    assert.strictEqual(controller.get('disablePreviousPage'), true);\n  });\n\n  (0, _emberQunit.test)('disablePreviousPage false', function (assert) {\n    var controller = this.subject({\n      offset: 2\n    });\n\n    assert.strictEqual(controller.get('disablePreviousPage'), false);\n  });\n\n  (0, _emberQunit.test)('disableNextPage', function (assert) {\n    var controller = this.subject({\n      limit: 1,\n      offset: 2,\n      reportRows: ['one', 'two', 'three']\n    });\n\n    assert.strictEqual(controller.get('disableNextPage'), true);\n  });\n\n  (0, _emberQunit.test)('disableNextPage false', function (assert) {\n    var controller = this.subject({\n      limit: 1,\n      offset: 1,\n      reportRows: ['one', 'two', 'three']\n    });\n\n    assert.strictEqual(controller.get('disableNextPage'), false);\n  });\n\n  (0, _emberQunit.test)('showPagination', function (assert) {\n    var controller = this.subject({\n      limit: 1,\n      offset: 0,\n      reportRows: ['one', 'two', 'three']\n    });\n\n    assert.strictEqual(controller.get('showPagination'), true);\n  });\n\n  (0, _emberQunit.test)('showPagination false', function (assert) {\n    var controller = this.subject({\n      limit: 3,\n      offset: 0,\n      reportRows: ['one', 'two', 'three']\n    });\n\n    assert.strictEqual(controller.get('showPagination'), false);\n  });\n});","define('hospitalrun/tests/unit/controllers/abstract-report-controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/controllers/abstract-report-controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/abstract-report-controller-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/appointment-statuses-test', ['exports', 'hospitalrun/mixins/appointment-statuses', 'ember-qunit', 'ember'], function (exports, _hospitalrunMixinsAppointmentStatuses, _emberQunit, _ember) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:appointment-statuses', 'Unit | Mixin | appointment-statuses');\n\n  (0, _emberQunit.test)('appointmentStatusList', function (assert) {\n    var appointmentStatuses = _ember['default'].Object.extend(_hospitalrunMixinsAppointmentStatuses['default']).create();\n    assert.deepEqual(appointmentStatuses.get('appointmentStatusList'), ['Attended', 'Scheduled', 'Canceled', 'Missed']);\n  });\n\n  (0, _emberQunit.test)('appointmentStatuses', function (assert) {\n    var appointmentStatuses = _ember['default'].Object.extend(_hospitalrunMixinsAppointmentStatuses['default']).create();\n    assert.deepEqual(appointmentStatuses.get('appointmentStatuses'), [{\n      id: 'Attended',\n      value: 'Attended'\n    }, {\n      id: 'Scheduled',\n      value: 'Scheduled'\n    }, {\n      id: 'Canceled',\n      value: 'Canceled'\n    }, {\n      id: 'Missed',\n      value: 'Missed'\n    }]);\n  });\n\n  (0, _emberQunit.test)('appointmentStatusesWithEmpty', function (assert) {\n    var appointmentStatuses = _ember['default'].Object.extend(_hospitalrunMixinsAppointmentStatuses['default']).create();\n    assert.deepEqual(appointmentStatuses.get('appointmentStatusesWithEmpty'), [{\n      id: '',\n      value: ''\n    }, {\n      id: 'Attended',\n      value: 'Attended'\n    }, {\n      id: 'Scheduled',\n      value: 'Scheduled'\n    }, {\n      id: 'Canceled',\n      value: 'Canceled'\n    }, {\n      id: 'Missed',\n      value: 'Missed'\n    }]);\n  });\n});","define('hospitalrun/tests/unit/mixins/appointment-statuses-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/appointment-statuses-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/appointment-statuses-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/can-edit-requested-test', ['exports', 'hospitalrun/mixins/can-edit-requested', 'ember-qunit', 'ember'], function (exports, _hospitalrunMixinsCanEditRequested, _emberQunit, _ember) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:can-edit-requested', 'Unit | Mixin | can-edit-requested');\n\n  (0, _emberQunit.test)('canEdit', function (assert) {\n    var canEditRequested = _ember['default'].Object.extend(_hospitalrunMixinsCanEditRequested['default']).create({\n      status: 'Requested'\n    });\n\n    assert.strictEqual(canEditRequested.get('canEdit'), true);\n  });\n\n  (0, _emberQunit.test)('canEdit false', function (assert) {\n    var canEditRequested = _ember['default'].Object.extend(_hospitalrunMixinsCanEditRequested['default']).create();\n\n    assert.strictEqual(canEditRequested.get('canEdit'), false);\n  });\n});","define('hospitalrun/tests/unit/mixins/can-edit-requested-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/can-edit-requested-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/can-edit-requested-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/date-format-test', ['exports', 'hospitalrun/mixins/date-format', 'ember-qunit', 'ember'], function (exports, _hospitalrunMixinsDateFormat, _emberQunit, _ember) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:date-format', 'Unit | Mixin | date-format');\n\n  (0, _emberQunit.test)('dateToTime', function (assert) {\n    var dateFormat = _ember['default'].Object.extend(_hospitalrunMixinsDateFormat['default']).create();\n\n    assert.strictEqual(dateFormat.dateToTime(new Date(1481665085175)), 1481665085175, 'Should return correct time');\n\n    assert.strictEqual(dateFormat.dateToTime(), undefined, 'Should return undefined for no argument');\n\n    assert.strictEqual(dateFormat.dateToTime(1481665085175), undefined, 'Should return undefined for non Date object');\n  });\n});","define('hospitalrun/tests/unit/mixins/date-format-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/date-format-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/date-format-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/dob-days-test', ['exports', 'hospitalrun/mixins/dob-days', 'ember-qunit', 'ember', 'ember-data', 'ember-i18n/helper', 'ember-i18n/config/en'], function (exports, _hospitalrunMixinsDobDays, _emberQunit, _ember, _emberData, _emberI18nHelper, _emberI18nConfigEn) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:dob-days', 'Unit | Mixin | dob-days', {\n    needs: ['service:i18n', 'locale:en/translations', 'locale:en/config', 'util:i18n/missing-message', 'util:i18n/compile-template', 'config:environment'],\n    beforeEach: function beforeEach() {\n      // set the locale and the config\n      this.container.lookup('service:i18n').set('locale', 'en');\n      this.registry.register('locale:en/config', _emberI18nConfigEn['default']);\n\n      // Inject i18n as the intializer does not run in unit test\n      _ember['default'].getOwner(this).inject('model', 'i18n', 'service:i18n');\n\n      // register t helper\n      this.registry.register('helper:t', _emberI18nHelper['default']);\n\n      // eslint-disable-next-line no-undef\n      timekeeper.freeze(new Date(1481784419830));\n    },\n    afterEach: function afterEach() {\n      // eslint-disable-next-line no-undef\n      timekeeper.reset();\n    },\n    subject: function subject(attrs) {\n      var _this = this;\n\n      var subject = undefined;\n      _ember['default'].run(function () {\n        var Test = _emberData['default'].Model.extend(_hospitalrunMixinsDobDays['default']);\n        _this.register('model:test', Test);\n        subject = _this.store().createRecord('test', attrs);\n      });\n\n      return subject;\n    },\n    store: function store() {\n      return this.container.lookup('service:store');\n    }\n  });\n\n  (0, _emberQunit.test)('convertDOBToText', function (assert) {\n    var dobDays = this.subject();\n\n    assert.strictEqual(dobDays.convertDOBToText(new Date(789109200000)).toString(), '21 years 11 months 12 days');\n  });\n\n  (0, _emberQunit.test)('convertDOBToText date string', function (assert) {\n    var dobDays = this.subject();\n\n    assert.strictEqual(dobDays.convertDOBToText('January 3rd, 1995').toString(), '21 years 8 months 26 days');\n  });\n\n  (0, _emberQunit.test)('convertDOBToText date string short format', function (assert) {\n    var dobDays = this.subject();\n\n    assert.strictEqual(dobDays.convertDOBToText('January 3rd, 1995', true).toString(), '21y 8m 26d');\n  });\n\n  (0, _emberQunit.test)('convertDOBToText date string omit days', function (assert) {\n    var dobDays = this.subject();\n\n    assert.strictEqual(dobDays.convertDOBToText('January 3rd, 1995', false, true).toString(), '21 years 8 months');\n  });\n});","define('hospitalrun/tests/unit/mixins/dob-days-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/dob-days-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dob-days-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/inventory-adjustment-types-test', ['exports', 'hospitalrun/mixins/inventory-adjustment-types', 'ember-qunit', 'ember', 'ember-i18n/helper', 'ember-i18n/config/en'], function (exports, _hospitalrunMixinsInventoryAdjustmentTypes, _emberQunit, _ember, _emberI18nHelper, _emberI18nConfigEn) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:inventory-adjustment-types', 'Unit | Mixin | inventory-adjustment-types', {\n    needs: ['service:i18n', 'locale:en/translations', 'locale:en/config', 'util:i18n/missing-message', 'util:i18n/compile-template', 'config:environment'],\n    beforeEach: function beforeEach() {\n      // set the locale and the config\n      this.container.lookup('service:i18n').set('locale', 'en');\n      this.registry.register('locale:en/config', _emberI18nConfigEn['default']);\n\n      // Inject i18n as the intializer does not run in unit test\n      _ember['default'].getOwner(this).inject('inventory-adjustment-types', 'i18n', 'service:i18n');\n\n      // register t helper\n      this.registry.register('helper:t', _emberI18nHelper['default']);\n    },\n    subject: function subject() {\n      var AdjustmentTypesObject = _ember['default'].Object.extend(_hospitalrunMixinsInventoryAdjustmentTypes['default']);\n      this.registry.register('inventory-adjustment-types:main', AdjustmentTypesObject);\n      return _ember['default'].getOwner(this).lookup('inventory-adjustment-types:main');\n    }\n  });\n\n  (0, _emberQunit.test)('checkTranslations', function (assert) {\n    var InventoryAdjustmentTypes = this.subject();\n    assert.deepEqual(InventoryAdjustmentTypes.get('adjustmentTypes'), [{\n      name: 'Add',\n      type: 'Adjustment (Add)'\n    }, {\n      name: 'Remove',\n      type: 'Adjustment (Remove)'\n    }, {\n      name: 'Return To Vendor',\n      type: 'Return To Vendor'\n    }, {\n      name: 'Return',\n      type: 'Return'\n    }, {\n      name: 'Write Off',\n      type: 'Write Off'\n    }]);\n  });\n});","define('hospitalrun/tests/unit/mixins/inventory-adjustment-types-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/inventory-adjustment-types-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/inventory-adjustment-types-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/location-name-test', ['exports', 'hospitalrun/mixins/location-name', 'ember-qunit', 'ember', 'ember-data'], function (exports, _hospitalrunMixinsLocationName, _emberQunit, _ember, _emberData) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:location-name', 'Unit | Mixin | location-name', {\n    subject: function subject(attrs) {\n      var _this = this;\n\n      var subject = undefined;\n      _ember['default'].run(function () {\n        var Test = _emberData['default'].Model.extend(_hospitalrunMixinsLocationName['default']);\n        _this.register('model:test', Test);\n        subject = _this.store().createRecord('test', attrs);\n      });\n\n      return subject;\n    },\n    store: function store() {\n      return this.container.lookup('service:store');\n    }\n  });\n\n  (0, _emberQunit.test)('getDisplayLocationName', function (assert) {\n    var locationName = this.subject();\n\n    assert.strictEqual(locationName.getDisplayLocationName('Location', 'Aisle'), 'Location : Aisle', 'Should include both');\n    assert.strictEqual(locationName.getDisplayLocationName('Location'), 'Location', 'Should only include location');\n    assert.strictEqual(locationName.getDisplayLocationName('', 'Aisle'), 'Aisle', 'Should only include aisle location');\n    assert.strictEqual(locationName.getDisplayLocationName('', ''), 'No Location', 'Should return default \"No Location\" message');\n  });\n\n  (0, _emberQunit.test)('locationName', function (assert) {\n    var locationName = this.subject({\n      location: 'Location',\n      aisleLocation: 'Aisle'\n    });\n\n    assert.strictEqual(locationName.get('locationName'), 'Location : Aisle');\n  });\n});","define('hospitalrun/tests/unit/mixins/location-name-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/location-name-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/location-name-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/medication-details-test', ['exports', 'hospitalrun/mixins/medication-details', 'ember-qunit', 'ember', 'ember-data'], function (exports, _hospitalrunMixinsMedicationDetails, _emberQunit, _ember, _emberData) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:medication-details', 'Unit | Mixin | medication-details', {\n    needs: ['ember-validations@validator:local/numericality', 'ember-validations@validator:local/presence', 'model:inventory', 'model:inv-purchase', 'model:inv-location'],\n    subject: function subject(attrs) {\n      var _this = this;\n\n      var subject = undefined;\n      _ember['default'].run(function () {\n        var Test = _emberData['default'].Model.extend(_hospitalrunMixinsMedicationDetails['default']);\n        _this.register('model:test', Test);\n        subject = _this.store().createRecord('test', attrs);\n      });\n\n      return subject;\n    },\n    store: function store() {\n      return this.container.lookup('service:store');\n    }\n  });\n\n  (0, _emberQunit.test)('getMedicationName', function (assert) {\n    var medicationDetails = this.subject({\n      medicationTitle: 'Medication Title'\n    });\n\n    assert.strictEqual(medicationDetails.getMedicationName(), 'Medication Title');\n  });\n\n  (0, _emberQunit.test)('getMedicationName prefer medicationTitle', function (assert) {\n    var _this2 = this;\n\n    var inventoryItem = undefined;\n    _ember['default'].run(function () {\n      inventoryItem = _this2.store().createRecord('inventory', {\n        name: 'Test Item'\n      });\n    });\n\n    var medicationDetails = this.subject({\n      medicationTitle: 'Medication Title',\n      inventoryItem: inventoryItem\n    });\n\n    assert.strictEqual(medicationDetails.getMedicationName('inventoryItem'), 'Medication Title');\n  });\n\n  (0, _emberQunit.test)('getMedicationName attribute', function (assert) {\n    var _this3 = this;\n\n    var inventoryItem = undefined;\n    _ember['default'].run(function () {\n      inventoryItem = _this3.store().createRecord('inventory', {\n        name: 'Test Item'\n      });\n    });\n\n    var medicationDetails = this.subject({ inventoryItem: inventoryItem });\n    /**\n     * We run this twice because if this gets the value from\n     * the attribute it does not actually return the value\n     */\n    _ember['default'].run(function () {\n      return medicationDetails.getMedicationName('inventoryItem');\n    });\n\n    assert.strictEqual(medicationDetails.getMedicationName('inventoryItem'), 'Test Item');\n  });\n\n  (0, _emberQunit.test)('getMedicationPrice', function (assert) {\n    var medicationDetails = this.subject({\n      priceOfMedication: 15.50\n    });\n\n    assert.strictEqual(medicationDetails.getMedicationPrice(), 15.50);\n  });\n\n  (0, _emberQunit.test)('getMedicationPrice prefer priceOfMedication', function (assert) {\n    var _this4 = this;\n\n    var inventoryItem = undefined;\n    _ember['default'].run(function () {\n      inventoryItem = _this4.store().createRecord('inventory', {\n        name: 'Test Item',\n        price: 12.15\n      });\n    });\n\n    var medicationDetails = this.subject({\n      priceOfMedication: 15.5,\n      inventoryItem: inventoryItem\n    });\n\n    assert.strictEqual(medicationDetails.getMedicationPrice('inventoryItem'), 15.5);\n  });\n\n  (0, _emberQunit.test)('getMedicationPrice attribute', function (assert) {\n    var _this5 = this;\n\n    var inventoryItem = undefined;\n    _ember['default'].run(function () {\n      inventoryItem = _this5.store().createRecord('inventory', {\n        name: 'Test Item',\n        price: 22.33\n      });\n    });\n\n    var medicationDetails = this.subject({ inventoryItem: inventoryItem });\n\n    /**\n     * We run this twice because if this gets the value from\n     * the attribute it does not actually return the value\n     */\n    _ember['default'].run(function () {\n      return medicationDetails.getMedicationPrice('inventoryItem');\n    });\n\n    assert.strictEqual(medicationDetails.getMedicationPrice('inventoryItem'), 22.33);\n  });\n\n  (0, _emberQunit.test)('getMedicationDetails', function (assert) {\n    var done = assert.async();\n\n    var medicationDetails = this.subject({\n      medicationTitle: 'Medication Title',\n      priceOfMedication: 65.77\n    });\n\n    medicationDetails.getMedicationDetails().then(function (result) {\n      assert.deepEqual(result, {\n        name: 'Medication Title',\n        price: 65.77\n      });\n\n      done();\n    });\n  });\n});","define('hospitalrun/tests/unit/mixins/medication-details-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/medication-details-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/medication-details-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/number-format-test', ['exports', 'hospitalrun/mixins/number-format', 'ember-qunit', 'ember'], function (exports, _hospitalrunMixinsNumberFormat, _emberQunit, _ember) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:number-format', 'Unit | Mixin | number-format');\n\n  (0, _emberQunit.test)('_calculateTotal', function (assert) {\n    var records = [5, 5, 6].map(function (id) {\n      return _ember['default'].Object.create({ id: id });\n    });\n    var numberFormat = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']).create({ records: records });\n\n    assert.strictEqual(numberFormat._calculateTotal('records', 'id'), 16, 'Should add property array');\n  });\n\n  (0, _emberQunit.test)('_calculateTotal property name', function (assert) {\n    var records = [5, 2, 3].map(function (id) {\n      return _ember['default'].Object.create({ id: id });\n    });\n    var numberFormat = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']).create();\n\n    assert.strictEqual(numberFormat._calculateTotal(records, 'id'), 10, 'Should add passed in array');\n  });\n\n  (0, _emberQunit.test)('_calculateTotal invalid number', function (assert) {\n    var records = [5, 'test', 3].map(function (id) {\n      return _ember['default'].Object.create({ id: id });\n    });\n    var numberFormat = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']).create({ records: records });\n\n    assert.strictEqual(numberFormat._calculateTotal('records', 'id'), 8, 'Should treat invalid number as 0');\n  });\n\n  (0, _emberQunit.test)('_numberFormat', function (assert) {\n    var numberFormat = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']).create();\n\n    assert.strictEqual(numberFormat._numberFormat(), undefined, 'Should return undefined for no argument');\n    assert.strictEqual(numberFormat._numberFormat('test'), undefined, 'Should return undefined for no number');\n    assert.strictEqual(numberFormat._numberFormat(12), '12', 'Should return basic int as string');\n    assert.strictEqual(numberFormat._numberFormat(12, true), 12, 'Should return basic int as number');\n    assert.strictEqual(numberFormat._numberFormat(12.2, true), 12.2, 'Should round tenths properly');\n    assert.strictEqual(numberFormat._numberFormat(12.2), '12.20', 'Should pad decial to two places');\n    assert.strictEqual(numberFormat._numberFormat(35.555, true), 35.56, 'Should round 35.555 to 35.56');\n    assert.strictEqual(numberFormat._numberFormat(35.555), '35.56', 'Should return 35.555 as string \"35.56\"');\n  });\n\n  (0, _emberQunit.test)('_getValidNumber', function (assert) {\n    var numberFormat = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']).create();\n\n    assert.strictEqual(numberFormat._getValidNumber(), 0, 'Should return 0 for no argument');\n    assert.strictEqual(numberFormat._getValidNumber('test'), 0, 'Should return 0 for invalid number');\n    assert.strictEqual(numberFormat._getValidNumber(NaN), 0, 'Should return 0 for NaN');\n    assert.strictEqual(numberFormat._getValidNumber('12.2'), 12.2, 'Should convert string to number');\n    assert.strictEqual(numberFormat._getValidNumber(1), 1, 'Should return basic int');\n  });\n\n  (0, _emberQunit.test)('_validNumber', function (assert) {\n    var numberFormat = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']).create();\n\n    assert.strictEqual(numberFormat._validNumber(1), true, 'Should return true for basic int');\n    assert.strictEqual(numberFormat._validNumber(1.5), true, 'Should return true for float');\n    assert.strictEqual(numberFormat._validNumber('1'), true, 'Should return true for numeric string');\n    assert.strictEqual(numberFormat._validNumber(-1), false, 'Should return false for negative');\n    assert.strictEqual(numberFormat._validNumber('test'), false, 'Should return false for non numeric string');\n  });\n});","define('hospitalrun/tests/unit/mixins/number-format-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/number-format-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/number-format-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/patient-diagnosis-test', ['exports', 'hospitalrun/mixins/patient-diagnosis', 'ember-qunit', 'ember'], function (exports, _hospitalrunMixinsPatientDiagnosis, _emberQunit, _ember) {\n  'use strict';\n\n  var DIAGNOSIS_PROPERTIES = ['active', 'date', 'diagnosis', 'secondaryDiagnosis'];\n\n  function diagnosesDump(diagnoses) {\n    return diagnoses.map(function (diagnosis) {\n      return diagnosis.getProperties(DIAGNOSIS_PROPERTIES);\n    });\n  }\n\n  (0, _emberQunit.moduleFor)('mixin:patient-diagnosis', 'Unit | Mixin | patient-diagnosis', {\n    needs: ['model:visit', 'model:proc-charge', 'model:patient', 'model:vital', 'model:imaging', 'model:lab', 'model:medication', 'model:patient-note', 'model:procedure', 'model:diagnosis', 'model:report', 'ember-validations@validator:local/acceptance', 'ember-validations@validator:local/presence'],\n    store: function store() {\n      return this.container.lookup('service:store');\n    },\n    getVisitData: function getVisitData() {\n      var _this = this;\n\n      return _ember['default'].run(function () {\n        var visitDate = new Date(1393822800000);\n        return _this.store().createRecord('visit', {\n          startDate: visitDate,\n          diagnoses: [{\n            diagnosis: 'primary one',\n            date: visitDate\n          }, {\n            active: false,\n            date: new Date(1372822800000),\n            diagnosis: 'primary two'\n          }, {\n            diagnosis: 'additional diag one a',\n            secondaryDiagnosis: true,\n            date: visitDate,\n            active: true\n          }, {\n            diagnosis: 'additional diag one b',\n            secondaryDiagnosis: true,\n            date: visitDate,\n            active: false\n          }].map(function (diagnosis) {\n            return _this.store().createRecord('diagnosis', diagnosis);\n          })\n        });\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('get active primary diagnoses', function (assert) {\n    var patientDiagnosis = _ember['default'].Object.extend(_hospitalrunMixinsPatientDiagnosis['default']).create();\n    var visit = this.getVisitData();\n    var diagnosesList = patientDiagnosis.getDiagnoses(visit, true, false);\n    assert.deepEqual(diagnosesDump(diagnosesList), [{\n      active: true,\n      date: new Date('Mon Mar 03 2014 00:00:00 GMT-0500 (EST)'),\n      diagnosis: 'primary one',\n      secondaryDiagnosis: false\n    }], 'Only active primary diagnoses are returned', assert);\n  });\n\n  (0, _emberQunit.test)('get all primary diagnoses', function (assert) {\n    var patientDiagnosis = _ember['default'].Object.extend(_hospitalrunMixinsPatientDiagnosis['default']).create();\n    var visit = this.getVisitData();\n    var diagnosesList = patientDiagnosis.getDiagnoses(visit, false, false);\n    assert.deepEqual(diagnosesDump(diagnosesList), [{\n      active: true,\n      date: new Date('Mon Mar 03 2014 00:00:00 GMT-0500 (EST)'),\n      diagnosis: 'primary one',\n      secondaryDiagnosis: false\n    }, {\n      active: false,\n      date: new Date('Tue Jul 02 2013 23:40:00 GMT-0400 (EDT)'),\n      diagnosis: 'primary two',\n      secondaryDiagnosis: false\n    }], 'All primary diagnoses are returned', assert);\n  });\n\n  (0, _emberQunit.test)('get active secondary diagnoses', function (assert) {\n    var patientDiagnosis = _ember['default'].Object.extend(_hospitalrunMixinsPatientDiagnosis['default']).create();\n    var visit = this.getVisitData();\n    var diagnosesList = patientDiagnosis.getDiagnoses(visit, true, true);\n    assert.deepEqual(diagnosesDump(diagnosesList), [{\n      active: true,\n      date: new Date('Mon Mar 03 2014 00:00:00 GMT-0500 (EST)'),\n      diagnosis: 'additional diag one a',\n      secondaryDiagnosis: true\n    }], 'Only active secondary diagnoses are returned');\n  });\n\n  (0, _emberQunit.test)('get all secondary diagnoses', function (assert) {\n    var patientDiagnosis = _ember['default'].Object.extend(_hospitalrunMixinsPatientDiagnosis['default']).create();\n    var visit = this.getVisitData();\n    var diagnosesList = patientDiagnosis.getDiagnoses(visit, false, true);\n    assert.deepEqual(diagnosesDump(diagnosesList), [{\n      active: true,\n      date: new Date('Mon Mar 03 2014 00:00:00 GMT-0500 (EST)'),\n      diagnosis: 'additional diag one a',\n      secondaryDiagnosis: true\n    }, {\n      active: false,\n      date: new Date('Mon Mar 03 2014 00:00:00 GMT-0500 (EST)'),\n      diagnosis: 'additional diag one b',\n      secondaryDiagnosis: true\n    }], 'All secondary diagnoses are returned');\n  });\n});","define('hospitalrun/tests/unit/mixins/patient-diagnosis-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/patient-diagnosis-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/patient-diagnosis-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/patient-name-test', ['exports', 'hospitalrun/mixins/patient-name', 'ember-qunit', 'ember', 'ember-data'], function (exports, _hospitalrunMixinsPatientName, _emberQunit, _ember, _emberData) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:patient-name', 'Unit | Mixin | patient-name', {\n    needs: ['ember-validations@validator:local/format', 'ember-validations@validator:local/presence', 'model:allergy', 'model:diagnosis', 'model:operation-report', 'model:operative-plan', 'model:patient', 'model:payment', 'model:price-profile'],\n    subject: function subject(attrs) {\n      var _this = this;\n\n      var subject = undefined;\n      _ember['default'].run(function () {\n        var Test = _emberData['default'].Model.extend(_hospitalrunMixinsPatientName['default']);\n        _this.register('model:test', Test);\n        subject = _this.store().createRecord('test', attrs);\n      });\n\n      return subject;\n    },\n    store: function store() {\n      return this.container.lookup('service:store');\n    }\n  });\n\n  (0, _emberQunit.test)('getPatientDisplayId friendlyId', function (assert) {\n    var _this2 = this;\n\n    var patient = undefined;\n    _ember['default'].run(function () {\n      patient = _this2.store().createRecord('patient', {\n        friendlyId: 'test',\n        id: '123'\n      });\n    });\n\n    assert.strictEqual(this.subject().getPatientDisplayId(patient), 'test');\n  });\n\n  (0, _emberQunit.test)('getPatientDisplayId externalPatientId', function (assert) {\n    var _this3 = this;\n\n    var patient = undefined;\n    _ember['default'].run(function () {\n      patient = _this3.store().createRecord('patient', {\n        externalPatientId: '1234',\n        id: '4321'\n      });\n    });\n\n    assert.strictEqual(this.subject().getPatientDisplayId(patient), '1234');\n  });\n\n  (0, _emberQunit.test)('getPatientDisplayId id', function (assert) {\n    var _this4 = this;\n\n    var patient = undefined;\n    _ember['default'].run(function () {\n      patient = _this4.store().createRecord('patient', {\n        id: '9876'\n      });\n    });\n\n    assert.strictEqual(this.subject().getPatientDisplayId(patient), '9876');\n  });\n\n  (0, _emberQunit.test)('getPatientDisplayName', function (assert) {\n    var _this5 = this;\n\n    var patient = undefined;\n    _ember['default'].run(function () {\n      patient = _this5.store().createRecord('patient', {\n        firstName: 'First',\n        lastName: 'Last',\n        middleName: 'Middle'\n      });\n    });\n\n    assert.strictEqual(this.subject().getPatientDisplayName(patient), 'First Middle Last');\n  });\n\n  (0, _emberQunit.test)('getPatientDisplayName first', function (assert) {\n    var _this6 = this;\n\n    var patient = undefined;\n    _ember['default'].run(function () {\n      patient = _this6.store().createRecord('patient', {\n        firstName: 'First'\n      });\n    });\n\n    assert.strictEqual(this.subject().getPatientDisplayName(patient), 'First');\n  });\n\n  (0, _emberQunit.test)('getPatientDisplayName first and last', function (assert) {\n    var _this7 = this;\n\n    var patient = undefined;\n    _ember['default'].run(function () {\n      patient = _this7.store().createRecord('patient', {\n        firstName: 'First',\n        lastName: 'Last'\n      });\n    });\n\n    assert.strictEqual(this.subject().getPatientDisplayName(patient), 'First Last');\n  });\n\n  (0, _emberQunit.test)('getPatientDisplayName last', function (assert) {\n    var _this8 = this;\n\n    var patient = undefined;\n    _ember['default'].run(function () {\n      patient = _this8.store().createRecord('patient', {\n        lastName: 'Last'\n      });\n    });\n\n    assert.strictEqual(this.subject().getPatientDisplayName(patient), 'Last');\n  });\n});","define('hospitalrun/tests/unit/mixins/patient-name-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/patient-name-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/patient-name-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/mixins/return-to-test', ['exports', 'hospitalrun/mixins/return-to', 'ember-qunit', 'ember', 'ember-data'], function (exports, _hospitalrunMixinsReturnTo, _emberQunit, _ember, _emberData) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('mixin:return-to', 'Unit | Mixin | return-to', {\n    subject: function subject(attrs) {\n      var _this = this;\n\n      return _ember['default'].run(function () {\n        var Test = _emberData['default'].Model.extend(_hospitalrunMixinsReturnTo['default']);\n        _this.register('model:test', Test);\n        return _this.store().createRecord('test', attrs);\n      });\n    },\n    store: function store() {\n      return this.container.lookup('service:store');\n    }\n  });\n\n  (0, _emberQunit.test)('cancelAction', function (assert) {\n    var returnTo = this.subject({\n      model: {\n        returnTo: 'test'\n      }\n    });\n\n    assert.strictEqual(returnTo.get('cancelAction'), 'returnTo');\n  });\n\n  (0, _emberQunit.test)('cancelAction allItems', function (assert) {\n    var returnTo = this.subject();\n\n    assert.strictEqual(returnTo.get('cancelAction'), 'allItems');\n  });\n});","define('hospitalrun/tests/unit/mixins/return-to-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/mixins/return-to-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/return-to-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/add-diagnosis-test', ['exports', 'ember-qunit', 'hospitalrun/tests/helpers/validate-properties'], function (exports, _emberQunit, _hospitalrunTestsHelpersValidateProperties) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('add-diagnosis', 'Unit | Model | add-diagnosis', {\n    // Specify the other units that are required for this test.\n    needs: ['ember-validations@validator:local/presence']\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('diagnosis', ['test']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('diagnosis', [undefined]);\n});","define('hospitalrun/tests/unit/models/add-diagnosis-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/add-diagnosis-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/add-diagnosis-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/appointment-test', ['exports', 'ember-qunit', 'hospitalrun/tests/helpers/validate-properties'], function (exports, _emberQunit, _hospitalrunTestsHelpersValidateProperties) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('appointment', 'Unit | Model | appointment', {\n    needs: ['ember-validations@validator:local/acceptance', 'ember-validations@validator:local/presence', 'model:patient', 'model:visit']\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('appointmentType', ['test']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('appointmentType', [undefined]);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('startDate', ['test']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('startDate', [undefined]);\n});","define('hospitalrun/tests/unit/models/appointment-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/appointment-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/appointment-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/billing-line-item-test', ['exports', 'ember-qunit', 'hospitalrun/tests/helpers/validate-properties'], function (exports, _emberQunit, _hospitalrunTestsHelpersValidateProperties) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('billing-line-item', 'Unit | Model | billing-line-item', {\n    needs: ['ember-validations@validator:local/presence', 'ember-validations@validator:local/numericality', 'model:line-item-detail']\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('category', ['test']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('category', [undefined]);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('discount', [123, '123', 0.123, undefined]);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('discount', ['test']);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('nationalInsurance', [123, '123', 0.123, undefined]);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('nationalInsurance', ['test']);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('name', ['test']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('name', [undefined]);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('privateInsurance', [123, '123', 0.123, undefined]);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('privateInsurance', ['test']);\n});","define('hospitalrun/tests/unit/models/billing-line-item-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/billing-line-item-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/billing-line-item-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/family-info-test', ['exports', 'ember-qunit', 'hospitalrun/tests/helpers/validate-properties'], function (exports, _emberQunit, _hospitalrunTestsHelpersValidateProperties) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('family-info', 'Unit | Model | family-info', {\n    needs: ['ember-validations@validator:local/presence', 'ember-validations@validator:local/numericality']\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('age', [123, 123.0, '123', undefined]);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('age', ['test']);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('name', ['Test Person']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('name', [undefined]);\n});","define('hospitalrun/tests/unit/models/family-info-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/family-info-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/family-info-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/imaging-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('imaging', 'Unit | Model | imaging', {\n    needs: ['model:proc-charge', 'model:pricing', 'model:patient', 'model:visit', 'ember-validations@validator:local/acceptance', 'ember-validations@validator:local/presence']\n  });\n\n  (0, _emberQunit.test)('imagingDateAsTime', function (assert) {\n    var imaging = this.subject({\n      imagingDate: new Date(1131593040000)\n    });\n\n    assert.strictEqual(imaging.get('imagingDateAsTime'), 1131593040000);\n  });\n\n  (0, _emberQunit.test)('requestedDateAsTime', function (assert) {\n    var imaging = this.subject({\n      requestedDate: new Date(1131593040000)\n    });\n\n    assert.strictEqual(imaging.get('requestedDateAsTime'), 1131593040000);\n  });\n});","define('hospitalrun/tests/unit/models/imaging-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/imaging-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/imaging-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/inv-location-test', ['exports', 'ember-qunit', 'ember-i18n/helper', 'ember-i18n/config/en'], function (exports, _emberQunit, _emberI18nHelper, _emberI18nConfigEn) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('inv-location', 'Unit | Model | inv-location', {\n    needs: ['ember-validations@validator:local/numericality', 'ember-validations@validator:local/acceptance', 'ember-validations@validator:local/presence', 'service:i18n', 'locale:en/translations', 'locale:en/config', 'util:i18n/missing-message', 'util:i18n/compile-template', 'config:environment'],\n    beforeEach: function beforeEach() {\n      // set the locale and the config\n      this.container.lookup('service:i18n').set('locale', 'en');\n      this.registry.register('locale:en/config', _emberI18nConfigEn['default']);\n\n      // register t helper\n      this.registry.register('helper:t', _emberI18nHelper['default']);\n    }\n  });\n\n  (0, _emberQunit.test)('locationNameWithQuantity', function (assert) {\n    var invLocation = this.subject({\n      quantity: 3,\n      locationName: 'Test Location'\n    });\n\n    assert.equal(invLocation.get('locationNameWithQuantity'), 'Test Location (3 available)');\n  });\n});","define('hospitalrun/tests/unit/models/inv-location-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/inv-location-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/inv-location-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/inv-purchase-test', ['exports', 'ember-qunit', 'hospitalrun/tests/helpers/validate-properties'], function (exports, _emberQunit, _hospitalrunTestsHelpersValidateProperties) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('inv-purchase', 'Unit | Model | inv-purchase', {\n    needs: ['ember-validations@validator:local/numericality', 'ember-validations@validator:local/presence']\n  });\n\n  (0, _emberQunit.test)('costPerUnit', function (assert) {\n    var inventoryPurchaseItem = this.subject({\n      purchaseCost: 12.50,\n      originalQuantity: 5\n    });\n\n    assert.strictEqual(inventoryPurchaseItem.get('costPerUnit'), 2.5);\n  });\n\n  (0, _emberQunit.test)('costPerUnit properly round', function (assert) {\n    var inventoryPurchaseItem = this.subject({\n      purchaseCost: 71.11,\n      originalQuantity: 2\n    });\n\n    assert.strictEqual(inventoryPurchaseItem.get('costPerUnit'), 35.56);\n  });\n\n  (0, _emberQunit.test)('costPerUnit invalid input', function (assert) {\n    var inventoryPurchaseItem = this.subject({\n      purchaseCost: 0,\n      originalQuantity: 5\n    });\n\n    assert.strictEqual(inventoryPurchaseItem.get('costPerUnit'), 0);\n  });\n\n  (0, _emberQunit.test)('costPerUnit 0 input', function (assert) {\n    var inventoryPurchaseItem = this.subject({\n      purchaseCost: 12.50,\n      originalQuantity: 0\n    });\n\n    assert.strictEqual(inventoryPurchaseItem.get('costPerUnit'), 0);\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('purchaseCost', [123, 123.0, '123']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('purchaseCost', ['test', undefined]);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('originalQuantity', [0, 123, '0']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('originalQuantity', [-1, '-1', undefined]);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('vendor', ['test']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('vendor', [undefined]);\n});","define('hospitalrun/tests/unit/models/inv-purchase-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/inv-purchase-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/inv-purchase-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/inv-request-test', ['exports', 'ember-qunit', 'ember', 'ember-i18n/helper', 'ember-i18n/config/en', 'hospitalrun/tests/helpers/validate-properties'], function (exports, _emberQunit, _ember, _emberI18nHelper, _emberI18nConfigEn, _hospitalrunTestsHelpersValidateProperties) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('inv-request', 'Unit | Model | inv-request', {\n    needs: ['ember-validations@validator:local/acceptance', 'ember-validations@validator:local/format', 'ember-validations@validator:local/numericality', 'ember-validations@validator:local/presence', 'model:allergy', 'model:diagnosis', 'model:inventory', 'model:operation-report', 'model:operative-plan', 'model:patient', 'model:payment', 'model:price-profile', 'model:visit', 'service:i18n', 'locale:en/translations', 'locale:en/config', 'util:i18n/missing-message', 'util:i18n/compile-template', 'config:environment'],\n    beforeEach: function beforeEach() {\n      // set the locale and the config\n      this.container.lookup('service:i18n').set('locale', 'en');\n      this.registry.register('locale:en/config', _emberI18nConfigEn['default']);\n\n      _ember['default'].getOwner(this).inject('model', 'i18n', 'service:i18n');\n\n      // register t helper\n      this.registry.register('helper:t', _emberI18nHelper['default']);\n    }\n  });\n\n  (0, _emberQunit.test)('deliveryLocationName', function (assert) {\n    var inventoryRequest = this.subject({\n      deliveryAisle: 'Test Aisle',\n      deliveryLocation: 'Test Location'\n    });\n\n    assert.strictEqual(inventoryRequest.get('deliveryLocationName'), 'Test Location : Test Aisle');\n  });\n\n  (0, _emberQunit.test)('deliveryDetails', function (assert) {\n    var _this = this;\n\n    var patient = undefined;\n    _ember['default'].run(function () {\n      patient = _this.store().createRecord('patient', {\n        firstName: 'First'\n      });\n    });\n\n    var inventoryRequest = this.subject({\n      deliveryAisle: 'Test Aisle',\n      deliveryLocation: 'Test Location',\n      patient: patient\n    });\n\n    assert.strictEqual(inventoryRequest.get('deliveryDetails'), 'First');\n  });\n\n  (0, _emberQunit.test)('deliveryDetails without patient', function (assert) {\n    var inventoryRequest = this.subject({\n      deliveryAisle: 'Test Aisle',\n      deliveryLocation: 'Test Location'\n    });\n\n    assert.strictEqual(inventoryRequest.get('deliveryDetails'), 'Test Location : Test Aisle');\n  });\n\n  (0, _emberQunit.test)('haveReason', function (assert) {\n    var inventoryRequest = this.subject({\n      reason: true\n    });\n\n    assert.strictEqual(inventoryRequest.get('haveReason'), true);\n  });\n\n  (0, _emberQunit.test)('haveReason false', function (assert) {\n    assert.strictEqual(this.subject().get('haveReason'), false);\n  });\n\n  (0, _emberQunit.test)('isAdjustment', function (assert) {\n    var inventoryRequest = this.subject({\n      transactionType: 'Return To Vendor'\n    });\n\n    assert.strictEqual(inventoryRequest.get('isAdjustment'), true);\n  });\n\n  (0, _emberQunit.test)('isAdjustment false', function (assert) {\n    var inventoryRequest = this.subject({\n      transactionType: 'Fulfillment'\n    });\n\n    assert.strictEqual(inventoryRequest.get('isAdjustment'), false);\n  });\n\n  (0, _emberQunit.test)('isFulfillment', function (assert) {\n    var inventoryRequest = this.subject({\n      transactionType: 'Fulfillment'\n    });\n\n    assert.strictEqual(inventoryRequest.get('isFulfillment'), true);\n  });\n\n  (0, _emberQunit.test)('isTransfet', function (assert) {\n    var inventoryRequest = this.subject({\n      transactionType: 'Transfer'\n    });\n\n    assert.strictEqual(inventoryRequest.get('isTransfer'), true);\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('quantity', [0.5, 1, '123']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('quantity', [-1, -0.00001, undefined]);\n});","define('hospitalrun/tests/unit/models/inv-request-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/inv-request-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/inv-request-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/inventory-batch-test', ['exports', 'ember-qunit', 'hospitalrun/tests/helpers/validate-properties'], function (exports, _emberQunit, _hospitalrunTestsHelpersValidateProperties) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('inventory-batch', 'Unit | Model | inventory-batch', {\n    needs: ['ember-validations@validator:local/presence', 'ember-validations@validator:local/numericality']\n  });\n\n  (0, _emberQunit.test)('haveInvoiceItems', function (assert) {\n    var inventoryBatch = this.subject({\n      invoiceItems: ['test have']\n    });\n\n    assert.strictEqual(inventoryBatch.haveInvoiceItems(), true);\n  });\n\n  (0, _emberQunit.test)('haveInvoiceItems false', function (assert) {\n    var inventoryBatch = this.subject();\n\n    assert.strictEqual(inventoryBatch.haveInvoiceItems(), false);\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('dateReceived', ['test dr']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('dateReceived', [undefined]);\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('inventoryItemTypeAhead', ['test']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('inventoryItemTypeAhead', [undefined]);\n  // Test skip validation\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('inventoryItemTypeAhead', [undefined], function (subject) {\n    subject.set('invoiceItems', ['item']);\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('quantity', [0.001, 1, '123']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('quantity', [-1, 0, '-1']);\n  // Test skip validation\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('quantity', [-1], function (subject) {\n    subject.set('invoiceItems', ['item']);\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('purchaseCost', [0.001, 1, '123']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('purchaseCost', [-1, 0, '-1']);\n  // Test skip validation\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('purchaseCost', [-1], function (subject) {\n    subject.set('invoiceItems', ['item']);\n  });\n\n  (0, _hospitalrunTestsHelpersValidateProperties.testValidPropertyValues)('vendor', ['test']);\n  (0, _hospitalrunTestsHelpersValidateProperties.testInvalidPropertyValues)('vendor', [undefined]);\n});","define('hospitalrun/tests/unit/models/inventory-batch-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/inventory-batch-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/inventory-batch-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/inventory-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('inventory', 'Unit | Model | inventory', {\n    // Specify the other units that are required for this test.\n    needs: ['ember-validations@validator:local/numericality', 'ember-validations@validator:local/presence', 'model:inv-location', 'model:inv-purchase', 'service:validations']\n  });\n\n  (0, _emberQunit.test)('condition', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model, 'Model exists');\n\n    _ember['default'].run(function () {\n      model.setProperties({\n        estimatedDaysOfStock: 28,\n        rank: 'A'\n      });\n    });\n    assert.equal(model.get('condition'), 'good', 'Condition Should be good with given values');\n\n    _ember['default'].run(function () {\n      model.set('estimatedDaysOfStock', 15);\n    });\n    assert.equal(model.get('condition'), 'average', 'Condition Should be average with new quantity');\n\n    _ember['default'].run(function () {\n      model.set('rank', 'B');\n    });\n    assert.equal(model.get('condition'), 'good', 'Condition should be good again with new rank');\n\n    _ember['default'].run(function () {\n      model.set('estimatedDaysOfStock', 6);\n    });\n    assert.equal(model.get('condition'), 'bad', 'Condition should be bad with new quantity');\n\n    _ember['default'].run(function () {\n      model.set('rank', 'C');\n    });\n    assert.equal(model.get('condition'), 'average', 'Condition should be average again');\n  });\n});","define('hospitalrun/tests/unit/models/inventory-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/inventory-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/inventory-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/invoice-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('invoice', 'Unit | Model | invoice', {\n    needs: ['model:patient', 'model:visit', 'model:price-profile', 'model:payment', 'model:billing-line-item', 'model:line-item-detail', 'ember-validations@validator:local/acceptance', 'ember-validations@validator:local/numericality', 'ember-validations@validator:local/presence']\n  });\n\n  var lineItemsData = [{\n    category: 'test',\n    privateInsurance: 10,\n    nationalInsurance: 3,\n    discount: 5\n  }, {\n    privateInsurance: 4,\n    nationalInsurance: 5,\n    discount: 2\n  }];\n\n  (0, _emberQunit.test)('addPayment', function (assert) {\n    var _this = this;\n\n    var payments = undefined;\n    _ember['default'].run(function () {\n      payments = [12.5, 10].map(function (amount) {\n        var model = _this.store().createRecord('payment', { amount: amount });\n        model.set('currentState.parentState.isNew', false);\n        return model;\n      });\n    });\n    var invoice = this.subject();\n\n    _ember['default'].run(function () {\n      return invoice.addPayment(payments[0]);\n    });\n    assert.strictEqual(invoice.get('paidTotal'), 12.5, 'Should add first payment');\n\n    _ember['default'].run(function () {\n      return invoice.addPayment(payments[1]);\n    });\n    assert.strictEqual(invoice.get('paidTotal'), 22.5, 'Should add second payment');\n  });\n\n  (0, _emberQunit.test)('billAsDate', function (assert) {\n    var invoice = this.subject({\n      billDate: new Date(1481745786401)\n    });\n\n    assert.strictEqual(invoice.get('billDateAsTime'), 1481745786401);\n  });\n\n  (0, _emberQunit.test)('paidFlag', function (assert) {\n    var invoice = this.subject({ status: 'Paid' });\n\n    assert.strictEqual(invoice.get('paidFlag'), true);\n  });\n\n  (0, _emberQunit.test)('paidFlag false', function (assert) {\n    var invoice = this.subject();\n\n    assert.strictEqual(invoice.get('paidFlag'), false);\n  });\n\n  (0, _emberQunit.test)('discount', function (assert) {\n    var _this2 = this;\n\n    var lineItems = undefined,\n        invoice = undefined;\n    _ember['default'].run(function () {\n      lineItems = lineItemsData.map(function (item) {\n        return _this2.store().createRecord('billing-line-item', item);\n      });\n      invoice = _this2.subject({ lineItems: lineItems });\n    });\n\n    assert.strictEqual(invoice.get('discount'), 7);\n  });\n\n  (0, _emberQunit.test)('nationalInsurance', function (assert) {\n    var _this3 = this;\n\n    var lineItems = undefined,\n        invoice = undefined;\n    _ember['default'].run(function () {\n      lineItems = lineItemsData.map(function (item) {\n        return _this3.store().createRecord('billing-line-item', item);\n      });\n      invoice = _this3.subject({ lineItems: lineItems });\n    });\n\n    assert.strictEqual(invoice.get('nationalInsurance'), 8);\n  });\n\n  (0, _emberQunit.test)('privateInsurance', function (assert) {\n    var _this4 = this;\n\n    var lineItems = undefined,\n        invoice = undefined;\n    _ember['default'].run(function () {\n      lineItems = lineItemsData.map(function (item) {\n        return _this4.store().createRecord('billing-line-item', item);\n      });\n      invoice = _this4.subject({ lineItems: lineItems });\n    });\n\n    assert.strictEqual(invoice.get('privateInsurance'), 14);\n  });\n});","define('hospitalrun/tests/unit/models/invoice-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/invoice-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/invoice-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/line-item-detail-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('line-item-detail', 'Unit | Model | line-item-detail', {\n    needs: ['model:pricing']\n  });\n\n  (0, _emberQunit.test)('amountOwed', function (assert) {\n    var lineItemDetail = this.subject({\n      price: 123.45,\n      quantity: 3\n    });\n    assert.strictEqual(lineItemDetail.get('amountOwed'), 370.35);\n  });\n\n  (0, _emberQunit.test)('amountOwed valid price string', function (assert) {\n    var lineItemDetail = this.subject({\n      price: '22.50',\n      quantity: 2\n    });\n    assert.strictEqual(lineItemDetail.get('amountOwed'), 45);\n  });\n\n  (0, _emberQunit.test)('amountOwed invalid quantity', function (assert) {\n    var lineItemDetail = this.subject({\n      price: 123.50,\n      quantity: -1\n    });\n    assert.strictEqual(lineItemDetail.get('amountOwed'), 0);\n  });\n\n  (0, _emberQunit.test)('amountOwed invalid price', function (assert) {\n    var lineItemDetail = this.subject({\n      price: 'invalid',\n      quantity: 2\n    });\n    assert.strictEqual(lineItemDetail.get('amountOwed'), 0);\n  });\n});","define('hospitalrun/tests/unit/models/line-item-detail-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/line-item-detail-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/line-item-detail-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/medication-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('medication', 'Unit | Model | medication', {\n    needs: ['ember-validations@validator:local/acceptance', 'ember-validations@validator:local/numericality', 'ember-validations@validator:local/presence', 'model:inventory', 'model:patient', 'model:visit']\n  });\n\n  (0, _emberQunit.test)('isRequested', function (assert) {\n    var medication = this.subject({ status: 'Requested' });\n\n    assert.strictEqual(medication.get('isRequested'), true);\n  });\n\n  (0, _emberQunit.test)('isRequested false', function (assert) {\n    var medication = this.subject({ status: 'Test' });\n\n    assert.strictEqual(medication.get('isRequested'), false);\n  });\n});","define('hospitalrun/tests/unit/models/medication-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/medication-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/medication-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/patient-note-test', ['exports', 'ember-qunit', 'ember', 'ember-i18n/helper', 'ember-i18n/config/en'], function (exports, _emberQunit, _ember, _emberI18nHelper, _emberI18nConfigEn) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('patient-note', 'Unit | Model | patient-note', {\n    needs: ['ember-validations@validator:local/presence', 'service:i18n', 'locale:en/translations', 'locale:en/config', 'util:i18n/missing-message', 'util:i18n/compile-template', 'config:environment', 'model:patient', 'model:visit'],\n    beforeEach: function beforeEach() {\n      // set the locale and the config\n      this.container.lookup('service:i18n').set('locale', 'en');\n      this.registry.register('locale:en/config', _emberI18nConfigEn['default']);\n\n      // manually inject the i18n service as initialzer does not run\n      // in unit test\n      _ember['default'].getOwner(this).inject('model', 'i18n', 'service:i18n');\n\n      // register t helper\n      this.registry.register('helper:t', _emberI18nHelper['default']);\n    }\n  });\n\n  (0, _emberQunit.test)('authoredBy', function (assert) {\n    var patientNote = this.subject({\n      createdBy: 'Test Person'\n    });\n\n    assert.strictEqual(patientNote.get('authoredBy'), 'Test Person');\n  });\n\n  (0, _emberQunit.test)('authoredBy', function (assert) {\n    var patientNote = this.subject({\n      createdBy: 'Test Person',\n      attribution: 'Test Organization'\n    });\n\n    assert.strictEqual(patientNote.get('authoredBy'), 'Test Person on behalf of Test Organization');\n  });\n});","define('hospitalrun/tests/unit/models/patient-note-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/patient-note-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/patient-note-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/patient-test', ['exports', 'ember-qunit', 'ember', 'ember-i18n/helper', 'ember-i18n/config/en'], function (exports, _emberQunit, _ember, _emberI18nHelper, _emberI18nConfigEn) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('patient', 'Unit | Model | patient', {\n    needs: ['config:environment', 'ember-validations@validator:local/format', 'ember-validations@validator:local/presence', 'locale:en/config', 'locale:en/translations', 'model:allergy', 'model:diagnosis', 'model:operation-report', 'model:operative-plan', 'model:payment', 'model:price-profile', 'service:i18n', 'util:i18n/compile-template', 'util:i18n/missing-message'],\n    beforeEach: function beforeEach() {\n      // set the locale and the config\n      this.container.lookup('service:i18n').set('locale', 'en');\n      this.registry.register('locale:en/config', _emberI18nConfigEn['default']);\n\n      _ember['default'].getOwner(this).inject('model', 'i18n', 'service:i18n');\n\n      // register t helper\n      this.registry.register('helper:t', _emberI18nHelper['default']);\n    }\n  });\n\n  (0, _emberQunit.test)('displayAddress', function (assert) {\n    var patient = this.subject({\n      address: '123 Main St.',\n      address2: 'Apt #2',\n      address4: 'Test'\n    });\n\n    assert.strictEqual(patient.get('displayAddress'), '123 Main St., Apt #2, Test');\n  });\n});","define('hospitalrun/tests/unit/models/patient-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/patient-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/patient-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/payment-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('payment', 'Unit | Model | payment', {\n    needs: ['ember-validations@validator:local/numericality', 'ember-validations@validator:local/presence', 'model:invoice']\n  });\n\n  (0, _emberQunit.test)('canRemovePayment', function (assert) {\n    var payment = this.subject({\n      paymentType: 'Deposit'\n    });\n\n    assert.strictEqual(payment.get('canRemovePayment'), true);\n  });\n\n  (0, _emberQunit.test)('canRemovePayment false', function (assert) {\n    var payment = this.subject({\n      paymentType: 'Test'\n    });\n\n    assert.strictEqual(payment.get('canRemovePayment'), false);\n  });\n});","define('hospitalrun/tests/unit/models/payment-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/payment-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/payment-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/proc-charge-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('proc-charge', 'Unit | Model | proc-charge', {\n    needs: ['ember-validations@validator:local/presence', 'ember-validations@validator:local/numericality', 'ember-validations@validator:local/acceptance', 'model:inventory', 'model:inv-purchase', 'model:inv-location', 'model:pricing']\n  });\n\n  (0, _emberQunit.test)('medicationCharge', function (assert) {\n    var _this = this;\n\n    var medication = _ember['default'].run(function () {\n      return _this.store().createRecord('inventory');\n    });\n    var procCharge = this.subject({\n      newMedicationCharge: 11,\n      medication: medication\n    });\n\n    assert.strictEqual(procCharge.get('medicationCharge'), true);\n  });\n\n  (0, _emberQunit.test)('medicationCharge both empty', function (assert) {\n    var procCharge = this.subject();\n\n    assert.strictEqual(procCharge.get('medicationCharge'), false);\n  });\n\n  (0, _emberQunit.test)('medicationChange empty medication', function (assert) {\n    var procCharge = this.subject({\n      newMedicationCharge: 12\n    });\n\n    assert.strictEqual(procCharge.get('medicationCharge'), true);\n  });\n\n  (0, _emberQunit.test)('medicationCharge empty newMedicationCharge', function (assert) {\n    var _this2 = this;\n\n    var medication = _ember['default'].run(function () {\n      return _this2.store().createRecord('inventory');\n    });\n    var procCharge = this.subject({ medication: medication });\n\n    assert.strictEqual(procCharge.get('medicationCharge'), true);\n  });\n\n  (0, _emberQunit.test)('medicationName', function (assert) {\n    var _this3 = this;\n\n    var medication = _ember['default'].run(function () {\n      return _this3.store().createRecord('inventory', {\n        name: 'Test Item',\n        price: 12.5\n      });\n    });\n    var procCharge = this.subject({ medication: medication });\n\n    assert.strictEqual(procCharge.get('medicationName'), 'Test Item');\n  });\n\n  (0, _emberQunit.test)('medicationPrice', function (assert) {\n    var _this4 = this;\n\n    var medication = _ember['default'].run(function () {\n      return _this4.store().createRecord('inventory', {\n        name: 'Testing',\n        price: 133.59\n      });\n    });\n    var procCharge = this.subject({ medication: medication });\n\n    assert.strictEqual(procCharge.get('medicationPrice'), 133.59);\n  });\n});","define('hospitalrun/tests/unit/models/proc-charge-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/proc-charge-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/proc-charge-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    needs: ['ember-validations@validator:local/format']\n  });\n\n  (0, _emberQunit.test)('displayRole', function (assert) {\n    var user = this.subject({\n      roles: ['first', 'second', 'third']\n    });\n\n    assert.strictEqual(user.get('displayRole'), 'first');\n  });\n\n  (0, _emberQunit.test)('displayRole no roles', function (assert) {\n    var user = this.subject({\n      roles: []\n    });\n\n    assert.strictEqual(user.get('displayRole'), undefined);\n  });\n});","define('hospitalrun/tests/unit/models/user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/visit-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('visit', 'Unit | Model | visit', {\n    // Specify the other units that are required for this test.\n    needs: ['ember-validations@validator:local/acceptance', 'ember-validations@validator:local/presence', 'model:diagnosis', 'model:procedure', 'model:imaging', 'model:lab', 'model:medication', 'model:patient', 'model:patient-note', 'model:proc-charge', 'model:vital', 'model:visit', 'model:report', 'service:validations']\n  });\n\n  (0, _emberQunit.test)('paymentState', function (assert) {\n    var model = this.subject();\n\n    _ember['default'].run(function () {\n      model.setProperties({\n        paymentState: 'bad value'\n      });\n    });\n    assert.equal(model.get('paymentState'), 'bad value');\n    assert.ok(model.errors.paymentState.length, 'there should errors');\n\n    _ember['default'].run(function () {\n      model.setProperties({\n        paymentState: 'clear'\n      });\n    });\n    assert.equal(model.get('paymentState'), 'clear');\n    assert.ok(!model.errors.paymentState.length, 'there should be no error');\n  });\n});","define('hospitalrun/tests/unit/models/visit-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/visit-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/visit-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/services/config-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:config', 'Unit | Service | config', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('hospitalrun/tests/unit/services/config-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/config-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/config-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/services/filesystem-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:filesystem', 'Unit | Service | filesystem', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('hospitalrun/tests/unit/services/filesystem-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/filesystem-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/filesystem-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/utils/email-validation-test', ['exports', 'hospitalrun/utils/email-validation', 'ember-qunit'], function (exports, _hospitalrunUtilsEmailValidation, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('util:email-validation', 'Unit | Utils | email-validation');\n\n  (0, _emberQunit.test)('emailRegex', function (assert) {\n    assert.notStrictEqual('test@example.com'.match(_hospitalrunUtilsEmailValidation['default'].emailRegex), null, 'Should be valid with standard email');\n    assert.notStrictEqual('test.person@example.com'.match(_hospitalrunUtilsEmailValidation['default'].emailRegex), null, 'Should be valid with dot');\n    assert.notStrictEqual('test+person@example.com'.match(_hospitalrunUtilsEmailValidation['default'].emailRegex), null, 'Should be valid with plus');\n    assert.notStrictEqual('test@example.randomnewtld'.match(_hospitalrunUtilsEmailValidation['default'].emailRegex), null, 'Should be valid with tld');\n\n    assert.strictEqual('test@@example.com'.match(_hospitalrunUtilsEmailValidation['default'].emailRegex), null, 'Should be invalid with two @');\n    assert.strictEqual('<Test Person> test.person@example.com'.match(_hospitalrunUtilsEmailValidation['default'].emailRegex), null, 'Should be invalid with name');\n  });\n});","define('hospitalrun/tests/unit/utils/email-validation-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/utils/email-validation-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/email-validation-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/utils/item-condition-test', ['exports', 'hospitalrun/utils/item-condition', 'ember-qunit'], function (exports, _hospitalrunUtilsItemCondition, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('util:item-condition', 'Unit | Utils | item-condition');\n\n  (0, _emberQunit.test)('rankToMultiplier', function (assert) {\n    assert.equal((0, _hospitalrunUtilsItemCondition.rankToMultiplier)('A'), 0.5, 'Should be one half for A rank');\n    assert.equal((0, _hospitalrunUtilsItemCondition.rankToMultiplier)('B'), 1, 'Should be one for B rank');\n    assert.equal((0, _hospitalrunUtilsItemCondition.rankToMultiplier)('C'), 2, 'Should be two for C rank');\n  });\n\n  (0, _emberQunit.test)('getCondition', function (assert) {\n    assert.equal((0, _hospitalrunUtilsItemCondition.getCondition)(14), 'good', 'Should be good for 14 days');\n    assert.equal((0, _hospitalrunUtilsItemCondition.getCondition)(13), 'average', 'Should be average for 13 days');\n    assert.equal((0, _hospitalrunUtilsItemCondition.getCondition)(6), 'bad', 'Should be bad for 6 days');\n    assert.equal((0, _hospitalrunUtilsItemCondition.getCondition)(14, 0.5), 'average', 'Shold accept custom multiplier');\n  });\n});","define('hospitalrun/tests/unit/utils/item-condition-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/utils/item-condition-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/item-condition-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/utils/select-values-test', ['exports', 'hospitalrun/utils/select-values', 'ember-qunit'], function (exports, _hospitalrunUtilsSelectValues, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('util:select-values', 'Unit | Utils | select-values');\n\n  (0, _emberQunit.test)('selectValues', function (assert) {\n    assert.deepEqual(_hospitalrunUtilsSelectValues['default'].selectValues(['a', 'b']), [{ id: 'a', value: 'a' }, { id: 'b', value: 'b' }], 'Should add id to values');\n\n    assert.deepEqual(_hospitalrunUtilsSelectValues['default'].selectValues(['a', 'b'], true), [{ id: '', value: '' }, { id: 'a', value: 'a' }, { id: 'b', value: 'b' }], 'Should add empty');\n\n    assert.deepEqual(_hospitalrunUtilsSelectValues['default'].selectValues('test'), undefined, 'Should return undefined if non array');\n  });\n});","define('hospitalrun/tests/unit/utils/select-values-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/utils/select-values-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/select-values-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/utils/text-expansion-test', ['exports', 'hospitalrun/utils/text-expansion', 'ember-qunit'], function (exports, _hospitalrunUtilsTextExpansion, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('util:text-expansion', 'Unit | Utils | text-expansion');\n\n  (0, _emberQunit.test)('findExpansionSubjects', function (assert) {\n    assert.deepEqual(_hospitalrunUtilsTextExpansion['default'].findExpansionSubjects(''), []);\n    assert.deepEqual(_hospitalrunUtilsTextExpansion['default'].findExpansionSubjects('#abc'), ['#abc']);\n    assert.deepEqual(_hospitalrunUtilsTextExpansion['default'].findExpansionSubjects('#abc #def'), ['#abc', '#def']);\n  });\n\n  (0, _emberQunit.test)('findExpansionSites', function (assert) {\n    assert.deepEqual(_hospitalrunUtilsTextExpansion['default'].findExpansionSites('abc', []), []);\n    assert.deepEqual(_hospitalrunUtilsTextExpansion['default'].findExpansionSites('#abc', ['#abc']), [{ index: 0, match: '#abc', term: 'abc' }]);\n    assert.deepEqual(_hospitalrunUtilsTextExpansion['default'].findExpansionSites('#abc #abc', ['#abc']), [{ index: 0, match: '#abc', term: 'abc' }, { index: 5, match: '#abc', term: 'abc' }]);\n  });\n});","define('hospitalrun/tests/unit/utils/text-expansion-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/utils/text-expansion-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/text-expansion-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: (0, _emberI18n.translationMacro)('labels.deleteUser'),\n\n    actions: {\n      'delete': function _delete() {\n        var _this = this;\n\n        var recordToDelete = this.get('model');\n        this.get('model').destroyRecord().then(function () {\n          _this.send('closeModal', recordToDelete);\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/users/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/user-roles', 'npm:uuid'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUserRoles, _npmUuid) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUserRoles['default'], {\n    config: _ember['default'].inject.service(),\n    usersController: _ember['default'].inject.controller('users/index'),\n    updateCapability: 'add_user',\n\n    users: null,\n\n    actions: {\n      update: function update() {\n        var _this = this;\n\n        var updateModel = this.get('model');\n        var users = this.get('users');\n\n        if (updateModel.get('isNew')) {\n          var newData = updateModel.getProperties('password', 'email', 'roles', 'displayName');\n          newData.name = newData.email;\n          newData.id = 'org.couchdb.user:' + newData.email;\n          if (_ember['default'].isEmpty(newData.password)) {\n            newData.password = _npmUuid['default'].v4() + _npmUuid['default'].v4();\n          }\n          updateModel.deleteRecord();\n          updateModel = this.get('store').createRecord('user', newData);\n          this.set('model', updateModel);\n        }\n\n        if (_ember['default'].isEmpty(updateModel.get('userPrefix'))) {\n          var counter = 1;\n          var prefix = 'p';\n          var userPrefix = prefix + 0;\n          var usedPrefix = users.findBy('userPrefix', prefix);\n\n          while (!_ember['default'].isEmpty(usedPrefix)) {\n            prefix = userPrefix + counter++;\n            usedPrefix = users.findBy('userPrefix', prefix);\n          }\n          updateModel.set('userPrefix', prefix);\n        }\n        updateModel.save().then(function () {\n          _this.displayAlert(get(_this, 'i18n').t('messages.userSaved'), get(_this, 'i18n').t('messages.userHasBeenSaved'));\n          var editTitle = get(_this, 'i18n').t('labels.editUser');\n          var sectionDetails = {};\n          sectionDetails.currentScreenTitle = editTitle;\n          _this.send('setSectionHeader', sectionDetails);\n          get(_this, 'config').markUserSetupComplete();\n        })['catch'](function (error) {\n          _this._handleError(error);\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/users/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {\n  'use strict';\n\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('labels.editUser'),\n    modelName: 'user',\n    newTitle: (0, _emberI18n.translationMacro)('labels.newUser'),\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        roles: ['Data Entry', 'user']\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      var _this = this;\n\n      this._super(controller, model);\n      this.store.findAll('user').then(function (users) {\n        set(controller, 'users', users);\n      })['catch'](function (err) {\n        return _this.send('error', err);\n      });\n    }\n  });\n});","define('hospitalrun/tests/users/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    addPermission: 'add_user',\n    deletePermission: 'delete_user',\n    sortProperties: ['displayName']\n  });\n});","define('hospitalrun/tests/users/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n', 'ember'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n, _ember) {\n  'use strict';\n\n  var inject = _ember['default'].inject;\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    config: inject.service(),\n    newButtonAction: (function () {\n      if (this.currentUserCan('add_user')) {\n        return 'newItem';\n      } else {\n        return null;\n      }\n    }).property(),\n    newButtonText: (0, _emberI18n.translationMacro)('user.plusNewUser'),\n    pageTitle: (0, _emberI18n.translationMacro)('user.usersPageTile'),\n    model: function model() {\n      return this.store.findAll('user');\n    }\n  });\n});","define('hospitalrun/tests/users/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    actions: {\n      allItems: function allItems() {\n        this.transitionTo('users.index');\n      }\n    }\n  });\n});","define('hospitalrun/tests/users/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/date-sort', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = {\n    sortByDate: function sortByDate(firstItem, secondItem, compareAttribute) {\n      var firstDate = firstItem.get(compareAttribute);\n      var secondDate = secondItem.get(compareAttribute);\n      return _ember['default'].compare(firstDate.getTime(), secondDate.getTime());\n    }\n  };\n});","define('hospitalrun/tests/utils/date-sort.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/date-sort.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/date-sort.js should pass ESLint.\\n');\n  });\n});","define(\"hospitalrun/tests/utils/email-validation\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports[\"default\"] = {\n    emailRegex: /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  };\n});","define('hospitalrun/tests/utils/email-validation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/email-validation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/email-validation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/item-condition', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports.rankToMultiplier = rankToMultiplier;\n  exports.getCondition = getCondition;\n\n  var rankMultiplierValues = [{\n    rank: 'A',\n    value: 0.5\n  }, {\n    rank: 'B',\n    value: 1\n  }, {\n    rank: 'C',\n    value: 2\n  }];\n\n  function rankToMultiplier() {\n    var rank = arguments.length <= 0 || arguments[0] === undefined ? 'B' : arguments[0];\n\n    var rankModel = _ember['default'].A(rankMultiplierValues).findBy('rank', rank);\n    return rankModel.value;\n  }\n\n  function getCondition(estimatedDaysOfStock) {\n    var multiplier = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n\n    estimatedDaysOfStock *= multiplier;\n\n    if (estimatedDaysOfStock >= 14) {\n      return 'good';\n    } else if (estimatedDaysOfStock < 7) {\n      return 'bad';\n    } else {\n      return 'average';\n    }\n  }\n});","define('hospitalrun/tests/utils/item-condition.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/item-condition.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/item-condition.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/patient-validation', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = {\n    patientTypeAhead: {\n      acceptance: {\n        accept: true,\n        'if': function _if(object) {\n          if (!object.get('selectPatient')) {\n            return false;\n          }\n          if (!object.get('hasDirtyAttributes')) {\n            return false;\n          }\n          var patientName = object.get('patient.displayName');\n          var patientTypeAhead = object.get('patientTypeAhead');\n          if (_ember['default'].isEmpty(patientName) || _ember['default'].isEmpty(patientTypeAhead)) {\n            // force validation to fail\n            return true;\n          } else {\n            var typeAheadName = patientTypeAhead.substr(0, patientName.length).toLowerCase();\n            if (patientName.toLowerCase().indexOf(typeAheadName) !== 0) {\n              return true;\n            }\n          }\n          // patient is properly selected; don't do any further validation\n          return false;\n        },\n        message: 'Please select a patient'\n      }\n    }\n  };\n});","define('hospitalrun/tests/utils/patient-validation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/patient-validation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/patient-validation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/pouch-views', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  /* global req */\n  /* global compareStrings */\n  /* global getCompareDate */\n\n  function buildIndex(indexName, db) {\n    return db.query(indexName, {\n      limit: 0\n    })['catch'](function (err) {\n      console.log('index error: ' + JSON.stringify(err, null, 2));\n    });\n  }\n\n  function createDesignDoc(item, rev) {\n    var ddoc = {\n      _id: '_design/' + item.name,\n      version: item.version,\n      views: {}\n    };\n    if (rev) {\n      ddoc._rev = rev;\n    }\n    ddoc.views[item.name] = { map: item['function'].toString() };\n    if (item.sort) {\n      ddoc.lists = {\n        sort: item.sort\n      };\n    }\n    return ddoc;\n  }\n\n  function checkForUpdate(view, db, runningTest, testDumpFile) {\n    return db.get('_design/' + view.name).then(function (doc) {\n      if (doc.version !== view.version) {\n        return updateDesignDoc(view, db, doc._rev, runningTest, testDumpFile);\n      } else {\n        if (runningTest) {\n          // Indexes need to be built when running tests\n          return buildIndex(view.name, db);\n        } else {\n          return _ember['default'].RSVP.resolve();\n        }\n      }\n    }, function () {\n      return updateDesignDoc(view, db, null, runningTest, testDumpFile);\n    });\n  }\n\n  function generateSortFunction(sortFunction, includeCompareDate, filterFunction) {\n    var generatedFunction = 'function(head, req) {' + 'function keysEqual(keyA, keyB) {' + 'for (var i= 0; i < keyA.length; i++) {' + 'if (keyA[i] !== keyB[i]) {' + 'return false;' + '}' + '}' + 'return true;' + '}';\n    if (includeCompareDate) {\n      generatedFunction += 'function getCompareDate(dateString) {' + 'if (!dateString || dateString === \"\") {' + 'return 0;' + '}' + 'return new Date(dateString).getTime();' + '}';\n    }\n    generatedFunction += 'function compareStrings(aString, bString) {' + 'if (!aString) {' + 'aString = \"\";' + '}' + 'if (!bString) {' + 'bString = \"\";' + '}' + 'if (aString < bString) {' + 'return -1;' + '} else if (aString > bString) {' + 'return 1;' + '} else {' + 'return 0;' + '}' + '}' + 'var row,' + 'rows=[],' + 'startingPosition = 0;' + 'while(row = getRow()) {' + 'rows.push(row);' + '}';\n    if (filterFunction) {\n      generatedFunction += 'rows = rows.filter(' + filterFunction + ');';\n    }\n    generatedFunction += 'rows.sort(' + sortFunction + ');' + 'if (req.query.sortDesc) {' + 'rows = rows.reverse();' + '}' + 'if (req.query.sortStartKey) {' + 'var startKey = JSON.parse(req.query.sortStartKey);' + 'for (var i=0; i<rows.length; i++) {' + 'if (keysEqual(startKey, rows[i].key)) {' + 'startingPosition = i;' + 'break;' + '}' + '}' + '}' + 'if (req.query.sortLimit) {' + 'rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);' + '} else if (startingPosition > 0) {' + 'rows = rows.slice(startingPosition);' + '}' + 'send(JSON.stringify({\"rows\" : rows}));' + '}';\n    return generatedFunction;\n  }\n\n  function generateView(viewDocType, viewBody) {\n    return 'function(doc) {\\n    var doctype, uidx;\\n    if (doc._id && (uidx = doc._id.indexOf(\\'_\\')) > 0 && !doc.data.archived) {\\n      doctype = doc._id.substring(0, uidx);\\n      if (doctype === \\'' + viewDocType + '\\') {\\n        ' + viewBody + '\\n      }\\n    }\\n  }';\n  }\n\n  function updateDesignDoc(item, db, rev, runningTest, testDumpFile) {\n    var designDoc = createDesignDoc(item, rev);\n    if (runningTest) {\n      console.log('WARNING: The view ' + item.name + ' is out of date. Please update the pouch dump ' + testDumpFile + ' to the latest version of ' + item.name);\n    }\n    return db.put(designDoc).then(function () {\n      // Update index\n      return buildIndex(item.name, db);\n    }, function (err) {\n      console.log('ERR updating design doc:', JSON.stringify(err, null, 2));\n      // ignored, design doc already exists\n    });\n  }\n\n  function generateDateForView(date1) {\n    return 'var ' + date1 + ' = doc.data.' + date1 + ';\\n    if (' + date1 + ' && ' + date1 + ' !== \"\") {\\n      ' + date1 + ' = new Date(' + date1 + ');\\n      if (' + date1 + '.getTime) {\\n        ' + date1 + ' = ' + date1 + '.getTime();\\n      }\\n    }';\n  }\n\n  var appointmentSearch = generateSortFunction((function (a, b) {\n    function defaultStatus(value) {\n      if (!value || value === '') {\n        return 'Scheduled';\n      } else {\n        return value;\n      }\n    }\n    var sortBy = '';\n    if (req.query && req.query.sortKey) {\n      sortBy = req.query.sortKey;\n    }\n    switch (sortBy) {\n      case 'appointmentType':\n      case 'location':\n      case 'provider':\n        return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\n      case 'date':\n        {\n          var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\n          if (startDiff === 0) {\n            return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\n          } else {\n            return startDiff;\n          }\n        }\n      case 'status':\n        {\n          var aStatus = defaultStatus(a.doc.data[sortBy]);\n          var bStatus = defaultStatus(b.doc.data[sortBy]);\n          return compareStrings(aStatus, bStatus);\n        }\n      default:\n        {\n          return 0; // Don't sort\n        }\n    }\n  }).toString(), true, (function (row) {\n    var filterBy = null;\n    var includeRow = true;\n    if (req.query && req.query.filterBy) {\n      filterBy = JSON.parse(req.query.filterBy);\n    }\n    if (!filterBy) {\n      return true;\n    }\n    for (var i = 0; i < filterBy.length; i++) {\n      var currentValue = row.doc.data[filterBy[i].name];\n      if (filterBy[i].name === 'status' && (!currentValue || currentValue === '')) {\n        currentValue = 'Scheduled';\n      }\n      if (currentValue !== filterBy[i].value) {\n        includeRow = false;\n        break;\n      }\n    }\n    return includeRow;\n  }).toString());\n\n  var patientListingKey = 'if (doc.data.friendlyId) {\\n    emit([doc.data.friendlyId, doc._id]);\\n  } else if (doc.data.externalPatientId) {\\n    emit([doc.data.externalPatientId, doc._id]);\\n  } else {\\n    emit([doc._id, doc._id]);\\n }';\n\n  var patientListingSearch = generateSortFunction((function (a, b) {\n    var sortBy = '';\n    if (req.query && req.query.sortKey) {\n      sortBy = req.query.sortKey;\n    }\n    switch (sortBy) {\n      case 'firstName':\n      case 'sex':\n      case 'lastName':\n      case 'status':\n        {\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\n        }\n      case 'dateOfBirth':\n        {\n          return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\n        }\n      default:\n        {\n          return 0; // Don't sort\n        }\n    }\n  }).toString(), true);\n\n  var designDocs = [{\n    name: 'appointments_by_date',\n    'function': generateView('appointment', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    if (doc.data.appointmentType !== \\'Surgery\\') {\\n      emit([startDate, endDate, doc._id]);\\n    }'),\n    sort: appointmentSearch,\n    version: 7\n  }, {\n    name: 'appointments_by_patient',\n    'function': generateView('appointment', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    emit([doc.data.patient, startDate, endDate,doc._id]);'),\n    version: 4\n  }, {\n    name: 'custom_form_by_type',\n    'function': generateView('customForm', 'emit(doc.data.formType);'),\n    version: 1\n  }, {\n    name: 'imaging_by_status',\n    'function': generateView('imaging', generateDateForView('imagingDate') + '\\n    ' + generateDateForView('requestedDate') + '\\n    emit([doc.data.status, requestedDate, imagingDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'inventory_by_friendly_id',\n    'function': generateView('inventory', 'emit([doc.data.friendlyId, doc._id]);'),\n    version: 1\n  }, {\n    name: 'inventory_by_name',\n    'function': generateView('inventory', 'emit([doc.data.name, doc._id]);'),\n    sort: generateSortFunction((function (a, b) {\n      var sortBy = '';\n      if (req.query && req.query.sortKey) {\n        sortBy = req.query.sortKey;\n      }\n      switch (sortBy) {\n        case 'crossReference':\n        case 'description':\n        case 'friendlyId':\n        case 'name':\n        case 'price':\n        case 'quantity':\n        case 'inventoryType':\n          {\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\n          }\n        default:\n          {\n            return 0; // Don't sort\n          }\n      }\n    }).toString()),\n    version: 5\n  }, {\n    name: 'incident_by_friendly_id',\n    'function': generateView('incident', 'emit([doc.data.friendlyId, doc._id]);'),\n    version: 1\n  }, {\n    name: 'incident_by_date',\n    'function': generateView('incident', generateDateForView('dateOfIncident') + '\\n    emit([dateOfIncident, doc._id]);'),\n    version: 1\n  }, {\n    name: 'open_incidents_by_user',\n    'function': generateView('incident', 'if (doc.data.status !== \"Closed\") {\\n      emit([doc.data.reportedBy, doc._id]);\\n    }'),\n    sort: generateSortFunction((function (a, b) {\n      var sortBy = '';\n      if (req.query && req.query.sortKey) {\n        sortBy = req.query.sortKey;\n        return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\n      }\n      return 0; // Don't sort\n    }).toString()),\n    version: 1\n  }, {\n    name: 'closed_incidents_by_user',\n    'function': generateView('incident', 'if (doc.data.status === \"Closed\") {\\n      emit([doc.data.reportedBy, doc._id]);\\n    }'),\n    version: 1\n  }, {\n    name: 'inventory_by_type',\n    'function': generateView('inventory', 'emit(doc.data.inventoryType);'),\n    version: 5\n  }, {\n    name: 'inventory_purchase_by_date_received',\n    'function': generateView('invPurchase', generateDateForView('dateReceived') + '\\n    emit([dateReceived, doc._id]);'),\n    version: 5\n  }, {\n    name: 'inventory_purchase_by_expiration_date',\n    'function': generateView('invPurchase', generateDateForView('expirationDate') + '\\n    emit([expirationDate, doc._id]);'),\n    version: 5\n  }, {\n    name: 'inventory_request_by_item',\n    'function': generateView('invRequest', generateDateForView('dateCompleted') + '\\n    emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);'),\n    version: 5\n  }, {\n    name: 'inventory_request_by_status',\n    'function': generateView('invRequest', generateDateForView('dateCompleted') + '\\n    emit([doc.data.status, dateCompleted, doc._id]);'),\n    version: 5\n  }, {\n    name: 'invoice_by_patient',\n    'function': generateView('invoice', 'emit(doc.data.patient);'),\n    version: 1\n  }, {\n    name: 'invoice_by_status',\n    'function': generateView('invoice', generateDateForView('billDate') + '\\n    emit([doc.data.status, billDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'lab_by_status',\n    'function': generateView('lab', generateDateForView('labDate') + '\\n    ' + generateDateForView('requestedDate') + '\\n    emit([doc.data.status, requestedDate, labDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'medication_by_status',\n    'function': generateView('medication', generateDateForView('prescriptionDate') + '\\n    ' + generateDateForView('requestedDate') + '\\n    emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'patient_by_display_id',\n    'function': generateView('patient', patientListingKey),\n    sort: patientListingSearch,\n    version: 7\n  }, {\n    name: 'patient_by_status',\n    'function': generateView('patient', 'emit(doc.data.status);'),\n    version: 3\n  }, {\n    name: 'patient_by_admission',\n    'function': generateView('patient', 'if (doc.data.admitted === true) {\\n      ' + patientListingKey + '\\n    }'),\n    sort: patientListingSearch,\n    version: 4\n  }, {\n    name: 'photo_by_patient',\n    'function': generateView('photo', 'emit(doc.data.patient);'),\n    version: 4\n  }, {\n    name: 'procedure_by_date',\n    'function': generateView('procedure', generateDateForView('procedureDate') + '\\n    emit([procedureDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'pricing_by_category',\n    'function': generateView('pricing', 'emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);'),\n    version: 5\n  }, {\n    name: 'sequence_by_prefix',\n    'function': generateView('sequence', 'emit(doc.data.prefix);'),\n    version: 4\n  }, {\n    name: 'surgical_appointments_by_date',\n    'function': generateView('appointment', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    if (doc.data.appointmentType === \\'Surgery\\') {\\n      emit([startDate, endDate, doc._id]);\\n    }'),\n    sort: appointmentSearch,\n    version: 1\n  }, {\n    name: 'visit_by_date',\n    'function': generateView('visit', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    emit([startDate, endDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'visit_by_discharge_date',\n    'function': generateView('visit', generateDateForView('endDate') + '\\n    emit([endDate, doc._id]);'),\n    version: 2\n  }, {\n    name: 'visit_by_patient',\n    'function': generateView('visit', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);'),\n    version: 4\n  }, {\n    name: 'report_by_visit',\n    'function': generateView('report', 'emit(doc.data.visit);'),\n    version: 1\n  }];\n\n  exports['default'] = function (db, runningTest, testDumpFile) {\n    var viewUpdates = [];\n    designDocs.forEach(function (item) {\n      viewUpdates.push(checkForUpdate(item, db, runningTest, testDumpFile));\n    });\n    return _ember['default'].RSVP.all(viewUpdates);\n  };\n});","define('hospitalrun/tests/utils/pouch-views.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/pouch-views.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/pouch-views.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/select-values', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  function selectValuesMap(value) {\n    return {\n      id: value,\n      value: value\n    };\n  }\n\n  exports['default'] = {\n    /**\n     * Map an objects into a format so that selects can use object as value for select\n     * @param {object} object the object to map\n     * @returns {object} the mapped object\n     */\n    selectObjectMap: function selectObjectMap(selectValue) {\n      return _ember['default'].Object.create({\n        selectObject: selectValue\n      });\n    },\n\n    selectValuesMap: selectValuesMap,\n\n    /** Map an array of strings to objects with id and value set to the string values\n     * so that the array can be used for em-select\n     * @param {Array} array to map.\n     * @param {boolean} includeEmpty if there should be an empty item added to the select list\n     */\n    selectValues: function selectValues(array, includeEmpty) {\n      if (_ember['default'].isArray(array)) {\n        var arrayToMap = new Array(array);\n        if (includeEmpty) {\n          arrayToMap = [''];\n          arrayToMap.addObjects(array);\n        } else {\n          arrayToMap = array;\n        }\n        return arrayToMap.map(selectValuesMap);\n      }\n    }\n  };\n});","define('hospitalrun/tests/utils/select-values.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/select-values.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/select-values.js should pass ESLint.\\n');\n  });\n});","define(\"hospitalrun/tests/utils/text-expansion\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports[\"default\"] = {\n    // Find words with expansion prefix\n    // '#abc abc #cd' -> ['#abc', '#cd']\n    findExpansionSubjects: function findExpansionSubjects(text) {\n      var search = /(^|\\s+)(#\\S+)/g;\n      var match = true;\n\n      var subjects = [];\n      while (match != null) {\n\n        match = search.exec(text);\n        if (match && match.length > 2) {\n          subjects.push(match[2]);\n        }\n      }\n\n      return subjects.filter(onlyUnique);\n    },\n\n    // Find all detected expandable sites by index\n    // 'abc #abc cd', ['#abc'] -> [{ index: 4, match: '#abc', term: 'abc'}]\n    findExpansionSites: function findExpansionSites(text, subjects) {\n\n      return subjects.map(findAllIndices(text)).reduce(function (a, b) {\n        // flatmap\n        return a.concat(b);\n      }, []);\n    }\n  };\n\n  function findAllIndices(text) {\n    return function (value) {\n      var result = [];\n      var keepMatching = true;\n      var matchPoint = 0;\n      while (keepMatching) {\n        matchPoint = text.indexOf(value, matchPoint);\n        if (matchPoint > -1) {\n          result.push({\n            index: matchPoint,\n            match: value,\n            term: value.slice(1)\n          });\n        } else {\n          keepMatching = false;\n        }\n\n        matchPoint += 1;\n      }\n\n      return result;\n    };\n  }\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n});","define('hospitalrun/tests/utils/text-expansion.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/text-expansion.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/text-expansion.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/unauthorized-error', ['exports', 'ember-data'], function (exports, _emberData) {\n  'use strict';\n\n  var AdapterError = _emberData['default'].AdapterError;\n\n  var UnauthorizedError = function UnauthorizedError(errors) {\n    var message = arguments.length <= 1 || arguments[1] === undefined ? 'The adapter operation is unauthorized' : arguments[1];\n\n    AdapterError.call(this, errors, message);\n  };\n\n  UnauthorizedError.prototype = Object.create(AdapterError.prototype);\n\n  exports['default'] = UnauthorizedError;\n});","define('hospitalrun/tests/utils/unauthorized-error.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/unauthorized-error.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/unauthorized-error.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/visit-statuses', ['exports'], function (exports) {\n  'use strict';\n\n  var ADMITTED = 'Admitted';\n  exports.ADMITTED = ADMITTED;\n  var DISCHARGED = 'Discharged';\n  exports.DISCHARGED = DISCHARGED;\n  var CHECKED_IN = 'CheckedIn';\n  exports.CHECKED_IN = CHECKED_IN;\n  var CHECKED_OUT = 'CheckedOut';\n  exports.CHECKED_OUT = CHECKED_OUT;\n});","define('hospitalrun/tests/utils/visit-statuses.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/visit-statuses.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/visit-statuses.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({\n    cancelAction: 'closeModal',\n    newPricingItem: false,\n    requestingController: _ember['default'].inject.controller('visits/edit')\n  });\n});","define('hospitalrun/tests/visits/charge/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/charge/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/charge/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: 'Delete Visit',\n\n    afterDeleteAction: (function () {\n      var deleteFromPatient = this.get('model.deleteFromPatient');\n      if (deleteFromPatient) {\n        return 'visitDeleted';\n      } else {\n        return 'closeModal';\n      }\n    }).property('model.deleteFromPatient')\n  });\n});","define('hospitalrun/tests/visits/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/add-new-patient', 'hospitalrun/mixins/allergy-actions', 'hospitalrun/mixins/charge-actions', 'hospitalrun/mixins/diagnosis-actions', 'ember', 'moment', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/user-session', 'hospitalrun/utils/visit-statuses', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsAddNewPatient, _hospitalrunMixinsAllergyActions, _hospitalrunMixinsChargeActions, _hospitalrunMixinsDiagnosisActions, _ember, _moment, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsUserSession, _hospitalrunUtilsVisitStatuses, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  var computed = _ember['default'].computed;\n  var get = _ember['default'].get;\n  var isEmpty = _ember['default'].isEmpty;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsAddNewPatient['default'], _hospitalrunMixinsAllergyActions['default'], _hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsDiagnosisActions['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPatientNotes['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsVisitTypes['default'], {\n    visitsController: _ember['default'].inject.controller('visits'),\n    additionalButtons: computed('model.status', function () {\n      var buttonProps = {\n        buttonIcon: 'glyphicon glyphicon-log-out',\n        'class': 'btn btn-primary on-white'\n      };\n      var i18n = this.get('i18n');\n      var status = this.get('model.status');\n      if (status === _hospitalrunUtilsVisitStatuses['default'].ADMITTED) {\n        buttonProps.buttonAction = 'discharge';\n        buttonProps.buttonText = i18n.t('visits.buttons.discharge');\n        return [buttonProps];\n      } else if (status === _hospitalrunUtilsVisitStatuses['default'].CHECKED_IN) {\n        buttonProps.buttonAction = 'checkout';\n        buttonProps.buttonText = i18n.t('visits.buttons.checkOut');\n        return [buttonProps];\n      }\n    }),\n\n    noReport: false,\n\n    canAddAppointment: computed('model.isNew', function () {\n      return !this.get('model.isNew') && this.currentUserCan('add_appointment');\n    }),\n\n    canAddBillingDiagnosis: computed('model.isNew', function () {\n      return !this.get('model.isNew') && this.currentUserCan('add_billing_diagnosis');\n    }),\n\n    canAddImaging: (function () {\n      return this.currentUserCan('add_imaging');\n    }).property(),\n\n    canAddLab: (function () {\n      return this.currentUserCan('add_lab');\n    }).property(),\n\n    canAddMedication: (function () {\n      return this.currentUserCan('add_medication');\n    }).property(),\n\n    canAddProcedure: (function () {\n      return this.currentUserCan('add_procedure');\n    }).property(),\n\n    canAddVitals: (function () {\n      return this.currentUserCan('add_vitals');\n    }).property(),\n\n    canAddReport: computed('hasReport', function () {\n      return this.currentUserCan('add_report') && !this.get('hasReport');\n    }),\n\n    canDeleteImaging: (function () {\n      return this.currentUserCan('delete_imaging');\n    }).property(),\n\n    canDeleteLab: (function () {\n      return this.currentUserCan('delete_lab');\n    }).property(),\n\n    canDeleteMedication: (function () {\n      return this.currentUserCan('delete_medication');\n    }).property(),\n\n    canDeleteProcedure: (function () {\n      return this.currentUserCan('delete_procedure');\n    }).property(),\n\n    canDeleteVitals: (function () {\n      return this.currentUserCan('delete_vitals');\n    }).property(),\n\n    canDeleteReport: (function () {\n      return this.currentUserCan('delete_report');\n    }).property(),\n\n    isAdmissionVisit: (function () {\n      var visitType = this.get('model.visitType');\n      var isAdmission = visitType === 'Admission';\n      return isAdmission;\n    }).property('model.visitType'),\n\n    cancelAction: (function () {\n      var returnTo = this.get('model.returnTo');\n      if (!isEmpty(returnTo)) {\n        return 'returnTo';\n      } else if (!isEmpty(this.get('model.returnToPatient'))) {\n        return 'returnToPatient';\n      } else {\n        return this._super();\n      }\n    }).property('model.returnTo', 'model.returnToPatient'),\n\n    allowAddAllergy: computed.not('model.isNew'),\n    allowAddDiagnosis: computed.not('model.isNew'),\n    allowAddOperativePlan: computed.not('model.isNew'),\n    chargePricingCategory: 'Ward',\n    chargeRoute: 'visits.charge',\n    diagnosisList: _ember['default'].computed.alias('visitsController.diagnosisList'),\n    findPatientVisits: false,\n    hideChargeHeader: true,\n    patientImaging: _ember['default'].computed.alias('model.imaging'),\n    patientLabs: _ember['default'].computed.alias('model.labs'),\n    patientMedications: _ember['default'].computed.alias('model.medication'),\n    pricingList: null, // This gets filled in by the route\n    pricingTypes: _ember['default'].computed.alias('visitsController.wardPricingTypes'),\n    physicianList: _ember['default'].computed.alias('visitsController.physicianList'),\n    locationList: _ember['default'].computed.alias('visitsController.locationList'),\n    sexList: computed.alias('visitsController.sexList'),\n    visitTypesList: _ember['default'].computed.alias('visitsController.visitTypesList'),\n    lookupListsToUpdate: [{\n      name: 'physicianList',\n      property: 'model.examiner',\n      id: 'physician_list'\n    }, {\n      name: 'locationList',\n      property: 'model.location',\n      id: 'visit_location_list'\n    }],\n\n    updateCapability: 'add_visit',\n\n    showPatientSelection: computed('model.checkIn', 'model.hidePatientSelection', function () {\n      return this.get('model.checkIn') && !this.get('model.hidePatientSelection');\n    }),\n\n    updateButtonIcon: computed('model.checkIn', function () {\n      if (this.get('model.checkIn')) {\n        return 'glyphicon glyphicon-log-in';\n      }\n    }),\n\n    updateButtonText: computed('model.{checkIn,isNew}', function () {\n      var i18n = this.get('i18n');\n      if (this.get('model.checkIn')) {\n        return i18n.t('visits.buttons.checkIn');\n      } else {\n        return this._super();\n      }\n    }),\n\n    validVisitTypes: (function () {\n      var outPatient = this.get('model.outPatient');\n      var visitTypes = this.get('visitTypes');\n      if (outPatient === true) {\n        visitTypes = visitTypes.filter(function (visitType) {\n          return visitType.id !== 'Admission';\n        });\n      }\n      return visitTypes;\n    }).property('visitTypes', 'model.outPatient'),\n\n    _addChildObject: function _addChildObject(route, afterTransition) {\n      var options = {\n        queryParams: {\n          forVisitId: this.get('model.id')\n        }\n      };\n      this.transitionToRoute(route, 'new', options).then(function (newRoute) {\n        if (afterTransition) {\n          afterTransition(newRoute);\n        }\n      });\n    },\n\n    _finishAfterUpdate: function _finishAfterUpdate() {\n      var addedNewPatient = this.get('addedNewPatient');\n      var checkIn = this.get('model.checkIn');\n      var i18n = this.get('i18n');\n      var updateMesage = i18n.t('visits.messages.visitSaved');\n      var updateTitle = i18n.t('visits.titles.visitSaved');\n      if (checkIn === true) {\n        var model = this.get('model');\n        model.set('checkIn');\n        this.send('setSectionHeader', {\n          currentScreenTitle: i18n.t('visits.titles.editVisit')\n        });\n      }\n\n      if (checkIn) {\n        updateTitle = i18n.t('visits.titles.checkedIn');\n        var patientDetails = {\n          patientName: this.get('model.patient.displayName')\n        };\n        if (addedNewPatient === true) {\n          this.set('addedNewPatient');\n          updateMesage = i18n.t('visits.messages.patientCreatedAndCheckedIn', patientDetails);\n        } else {\n          updateMesage = i18n.t('visits.messages.patientCheckedIn', patientDetails);\n        }\n      }\n      this.displayAlert(updateTitle, updateMesage);\n    },\n\n    _findAssociatedAppointment: function _findAssociatedAppointment(newVisit) {\n      var appointment = newVisit.get('appointment');\n      var beginningOfToday = (0, _moment['default'])().startOf('day').valueOf();\n      var database = this.get('database');\n      var endOfToday = (0, _moment['default'])().endOf('day').valueOf();\n      var maxId = database.getMaxPouchId('appointment');\n      var minId = database.getMinPouchId('appointment');\n      var patientId = newVisit.get('patient.id');\n      if (!isEmpty(appointment)) {\n        return _ember['default'].RSVP.resolve(appointment);\n      } else {\n        return this.store.query('appointment', {\n          options: {\n            startkey: [patientId, beginningOfToday, beginningOfToday, minId],\n            endkey: [patientId, endOfToday, endOfToday, maxId]\n          },\n          mapReduce: 'appointments_by_patient'\n        }).then(function (appointments) {\n          if (isEmpty(appointments)) {\n            return;\n          } else {\n            return appointments.get('firstObject');\n          }\n        });\n      }\n    },\n\n    _saveAssociatedAppointment: function _saveAssociatedAppointment(newVisit) {\n      return this._findAssociatedAppointment(newVisit).then(function (appointment) {\n        if (isEmpty(appointment)) {\n          newVisit.set('hasAppointment', false);\n          return _ember['default'].RSVP.resolve();\n        } else {\n          newVisit.set('hasAppointment', true);\n          appointment.set('status', 'Attended');\n          return appointment.save();\n        }\n      });\n    },\n\n    haveAdditionalDiagnoses: (function () {\n      return !isEmpty(this.get('model.additionalDiagnoses'));\n    }).property('model.additionalDiagnoses.[]'),\n\n    afterUpdate: function afterUpdate(visit) {\n      this.updatePatientVisitFlags(visit).then(this._finishAfterUpdate.bind(this));\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var _this = this;\n\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n          var newVisit = _this.get('model');\n          return newVisit.validate().then(function () {\n            if (newVisit.get('isValid')) {\n              var patient = newVisit.get('patient');\n              if (isEmpty(patient)) {\n                _this.addNewPatient();\n                return reject({\n                  ignore: true,\n                  message: 'creating new patient first'\n                });\n              }\n              var outPatient = false;\n              var visitType = newVisit.get('visitType');\n              var visitStatus = undefined;\n              if (visitType === 'Admission') {\n                visitStatus = _hospitalrunUtilsVisitStatuses['default'].ADMITTED;\n              } else {\n                outPatient = true;\n                visitStatus = _hospitalrunUtilsVisitStatuses['default'].CHECKED_IN;\n              }\n              newVisit.setProperties({\n                outPatient: outPatient,\n                status: visitStatus\n              });\n              if (_this.get('model.checkIn')) {\n                _this._saveAssociatedAppointment(newVisit).then(function () {\n                  _this.saveNewDiagnoses().then(resolve, reject);\n                });\n              } else {\n                _this.saveNewDiagnoses().then(resolve, reject);\n              }\n            }\n          });\n        });\n      } else {\n        return this.updateCharges();\n      }\n    },\n\n    checkoutPatient: function checkoutPatient(status) {\n      var visit = this.get('model');\n      this.checkoutVisit(visit, status);\n    },\n\n    patientSelected: function patientSelected(patient) {\n      if (isEmpty(patient)) {\n        set(this, 'model.createNewPatient', true);\n      } else {\n        set(this, 'model.createNewPatient', false);\n        this.getPatientDiagnoses(patient, get(this, 'model'));\n      }\n    },\n\n    /**\n     * Adds or removes the specified object from the specified list.\n     * @param {String} listName The name of the list to operate on.\n     * @param {Object} listObject The object to add or removed from the\n     * specified list.\n     * @param {boolean} removeObject If true remove the object from the list;\n     * otherwise add the specified object to the list.\n     */\n    updateList: function updateList(listName, listObject, removeObject) {\n      var model = this.get('model');\n      model.get(listName).then((function (list) {\n        if (removeObject) {\n          list.removeObject(listObject);\n        } else {\n          list.addObject(listObject);\n        }\n        this.send('update', true);\n        this.send('closeModal');\n      }).bind(this));\n    },\n\n    actions: {\n      addAllergy: function addAllergy(newAllergy) {\n        var patient = get(this, 'model.patient');\n        this.savePatientAllergy(patient, newAllergy);\n      },\n\n      addDiagnosis: function addDiagnosis(newDiagnosis) {\n        this.addDiagnosisToModelAndPatient(newDiagnosis);\n      },\n\n      addVitals: function addVitals(newVitals) {\n        this.updateList('vitals', newVitals);\n      },\n\n      cancel: function cancel() {\n        var cancelledItem = this.get('model');\n        if (this.get('model.isNew')) {\n          cancelledItem.deleteRecord();\n        } else {\n          cancelledItem.rollbackAttributes();\n        }\n        this.send(this.get('cancelAction'));\n      },\n\n      checkout: function checkout() {\n        this.checkoutPatient(_hospitalrunUtilsVisitStatuses['default'].CHECKED_OUT);\n      },\n\n      deleteAllergy: function deleteAllergy(allergy) {\n        var patient = get(this, 'model.patient');\n        this.deletePatientAllergy(patient, allergy);\n      },\n\n      deleteProcedure: function deleteProcedure(procedure) {\n        this.updateList('procedures', procedure, true);\n      },\n\n      deleteVitals: function deleteVitals(vitals) {\n        this.updateList('vitals', vitals, true);\n      },\n\n      discharge: function discharge() {\n        this.checkoutPatient(_hospitalrunUtilsVisitStatuses['default'].DISCHARGED);\n      },\n\n      editImaging: function editImaging(imaging) {\n        if (imaging.get('canEdit')) {\n          imaging.setProperties('returnToVisit', this.get('model.id'));\n        }\n        this.transitionToRoute('imaging.edit', imaging);\n      },\n\n      editLab: function editLab(lab) {\n        if (lab.get('canEdit')) {\n          lab.setProperties('returnToVisit', this.get('model.id'));\n          this.transitionToRoute('labs.edit', lab);\n        }\n      },\n\n      editMedication: function editMedication(medication) {\n        if (medication.get('canEdit')) {\n          medication.set('returnToVisit', this.get('model.id'));\n          this.transitionToRoute('medication.edit', medication);\n        }\n      },\n\n      editOperativePlan: function editOperativePlan(operativePlan) {\n        var _this2 = this;\n\n        var model = operativePlan;\n        if (isEmpty(model)) {\n          this._addChildObject('patients.operative-plan', function (route) {\n            route.controller.getPatientDiagnoses(_this2.get('model.patient'), route.currentModel);\n          });\n        } else {\n          model.set('returnToVisit', this.get('model.id'));\n          this.transitionToRoute('patients.operative-plan', model);\n        }\n      },\n\n      newPatientChanged: function newPatientChanged(createNewPatient) {\n        set(this, 'model.createNewPatient', createNewPatient);\n        var model = this.get('model');\n        var patient = model.get('patient');\n        if (createNewPatient && !isEmpty(patient)) {\n          model.set('patientTypeAhead', patient.get('displayName'));\n          model.set('patient');\n        }\n      },\n\n      showAddVitals: function showAddVitals() {\n        var newVitals = this.get('store').createRecord('vital', {\n          dateRecorded: new Date()\n        });\n        this.send('openModal', 'visits.vitals.edit', newVitals);\n      },\n\n      showAddPatientNote: function showAddPatientNote(model) {\n        if (isEmpty(model)) {\n          model = this.get('store').createRecord('patient-note', {\n            visit: this.get('model'),\n            createdBy: this.getUserName(),\n            patient: this.get('model').get('patient'),\n            noteType: this._computeNoteType(this.get('model'))\n          });\n        }\n        this.send('openModal', 'patients.notes', model);\n      },\n\n      newAppointment: function newAppointment() {\n        this._addChildObject('appointments.edit');\n      },\n\n      newImaging: function newImaging() {\n        this._addChildObject('imaging.edit');\n      },\n\n      newLab: function newLab() {\n        this._addChildObject('labs.edit');\n      },\n\n      newMedication: function newMedication() {\n        this._addChildObject('medication.edit');\n      },\n\n      newReport: function newReport() {\n        this._addChildObject('visits.reports.edit');\n      },\n\n      showAddProcedure: function showAddProcedure() {\n        this._addChildObject('procedures.edit');\n      },\n\n      showDeleteImaging: function showDeleteImaging(imaging) {\n        this.send('openModal', 'imaging.delete', imaging);\n      },\n\n      showDeleteLab: function showDeleteLab(lab) {\n        this.send('openModal', 'labs.delete', lab);\n      },\n\n      showDeleteMedication: function showDeleteMedication(medication) {\n        this.send('openModal', 'medication.delete', medication);\n      },\n\n      showDeleteProcedure: function showDeleteProcedure(procedure) {\n        this.send('openModal', 'visits.procedures.delete', procedure);\n      },\n\n      showDeleteVitals: function showDeleteVitals(vitals) {\n        this.send('openModal', 'visits.vitals.delete', vitals);\n      },\n\n      showEditProcedure: function showEditProcedure(procedure) {\n        if (isEmpty(procedure.get('visit'))) {\n          procedure.set('visit', this.get('model'));\n        }\n        procedure.set('returnToVisit', this.get('model.id'));\n        procedure.set('returnToPatient');\n        this.transitionToRoute('procedures.edit', procedure);\n      },\n\n      showEditVitals: function showEditVitals(vitals) {\n        this.send('openModal', 'visits.vitals.edit', vitals);\n      },\n\n      showDeletePatientNote: function showDeletePatientNote(note) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deletePatientNote',\n          title: 'Delete Note',\n          message: 'Are you sure you want to delete this note?',\n          noteToDelete: note,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      deletePatientNote: function deletePatientNote(model) {\n        var note = model.get('noteToDelete');\n        var patientNotes = this.get('model.patientNotes');\n        patientNotes.removeObject(note);\n        this.send('update', true);\n      },\n\n      startDateChanged: function startDateChanged(startDate) {\n        var isAdmissionVisit = this.get('isAdmissionVisit');\n        var visit = this.get('model');\n        if (!isAdmissionVisit) {\n          visit.set('endDate', startDate);\n        }\n      },\n\n      printReport: function printReport(report) {\n        set(report, 'returnToVisit', get(this, 'model.id'));\n        this.transitionToRoute('visits.reports.edit', report, { queryParams: { print: true } });\n      },\n\n      viewReport: function viewReport(report) {\n        set(report, 'returnToVisit', get(this, 'model.id'));\n        this.transitionToRoute('visits.reports.edit', report, { queryParams: { print: null } });\n      }\n\n    }\n  });\n});","define('hospitalrun/tests/visits/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/edit/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember', 'hospitalrun/mixins/patient-list-route', 'hospitalrun/mixins/patient-visits', 'ember-data'], function (exports, _emberI18n, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _ember, _hospitalrunMixinsPatientListRoute, _hospitalrunMixinsPatientVisits, _emberData) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], _hospitalrunMixinsPatientListRoute['default'], _hospitalrunMixinsPatientVisits['default'], {\n    customForms: _ember['default'].inject.service(),\n    editTitle: (0, _emberI18n.translationMacro)('visits.titles.editVisit'),\n    modelName: 'visit',\n    newTitle: (0, _emberI18n.translationMacro)('visits.titles.newVisit'),\n    pricingCategory: 'Ward',\n\n    model: function model(params) {\n      var _this = this;\n\n      var idParam = get(this, 'idParam');\n      if (!isEmpty(idParam) && params[idParam] === 'checkin') {\n        return this.getNewData().then(function (newData) {\n          newData.checkIn = true;\n          var newVisit = get(_this, 'store').createRecord('visit', newData);\n          return newVisit;\n        });\n      } else {\n        return this._super(params);\n      }\n    },\n\n    getNewData: function getNewData() {\n      var newVisitData = {\n        startDate: new Date(),\n        visitType: 'Admission',\n        customForms: _ember['default'].Object.create()\n      };\n      var customForms = this.get('customForms');\n      return customForms.setDefaultCustomForms(['visit'], newVisitData);\n    },\n\n    getScreenTitle: function getScreenTitle(model) {\n      if (model.get('checkIn')) {\n        return this.get('i18n').t('visits.titles.patientCheckIn');\n      } else {\n        return this._super(model);\n      }\n    },\n\n    setupController: function setupController(controller, model) {\n      var promise = this.store.query('report', {\n        options: {\n          key: get(model, 'id')\n        },\n        mapReduce: 'report_by_visit'\n      }).then(function (reports) {\n        set(controller, 'noReport', isEmpty(reports));\n        return isEmpty(reports) ? '' : get(reports, 'firstObject');\n      });\n      set(controller, 'report', _emberData['default'].PromiseObject.create({ promise: promise }));\n      this._super(controller, model);\n    },\n\n    actions: {\n      updateNote: function updateNote() {\n        this.controller.send('update', true);\n      },\n      deletePatientNote: function deletePatientNote(model) {\n        this.controller.send('deletePatientNote', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/procedures/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember'], function (exports, _hospitalrunControllersAbstractDeleteController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    afterDeleteAction: 'notifyProcedureDelete',\n    editController: _ember['default'].inject.controller('visits/edit'),\n    title: 'Delete Procedure',\n\n    actions: {\n      notifyProcedureDelete: function notifyProcedureDelete() {\n        this.send('closeModal');\n        this.get('editController').send('deleteProcedure', this.get('model'));\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/procedures/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/procedures/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/procedures/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/reports/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/patient-diagnosis', 'hospitalrun/mixins/pouchdb'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsPatientDiagnosis, _hospitalrunMixinsPouchdb) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n  var computed = _ember['default'].computed;\n  var alias = _ember['default'].computed.alias;\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPatientDiagnosis['default'], _hospitalrunMixinsPouchdb['default'], {\n    queryParams: ['print'],\n    print: null,\n\n    visitsController: _ember['default'].inject.controller('visits'),\n\n    physicianList: alias('visitsController.physicianList'),\n\n    logoURL: alias('visitsController.printHeader.value.logoURL'),\n    facilityName: alias('visitsController.printHeader.value.facilityName'),\n    headerLine1: alias('visitsController.printHeader.value.headerLine1'),\n    headerLine2: alias('visitsController.printHeader.value.headerLine2'),\n    headerLine3: alias('visitsController.printHeader.value.headerLine3'),\n\n    diagnosisList: alias('visitsController.diagnosisList'),\n\n    additionalButtons: computed('model.isNew', function () {\n      var isNew = get(this, 'model.isNew');\n      var i18n = get(this, 'i18n');\n      if (!isNew) {\n        return [{\n          'class': 'btn btn-primary on-white',\n          buttonAction: 'printReport',\n          buttonIcon: 'octicon octicon-check',\n          buttonText: i18n.t('labels.print')\n        }];\n      }\n    }),\n\n    updateCapability: 'add_report',\n\n    beforeUpdate: function beforeUpdate() {\n      var _this = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var model = get(_this, 'model');\n        if (get(model, 'isNew')) {\n          if (get(_this, 'model.visit.outPatient')) {\n            set(model, 'reportType', 'OPD Report');\n          } else {\n            set(model, 'reportType', 'Discharge Report');\n          }\n        }\n        resolve();\n      });\n    },\n\n    afterUpdate: function afterUpdate() {\n      var alertTitle = get(this, 'i18n').t('reports.titles.saved');\n      var alertMessage = get(this, 'i18n').t('reports.messages.saved');\n      this.saveVisitIfNeeded(alertTitle, alertMessage);\n      var opdTitle = get(this, 'i18n').t('reports.titles.opdReport');\n      var dischargeTitle = get(this, 'i18n').t('reports.titles.dischargeReport');\n      var editTitle = get(this, 'model.visit.outPatient') ? opdTitle : dischargeTitle;\n      var sectionDetails = {};\n      sectionDetails.currentScreenTitle = editTitle;\n      this.send('setSectionHeader', sectionDetails);\n    },\n\n    actions: {\n      printReport: function printReport() {\n        window.print();\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/visits/reports/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/reports/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/reports/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/reports/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/add-to-patient-route', 'ember', 'ember-i18n', 'hospitalrun/mixins/patient-visits'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsAddToPatientRoute, _ember, _emberI18n, _hospitalrunMixinsPatientVisits) {\n  'use strict';\n\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsAddToPatientRoute['default'], _hospitalrunMixinsPatientVisits['default'], {\n    modelName: 'report',\n    customForms: _ember['default'].inject.service(),\n\n    getNewData: function getNewData() {\n      var newReportData = {\n        reportDate: new Date(),\n        customForms: _ember['default'].Object.create()\n      };\n      var customForms = get(this, 'customForms');\n      return customForms.setDefaultCustomForms(['opdReport', 'dischargeReport'], newReportData);\n    },\n\n    getScreenTitle: function getScreenTitle(model) {\n      var isNew = get(model, 'isNew');\n      var title = null;\n      if (get(model, 'visit.outPatient')) {\n        title = isNew ? 'newOPDReport' : 'opdReport';\n      } else {\n        title = isNew ? 'newDischargeReport' : 'dischargeReport';\n      }\n      return (0, _emberI18n.translationMacro)('reports.titles.' + title);\n    },\n\n    getDiagnosisContainer: function getDiagnosisContainer(visit) {\n      if (get(visit, 'outPatient')) {\n        return visit;\n      }\n      return null;\n    },\n\n    getCurrentOperativePlan: function getCurrentOperativePlan(patient) {\n      var operativePlans = get(patient, 'operativePlans');\n      return operativePlans.findBy('isPlanned', true);\n    },\n\n    afterModel: function afterModel(model) {\n      if (!get(model, 'isNew')) {\n        var patient = get(model, 'visit.patient');\n        set(model, 'patient', patient);\n      }\n      if (!get(model, 'visit')) {\n        return this.transitionTo('patients');\n      }\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      var visit = get(model, 'visit');\n      var patient = get(model, 'patient');\n      var isOutPatient = get(visit, 'outPatient');\n      set(controller, 'visit', visit);\n      set(controller, 'isOutPatient', isOutPatient);\n      set(controller, 'diagnosisContainer', this.getDiagnosisContainer(visit));\n      set(controller, 'currentOperativePlan', this.getCurrentOperativePlan(patient));\n      if (isOutPatient) {\n        set(controller, 'nextAppointments', this.getPatientFutureAppointment(visit, true));\n      } else {\n        set(controller, 'nextAppointment', this.getPatientFutureAppointment(visit));\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/reports/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/reports/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/reports/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_visit',\n    additionalModels: [{\n      name: 'anesthesiaTypes',\n      findArgs: ['lookup', 'anesthesia_types']\n    }, {\n      name: 'anesthesiologistList',\n      findArgs: ['lookup', 'anesthesiologists']\n    }, {\n      name: 'diagnosisList',\n      findArgs: ['lookup', 'diagnosis_list']\n    }, {\n      name: 'cptCodeList',\n      findArgs: ['lookup', 'cpt_code_list']\n    }, {\n      name: 'physicianList',\n      findArgs: ['lookup', 'physician_list']\n    }, {\n      name: 'locationList',\n      findArgs: ['lookup', 'visit_location_list']\n    }, {\n      name: 'procedureList',\n      findArgs: ['lookup', 'procedure_list']\n    }, {\n      name: 'procedureLocations',\n      findArgs: ['lookup', 'procedure_locations']\n    }, {\n      name: 'procedurePricingTypes',\n      findArgs: ['lookup', 'procedure_pricing_types']\n    }, {\n      name: 'sexList',\n      findArgs: ['lookup', 'sex']\n    }, {\n      name: 'visitTypesList',\n      findArgs: ['lookup', 'visit_types']\n    }, {\n      name: 'wardPricingTypes',\n      findArgs: ['lookup', 'ward_pricing_types']\n    }, {\n      name: 'printHeader',\n      findArgs: ['option', 'print_header']\n    }],\n    moduleName: 'visits',\n    newButtonAction: null, // No new button\n    sectionTitle: 'Visits',\n\n    actions: {\n      allItems: function allItems() {\n        this.transitionTo('patients.index');\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/visits/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/vitals/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember'], function (exports, _hospitalrunControllersAbstractDeleteController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    afterDeleteAction: 'notifyVitalsDelete',\n    editController: _ember['default'].inject.controller('visits/edit'),\n    title: 'Delete Vitals',\n\n    actions: {\n      notifyVitalsDelete: function notifyVitalsDelete() {\n        this.send('closeModal');\n        this.get('editController').send('deleteVitals', this.get('model'));\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/vitals/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/vitals/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/vitals/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/vitals/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    cancelAction: 'closeModal',\n\n    editController: _ember['default'].inject.controller('visits/edit'),\n\n    newVitals: false,\n\n    temperatureLabel: 'Temperature (\\xb0C)',\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return 'Add Vitals';\n      }\n      return 'Edit Vitals';\n    }).property('model.isNew'),\n\n    updateCapability: 'add_vitals',\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('model.isNew')) {\n        this.set('newVitals', true);\n      }\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    afterUpdate: function afterUpdate(vitals) {\n      if (this.get('newVitals')) {\n        this.get('editController').send('addVitals', vitals);\n      } else {\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/vitals/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/vitals/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/vitals/edit/controller.js should pass ESLint.\\n');\n  });\n});","/* jshint ignore:start */\n\nrequire('hospitalrun/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingspnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvljFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjxhjpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxrgljKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfxjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzphHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvzMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClp1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACndA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbllKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbxxVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfjxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjjhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtrrkxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnx5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvrvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxrcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpanDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzxpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdthBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}